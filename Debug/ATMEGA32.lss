
ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003064  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00003064  000030d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000087f0  00000000  00000000  00003144  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00007a78  00000000  00000000  0000b934  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000133ac  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000133c0  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  000133fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  0001392a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00013e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00013e2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 13 	call	0x2776	; 0x2776 <main>
      8a:	0c 94 30 18 	jmp	0x3060	; 0x3060 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	89 e2       	ldi	r24, 0x29	; 41
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	29 81       	ldd	r18, Y+1	; 0x01
      a4:	fc 01       	movw	r30, r24
      a6:	20 83       	st	Z, r18
      a8:	80 e4       	ldi	r24, 0x40	; 64
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	fc 01       	movw	r30, r24
      ae:	20 81       	ld	r18, Z
      b0:	80 e4       	ldi	r24, 0x40	; 64
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	2f 7b       	andi	r18, 0xBF	; 191
      b6:	fc 01       	movw	r30, r24
      b8:	20 83       	st	Z, r18
      ba:	80 e4       	ldi	r24, 0x40	; 64
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	fc 01       	movw	r30, r24
      c0:	20 81       	ld	r18, Z
      c2:	80 e4       	ldi	r24, 0x40	; 64
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	27 7f       	andi	r18, 0xF7	; 247
      c8:	fc 01       	movw	r30, r24
      ca:	20 83       	st	Z, r18
      cc:	80 e4       	ldi	r24, 0x40	; 64
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	fc 01       	movw	r30, r24
      d2:	20 81       	ld	r18, Z
      d4:	80 e4       	ldi	r24, 0x40	; 64
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	22 60       	ori	r18, 0x02	; 2
      da:	fc 01       	movw	r30, r24
      dc:	20 83       	st	Z, r18
      de:	80 e4       	ldi	r24, 0x40	; 64
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	fc 01       	movw	r30, r24
      e4:	20 81       	ld	r18, Z
      e6:	80 e4       	ldi	r24, 0x40	; 64
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	24 60       	ori	r18, 0x04	; 4
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
      f0:	80 e4       	ldi	r24, 0x40	; 64
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	fc 01       	movw	r30, r24
      f6:	20 81       	ld	r18, Z
      f8:	80 e4       	ldi	r24, 0x40	; 64
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	2b 7f       	andi	r18, 0xFB	; 251
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
     102:	8a e2       	ldi	r24, 0x2A	; 42
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	fc 01       	movw	r30, r24
     108:	20 81       	ld	r18, Z
     10a:	8a e2       	ldi	r24, 0x2A	; 42
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	28 60       	ori	r18, 0x08	; 8
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
     114:	8a e2       	ldi	r24, 0x2A	; 42
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	fc 01       	movw	r30, r24
     11a:	20 81       	ld	r18, Z
     11c:	8a e2       	ldi	r24, 0x2A	; 42
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	20 61       	ori	r18, 0x10	; 16
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	00 00       	nop
     128:	0f 90       	pop	r0
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <UART_sendData>:
	 SET_BIT(UCSRB,TXEN);
	 SET_BIT(UCSRB,RXEN);
}

void UART_sendData(uint_16 copyData)
{
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	00 d0       	rcall	.+0      	; 0x136 <UART_sendData+0x6>
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	9a 83       	std	Y+2, r25	; 0x02
     13c:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UDRE) == 0);
     13e:	00 00       	nop
     140:	8b e2       	ldi	r24, 0x2B	; 43
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	fc 01       	movw	r30, r24
     146:	80 81       	ld	r24, Z
     148:	82 95       	swap	r24
     14a:	86 95       	lsr	r24
     14c:	87 70       	andi	r24, 0x07	; 7
     14e:	88 2f       	mov	r24, r24
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	81 70       	andi	r24, 0x01	; 1
     154:	99 27       	eor	r25, r25
     156:	89 2b       	or	r24, r25
     158:	99 f3       	breq	.-26     	; 0x140 <UART_sendData+0x10>
	UDR = copyData;
     15a:	8c e2       	ldi	r24, 0x2C	; 44
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	29 81       	ldd	r18, Y+1	; 0x01
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18
}
     164:	00 00       	nop
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <UART_reciveData>:

uint_8 UART_reciveData(uint_8 *copyVar)
{
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	00 d0       	rcall	.+0      	; 0x176 <UART_reciveData+0x6>
     176:	1f 92       	push	r1
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	9b 83       	std	Y+3, r25	; 0x03
     17e:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Ret = 0;
     180:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(UCSRA,RXC))
     182:	8b e2       	ldi	r24, 0x2B	; 43
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	fc 01       	movw	r30, r24
     188:	80 81       	ld	r24, Z
     18a:	88 1f       	adc	r24, r24
     18c:	88 27       	eor	r24, r24
     18e:	88 1f       	adc	r24, r24
     190:	88 2f       	mov	r24, r24
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	81 70       	andi	r24, 0x01	; 1
     196:	99 27       	eor	r25, r25
     198:	89 2b       	or	r24, r25
     19a:	59 f0       	breq	.+22     	; 0x1b2 <UART_reciveData+0x42>
	{
		*copyVar = UDR;
     19c:	8c e2       	ldi	r24, 0x2C	; 44
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	fc 01       	movw	r30, r24
     1a2:	20 81       	ld	r18, Z
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	9b 81       	ldd	r25, Y+3	; 0x03
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
		Ret = 1;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <UART_reciveData+0x44>
	}
	else
	{
		Ret = 0;
     1b2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Ret;
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
}
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <UART_reciveDataBlock>:

uint_8 UART_reciveDataBlock(void)
{
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,RXC) == 0);
     1ca:	00 00       	nop
     1cc:	8b e2       	ldi	r24, 0x2B	; 43
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	fc 01       	movw	r30, r24
     1d2:	80 81       	ld	r24, Z
     1d4:	88 1f       	adc	r24, r24
     1d6:	88 27       	eor	r24, r24
     1d8:	88 1f       	adc	r24, r24
     1da:	88 2f       	mov	r24, r24
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	81 70       	andi	r24, 0x01	; 1
     1e0:	99 27       	eor	r25, r25
     1e2:	89 2b       	or	r24, r25
     1e4:	99 f3       	breq	.-26     	; 0x1cc <UART_reciveDataBlock+0xa>
	return UDR;
     1e6:	8c e2       	ldi	r24, 0x2C	; 44
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	fc 01       	movw	r30, r24
     1ec:	80 81       	ld	r24, Z
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <TIMER0_Init>:
 *			 from configuration file.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_Init(void)
{
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
#if TIMER_MODE_WAVE == NORMAL_MODE
	CLR_BIT(TCCR0,WGM00);
     1fc:	83 e5       	ldi	r24, 0x53	; 83
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	fc 01       	movw	r30, r24
     202:	20 81       	ld	r18, Z
     204:	83 e5       	ldi	r24, 0x53	; 83
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2f 7b       	andi	r18, 0xBF	; 191
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
	CLR_BIT(TCCR0,WGM01);
     20e:	83 e5       	ldi	r24, 0x53	; 83
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	fc 01       	movw	r30, r24
     214:	20 81       	ld	r18, Z
     216:	83 e5       	ldi	r24, 0x53	; 83
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	27 7f       	andi	r18, 0xF7	; 247
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
#elif TIMER_MODE_WAVE == FAST_PWM_MODE
	SET_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
	TCCR0 |= TIMER_COMP_OUTPUT_MODE;
#endif
}
     220:	00 00       	nop
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <TIMER0_Start>:
 * @brief  : Timer/Counter {0} Start counting by select prescaler from configuration file.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_Start(void)
{
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= _PRESCALER_SELECT_;
     230:	83 e5       	ldi	r24, 0x53	; 83
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	fc 01       	movw	r30, r24
     236:	20 81       	ld	r18, Z
     238:	83 e5       	ldi	r24, 0x53	; 83
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	22 60       	ori	r18, 0x02	; 2
     23e:	fc 01       	movw	r30, r24
     240:	20 83       	st	Z, r18
}
     242:	00 00       	nop
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <TIMER0_Stop>:
 * @brief  : Timer/Counter {0} Stop counting.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_Stop(void)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLOCK_STOP;
     252:	83 e5       	ldi	r24, 0x53	; 83
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	20 81       	ld	r18, Z
     25a:	83 e5       	ldi	r24, 0x53	; 83
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	28 7f       	andi	r18, 0xF8	; 248
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
}
     264:	00 00       	nop
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <TIMER0_writeOVR>:
 * @brief  : Timer/Counter {0} write over flow by put start value over flow.
 * @param1 : Copy_Start_Value
 * @retVal : void
 */
void TIMER0_writeOVR(uint_8 Copy_Start_Value)
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	1f 92       	push	r1
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_Start_Value;
     278:	82 e5       	ldi	r24, 0x52	; 82
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	29 81       	ldd	r18, Y+1	; 0x01
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
}
     282:	00 00       	nop
     284:	0f 90       	pop	r0
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <TIMER0_writeCOM>:
 * @brief  : Timer/Counter {0} write Compare match put start value comparing.
 * @param1 : Copy_Start_Value
 * @retVal : void
 */
void TIMER0_writeCOM(uint_8 Copy_Start_Value)
{
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	1f 92       	push	r1
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_Start_Value;
     298:	8c e5       	ldi	r24, 0x5C	; 92
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	29 81       	ldd	r18, Y+1	; 0x01
     29e:	fc 01       	movw	r30, r24
     2a0:	20 83       	st	Z, r18
}
     2a2:	00 00       	nop
     2a4:	0f 90       	pop	r0
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <TIMER0_ovrInterruptEnable>:
 * 			 &  write one in TIMSK register in TOIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_ovrInterruptEnable(void)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     2b4:	8f e5       	ldi	r24, 0x5F	; 95
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 81       	ld	r18, Z
     2bc:	8f e5       	ldi	r24, 0x5F	; 95
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	20 68       	ori	r18, 0x80	; 128
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
	SET_BIT(TIMSK,TOIE0);
     2c6:	89 e5       	ldi	r24, 0x59	; 89
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	fc 01       	movw	r30, r24
     2cc:	20 81       	ld	r18, Z
     2ce:	89 e5       	ldi	r24, 0x59	; 89
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	21 60       	ori	r18, 0x01	; 1
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18
}
     2d8:	00 00       	nop
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <TIMER0_ovrInterruptDisable>:
 * @brief  : Timer/Counter {0} interrupt over flow disable by write zero in TIMSK register in TOIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_ovrInterruptDisable(void)
{
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
     2e8:	89 e5       	ldi	r24, 0x59	; 89
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 81       	ld	r18, Z
     2f0:	89 e5       	ldi	r24, 0x59	; 89
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	2e 7f       	andi	r18, 0xFE	; 254
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
}
     2fa:	00 00       	nop
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <TIMER0_compInterruptEnable>:
 * 			 &  write one in TIMSK register in OCIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_compInterruptEnable(void)
{
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     30a:	8f e5       	ldi	r24, 0x5F	; 95
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	fc 01       	movw	r30, r24
     310:	20 81       	ld	r18, Z
     312:	8f e5       	ldi	r24, 0x5F	; 95
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	20 68       	ori	r18, 0x80	; 128
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
	SET_BIT(TIMSK,OCIE0);
     31c:	89 e5       	ldi	r24, 0x59	; 89
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	fc 01       	movw	r30, r24
     322:	20 81       	ld	r18, Z
     324:	89 e5       	ldi	r24, 0x59	; 89
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	22 60       	ori	r18, 0x02	; 2
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
}
     32e:	00 00       	nop
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <TIMER0_comInterruptDisable>:
 * @brief  : Timer/Counter {0} interrupt Compare match disable by write zero in TIMSK register in OCIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_comInterruptDisable(void)
{
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
     33e:	89 e5       	ldi	r24, 0x59	; 89
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	fc 01       	movw	r30, r24
     344:	20 81       	ld	r18, Z
     346:	89 e5       	ldi	r24, 0x59	; 89
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	2d 7f       	andi	r18, 0xFD	; 253
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
}
     350:	00 00       	nop
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <EXINTER_init>:
  * 		  put status or sense of signal.
  * @param1  : copyNumInt
  * @param2  : copySense
  */
void EXINTER_init(_NUM_EX_INTERRUPT copyNumInt,_SENSE_SELECT copySense)
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <EXINTER_init+0x6>
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	89 83       	std	Y+1, r24	; 0x01
     364:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(SREG,GIE);	// set general interrupt bit
     366:	8f e5       	ldi	r24, 0x5F	; 95
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	fc 01       	movw	r30, r24
     36c:	20 81       	ld	r18, Z
     36e:	8f e5       	ldi	r24, 0x5F	; 95
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	20 68       	ori	r18, 0x80	; 128
     374:	fc 01       	movw	r30, r24
     376:	20 83       	st	Z, r18

	switch(copyNumInt)
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	88 2f       	mov	r24, r24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	91 05       	cpc	r25, r1
     382:	b9 f0       	breq	.+46     	; 0x3b2 <EXINTER_init+0x5a>
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	91 05       	cpc	r25, r1
     388:	29 f1       	breq	.+74     	; 0x3d4 <EXINTER_init+0x7c>
     38a:	89 2b       	or	r24, r25
     38c:	09 f0       	breq	.+2      	; 0x390 <EXINTER_init+0x38>
			EXINTER_controlINT2(copySense);
			SET_BIT(GICR,_INT2);
			DIO_setPinDIR(PINB2, _DIRECTION_PIN_INPUT);
			break;
	}
}
     38e:	33 c0       	rjmp	.+102    	; 0x3f6 <EXINTER_init+0x9e>
	SET_BIT(SREG,GIE);	// set general interrupt bit

	switch(copyNumInt)
	{
		case INT0:
			EXINTER_controlINT0(copySense);
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	0e 94 01 02 	call	0x402	; 0x402 <EXINTER_controlINT0>
			SET_BIT(GICR,_INT0);
     396:	8b e5       	ldi	r24, 0x5B	; 91
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	fc 01       	movw	r30, r24
     39c:	20 81       	ld	r18, Z
     39e:	8b e5       	ldi	r24, 0x5B	; 91
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	20 64       	ori	r18, 0x40	; 64
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
			DIO_setPinDIR(PIND2, _DIRECTION_PIN_INPUT);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	8a e1       	ldi	r24, 0x1A	; 26
     3ac:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
			break;
     3b0:	22 c0       	rjmp	.+68     	; 0x3f6 <EXINTER_init+0x9e>
		case INT1:
			EXINTER_controlINT1(copySense);
     3b2:	8a 81       	ldd	r24, Y+2	; 0x02
     3b4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <EXINTER_controlINT1>
			SET_BIT(GICR,_INT1);
     3b8:	8b e5       	ldi	r24, 0x5B	; 91
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	20 81       	ld	r18, Z
     3c0:	8b e5       	ldi	r24, 0x5B	; 91
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	20 68       	ori	r18, 0x80	; 128
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 83       	st	Z, r18
			DIO_setPinDIR(PIND3, _DIRECTION_PIN_INPUT);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8b e1       	ldi	r24, 0x1B	; 27
     3ce:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
			break;
     3d2:	11 c0       	rjmp	.+34     	; 0x3f6 <EXINTER_init+0x9e>
		case INT2:
			EXINTER_controlINT2(copySense);
     3d4:	8a 81       	ldd	r24, Y+2	; 0x02
     3d6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <EXINTER_controlINT2>
			SET_BIT(GICR,_INT2);
     3da:	8b e5       	ldi	r24, 0x5B	; 91
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	fc 01       	movw	r30, r24
     3e0:	20 81       	ld	r18, Z
     3e2:	8b e5       	ldi	r24, 0x5B	; 91
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	20 62       	ori	r18, 0x20	; 32
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
			DIO_setPinDIR(PINB2, _DIRECTION_PIN_INPUT);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	8a e0       	ldi	r24, 0x0A	; 10
     3f0:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
			break;
     3f4:	00 00       	nop
	}
}
     3f6:	00 00       	nop
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <EXINTER_controlINT0>:
  * @brief  : Static Function Control Direction of External Interrupt {0}
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT0(_SENSE_SELECT copySense)
{
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	89 83       	std	Y+1, r24	; 0x01
	switch (copySense)
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	88 2f       	mov	r24, r24
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	91 05       	cpc	r25, r1
     418:	f9 f0       	breq	.+62     	; 0x458 <EXINTER_controlINT0+0x56>
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	91 05       	cpc	r25, r1
     41e:	1c f4       	brge	.+6      	; 0x426 <EXINTER_controlINT0+0x24>
     420:	89 2b       	or	r24, r25
     422:	39 f0       	breq	.+14     	; 0x432 <EXINTER_controlINT0+0x30>
		case RISING:
			SET_BIT(MCUCR,ISC01);
			SET_BIT(MCUCR,ISC00);
			break;
	}
}
     424:	52 c0       	rjmp	.+164    	; 0x4ca <__stack+0x6b>
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT0(_SENSE_SELECT copySense)
{
	switch (copySense)
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	91 05       	cpc	r25, r1
     42a:	49 f1       	breq	.+82     	; 0x47e <__stack+0x1f>
     42c:	03 97       	sbiw	r24, 0x03	; 3
     42e:	d1 f1       	breq	.+116    	; 0x4a4 <__stack+0x45>
		case RISING:
			SET_BIT(MCUCR,ISC01);
			SET_BIT(MCUCR,ISC00);
			break;
	}
}
     430:	4c c0       	rjmp	.+152    	; 0x4ca <__stack+0x6b>
static void EXINTER_controlINT0(_SENSE_SELECT copySense)
{
	switch (copySense)
	{
		case LOW:
			CLR_BIT(MCUCR,ISC01);
     432:	85 e5       	ldi	r24, 0x55	; 85
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	fc 01       	movw	r30, r24
     438:	20 81       	ld	r18, Z
     43a:	85 e5       	ldi	r24, 0x55	; 85
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	2d 7f       	andi	r18, 0xFD	; 253
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC00);
     444:	85 e5       	ldi	r24, 0x55	; 85
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	fc 01       	movw	r30, r24
     44a:	20 81       	ld	r18, Z
     44c:	85 e5       	ldi	r24, 0x55	; 85
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	2e 7f       	andi	r18, 0xFE	; 254
     452:	fc 01       	movw	r30, r24
     454:	20 83       	st	Z, r18
			break;
     456:	39 c0       	rjmp	.+114    	; 0x4ca <__stack+0x6b>
		case ANY:
			CLR_BIT(MCUCR,ISC01);
     458:	85 e5       	ldi	r24, 0x55	; 85
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	fc 01       	movw	r30, r24
     45e:	20 81       	ld	r18, Z
     460:	85 e5       	ldi	r24, 0x55	; 85
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	2d 7f       	andi	r18, 0xFD	; 253
     466:	fc 01       	movw	r30, r24
     468:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC00);
     46a:	85 e5       	ldi	r24, 0x55	; 85
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fc 01       	movw	r30, r24
     470:	20 81       	ld	r18, Z
     472:	85 e5       	ldi	r24, 0x55	; 85
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	21 60       	ori	r18, 0x01	; 1
     478:	fc 01       	movw	r30, r24
     47a:	20 83       	st	Z, r18
			break;
     47c:	26 c0       	rjmp	.+76     	; 0x4ca <__stack+0x6b>
		case FALLING:
			SET_BIT(MCUCR,ISC01);
     47e:	85 e5       	ldi	r24, 0x55	; 85
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	fc 01       	movw	r30, r24
     484:	20 81       	ld	r18, Z
     486:	85 e5       	ldi	r24, 0x55	; 85
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	22 60       	ori	r18, 0x02	; 2
     48c:	fc 01       	movw	r30, r24
     48e:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC00);
     490:	85 e5       	ldi	r24, 0x55	; 85
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	fc 01       	movw	r30, r24
     496:	20 81       	ld	r18, Z
     498:	85 e5       	ldi	r24, 0x55	; 85
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	2e 7f       	andi	r18, 0xFE	; 254
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
			break;
     4a2:	13 c0       	rjmp	.+38     	; 0x4ca <__stack+0x6b>
		case RISING:
			SET_BIT(MCUCR,ISC01);
     4a4:	85 e5       	ldi	r24, 0x55	; 85
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 81       	ld	r18, Z
     4ac:	85 e5       	ldi	r24, 0x55	; 85
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	22 60       	ori	r18, 0x02	; 2
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC00);
     4b6:	85 e5       	ldi	r24, 0x55	; 85
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 81       	ld	r18, Z
     4be:	85 e5       	ldi	r24, 0x55	; 85
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	21 60       	ori	r18, 0x01	; 1
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
			break;
     4c8:	00 00       	nop
	}
}
     4ca:	00 00       	nop
     4cc:	0f 90       	pop	r0
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <EXINTER_controlINT1>:
  * @brief  : Static Function Control Direction of External Interrupt {1}
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT1(_SENSE_SELECT copySense)
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	1f 92       	push	r1
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	89 83       	std	Y+1, r24	; 0x01
	switch (copySense)
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	91 05       	cpc	r25, r1
     4ea:	f9 f0       	breq	.+62     	; 0x52a <EXINTER_controlINT1+0x56>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	91 05       	cpc	r25, r1
     4f0:	1c f4       	brge	.+6      	; 0x4f8 <EXINTER_controlINT1+0x24>
     4f2:	89 2b       	or	r24, r25
     4f4:	39 f0       	breq	.+14     	; 0x504 <EXINTER_controlINT1+0x30>
		case RISING:
			SET_BIT(MCUCR,ISC11);
			SET_BIT(MCUCR,ISC10);
			break;
	}
}
     4f6:	52 c0       	rjmp	.+164    	; 0x59c <EXINTER_controlINT1+0xc8>
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT1(_SENSE_SELECT copySense)
{
	switch (copySense)
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	91 05       	cpc	r25, r1
     4fc:	49 f1       	breq	.+82     	; 0x550 <EXINTER_controlINT1+0x7c>
     4fe:	03 97       	sbiw	r24, 0x03	; 3
     500:	d1 f1       	breq	.+116    	; 0x576 <EXINTER_controlINT1+0xa2>
		case RISING:
			SET_BIT(MCUCR,ISC11);
			SET_BIT(MCUCR,ISC10);
			break;
	}
}
     502:	4c c0       	rjmp	.+152    	; 0x59c <EXINTER_controlINT1+0xc8>
static void EXINTER_controlINT1(_SENSE_SELECT copySense)
{
	switch (copySense)
	{
		case LOW:
			CLR_BIT(MCUCR,ISC11);
     504:	85 e5       	ldi	r24, 0x55	; 85
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	fc 01       	movw	r30, r24
     50a:	20 81       	ld	r18, Z
     50c:	85 e5       	ldi	r24, 0x55	; 85
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	27 7f       	andi	r18, 0xF7	; 247
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC10);
     516:	85 e5       	ldi	r24, 0x55	; 85
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	fc 01       	movw	r30, r24
     51c:	20 81       	ld	r18, Z
     51e:	85 e5       	ldi	r24, 0x55	; 85
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	2b 7f       	andi	r18, 0xFB	; 251
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
			break;
     528:	39 c0       	rjmp	.+114    	; 0x59c <EXINTER_controlINT1+0xc8>
		case ANY:
			CLR_BIT(MCUCR,ISC11);
     52a:	85 e5       	ldi	r24, 0x55	; 85
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	20 81       	ld	r18, Z
     532:	85 e5       	ldi	r24, 0x55	; 85
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	27 7f       	andi	r18, 0xF7	; 247
     538:	fc 01       	movw	r30, r24
     53a:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC10);
     53c:	85 e5       	ldi	r24, 0x55	; 85
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	fc 01       	movw	r30, r24
     542:	20 81       	ld	r18, Z
     544:	85 e5       	ldi	r24, 0x55	; 85
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	24 60       	ori	r18, 0x04	; 4
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
			break;
     54e:	26 c0       	rjmp	.+76     	; 0x59c <EXINTER_controlINT1+0xc8>
		case FALLING:
			SET_BIT(MCUCR,ISC11);
     550:	85 e5       	ldi	r24, 0x55	; 85
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	fc 01       	movw	r30, r24
     556:	20 81       	ld	r18, Z
     558:	85 e5       	ldi	r24, 0x55	; 85
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	28 60       	ori	r18, 0x08	; 8
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC10);
     562:	85 e5       	ldi	r24, 0x55	; 85
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	fc 01       	movw	r30, r24
     568:	20 81       	ld	r18, Z
     56a:	85 e5       	ldi	r24, 0x55	; 85
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	2b 7f       	andi	r18, 0xFB	; 251
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
			break;
     574:	13 c0       	rjmp	.+38     	; 0x59c <EXINTER_controlINT1+0xc8>
		case RISING:
			SET_BIT(MCUCR,ISC11);
     576:	85 e5       	ldi	r24, 0x55	; 85
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	fc 01       	movw	r30, r24
     57c:	20 81       	ld	r18, Z
     57e:	85 e5       	ldi	r24, 0x55	; 85
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	28 60       	ori	r18, 0x08	; 8
     584:	fc 01       	movw	r30, r24
     586:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC10);
     588:	85 e5       	ldi	r24, 0x55	; 85
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	fc 01       	movw	r30, r24
     58e:	20 81       	ld	r18, Z
     590:	85 e5       	ldi	r24, 0x55	; 85
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	24 60       	ori	r18, 0x04	; 4
     596:	fc 01       	movw	r30, r24
     598:	20 83       	st	Z, r18
			break;
     59a:	00 00       	nop
	}
}
     59c:	00 00       	nop
     59e:	0f 90       	pop	r0
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <EXINTER_controlINT2>:
  * @brief  : Static Function Control Direction of External Interrupt {2}
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT2(_SENSE_SELECT copySense)
{
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	1f 92       	push	r1
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
     5b0:	89 83       	std	Y+1, r24	; 0x01
	switch (copySense)
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	88 2f       	mov	r24, r24
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	82 30       	cpi	r24, 0x02	; 2
     5ba:	91 05       	cpc	r25, r1
     5bc:	19 f0       	breq	.+6      	; 0x5c4 <EXINTER_controlINT2+0x1e>
     5be:	03 97       	sbiw	r24, 0x03	; 3
     5c0:	59 f0       	breq	.+22     	; 0x5d8 <EXINTER_controlINT2+0x32>
     5c2:	14 c0       	rjmp	.+40     	; 0x5ec <EXINTER_controlINT2+0x46>
	{
		case FALLING:
			CLR_BIT(MCUCR,ISC2);
     5c4:	85 e5       	ldi	r24, 0x55	; 85
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 81       	ld	r18, Z
     5cc:	85 e5       	ldi	r24, 0x55	; 85
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2f 7b       	andi	r18, 0xBF	; 191
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
			break;
     5d6:	14 c0       	rjmp	.+40     	; 0x600 <EXINTER_controlINT2+0x5a>
		case RISING:
			SET_BIT(MCUCR,ISC2);
     5d8:	85 e5       	ldi	r24, 0x55	; 85
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	fc 01       	movw	r30, r24
     5de:	20 81       	ld	r18, Z
     5e0:	85 e5       	ldi	r24, 0x55	; 85
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	20 64       	ori	r18, 0x40	; 64
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
			break;
     5ea:	0a c0       	rjmp	.+20     	; 0x600 <EXINTER_controlINT2+0x5a>
		default:
			CLR_BIT(MCUCSR,ISC2);
     5ec:	84 e5       	ldi	r24, 0x54	; 84
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 81       	ld	r18, Z
     5f4:	84 e5       	ldi	r24, 0x54	; 84
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	2f 7b       	andi	r18, 0xBF	; 191
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
			break;
     5fe:	00 00       	nop
	}
}
     600:	00 00       	nop
     602:	0f 90       	pop	r0
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <DIO_setPinDIR>:
 * @param2 : copyPinNum
 * @param3 : copyDir
 * @retVal : void
 */
void DIO_setPinDIR(_GPIO_PINS copyPinNum,_DIRECTION_PINS copyDir)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	00 d0       	rcall	.+0      	; 0x610 <DIO_setPinDIR+0x6>
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	6a 83       	std	Y+2, r22	; 0x02
	switch (copyDir)
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	88 2f       	mov	r24, r24
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	00 97       	sbiw	r24, 0x00	; 0
     620:	19 f0       	breq	.+6      	; 0x628 <DIO_setPinDIR+0x1e>
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	89 f1       	breq	.+98     	; 0x688 <DIO_setPinDIR+0x7e>
	{
		case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
		case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
	}
}
     626:	5f c0       	rjmp	.+190    	; 0x6e6 <DIO_setPinDIR+0xdc>
 */
void DIO_setPinDIR(_GPIO_PINS copyPinNum,_DIRECTION_PINS copyDir)
{
	switch (copyDir)
	{
		case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	86 95       	lsr	r24
     62c:	86 95       	lsr	r24
     62e:	86 95       	lsr	r24
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	80 5a       	subi	r24, 0xA0	; 160
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	fc 01       	movw	r30, r24
     63e:	80 81       	ld	r24, Z
     640:	91 81       	ldd	r25, Z+1	; 0x01
     642:	fc 01       	movw	r30, r24
     644:	80 81       	ld	r24, Z
     646:	48 2f       	mov	r20, r24
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	9c 01       	movw	r18, r24
     650:	27 70       	andi	r18, 0x07	; 7
     652:	33 27       	eor	r19, r19
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_setPinDIR+0x54>
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	2a 95       	dec	r18
     660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_setPinDIR+0x50>
     662:	80 95       	com	r24
     664:	24 2f       	mov	r18, r20
     666:	28 23       	and	r18, r24
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	86 95       	lsr	r24
     66c:	86 95       	lsr	r24
     66e:	86 95       	lsr	r24
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	80 5a       	subi	r24, 0xA0	; 160
     67a:	9f 4f       	sbci	r25, 0xFF	; 255
     67c:	fc 01       	movw	r30, r24
     67e:	80 81       	ld	r24, Z
     680:	91 81       	ldd	r25, Z+1	; 0x01
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
     686:	2f c0       	rjmp	.+94     	; 0x6e6 <DIO_setPinDIR+0xdc>
		case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	86 95       	lsr	r24
     68c:	86 95       	lsr	r24
     68e:	86 95       	lsr	r24
     690:	88 2f       	mov	r24, r24
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	80 5a       	subi	r24, 0xA0	; 160
     69a:	9f 4f       	sbci	r25, 0xFF	; 255
     69c:	fc 01       	movw	r30, r24
     69e:	80 81       	ld	r24, Z
     6a0:	91 81       	ldd	r25, Z+1	; 0x01
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	48 2f       	mov	r20, r24
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	88 2f       	mov	r24, r24
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	9c 01       	movw	r18, r24
     6b0:	27 70       	andi	r18, 0x07	; 7
     6b2:	33 27       	eor	r19, r19
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_setPinDIR+0xb4>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	2a 95       	dec	r18
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_setPinDIR+0xb0>
     6c2:	24 2f       	mov	r18, r20
     6c4:	28 2b       	or	r18, r24
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	86 95       	lsr	r24
     6ca:	86 95       	lsr	r24
     6cc:	86 95       	lsr	r24
     6ce:	88 2f       	mov	r24, r24
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	80 5a       	subi	r24, 0xA0	; 160
     6d8:	9f 4f       	sbci	r25, 0xFF	; 255
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	91 81       	ldd	r25, Z+1	; 0x01
     6e0:	fc 01       	movw	r30, r24
     6e2:	20 83       	st	Z, r18
     6e4:	00 00       	nop
	}
}
     6e6:	00 00       	nop
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <DIO_setPinVAL>:
 * @param2 : copyPinNum
 * @param3 : copyVal
 * @retVal : void
 */
void DIO_setPinVAL(_GPIO_PINS copyPinNum,_STATUS_PINS copyVal)
{
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <DIO_setPinVAL+0x6>
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	6a 83       	std	Y+2, r22	; 0x02
	switch (copyVal)
     700:	8a 81       	ldd	r24, Y+2	; 0x02
     702:	88 2f       	mov	r24, r24
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	91 05       	cpc	r25, r1
     70a:	b9 f1       	breq	.+110    	; 0x77a <DIO_setPinVAL+0x88>
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	91 05       	cpc	r25, r1
     710:	09 f4       	brne	.+2      	; 0x714 <DIO_setPinVAL+0x22>
     712:	62 c0       	rjmp	.+196    	; 0x7d8 <DIO_setPinVAL+0xe6>
     714:	89 2b       	or	r24, r25
     716:	09 f0       	breq	.+2      	; 0x71a <DIO_setPinVAL+0x28>
	{
		case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
		case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
		case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8)); break;
	}
}
     718:	8e c0       	rjmp	.+284    	; 0x836 <DIO_setPinVAL+0x144>
 */
void DIO_setPinVAL(_GPIO_PINS copyPinNum,_STATUS_PINS copyVal)
{
	switch (copyVal)
	{
		case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	86 95       	lsr	r24
     71e:	86 95       	lsr	r24
     720:	86 95       	lsr	r24
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	8a 58       	subi	r24, 0x8A	; 138
     72c:	9f 4f       	sbci	r25, 0xFF	; 255
     72e:	fc 01       	movw	r30, r24
     730:	80 81       	ld	r24, Z
     732:	91 81       	ldd	r25, Z+1	; 0x01
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	48 2f       	mov	r20, r24
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	9c 01       	movw	r18, r24
     742:	27 70       	andi	r18, 0x07	; 7
     744:	33 27       	eor	r19, r19
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_setPinVAL+0x5e>
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	2a 95       	dec	r18
     752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_setPinVAL+0x5a>
     754:	80 95       	com	r24
     756:	24 2f       	mov	r18, r20
     758:	28 23       	and	r18, r24
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	86 95       	lsr	r24
     75e:	86 95       	lsr	r24
     760:	86 95       	lsr	r24
     762:	88 2f       	mov	r24, r24
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	8a 58       	subi	r24, 0x8A	; 138
     76c:	9f 4f       	sbci	r25, 0xFF	; 255
     76e:	fc 01       	movw	r30, r24
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
     778:	5e c0       	rjmp	.+188    	; 0x836 <DIO_setPinVAL+0x144>
		case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	86 95       	lsr	r24
     77e:	86 95       	lsr	r24
     780:	86 95       	lsr	r24
     782:	88 2f       	mov	r24, r24
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	88 0f       	add	r24, r24
     788:	99 1f       	adc	r25, r25
     78a:	8a 58       	subi	r24, 0x8A	; 138
     78c:	9f 4f       	sbci	r25, 0xFF	; 255
     78e:	fc 01       	movw	r30, r24
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	fc 01       	movw	r30, r24
     796:	80 81       	ld	r24, Z
     798:	48 2f       	mov	r20, r24
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	88 2f       	mov	r24, r24
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	9c 01       	movw	r18, r24
     7a2:	27 70       	andi	r18, 0x07	; 7
     7a4:	33 27       	eor	r19, r19
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_setPinVAL+0xbe>
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	2a 95       	dec	r18
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_setPinVAL+0xba>
     7b4:	24 2f       	mov	r18, r20
     7b6:	28 2b       	or	r18, r24
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	86 95       	lsr	r24
     7bc:	86 95       	lsr	r24
     7be:	86 95       	lsr	r24
     7c0:	88 2f       	mov	r24, r24
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	8a 58       	subi	r24, 0x8A	; 138
     7ca:	9f 4f       	sbci	r25, 0xFF	; 255
     7cc:	fc 01       	movw	r30, r24
     7ce:	80 81       	ld	r24, Z
     7d0:	91 81       	ldd	r25, Z+1	; 0x01
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
     7d6:	2f c0       	rjmp	.+94     	; 0x836 <DIO_setPinVAL+0x144>
		case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8)); break;
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	86 95       	lsr	r24
     7dc:	86 95       	lsr	r24
     7de:	86 95       	lsr	r24
     7e0:	88 2f       	mov	r24, r24
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	8a 58       	subi	r24, 0x8A	; 138
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	fc 01       	movw	r30, r24
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	fc 01       	movw	r30, r24
     7f4:	80 81       	ld	r24, Z
     7f6:	48 2f       	mov	r20, r24
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	88 2f       	mov	r24, r24
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	9c 01       	movw	r18, r24
     800:	27 70       	andi	r18, 0x07	; 7
     802:	33 27       	eor	r19, r19
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 c0       	rjmp	.+4      	; 0x80e <DIO_setPinVAL+0x11c>
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	2a 95       	dec	r18
     810:	e2 f7       	brpl	.-8      	; 0x80a <DIO_setPinVAL+0x118>
     812:	24 2f       	mov	r18, r20
     814:	28 27       	eor	r18, r24
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	86 95       	lsr	r24
     81a:	86 95       	lsr	r24
     81c:	86 95       	lsr	r24
     81e:	88 2f       	mov	r24, r24
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	8a 58       	subi	r24, 0x8A	; 138
     828:	9f 4f       	sbci	r25, 0xFF	; 255
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	91 81       	ldd	r25, Z+1	; 0x01
     830:	fc 01       	movw	r30, r24
     832:	20 83       	st	Z, r18
     834:	00 00       	nop
	}
}
     836:	00 00       	nop
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <DIO_setPINSDIR>:
 * @param3 : copyEndPin
 * @param4 : copyDir
 * @retVal : void
 */
void DIO_setPINSDIR(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _DIRECTION_PINS copyDir)
{
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <DIO_setPINSDIR+0x6>
     848:	00 d0       	rcall	.+0      	; 0x84a <DIO_setPINSDIR+0x8>
     84a:	1f 92       	push	r1
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	9b 83       	std	Y+3, r25	; 0x03
     852:	8a 83       	std	Y+2, r24	; 0x02
     854:	6c 83       	std	Y+4, r22	; 0x04
     856:	4d 83       	std	Y+5, r20	; 0x05
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
     858:	19 82       	std	Y+1, r1	; 0x01
     85a:	9b c0       	rjmp	.+310    	; 0x992 <DIO_setPINSDIR+0x150>
	{
		switch (copyDir)
     85c:	8d 81       	ldd	r24, Y+5	; 0x05
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	00 97       	sbiw	r24, 0x00	; 0
     864:	21 f0       	breq	.+8      	; 0x86e <DIO_setPINSDIR+0x2c>
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	09 f4       	brne	.+2      	; 0x86c <DIO_setPINSDIR+0x2a>
     86a:	49 c0       	rjmp	.+146    	; 0x8fe <DIO_setPINSDIR+0xbc>
     86c:	8f c0       	rjmp	.+286    	; 0x98c <DIO_setPINSDIR+0x14a>
		{
			case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	2a 81       	ldd	r18, Y+2	; 0x02
     876:	3b 81       	ldd	r19, Y+3	; 0x03
     878:	82 0f       	add	r24, r18
     87a:	93 1f       	adc	r25, r19
     87c:	fc 01       	movw	r30, r24
     87e:	80 81       	ld	r24, Z
     880:	86 95       	lsr	r24
     882:	86 95       	lsr	r24
     884:	86 95       	lsr	r24
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	80 5a       	subi	r24, 0xA0	; 160
     890:	9f 4f       	sbci	r25, 0xFF	; 255
     892:	fc 01       	movw	r30, r24
     894:	80 81       	ld	r24, Z
     896:	91 81       	ldd	r25, Z+1	; 0x01
     898:	fc 01       	movw	r30, r24
     89a:	80 81       	ld	r24, Z
     89c:	48 2f       	mov	r20, r24
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	2a 81       	ldd	r18, Y+2	; 0x02
     8a6:	3b 81       	ldd	r19, Y+3	; 0x03
     8a8:	82 0f       	add	r24, r18
     8aa:	93 1f       	adc	r25, r19
     8ac:	fc 01       	movw	r30, r24
     8ae:	80 81       	ld	r24, Z
     8b0:	88 2f       	mov	r24, r24
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	9c 01       	movw	r18, r24
     8b6:	27 70       	andi	r18, 0x07	; 7
     8b8:	33 27       	eor	r19, r19
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <DIO_setPINSDIR+0x82>
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	2a 95       	dec	r18
     8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <DIO_setPINSDIR+0x7e>
     8c8:	80 95       	com	r24
     8ca:	48 23       	and	r20, r24
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	2a 81       	ldd	r18, Y+2	; 0x02
     8d4:	3b 81       	ldd	r19, Y+3	; 0x03
     8d6:	82 0f       	add	r24, r18
     8d8:	93 1f       	adc	r25, r19
     8da:	fc 01       	movw	r30, r24
     8dc:	80 81       	ld	r24, Z
     8de:	86 95       	lsr	r24
     8e0:	86 95       	lsr	r24
     8e2:	86 95       	lsr	r24
     8e4:	88 2f       	mov	r24, r24
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	80 5a       	subi	r24, 0xA0	; 160
     8ee:	9f 4f       	sbci	r25, 0xFF	; 255
     8f0:	fc 01       	movw	r30, r24
     8f2:	80 81       	ld	r24, Z
     8f4:	91 81       	ldd	r25, Z+1	; 0x01
     8f6:	24 2f       	mov	r18, r20
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18
     8fc:	47 c0       	rjmp	.+142    	; 0x98c <DIO_setPINSDIR+0x14a>
			case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	88 2f       	mov	r24, r24
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	2a 81       	ldd	r18, Y+2	; 0x02
     906:	3b 81       	ldd	r19, Y+3	; 0x03
     908:	82 0f       	add	r24, r18
     90a:	93 1f       	adc	r25, r19
     90c:	fc 01       	movw	r30, r24
     90e:	80 81       	ld	r24, Z
     910:	86 95       	lsr	r24
     912:	86 95       	lsr	r24
     914:	86 95       	lsr	r24
     916:	88 2f       	mov	r24, r24
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	80 5a       	subi	r24, 0xA0	; 160
     920:	9f 4f       	sbci	r25, 0xFF	; 255
     922:	fc 01       	movw	r30, r24
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	48 2f       	mov	r20, r24
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	88 2f       	mov	r24, r24
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	2a 81       	ldd	r18, Y+2	; 0x02
     936:	3b 81       	ldd	r19, Y+3	; 0x03
     938:	82 0f       	add	r24, r18
     93a:	93 1f       	adc	r25, r19
     93c:	fc 01       	movw	r30, r24
     93e:	80 81       	ld	r24, Z
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	9c 01       	movw	r18, r24
     946:	27 70       	andi	r18, 0x07	; 7
     948:	33 27       	eor	r19, r19
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	02 c0       	rjmp	.+4      	; 0x954 <DIO_setPINSDIR+0x112>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	2a 95       	dec	r18
     956:	e2 f7       	brpl	.-8      	; 0x950 <DIO_setPINSDIR+0x10e>
     958:	48 2b       	or	r20, r24
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	88 2f       	mov	r24, r24
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	2a 81       	ldd	r18, Y+2	; 0x02
     962:	3b 81       	ldd	r19, Y+3	; 0x03
     964:	82 0f       	add	r24, r18
     966:	93 1f       	adc	r25, r19
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	86 95       	lsr	r24
     96e:	86 95       	lsr	r24
     970:	86 95       	lsr	r24
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	80 5a       	subi	r24, 0xA0	; 160
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	fc 01       	movw	r30, r24
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	24 2f       	mov	r18, r20
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
     98a:	00 00       	nop
 * @param4 : copyDir
 * @retVal : void
 */
void DIO_setPINSDIR(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _DIRECTION_PINS copyDir)
{
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	89 83       	std	Y+1, r24	; 0x01
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	8c 81       	ldd	r24, Y+4	; 0x04
     996:	98 17       	cp	r25, r24
     998:	08 f4       	brcc	.+2      	; 0x99c <DIO_setPINSDIR+0x15a>
     99a:	60 cf       	rjmp	.-320    	; 0x85c <DIO_setPINSDIR+0x1a>
		{
			case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
			case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
		}
	}
}
     99c:	00 00       	nop
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <DIO_setPINSVAL>:
 * @param3 : copyEndPin
 * @param4 : copyVal
 * @retVal : void
 */
void DIO_setPINSVAL(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _STATUS_PINS copyVal)
{
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <DIO_setPINSVAL+0x6>
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <DIO_setPINSVAL+0x8>
     9b6:	1f 92       	push	r1
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	9b 83       	std	Y+3, r25	; 0x03
     9be:	8a 83       	std	Y+2, r24	; 0x02
     9c0:	6c 83       	std	Y+4, r22	; 0x04
     9c2:	4d 83       	std	Y+5, r20	; 0x05
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
     9c4:	19 82       	std	Y+1, r1	; 0x01
     9c6:	e7 c0       	rjmp	.+462    	; 0xb96 <DIO_setPINSVAL+0x1e8>
	{
		switch (copyVal)
     9c8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ca:	88 2f       	mov	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	91 05       	cpc	r25, r1
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <DIO_setPINSVAL+0x28>
     9d4:	4f c0       	rjmp	.+158    	; 0xa74 <DIO_setPINSVAL+0xc6>
     9d6:	82 30       	cpi	r24, 0x02	; 2
     9d8:	91 05       	cpc	r25, r1
     9da:	09 f4       	brne	.+2      	; 0x9de <DIO_setPINSVAL+0x30>
     9dc:	92 c0       	rjmp	.+292    	; 0xb02 <DIO_setPINSVAL+0x154>
     9de:	89 2b       	or	r24, r25
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <DIO_setPINSVAL+0x36>
     9e2:	d6 c0       	rjmp	.+428    	; 0xb90 <DIO_setPINSVAL+0x1e2>
		{
			case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	88 2f       	mov	r24, r24
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	2a 81       	ldd	r18, Y+2	; 0x02
     9ec:	3b 81       	ldd	r19, Y+3	; 0x03
     9ee:	82 0f       	add	r24, r18
     9f0:	93 1f       	adc	r25, r19
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	86 95       	lsr	r24
     9f8:	86 95       	lsr	r24
     9fa:	86 95       	lsr	r24
     9fc:	88 2f       	mov	r24, r24
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	8a 58       	subi	r24, 0x8A	; 138
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	fc 01       	movw	r30, r24
     a10:	80 81       	ld	r24, Z
     a12:	48 2f       	mov	r20, r24
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	88 2f       	mov	r24, r24
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	2a 81       	ldd	r18, Y+2	; 0x02
     a1c:	3b 81       	ldd	r19, Y+3	; 0x03
     a1e:	82 0f       	add	r24, r18
     a20:	93 1f       	adc	r25, r19
     a22:	fc 01       	movw	r30, r24
     a24:	80 81       	ld	r24, Z
     a26:	88 2f       	mov	r24, r24
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	9c 01       	movw	r18, r24
     a2c:	27 70       	andi	r18, 0x07	; 7
     a2e:	33 27       	eor	r19, r19
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_setPINSVAL+0x8c>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	2a 95       	dec	r18
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_setPINSVAL+0x88>
     a3e:	80 95       	com	r24
     a40:	48 23       	and	r20, r24
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	88 2f       	mov	r24, r24
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	2a 81       	ldd	r18, Y+2	; 0x02
     a4a:	3b 81       	ldd	r19, Y+3	; 0x03
     a4c:	82 0f       	add	r24, r18
     a4e:	93 1f       	adc	r25, r19
     a50:	fc 01       	movw	r30, r24
     a52:	80 81       	ld	r24, Z
     a54:	86 95       	lsr	r24
     a56:	86 95       	lsr	r24
     a58:	86 95       	lsr	r24
     a5a:	88 2f       	mov	r24, r24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	8a 58       	subi	r24, 0x8A	; 138
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	91 81       	ldd	r25, Z+1	; 0x01
     a6c:	24 2f       	mov	r18, r20
     a6e:	fc 01       	movw	r30, r24
     a70:	20 83       	st	Z, r18
     a72:	8e c0       	rjmp	.+284    	; 0xb90 <DIO_setPINSVAL+0x1e2>
			case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	88 2f       	mov	r24, r24
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	2a 81       	ldd	r18, Y+2	; 0x02
     a7c:	3b 81       	ldd	r19, Y+3	; 0x03
     a7e:	82 0f       	add	r24, r18
     a80:	93 1f       	adc	r25, r19
     a82:	fc 01       	movw	r30, r24
     a84:	80 81       	ld	r24, Z
     a86:	86 95       	lsr	r24
     a88:	86 95       	lsr	r24
     a8a:	86 95       	lsr	r24
     a8c:	88 2f       	mov	r24, r24
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	8a 58       	subi	r24, 0x8A	; 138
     a96:	9f 4f       	sbci	r25, 0xFF	; 255
     a98:	fc 01       	movw	r30, r24
     a9a:	80 81       	ld	r24, Z
     a9c:	91 81       	ldd	r25, Z+1	; 0x01
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	48 2f       	mov	r20, r24
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	88 2f       	mov	r24, r24
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	2a 81       	ldd	r18, Y+2	; 0x02
     aac:	3b 81       	ldd	r19, Y+3	; 0x03
     aae:	82 0f       	add	r24, r18
     ab0:	93 1f       	adc	r25, r19
     ab2:	fc 01       	movw	r30, r24
     ab4:	80 81       	ld	r24, Z
     ab6:	88 2f       	mov	r24, r24
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	9c 01       	movw	r18, r24
     abc:	27 70       	andi	r18, 0x07	; 7
     abe:	33 27       	eor	r19, r19
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <DIO_setPINSVAL+0x11c>
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	2a 95       	dec	r18
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <DIO_setPINSVAL+0x118>
     ace:	48 2b       	or	r20, r24
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	88 2f       	mov	r24, r24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	2a 81       	ldd	r18, Y+2	; 0x02
     ad8:	3b 81       	ldd	r19, Y+3	; 0x03
     ada:	82 0f       	add	r24, r18
     adc:	93 1f       	adc	r25, r19
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	86 95       	lsr	r24
     ae4:	86 95       	lsr	r24
     ae6:	86 95       	lsr	r24
     ae8:	88 2f       	mov	r24, r24
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	8a 58       	subi	r24, 0x8A	; 138
     af2:	9f 4f       	sbci	r25, 0xFF	; 255
     af4:	fc 01       	movw	r30, r24
     af6:	80 81       	ld	r24, Z
     af8:	91 81       	ldd	r25, Z+1	; 0x01
     afa:	24 2f       	mov	r18, r20
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
     b00:	47 c0       	rjmp	.+142    	; 0xb90 <DIO_setPINSVAL+0x1e2>
			case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	88 2f       	mov	r24, r24
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	2a 81       	ldd	r18, Y+2	; 0x02
     b0a:	3b 81       	ldd	r19, Y+3	; 0x03
     b0c:	82 0f       	add	r24, r18
     b0e:	93 1f       	adc	r25, r19
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	86 95       	lsr	r24
     b16:	86 95       	lsr	r24
     b18:	86 95       	lsr	r24
     b1a:	88 2f       	mov	r24, r24
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	8a 58       	subi	r24, 0x8A	; 138
     b24:	9f 4f       	sbci	r25, 0xFF	; 255
     b26:	fc 01       	movw	r30, r24
     b28:	80 81       	ld	r24, Z
     b2a:	91 81       	ldd	r25, Z+1	; 0x01
     b2c:	fc 01       	movw	r30, r24
     b2e:	80 81       	ld	r24, Z
     b30:	48 2f       	mov	r20, r24
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	88 2f       	mov	r24, r24
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	2a 81       	ldd	r18, Y+2	; 0x02
     b3a:	3b 81       	ldd	r19, Y+3	; 0x03
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	fc 01       	movw	r30, r24
     b42:	80 81       	ld	r24, Z
     b44:	88 2f       	mov	r24, r24
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	9c 01       	movw	r18, r24
     b4a:	27 70       	andi	r18, 0x07	; 7
     b4c:	33 27       	eor	r19, r19
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <DIO_setPINSVAL+0x1aa>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	2a 95       	dec	r18
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <DIO_setPINSVAL+0x1a6>
     b5c:	48 27       	eor	r20, r24
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	2a 81       	ldd	r18, Y+2	; 0x02
     b66:	3b 81       	ldd	r19, Y+3	; 0x03
     b68:	82 0f       	add	r24, r18
     b6a:	93 1f       	adc	r25, r19
     b6c:	fc 01       	movw	r30, r24
     b6e:	80 81       	ld	r24, Z
     b70:	86 95       	lsr	r24
     b72:	86 95       	lsr	r24
     b74:	86 95       	lsr	r24
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	8a 58       	subi	r24, 0x8A	; 138
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	fc 01       	movw	r30, r24
     b84:	80 81       	ld	r24, Z
     b86:	91 81       	ldd	r25, Z+1	; 0x01
     b88:	24 2f       	mov	r18, r20
     b8a:	fc 01       	movw	r30, r24
     b8c:	20 83       	st	Z, r18
     b8e:	00 00       	nop
 * @param4 : copyVal
 * @retVal : void
 */
void DIO_setPINSVAL(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _STATUS_PINS copyVal)
{
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	99 81       	ldd	r25, Y+1	; 0x01
     b98:	8c 81       	ldd	r24, Y+4	; 0x04
     b9a:	98 17       	cp	r25, r24
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <DIO_setPINSVAL+0x1f2>
     b9e:	14 cf       	rjmp	.-472    	; 0x9c8 <DIO_setPINSVAL+0x1a>
			case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
			case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
			case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
		}
	}
}
     ba0:	00 00       	nop
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <DIO_getPinVAL>:
 * @param1 : copyPortNum
 * @param2 : copyPinNum
 * @retVal : Ret1
 */
Return_Value DIO_getPinVAL(_GPIO_PINS copyPinNum)
{
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <DIO_getPinVAL+0x6>
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Ret = Zero_INIT;
     bbe:	19 82       	std	Y+1, r1	; 0x01
	Ret = GET_BIT(*(ARR_PIN[copyPinNum / 8]),(copyPinNum % 8));
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	86 95       	lsr	r24
     bc4:	86 95       	lsr	r24
     bc6:	86 95       	lsr	r24
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	84 57       	subi	r24, 0x74	; 116
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	fc 01       	movw	r30, r24
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	fc 01       	movw	r30, r24
     bdc:	80 81       	ld	r24, Z
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	2a 81       	ldd	r18, Y+2	; 0x02
     be4:	22 2f       	mov	r18, r18
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	27 70       	andi	r18, 0x07	; 7
     bea:	33 27       	eor	r19, r19
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <DIO_getPinVAL+0x40>
     bee:	95 95       	asr	r25
     bf0:	87 95       	ror	r24
     bf2:	2a 95       	dec	r18
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <DIO_getPinVAL+0x3c>
     bf6:	81 70       	andi	r24, 0x01	; 1
     bf8:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <DIO_setPortDIR>:
 * @param1 : copyPortNum
 * @param2 : copyDir
 * @retVal : void
 */
void DIO_setPortDIR(_GPIO_PORTS copyPortNum,_DIRECTION_PORTS copyDir)
{
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <DIO_setPortDIR+0x6>
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	6a 83       	std	Y+2, r22	; 0x02
	*ARR_DDR[copyPortNum] = copyDir;
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	80 5a       	subi	r24, 0xA0	; 160
     c20:	9f 4f       	sbci	r25, 0xFF	; 255
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	2a 81       	ldd	r18, Y+2	; 0x02
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18
}
     c2e:	00 00       	nop
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <DIO_setPortVAL>:
 * @param1 : copyPortNum
 * @param2 : copyVal
 * @retVal : void
 */
void DIO_setPortVAL(_GPIO_PORTS copyPortNum,_STATUS_PORTS copyVal)
{
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <DIO_setPortVAL+0x6>
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	6a 83       	std	Y+2, r22	; 0x02
	*ARR_PORT[copyPortNum] = copyVal;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	8a 58       	subi	r24, 0x8A	; 138
     c54:	9f 4f       	sbci	r25, 0xFF	; 255
     c56:	fc 01       	movw	r30, r24
     c58:	80 81       	ld	r24, Z
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	2a 81       	ldd	r18, Y+2	; 0x02
     c5e:	fc 01       	movw	r30, r24
     c60:	20 83       	st	Z, r18
}
     c62:	00 00       	nop
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <DIO_getPortVAL>:
 * @brief  : if DDxn configured input All port This function get Status from PINxn Register
 * @param1 : copyPortNum
 * @retVal : Ret1
 */
Return_Value DIO_getPortVAL(_GPIO_PORTS copyPortNum)
{
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	00 d0       	rcall	.+0      	; 0xc74 <DIO_getPortVAL+0x6>
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Ret = Zero_INIT;
     c7a:	19 82       	std	Y+1, r1	; 0x01
	Ret = *ARR_PIN[copyPortNum];
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	84 57       	subi	r24, 0x74	; 116
     c88:	9f 4f       	sbci	r25, 0xFF	; 255
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	fc 01       	movw	r30, r24
     c92:	80 81       	ld	r24, Z
     c94:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
}
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <ADC_init>:
  * 		  By writing it to zero, the ADC is turned off. Select ADC VOLT Reference.
  * @param1 : void
  * @retVal : void
  */
void ADC_init(void)
{
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
#if (_ADC_VOLT == AVCC)
	CLR_BIT(ADMUX,REFS1);
     caa:	87 e2       	ldi	r24, 0x27	; 39
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	fc 01       	movw	r30, r24
     cb0:	20 81       	ld	r18, Z
     cb2:	87 e2       	ldi	r24, 0x27	; 39
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	2f 77       	andi	r18, 0x7F	; 127
     cb8:	fc 01       	movw	r30, r24
     cba:	20 83       	st	Z, r18
	SET_BIT(ADMUX,REFS0);
     cbc:	87 e2       	ldi	r24, 0x27	; 39
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 81       	ld	r18, Z
     cc4:	87 e2       	ldi	r24, 0x27	; 39
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	20 64       	ori	r18, 0x40	; 64
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
	SET_BIT(ADMUX,REFS1);
	SET_BIT(ADMUX,REFS0);
#endif

#if (ADC_AUTO_TRIGGER == FREE_RUNNING_MODE)
	CLR_BIT(SFIOR,ADTS2);
     cce:	80 e5       	ldi	r24, 0x50	; 80
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 81       	ld	r18, Z
     cd6:	80 e5       	ldi	r24, 0x50	; 80
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	2f 77       	andi	r18, 0x7F	; 127
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
	CLR_BIT(SFIOR,ADTS1);
     ce0:	80 e5       	ldi	r24, 0x50	; 80
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	fc 01       	movw	r30, r24
     ce6:	20 81       	ld	r18, Z
     ce8:	80 e5       	ldi	r24, 0x50	; 80
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	2f 7b       	andi	r18, 0xBF	; 191
     cee:	fc 01       	movw	r30, r24
     cf0:	20 83       	st	Z, r18
	CLR_BIT(SFIOR,ADTS0);
     cf2:	80 e5       	ldi	r24, 0x50	; 80
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 81       	ld	r18, Z
     cfa:	80 e5       	ldi	r24, 0x50	; 80
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	2f 7d       	andi	r18, 0xDF	; 223
     d00:	fc 01       	movw	r30, r24
     d02:	20 83       	st	Z, r18
#elif (ADC_AUTO_TRIGGER == TIMER1_CAPTURE_MODE)
	SET_BIT(SFIOR,ADTS2);
	SET_BIT(SFIOR,ADTS1);
	SET_BIT(SFIOR,ADTS0);
#endif
	SET_BIT(ADCSRA,ADEN);
     d04:	86 e2       	ldi	r24, 0x26	; 38
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	fc 01       	movw	r30, r24
     d0a:	20 81       	ld	r18, Z
     d0c:	86 e2       	ldi	r24, 0x26	; 38
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	20 68       	ori	r18, 0x80	; 128
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18
	ADCSRA |= _ADC_PRESCALER_SELECT;
     d16:	26 e2       	ldi	r18, 0x26	; 38
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	86 e2       	ldi	r24, 0x26	; 38
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	f9 01       	movw	r30, r18
     d20:	20 81       	ld	r18, Z
     d22:	fc 01       	movw	r30, r24
     d24:	20 83       	st	Z, r18
}
     d26:	00 00       	nop
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <ADC_analogRead>:
  * 		  in variable uint_16
  * @param1 : copyChannel
  * @retVal : Ret1
  */
uint_16 ADC_analogRead(_ADC_CHANNELS copyChannel)
{
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	00 d0       	rcall	.+0      	; 0xd34 <ADC_analogRead+0x6>
     d34:	1f 92       	push	r1
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	8b 83       	std	Y+3, r24	; 0x03
	uint_16 Ret1 = Zero_INIT;
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	19 82       	std	Y+1, r1	; 0x01
	ADMUX &= _ADC_CLEAR_MASK;
     d40:	87 e2       	ldi	r24, 0x27	; 39
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	fc 01       	movw	r30, r24
     d46:	20 81       	ld	r18, Z
     d48:	87 e2       	ldi	r24, 0x27	; 39
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	20 7e       	andi	r18, 0xE0	; 224
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
	ADMUX |= copyChannel;
     d52:	87 e2       	ldi	r24, 0x27	; 39
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	fc 01       	movw	r30, r24
     d58:	30 81       	ld	r19, Z
     d5a:	87 e2       	ldi	r24, 0x27	; 39
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	2b 81       	ldd	r18, Y+3	; 0x03
     d60:	23 2b       	or	r18, r19
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADSC);
     d66:	86 e2       	ldi	r24, 0x26	; 38
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 81       	ld	r18, Z
     d6e:	86 e2       	ldi	r24, 0x26	; 38
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	20 64       	ori	r18, 0x40	; 64
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
	while((GET_BIT(ADCSRA,ADSC)));	// polling data
     d78:	00 00       	nop
     d7a:	86 e2       	ldi	r24, 0x26	; 38
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	fc 01       	movw	r30, r24
     d80:	80 81       	ld	r24, Z
     d82:	82 95       	swap	r24
     d84:	86 95       	lsr	r24
     d86:	86 95       	lsr	r24
     d88:	83 70       	andi	r24, 0x03	; 3
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	81 70       	andi	r24, 0x01	; 1
     d90:	99 27       	eor	r25, r25
     d92:	89 2b       	or	r24, r25
     d94:	91 f7       	brne	.-28     	; 0xd7a <ADC_analogRead+0x4c>
	Ret1 = ADCL;
     d96:	84 e2       	ldi	r24, 0x24	; 36
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	fc 01       	movw	r30, r24
     d9c:	80 81       	ld	r24, Z
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
	Ret1 |= (ADCH << 8);
     da6:	85 e2       	ldi	r24, 0x25	; 37
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	fc 01       	movw	r30, r24
     dac:	80 81       	ld	r24, Z
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	98 2f       	mov	r25, r24
     db4:	88 27       	eor	r24, r24
     db6:	9c 01       	movw	r18, r24
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	82 2b       	or	r24, r18
     dbe:	93 2b       	or	r25, r19
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
	return Ret1;
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <ADC_enable>:
  * @brief  : ADC enable Writing the ADEN bit to one the ADC is turned on.
  * @param1 : void
  * @retVal : void
  */
void ADC_enable(void)
{
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
     ddc:	86 e2       	ldi	r24, 0x26	; 38
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	20 81       	ld	r18, Z
     de4:	86 e2       	ldi	r24, 0x26	; 38
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	20 68       	ori	r18, 0x80	; 128
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
}
     dee:	00 00       	nop
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <ADC_disable>:
  * @brief  : ADC disable By writing it to zero, the ADC is turned off.
  * @param1 : void
  * @retVal : void
  */
void ADC_disable(void)
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADEN);
     dfe:	86 e2       	ldi	r24, 0x26	; 38
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	fc 01       	movw	r30, r24
     e04:	20 81       	ld	r18, Z
     e06:	86 e2       	ldi	r24, 0x26	; 38
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	2f 77       	andi	r18, 0x7F	; 127
     e0c:	fc 01       	movw	r30, r24
     e0e:	20 83       	st	Z, r18
}
     e10:	00 00       	nop
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <ADC_enableInterrupt>:
  *  		  the ADC Conversion Complete Interrupt is activated.
  * @param1 : void
  * @retVal : void
  */
void ADC_enableInterrupt(void)
{
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     e20:	8f e5       	ldi	r24, 0x5F	; 95
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	fc 01       	movw	r30, r24
     e26:	20 81       	ld	r18, Z
     e28:	8f e5       	ldi	r24, 0x5F	; 95
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	20 68       	ori	r18, 0x80	; 128
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADIE);
     e32:	86 e2       	ldi	r24, 0x26	; 38
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	fc 01       	movw	r30, r24
     e38:	20 81       	ld	r18, Z
     e3a:	86 e2       	ldi	r24, 0x26	; 38
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	28 60       	ori	r18, 0x08	; 8
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
}
     e44:	00 00       	nop
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <ADC_disableInterrupt>:
  *  		  the ADC Conversion Complete Interrupt is activated.
  * @param1 : void
  * @retVal : void
  */
void ADC_disableInterrupt(void)
{
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIE);
     e54:	86 e2       	ldi	r24, 0x26	; 38
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	fc 01       	movw	r30, r24
     e5a:	20 81       	ld	r18, Z
     e5c:	86 e2       	ldi	r24, 0x26	; 38
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	27 7f       	andi	r18, 0xF7	; 247
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
}
     e66:	00 00       	nop
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	08 95       	ret

00000e6e <ADC_clearFlag>:
  * 		  conversion.
  * @param1 : void
  * @retVal : void
  */
void ADC_clearFlag(void)
{
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIF);
     e76:	86 e2       	ldi	r24, 0x26	; 38
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 81       	ld	r18, Z
     e7e:	86 e2       	ldi	r24, 0x26	; 38
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	2f 7e       	andi	r18, 0xEF	; 239
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
}
     e88:	00 00       	nop
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <LCD_init>:
 *           if _LCD_MODE is _4_BIT_MODE_LCD then EN , RS , D4 ~ D7 is output pins.
 * @param1 : copyLCDNum
 * @retVal : void
 */
void LCD_init(PINS_LCD copyLCDNum)
{
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	e1 97       	sbiw	r28, 0x31	; 49
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	4c a7       	std	Y+44, r20	; 0x2c
     ea6:	5d a7       	std	Y+45, r21	; 0x2d
     ea8:	6e a7       	std	Y+46, r22	; 0x2e
     eaa:	7f a7       	std	Y+47, r23	; 0x2f
     eac:	88 ab       	std	Y+48, r24	; 0x30
     eae:	99 ab       	std	Y+49, r25	; 0x31
	LCD_writeCMD(copyLCDNum,_LCD_ENTERY_INC);
	LCD_writeCMD(copyLCDNum,_LCD_DISPLAY_ON);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
	LCD_writeCMD(copyLCDNum,0x80);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinDIR(copyLCDNum.EN, _DIRECTION_PIN_OUTPUT);
     eb0:	8c a5       	ldd	r24, Y+44	; 0x2c
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
	DIO_setPinDIR(copyLCDNum.RS, _DIRECTION_PIN_OUTPUT);
     eb8:	8d a5       	ldd	r24, Y+45	; 0x2d
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
	for(uint_8 count = Zero_INIT ; count < 4 ; count++)
     ec0:	19 82       	std	Y+1, r1	; 0x01
     ec2:	10 c0       	rjmp	.+32     	; 0xee4 <LCD_init+0x54>
	{
		DIO_setPinDIR(copyLCDNum.D[count],_DIRECTION_PIN_OUTPUT);
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9e 01       	movw	r18, r28
     ecc:	22 5d       	subi	r18, 0xD2	; 210
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	82 0f       	add	r24, r18
     ed2:	93 1f       	adc	r25, r19
     ed4:	fc 01       	movw	r30, r24
     ed6:	80 81       	ld	r24, Z
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
	LCD_writeCMD(copyLCDNum,0x80);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinDIR(copyLCDNum.EN, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyLCDNum.RS, _DIRECTION_PIN_OUTPUT);
	for(uint_8 count = Zero_INIT ; count < 4 ; count++)
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	68 f3       	brcs	.-38     	; 0xec4 <LCD_init+0x34>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a0 ea       	ldi	r26, 0xA0	; 160
     ef0:	b1 e4       	ldi	r27, 0x41	; 65
     ef2:	8e 8f       	std	Y+30, r24	; 0x1e
     ef4:	9f 8f       	std	Y+31, r25	; 0x1f
     ef6:	a8 a3       	std	Y+32, r26	; 0x20
     ef8:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	4a e7       	ldi	r20, 0x7A	; 122
     f00:	53 e4       	ldi	r21, 0x43	; 67
     f02:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f04:	7f 8d       	ldd	r23, Y+31	; 0x1f
     f06:	88 a1       	ldd	r24, Y+32	; 0x20
     f08:	99 a1       	ldd	r25, Y+33	; 0x21
     f0a:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	8a a3       	std	Y+34, r24	; 0x22
     f14:	9b a3       	std	Y+35, r25	; 0x23
     f16:	ac a3       	std	Y+36, r26	; 0x24
     f18:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	6a a1       	ldd	r22, Y+34	; 0x22
     f24:	7b a1       	ldd	r23, Y+35	; 0x23
     f26:	8c a1       	ldd	r24, Y+36	; 0x24
     f28:	9d a1       	ldd	r25, Y+37	; 0x25
     f2a:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
     f2e:	88 23       	and	r24, r24
     f30:	2c f4       	brge	.+10     	; 0xf3c <LCD_init+0xac>
		__ticks = 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9f a3       	std	Y+39, r25	; 0x27
     f38:	8e a3       	std	Y+38, r24	; 0x26
     f3a:	3f c0       	rjmp	.+126    	; 0xfba <LCD_init+0x12a>
	else if (__tmp > 65535)
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	3f ef       	ldi	r19, 0xFF	; 255
     f40:	4f e7       	ldi	r20, 0x7F	; 127
     f42:	57 e4       	ldi	r21, 0x47	; 71
     f44:	6a a1       	ldd	r22, Y+34	; 0x22
     f46:	7b a1       	ldd	r23, Y+35	; 0x23
     f48:	8c a1       	ldd	r24, Y+36	; 0x24
     f4a:	9d a1       	ldd	r25, Y+37	; 0x25
     f4c:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
     f50:	18 16       	cp	r1, r24
     f52:	4c f5       	brge	.+82     	; 0xfa6 <LCD_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f5e:	7f 8d       	ldd	r23, Y+31	; 0x1f
     f60:	88 a1       	ldd	r24, Y+32	; 0x20
     f62:	99 a1       	ldd	r25, Y+33	; 0x21
     f64:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9f a3       	std	Y+39, r25	; 0x27
     f7a:	8e a3       	std	Y+38, r24	; 0x26
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <LCD_init+0x10c>
     f7e:	89 e1       	ldi	r24, 0x19	; 25
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	99 a7       	std	Y+41, r25	; 0x29
     f84:	88 a7       	std	Y+40, r24	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f86:	88 a5       	ldd	r24, Y+40	; 0x28
     f88:	99 a5       	ldd	r25, Y+41	; 0x29
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <LCD_init+0xfa>
     f8e:	99 a7       	std	Y+41, r25	; 0x29
     f90:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f92:	8e a1       	ldd	r24, Y+38	; 0x26
     f94:	9f a1       	ldd	r25, Y+39	; 0x27
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	9f a3       	std	Y+39, r25	; 0x27
     f9a:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9c:	8e a1       	ldd	r24, Y+38	; 0x26
     f9e:	9f a1       	ldd	r25, Y+39	; 0x27
     fa0:	89 2b       	or	r24, r25
     fa2:	69 f7       	brne	.-38     	; 0xf7e <LCD_init+0xee>
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <LCD_init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa6:	6a a1       	ldd	r22, Y+34	; 0x22
     fa8:	7b a1       	ldd	r23, Y+35	; 0x23
     faa:	8c a1       	ldd	r24, Y+36	; 0x24
     fac:	9d a1       	ldd	r25, Y+37	; 0x25
     fae:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	9f a3       	std	Y+39, r25	; 0x27
     fb8:	8e a3       	std	Y+38, r24	; 0x26
     fba:	8e a1       	ldd	r24, Y+38	; 0x26
     fbc:	9f a1       	ldd	r25, Y+39	; 0x27
     fbe:	9b a7       	std	Y+43, r25	; 0x2b
     fc0:	8a a7       	std	Y+42, r24	; 0x2a
     fc2:	8a a5       	ldd	r24, Y+42	; 0x2a
     fc4:	9b a5       	ldd	r25, Y+43	; 0x2b
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <LCD_init+0x136>
     fca:	9b a7       	std	Y+43, r25	; 0x2b
     fcc:	8a a7       	std	Y+42, r24	; 0x2a
	{
		DIO_setPinDIR(copyLCDNum.D[count],_DIRECTION_PIN_OUTPUT);
	}
	_delay_ms(20);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
     fce:	28 e3       	ldi	r18, 0x38	; 56
     fd0:	4c a5       	ldd	r20, Y+44	; 0x2c
     fd2:	5d a5       	ldd	r21, Y+45	; 0x2d
     fd4:	6e a5       	ldd	r22, Y+46	; 0x2e
     fd6:	7f a5       	ldd	r23, Y+47	; 0x2f
     fd8:	88 a9       	ldd	r24, Y+48	; 0x30
     fda:	99 a9       	ldd	r25, Y+49	; 0x31
     fdc:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 ea       	ldi	r26, 0xA0	; 160
     fe6:	b0 e4       	ldi	r27, 0x40	; 64
     fe8:	88 8b       	std	Y+16, r24	; 0x10
     fea:	99 8b       	std	Y+17, r25	; 0x11
     fec:	aa 8b       	std	Y+18, r26	; 0x12
     fee:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	4a e7       	ldi	r20, 0x7A	; 122
     ff6:	53 e4       	ldi	r21, 0x43	; 67
     ff8:	68 89       	ldd	r22, Y+16	; 0x10
     ffa:	79 89       	ldd	r23, Y+17	; 0x11
     ffc:	8a 89       	ldd	r24, Y+18	; 0x12
     ffe:	9b 89       	ldd	r25, Y+19	; 0x13
    1000:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8c 8b       	std	Y+20, r24	; 0x14
    100a:	9d 8b       	std	Y+21, r25	; 0x15
    100c:	ae 8b       	std	Y+22, r26	; 0x16
    100e:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	6c 89       	ldd	r22, Y+20	; 0x14
    101a:	7d 89       	ldd	r23, Y+21	; 0x15
    101c:	8e 89       	ldd	r24, Y+22	; 0x16
    101e:	9f 89       	ldd	r25, Y+23	; 0x17
    1020:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    1024:	88 23       	and	r24, r24
    1026:	2c f4       	brge	.+10     	; 0x1032 <LCD_init+0x1a2>
		__ticks = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	99 8f       	std	Y+25, r25	; 0x19
    102e:	88 8f       	std	Y+24, r24	; 0x18
    1030:	3f c0       	rjmp	.+126    	; 0x10b0 <LCD_init+0x220>
	else if (__tmp > 65535)
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	3f ef       	ldi	r19, 0xFF	; 255
    1036:	4f e7       	ldi	r20, 0x7F	; 127
    1038:	57 e4       	ldi	r21, 0x47	; 71
    103a:	6c 89       	ldd	r22, Y+20	; 0x14
    103c:	7d 89       	ldd	r23, Y+21	; 0x15
    103e:	8e 89       	ldd	r24, Y+22	; 0x16
    1040:	9f 89       	ldd	r25, Y+23	; 0x17
    1042:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    1046:	18 16       	cp	r1, r24
    1048:	4c f5       	brge	.+82     	; 0x109c <LCD_init+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e2       	ldi	r20, 0x20	; 32
    1050:	51 e4       	ldi	r21, 0x41	; 65
    1052:	68 89       	ldd	r22, Y+16	; 0x10
    1054:	79 89       	ldd	r23, Y+17	; 0x11
    1056:	8a 89       	ldd	r24, Y+18	; 0x12
    1058:	9b 89       	ldd	r25, Y+19	; 0x13
    105a:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	99 8f       	std	Y+25, r25	; 0x19
    1070:	88 8f       	std	Y+24, r24	; 0x18
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <LCD_init+0x202>
    1074:	89 e1       	ldi	r24, 0x19	; 25
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9b 8f       	std	Y+27, r25	; 0x1b
    107a:	8a 8f       	std	Y+26, r24	; 0x1a
    107c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    107e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <LCD_init+0x1f0>
    1084:	9b 8f       	std	Y+27, r25	; 0x1b
    1086:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1088:	88 8d       	ldd	r24, Y+24	; 0x18
    108a:	99 8d       	ldd	r25, Y+25	; 0x19
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	99 8f       	std	Y+25, r25	; 0x19
    1090:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	88 8d       	ldd	r24, Y+24	; 0x18
    1094:	99 8d       	ldd	r25, Y+25	; 0x19
    1096:	89 2b       	or	r24, r25
    1098:	69 f7       	brne	.-38     	; 0x1074 <LCD_init+0x1e4>
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <LCD_init+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109c:	6c 89       	ldd	r22, Y+20	; 0x14
    109e:	7d 89       	ldd	r23, Y+21	; 0x15
    10a0:	8e 89       	ldd	r24, Y+22	; 0x16
    10a2:	9f 89       	ldd	r25, Y+23	; 0x17
    10a4:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	99 8f       	std	Y+25, r25	; 0x19
    10ae:	88 8f       	std	Y+24, r24	; 0x18
    10b0:	88 8d       	ldd	r24, Y+24	; 0x18
    10b2:	99 8d       	ldd	r25, Y+25	; 0x19
    10b4:	9d 8f       	std	Y+29, r25	; 0x1d
    10b6:	8c 8f       	std	Y+28, r24	; 0x1c
    10b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <LCD_init+0x22c>
    10c0:	9d 8f       	std	Y+29, r25	; 0x1d
    10c2:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(5);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
    10c4:	28 e3       	ldi	r18, 0x38	; 56
    10c6:	4c a5       	ldd	r20, Y+44	; 0x2c
    10c8:	5d a5       	ldd	r21, Y+45	; 0x2d
    10ca:	6e a5       	ldd	r22, Y+46	; 0x2e
    10cc:	7f a5       	ldd	r23, Y+47	; 0x2f
    10ce:	88 a9       	ldd	r24, Y+48	; 0x30
    10d0:	99 a9       	ldd	r25, Y+49	; 0x31
    10d2:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a6 e1       	ldi	r26, 0x16	; 22
    10dc:	b3 e4       	ldi	r27, 0x43	; 67
    10de:	8a 83       	std	Y+2, r24	; 0x02
    10e0:	9b 83       	std	Y+3, r25	; 0x03
    10e2:	ac 83       	std	Y+4, r26	; 0x04
    10e4:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a e7       	ldi	r20, 0x7A	; 122
    10ec:	53 e4       	ldi	r21, 0x43	; 67
    10ee:	6a 81       	ldd	r22, Y+2	; 0x02
    10f0:	7b 81       	ldd	r23, Y+3	; 0x03
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	8e 83       	std	Y+6, r24	; 0x06
    1100:	9f 83       	std	Y+7, r25	; 0x07
    1102:	a8 87       	std	Y+8, r26	; 0x08
    1104:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	5f e3       	ldi	r21, 0x3F	; 63
    110e:	6e 81       	ldd	r22, Y+6	; 0x06
    1110:	7f 81       	ldd	r23, Y+7	; 0x07
    1112:	88 85       	ldd	r24, Y+8	; 0x08
    1114:	99 85       	ldd	r25, Y+9	; 0x09
    1116:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    111a:	88 23       	and	r24, r24
    111c:	2c f4       	brge	.+10     	; 0x1128 <LCD_init+0x298>
		__ticks = 1;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9b 87       	std	Y+11, r25	; 0x0b
    1124:	8a 87       	std	Y+10, r24	; 0x0a
    1126:	3f c0       	rjmp	.+126    	; 0x11a6 <LCD_init+0x316>
	else if (__tmp > 65535)
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	3f ef       	ldi	r19, 0xFF	; 255
    112c:	4f e7       	ldi	r20, 0x7F	; 127
    112e:	57 e4       	ldi	r21, 0x47	; 71
    1130:	6e 81       	ldd	r22, Y+6	; 0x06
    1132:	7f 81       	ldd	r23, Y+7	; 0x07
    1134:	88 85       	ldd	r24, Y+8	; 0x08
    1136:	99 85       	ldd	r25, Y+9	; 0x09
    1138:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    113c:	18 16       	cp	r1, r24
    113e:	4c f5       	brge	.+82     	; 0x1192 <LCD_init+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e2       	ldi	r20, 0x20	; 32
    1146:	51 e4       	ldi	r21, 0x41	; 65
    1148:	6a 81       	ldd	r22, Y+2	; 0x02
    114a:	7b 81       	ldd	r23, Y+3	; 0x03
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9b 87       	std	Y+11, r25	; 0x0b
    1166:	8a 87       	std	Y+10, r24	; 0x0a
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <LCD_init+0x2f8>
    116a:	89 e1       	ldi	r24, 0x19	; 25
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9d 87       	std	Y+13, r25	; 0x0d
    1170:	8c 87       	std	Y+12, r24	; 0x0c
    1172:	8c 85       	ldd	r24, Y+12	; 0x0c
    1174:	9d 85       	ldd	r25, Y+13	; 0x0d
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <LCD_init+0x2e6>
    117a:	9d 87       	std	Y+13, r25	; 0x0d
    117c:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1180:	9b 85       	ldd	r25, Y+11	; 0x0b
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	9b 87       	std	Y+11, r25	; 0x0b
    1186:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	8a 85       	ldd	r24, Y+10	; 0x0a
    118a:	9b 85       	ldd	r25, Y+11	; 0x0b
    118c:	89 2b       	or	r24, r25
    118e:	69 f7       	brne	.-38     	; 0x116a <LCD_init+0x2da>
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <LCD_init+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1192:	6e 81       	ldd	r22, Y+6	; 0x06
    1194:	7f 81       	ldd	r23, Y+7	; 0x07
    1196:	88 85       	ldd	r24, Y+8	; 0x08
    1198:	99 85       	ldd	r25, Y+9	; 0x09
    119a:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9b 87       	std	Y+11, r25	; 0x0b
    11a4:	8a 87       	std	Y+10, r24	; 0x0a
    11a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    11aa:	9f 87       	std	Y+15, r25	; 0x0f
    11ac:	8e 87       	std	Y+14, r24	; 0x0e
    11ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    11b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <LCD_init+0x322>
    11b6:	9f 87       	std	Y+15, r25	; 0x0f
    11b8:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(150);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
    11ba:	28 e3       	ldi	r18, 0x38	; 56
    11bc:	4c a5       	ldd	r20, Y+44	; 0x2c
    11be:	5d a5       	ldd	r21, Y+45	; 0x2d
    11c0:	6e a5       	ldd	r22, Y+46	; 0x2e
    11c2:	7f a5       	ldd	r23, Y+47	; 0x2f
    11c4:	88 a9       	ldd	r24, Y+48	; 0x30
    11c6:	99 a9       	ldd	r25, Y+49	; 0x31
    11c8:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_CLEAR_DIS);
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	4c a5       	ldd	r20, Y+44	; 0x2c
    11d0:	5d a5       	ldd	r21, Y+45	; 0x2d
    11d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    11d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    11d6:	88 a9       	ldd	r24, Y+48	; 0x30
    11d8:	99 a9       	ldd	r25, Y+49	; 0x31
    11da:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_RETURN_HOME);
    11de:	22 e0       	ldi	r18, 0x02	; 2
    11e0:	4c a5       	ldd	r20, Y+44	; 0x2c
    11e2:	5d a5       	ldd	r21, Y+45	; 0x2d
    11e4:	6e a5       	ldd	r22, Y+46	; 0x2e
    11e6:	7f a5       	ldd	r23, Y+47	; 0x2f
    11e8:	88 a9       	ldd	r24, Y+48	; 0x30
    11ea:	99 a9       	ldd	r25, Y+49	; 0x31
    11ec:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_ENTERY_INC);
    11f0:	26 e0       	ldi	r18, 0x06	; 6
    11f2:	4c a5       	ldd	r20, Y+44	; 0x2c
    11f4:	5d a5       	ldd	r21, Y+45	; 0x2d
    11f6:	6e a5       	ldd	r22, Y+46	; 0x2e
    11f8:	7f a5       	ldd	r23, Y+47	; 0x2f
    11fa:	88 a9       	ldd	r24, Y+48	; 0x30
    11fc:	99 a9       	ldd	r25, Y+49	; 0x31
    11fe:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_DISPLAY_ON);
    1202:	2c e0       	ldi	r18, 0x0C	; 12
    1204:	4c a5       	ldd	r20, Y+44	; 0x2c
    1206:	5d a5       	ldd	r21, Y+45	; 0x2d
    1208:	6e a5       	ldd	r22, Y+46	; 0x2e
    120a:	7f a5       	ldd	r23, Y+47	; 0x2f
    120c:	88 a9       	ldd	r24, Y+48	; 0x30
    120e:	99 a9       	ldd	r25, Y+49	; 0x31
    1210:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_4_BIT_MODE);
    1214:	28 e2       	ldi	r18, 0x28	; 40
    1216:	4c a5       	ldd	r20, Y+44	; 0x2c
    1218:	5d a5       	ldd	r21, Y+45	; 0x2d
    121a:	6e a5       	ldd	r22, Y+46	; 0x2e
    121c:	7f a5       	ldd	r23, Y+47	; 0x2f
    121e:	88 a9       	ldd	r24, Y+48	; 0x30
    1220:	99 a9       	ldd	r25, Y+49	; 0x31
    1222:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,0x80);
    1226:	20 e8       	ldi	r18, 0x80	; 128
    1228:	4c a5       	ldd	r20, Y+44	; 0x2c
    122a:	5d a5       	ldd	r21, Y+45	; 0x2d
    122c:	6e a5       	ldd	r22, Y+46	; 0x2e
    122e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1230:	88 a9       	ldd	r24, Y+48	; 0x30
    1232:	99 a9       	ldd	r25, Y+49	; 0x31
    1234:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
	#endif
}
    1238:	00 00       	nop
    123a:	e1 96       	adiw	r28, 0x31	; 49
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <LCD_writeCMD>:
 * @param1 : copyLCDNum
 * @param2 : copyCMD
 * @retVal : void
 */
void LCD_writeCMD(PINS_LCD copyLCDNum, _LCD_COMMANDS copyCMD)
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	00 d0       	rcall	.+0      	; 0x1252 <LCD_writeCMD+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <LCD_writeCMD+0x8>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <LCD_writeCMD+0xa>
    1256:	1f 92       	push	r1
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	49 83       	std	Y+1, r20	; 0x01
    125e:	5a 83       	std	Y+2, r21	; 0x02
    1260:	6b 83       	std	Y+3, r22	; 0x03
    1262:	7c 83       	std	Y+4, r23	; 0x04
    1264:	8d 83       	std	Y+5, r24	; 0x05
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	2f 83       	std	Y+7, r18	; 0x07
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_LOW);
	DIO_setPortVAL(copyLCDNum.PORT_DATA_PIN_NUM, copyCMD);
	LCD_enableSignal(LCD);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_LOW);
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	LCD_getData(copyLCDNum , copyCMD >> 4);
    1272:	8f 81       	ldd	r24, Y+7	; 0x07
    1274:	82 95       	swap	r24
    1276:	8f 70       	andi	r24, 0x0F	; 15
    1278:	28 2f       	mov	r18, r24
    127a:	49 81       	ldd	r20, Y+1	; 0x01
    127c:	5a 81       	ldd	r21, Y+2	; 0x02
    127e:	6b 81       	ldd	r22, Y+3	; 0x03
    1280:	7c 81       	ldd	r23, Y+4	; 0x04
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_getData>
	LCD_enableSignal(LCD);
    128a:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <LCD>
    128e:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <LCD+0x1>
    1292:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <LCD+0x2>
    1296:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <LCD+0x3>
    129a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <LCD+0x4>
    129e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <LCD+0x5>
    12a2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enableSignal>
	LCD_getData(copyLCDNum,copyCMD);
    12a6:	2f 81       	ldd	r18, Y+7	; 0x07
    12a8:	49 81       	ldd	r20, Y+1	; 0x01
    12aa:	5a 81       	ldd	r21, Y+2	; 0x02
    12ac:	6b 81       	ldd	r22, Y+3	; 0x03
    12ae:	7c 81       	ldd	r23, Y+4	; 0x04
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_getData>
	LCD_enableSignal(LCD);
    12b8:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <LCD>
    12bc:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <LCD+0x1>
    12c0:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <LCD+0x2>
    12c4:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <LCD+0x3>
    12c8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <LCD+0x4>
    12cc:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <LCD+0x5>
    12d0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enableSignal>
#endif
}
    12d4:	00 00       	nop
    12d6:	27 96       	adiw	r28, 0x07	; 7
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <LCD_writeChar>:
 * @param1 : copyLCDNum
 * @param2 : copyChar
 * @retVal : void
 */
void LCD_writeChar(PINS_LCD copyLCDNum, uint_8 copyChar)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <LCD_writeChar+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <LCD_writeChar+0x8>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <LCD_writeChar+0xa>
    12f2:	1f 92       	push	r1
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	49 83       	std	Y+1, r20	; 0x01
    12fa:	5a 83       	std	Y+2, r21	; 0x02
    12fc:	6b 83       	std	Y+3, r22	; 0x03
    12fe:	7c 83       	std	Y+4, r23	; 0x04
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	2f 83       	std	Y+7, r18	; 0x07
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_HIGH);
	DIO_setPortVAL(copyLCDNum.PORT_DATA_PIN_NUM, copyChar);
	LCD_enableSignal(LCD);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_HIGH);
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	LCD_getData(copyLCDNum , copyChar >> 4);
    130e:	8f 81       	ldd	r24, Y+7	; 0x07
    1310:	82 95       	swap	r24
    1312:	8f 70       	andi	r24, 0x0F	; 15
    1314:	28 2f       	mov	r18, r24
    1316:	49 81       	ldd	r20, Y+1	; 0x01
    1318:	5a 81       	ldd	r21, Y+2	; 0x02
    131a:	6b 81       	ldd	r22, Y+3	; 0x03
    131c:	7c 81       	ldd	r23, Y+4	; 0x04
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_getData>
	LCD_enableSignal(LCD);
    1326:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <LCD>
    132a:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <LCD+0x1>
    132e:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <LCD+0x2>
    1332:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <LCD+0x3>
    1336:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <LCD+0x4>
    133a:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <LCD+0x5>
    133e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enableSignal>
	LCD_getData(copyLCDNum,copyChar);
    1342:	2f 81       	ldd	r18, Y+7	; 0x07
    1344:	49 81       	ldd	r20, Y+1	; 0x01
    1346:	5a 81       	ldd	r21, Y+2	; 0x02
    1348:	6b 81       	ldd	r22, Y+3	; 0x03
    134a:	7c 81       	ldd	r23, Y+4	; 0x04
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_getData>
	LCD_enableSignal(LCD);
    1354:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <LCD>
    1358:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <LCD+0x1>
    135c:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <LCD+0x2>
    1360:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <LCD+0x3>
    1364:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <LCD+0x4>
    1368:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <LCD+0x5>
    136c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enableSignal>
#endif
}
    1370:	00 00       	nop
    1372:	27 96       	adiw	r28, 0x07	; 7
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <LCD_writeSTR>:
 * @param1 : copyLCDNum
 * @param2 : copySTR
 * @retVal : void
 */
void LCD_writeSTR(PINS_LCD copyLCDNum, uint_8 *copySTR)
{
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	28 97       	sbiw	r28, 0x08	; 8
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	49 83       	std	Y+1, r20	; 0x01
    139a:	5a 83       	std	Y+2, r21	; 0x02
    139c:	6b 83       	std	Y+3, r22	; 0x03
    139e:	7c 83       	std	Y+4, r23	; 0x04
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	9e 83       	std	Y+6, r25	; 0x06
    13a4:	38 87       	std	Y+8, r19	; 0x08
    13a6:	2f 83       	std	Y+7, r18	; 0x07
	while(*copySTR)
    13a8:	12 c0       	rjmp	.+36     	; 0x13ce <LCD_writeSTR+0x4a>
	{
		LCD_writeChar(copyLCDNum, *copySTR++);
    13aa:	8f 81       	ldd	r24, Y+7	; 0x07
    13ac:	98 85       	ldd	r25, Y+8	; 0x08
    13ae:	9c 01       	movw	r18, r24
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	38 87       	std	Y+8, r19	; 0x08
    13b6:	2f 83       	std	Y+7, r18	; 0x07
    13b8:	fc 01       	movw	r30, r24
    13ba:	80 81       	ld	r24, Z
    13bc:	28 2f       	mov	r18, r24
    13be:	49 81       	ldd	r20, Y+1	; 0x01
    13c0:	5a 81       	ldd	r21, Y+2	; 0x02
    13c2:	6b 81       	ldd	r22, Y+3	; 0x03
    13c4:	7c 81       	ldd	r23, Y+4	; 0x04
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_writeChar>
 * @param2 : copySTR
 * @retVal : void
 */
void LCD_writeSTR(PINS_LCD copyLCDNum, uint_8 *copySTR)
{
	while(*copySTR)
    13ce:	8f 81       	ldd	r24, Y+7	; 0x07
    13d0:	98 85       	ldd	r25, Y+8	; 0x08
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 81       	ld	r24, Z
    13d6:	88 23       	and	r24, r24
    13d8:	41 f7       	brne	.-48     	; 0x13aa <LCD_writeSTR+0x26>
	{
		LCD_writeChar(copyLCDNum, *copySTR++);
	}
}
    13da:	00 00       	nop
    13dc:	28 96       	adiw	r28, 0x08	; 8
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <LCD_writeNum_u8>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u8(PINS_LCD copyLCDNum, uint_8 *copyNum)
{
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	2d 97       	sbiw	r28, 0x0d	; 13
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	4e 83       	std	Y+6, r20	; 0x06
    1404:	5f 83       	std	Y+7, r21	; 0x07
    1406:	68 87       	std	Y+8, r22	; 0x08
    1408:	79 87       	std	Y+9, r23	; 0x09
    140a:	8a 87       	std	Y+10, r24	; 0x0a
    140c:	9b 87       	std	Y+11, r25	; 0x0b
    140e:	3d 87       	std	Y+13, r19	; 0x0d
    1410:	2c 87       	std	Y+12, r18	; 0x0c
	uint_8 Ret[5];
	LCD_convertNum_u8(copyNum, &Ret);
    1412:	8c 85       	ldd	r24, Y+12	; 0x0c
    1414:	9d 85       	ldd	r25, Y+13	; 0x0d
    1416:	28 2f       	mov	r18, r24
    1418:	ce 01       	movw	r24, r28
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	bc 01       	movw	r22, r24
    141e:	82 2f       	mov	r24, r18
    1420:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_convertNum_u8>
	LCD_writeSTR(copyLCDNum, Ret);
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	9c 01       	movw	r18, r24
    142a:	4e 81       	ldd	r20, Y+6	; 0x06
    142c:	5f 81       	ldd	r21, Y+7	; 0x07
    142e:	68 85       	ldd	r22, Y+8	; 0x08
    1430:	79 85       	ldd	r23, Y+9	; 0x09
    1432:	8a 85       	ldd	r24, Y+10	; 0x0a
    1434:	9b 85       	ldd	r25, Y+11	; 0x0b
    1436:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_writeSTR>
}
    143a:	00 00       	nop
    143c:	2d 96       	adiw	r28, 0x0d	; 13
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <LCD_writeNum_u16>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u16(PINS_LCD copyLCDNum, uint_16 *copyNum)
{
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	62 97       	sbiw	r28, 0x12	; 18
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	4b 87       	std	Y+11, r20	; 0x0b
    1464:	5c 87       	std	Y+12, r21	; 0x0c
    1466:	6d 87       	std	Y+13, r22	; 0x0d
    1468:	7e 87       	std	Y+14, r23	; 0x0e
    146a:	8f 87       	std	Y+15, r24	; 0x0f
    146c:	98 8b       	std	Y+16, r25	; 0x10
    146e:	3a 8b       	std	Y+18, r19	; 0x12
    1470:	29 8b       	std	Y+17, r18	; 0x11
	uint_16 Ret[5];
	LCD_convertNum_u16(copyNum, &Ret);
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	9a 89       	ldd	r25, Y+18	; 0x12
    1476:	9e 01       	movw	r18, r28
    1478:	2f 5f       	subi	r18, 0xFF	; 255
    147a:	3f 4f       	sbci	r19, 0xFF	; 255
    147c:	b9 01       	movw	r22, r18
    147e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCD_convertNum_u16>
	LCD_writeSTR(copyLCDNum, Ret);
    1482:	ce 01       	movw	r24, r28
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	9c 01       	movw	r18, r24
    1488:	4b 85       	ldd	r20, Y+11	; 0x0b
    148a:	5c 85       	ldd	r21, Y+12	; 0x0c
    148c:	6d 85       	ldd	r22, Y+13	; 0x0d
    148e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1490:	8f 85       	ldd	r24, Y+15	; 0x0f
    1492:	98 89       	ldd	r25, Y+16	; 0x10
    1494:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_writeSTR>
}
    1498:	00 00       	nop
    149a:	62 96       	adiw	r28, 0x12	; 18
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <LCD_writeNum_u32>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u32(PINS_LCD copyLCDNum, uint_32 *copyNum)
{
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	6c 97       	sbiw	r28, 0x1c	; 28
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	4d 8b       	std	Y+21, r20	; 0x15
    14c2:	5e 8b       	std	Y+22, r21	; 0x16
    14c4:	6f 8b       	std	Y+23, r22	; 0x17
    14c6:	78 8f       	std	Y+24, r23	; 0x18
    14c8:	89 8f       	std	Y+25, r24	; 0x19
    14ca:	9a 8f       	std	Y+26, r25	; 0x1a
    14cc:	3c 8f       	std	Y+28, r19	; 0x1c
    14ce:	2b 8f       	std	Y+27, r18	; 0x1b
	uint_32 Ret[5];
	LCD_convertNum_u32(copyNum, &Ret);
    14d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d4:	09 2e       	mov	r0, r25
    14d6:	00 0c       	add	r0, r0
    14d8:	aa 0b       	sbc	r26, r26
    14da:	bb 0b       	sbc	r27, r27
    14dc:	9e 01       	movw	r18, r28
    14de:	2f 5f       	subi	r18, 0xFF	; 255
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
    14e2:	a9 01       	movw	r20, r18
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_convertNum_u32>
	LCD_writeSTR(copyLCDNum, Ret);
    14ec:	ce 01       	movw	r24, r28
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	9c 01       	movw	r18, r24
    14f2:	4d 89       	ldd	r20, Y+21	; 0x15
    14f4:	5e 89       	ldd	r21, Y+22	; 0x16
    14f6:	6f 89       	ldd	r22, Y+23	; 0x17
    14f8:	78 8d       	ldd	r23, Y+24	; 0x18
    14fa:	89 8d       	ldd	r24, Y+25	; 0x19
    14fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14fe:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_writeSTR>
}
    1502:	00 00       	nop
    1504:	6c 96       	adiw	r28, 0x1c	; 28
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <LCD_writeCharPosition>:
 * @param3 : copyColumn
 * @param4 : copyChar
 * @retVal : void
 */
void LCD_writeCharPosition(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn, uint_8 copyChar)
{
    1516:	ef 92       	push	r14
    1518:	0f 93       	push	r16
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	29 97       	sbiw	r28, 0x09	; 9
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	49 83       	std	Y+1, r20	; 0x01
    1530:	5a 83       	std	Y+2, r21	; 0x02
    1532:	6b 83       	std	Y+3, r22	; 0x03
    1534:	7c 83       	std	Y+4, r23	; 0x04
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	2f 83       	std	Y+7, r18	; 0x07
    153c:	08 87       	std	Y+8, r16	; 0x08
    153e:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1540:	08 85       	ldd	r16, Y+8	; 0x08
    1542:	2f 81       	ldd	r18, Y+7	; 0x07
    1544:	49 81       	ldd	r20, Y+1	; 0x01
    1546:	5a 81       	ldd	r21, Y+2	; 0x02
    1548:	6b 81       	ldd	r22, Y+3	; 0x03
    154a:	7c 81       	ldd	r23, Y+4	; 0x04
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_setCursorPosition>
	LCD_writeChar(copyLCDNum, copyChar);
    1554:	29 85       	ldd	r18, Y+9	; 0x09
    1556:	49 81       	ldd	r20, Y+1	; 0x01
    1558:	5a 81       	ldd	r21, Y+2	; 0x02
    155a:	6b 81       	ldd	r22, Y+3	; 0x03
    155c:	7c 81       	ldd	r23, Y+4	; 0x04
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_writeChar>
}
    1566:	00 00       	nop
    1568:	29 96       	adiw	r28, 0x09	; 9
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	0f 91       	pop	r16
    157a:	ef 90       	pop	r14
    157c:	08 95       	ret

0000157e <LCD_writeSTRPosition>:
 * @param3 : copyColumn
 * @param4 : copySTR
 * @retVal : void
 */
void LCD_writeSTRPosition(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_8 *copySTR)
{
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	2a 97       	sbiw	r28, 0x0a	; 10
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	49 83       	std	Y+1, r20	; 0x01
    159a:	5a 83       	std	Y+2, r21	; 0x02
    159c:	6b 83       	std	Y+3, r22	; 0x03
    159e:	7c 83       	std	Y+4, r23	; 0x04
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	2f 83       	std	Y+7, r18	; 0x07
    15a6:	08 87       	std	Y+8, r16	; 0x08
    15a8:	fa 86       	std	Y+10, r15	; 0x0a
    15aa:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    15ac:	08 85       	ldd	r16, Y+8	; 0x08
    15ae:	2f 81       	ldd	r18, Y+7	; 0x07
    15b0:	49 81       	ldd	r20, Y+1	; 0x01
    15b2:	5a 81       	ldd	r21, Y+2	; 0x02
    15b4:	6b 81       	ldd	r22, Y+3	; 0x03
    15b6:	7c 81       	ldd	r23, Y+4	; 0x04
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_setCursorPosition>
	LCD_writeSTR(copyLCDNum, copySTR);
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	9c 01       	movw	r18, r24
    15c6:	49 81       	ldd	r20, Y+1	; 0x01
    15c8:	5a 81       	ldd	r21, Y+2	; 0x02
    15ca:	6b 81       	ldd	r22, Y+3	; 0x03
    15cc:	7c 81       	ldd	r23, Y+4	; 0x04
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_writeSTR>
}
    15d6:	00 00       	nop
    15d8:	2a 96       	adiw	r28, 0x0a	; 10
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	08 95       	ret

000015f0 <LCD_writeNum_u8Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u8Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_8 *copyNum)
{
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	2a 97       	sbiw	r28, 0x0a	; 10
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	49 83       	std	Y+1, r20	; 0x01
    160c:	5a 83       	std	Y+2, r21	; 0x02
    160e:	6b 83       	std	Y+3, r22	; 0x03
    1610:	7c 83       	std	Y+4, r23	; 0x04
    1612:	8d 83       	std	Y+5, r24	; 0x05
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	2f 83       	std	Y+7, r18	; 0x07
    1618:	08 87       	std	Y+8, r16	; 0x08
    161a:	fa 86       	std	Y+10, r15	; 0x0a
    161c:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    161e:	08 85       	ldd	r16, Y+8	; 0x08
    1620:	2f 81       	ldd	r18, Y+7	; 0x07
    1622:	49 81       	ldd	r20, Y+1	; 0x01
    1624:	5a 81       	ldd	r21, Y+2	; 0x02
    1626:	6b 81       	ldd	r22, Y+3	; 0x03
    1628:	7c 81       	ldd	r23, Y+4	; 0x04
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_setCursorPosition>
	LCD_writeNum_u8(copyLCDNum, copyNum);
    1632:	89 85       	ldd	r24, Y+9	; 0x09
    1634:	9a 85       	ldd	r25, Y+10	; 0x0a
    1636:	9c 01       	movw	r18, r24
    1638:	49 81       	ldd	r20, Y+1	; 0x01
    163a:	5a 81       	ldd	r21, Y+2	; 0x02
    163c:	6b 81       	ldd	r22, Y+3	; 0x03
    163e:	7c 81       	ldd	r23, Y+4	; 0x04
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	0e 94 f7 09 	call	0x13ee	; 0x13ee <LCD_writeNum_u8>
}
    1648:	00 00       	nop
    164a:	2a 96       	adiw	r28, 0x0a	; 10
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	0f 91       	pop	r16
    165c:	ff 90       	pop	r15
    165e:	ef 90       	pop	r14
    1660:	08 95       	ret

00001662 <LCD_writeNum_u16Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u16Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_16 *copyNum)
{
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	2a 97       	sbiw	r28, 0x0a	; 10
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	49 83       	std	Y+1, r20	; 0x01
    167e:	5a 83       	std	Y+2, r21	; 0x02
    1680:	6b 83       	std	Y+3, r22	; 0x03
    1682:	7c 83       	std	Y+4, r23	; 0x04
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	2f 83       	std	Y+7, r18	; 0x07
    168a:	08 87       	std	Y+8, r16	; 0x08
    168c:	fa 86       	std	Y+10, r15	; 0x0a
    168e:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1690:	08 85       	ldd	r16, Y+8	; 0x08
    1692:	2f 81       	ldd	r18, Y+7	; 0x07
    1694:	49 81       	ldd	r20, Y+1	; 0x01
    1696:	5a 81       	ldd	r21, Y+2	; 0x02
    1698:	6b 81       	ldd	r22, Y+3	; 0x03
    169a:	7c 81       	ldd	r23, Y+4	; 0x04
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_setCursorPosition>
	LCD_writeNum_u16(copyLCDNum, copyNum);
    16a4:	89 85       	ldd	r24, Y+9	; 0x09
    16a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a8:	9c 01       	movw	r18, r24
    16aa:	49 81       	ldd	r20, Y+1	; 0x01
    16ac:	5a 81       	ldd	r21, Y+2	; 0x02
    16ae:	6b 81       	ldd	r22, Y+3	; 0x03
    16b0:	7c 81       	ldd	r23, Y+4	; 0x04
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	9e 81       	ldd	r25, Y+6	; 0x06
    16b6:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_writeNum_u16>
}
    16ba:	00 00       	nop
    16bc:	2a 96       	adiw	r28, 0x0a	; 10
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	08 95       	ret

000016d4 <LCD_writeNum_u32Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u32Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_32 *copyNum)
{
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	2a 97       	sbiw	r28, 0x0a	; 10
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	49 83       	std	Y+1, r20	; 0x01
    16f0:	5a 83       	std	Y+2, r21	; 0x02
    16f2:	6b 83       	std	Y+3, r22	; 0x03
    16f4:	7c 83       	std	Y+4, r23	; 0x04
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	2f 83       	std	Y+7, r18	; 0x07
    16fc:	08 87       	std	Y+8, r16	; 0x08
    16fe:	fa 86       	std	Y+10, r15	; 0x0a
    1700:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1702:	08 85       	ldd	r16, Y+8	; 0x08
    1704:	2f 81       	ldd	r18, Y+7	; 0x07
    1706:	49 81       	ldd	r20, Y+1	; 0x01
    1708:	5a 81       	ldd	r21, Y+2	; 0x02
    170a:	6b 81       	ldd	r22, Y+3	; 0x03
    170c:	7c 81       	ldd	r23, Y+4	; 0x04
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_setCursorPosition>
	LCD_writeNum_u32(copyLCDNum, copyNum);
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	9c 01       	movw	r18, r24
    171c:	49 81       	ldd	r20, Y+1	; 0x01
    171e:	5a 81       	ldd	r21, Y+2	; 0x02
    1720:	6b 81       	ldd	r22, Y+3	; 0x03
    1722:	7c 81       	ldd	r23, Y+4	; 0x04
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	0e 94 56 0a 	call	0x14ac	; 0x14ac <LCD_writeNum_u32>
}
    172c:	00 00       	nop
    172e:	2a 96       	adiw	r28, 0x0a	; 10
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	0f 91       	pop	r16
    1740:	ff 90       	pop	r15
    1742:	ef 90       	pop	r14
    1744:	08 95       	ret

00001746 <LCD_getData>:
 * @param1 : copyLCDNum
 * @param2 : copyCMD
 * @retVal : void
 */
static void LCD_getData(PINS_LCD copyLCDNum, _LCD_COMMANDS copyCMD)
{
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	00 d0       	rcall	.+0      	; 0x174c <LCD_getData+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <LCD_getData+0x8>
    174e:	00 d0       	rcall	.+0      	; 0x1750 <LCD_getData+0xa>
    1750:	1f 92       	push	r1
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	49 83       	std	Y+1, r20	; 0x01
    1758:	5a 83       	std	Y+2, r21	; 0x02
    175a:	6b 83       	std	Y+3, r22	; 0x03
    175c:	7c 83       	std	Y+4, r23	; 0x04
    175e:	8d 83       	std	Y+5, r24	; 0x05
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	2f 83       	std	Y+7, r18	; 0x07
	DIO_setPinVAL(copyLCDNum.D[0], (copyCMD >> 0) & (uint_8)0x01);
    1764:	8f 81       	ldd	r24, Y+7	; 0x07
    1766:	98 2f       	mov	r25, r24
    1768:	91 70       	andi	r25, 0x01	; 1
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	69 2f       	mov	r22, r25
    176e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyLCDNum.D[1], (copyCMD >> 1) & (uint_8)0x01);
    1772:	8f 81       	ldd	r24, Y+7	; 0x07
    1774:	86 95       	lsr	r24
    1776:	98 2f       	mov	r25, r24
    1778:	91 70       	andi	r25, 0x01	; 1
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	69 2f       	mov	r22, r25
    177e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyLCDNum.D[2], (copyCMD >> 2) & (uint_8)0x01);
    1782:	8f 81       	ldd	r24, Y+7	; 0x07
    1784:	86 95       	lsr	r24
    1786:	86 95       	lsr	r24
    1788:	98 2f       	mov	r25, r24
    178a:	91 70       	andi	r25, 0x01	; 1
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	69 2f       	mov	r22, r25
    1790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyLCDNum.D[3], (copyCMD >> 3) & (uint_8)0x01);
    1794:	8f 81       	ldd	r24, Y+7	; 0x07
    1796:	86 95       	lsr	r24
    1798:	86 95       	lsr	r24
    179a:	86 95       	lsr	r24
    179c:	98 2f       	mov	r25, r24
    179e:	91 70       	andi	r25, 0x01	; 1
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	69 2f       	mov	r22, r25
    17a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
}
    17a8:	00 00       	nop
    17aa:	27 96       	adiw	r28, 0x07	; 7
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <LCD_enableSignal>:
 * @brief  : LCD enable signal static function
 * @param1 : copyLCDNum
 * @retVal : void
 */
static void LCD_enableSignal(PINS_LCD copyLCDNum)
{
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	a6 97       	sbiw	r28, 0x26	; 38
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	49 a3       	std	Y+33, r20	; 0x21
    17d2:	5a a3       	std	Y+34, r21	; 0x22
    17d4:	6b a3       	std	Y+35, r22	; 0x23
    17d6:	7c a3       	std	Y+36, r23	; 0x24
    17d8:	8d a3       	std	Y+37, r24	; 0x25
    17da:	9e a3       	std	Y+38, r25	; 0x26
#if (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_HIGH);
    17dc:	89 a1       	ldd	r24, Y+33	; 0x21
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a0 ea       	ldi	r26, 0xA0	; 160
    17ea:	b0 e4       	ldi	r27, 0x40	; 64
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	ab 83       	std	Y+3, r26	; 0x03
    17f2:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    17f4:	2b ea       	ldi	r18, 0xAB	; 171
    17f6:	3a ea       	ldi	r19, 0xAA	; 170
    17f8:	4a ea       	ldi	r20, 0xAA	; 170
    17fa:	5e e3       	ldi	r21, 0x3E	; 62
    17fc:	69 81       	ldd	r22, Y+1	; 0x01
    17fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	af 83       	std	Y+7, r26	; 0x07
    1812:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5e e3       	ldi	r21, 0x3E	; 62
    181c:	69 81       	ldd	r22, Y+1	; 0x01
    181e:	7a 81       	ldd	r23, Y+2	; 0x02
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	89 87       	std	Y+9, r24	; 0x09
    182e:	9a 87       	std	Y+10, r25	; 0x0a
    1830:	ab 87       	std	Y+11, r26	; 0x0b
    1832:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e8       	ldi	r20, 0x80	; 128
    183a:	5f e3       	ldi	r21, 0x3F	; 63
    183c:	6d 81       	ldd	r22, Y+5	; 0x05
    183e:	7e 81       	ldd	r23, Y+6	; 0x06
    1840:	8f 81       	ldd	r24, Y+7	; 0x07
    1842:	98 85       	ldd	r25, Y+8	; 0x08
    1844:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    1848:	88 23       	and	r24, r24
    184a:	1c f4       	brge	.+6      	; 0x1852 <LCD_enableSignal+0x96>
		__ticks = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	8d 87       	std	Y+13, r24	; 0x0d
    1850:	b2 c0       	rjmp	.+356    	; 0x19b6 <LCD_enableSignal+0x1fa>
	else if (__tmp2 > 65535)
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	69 85       	ldd	r22, Y+9	; 0x09
    185c:	7a 85       	ldd	r23, Y+10	; 0x0a
    185e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1860:	9c 85       	ldd	r25, Y+12	; 0x0c
    1862:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    1866:	18 16       	cp	r1, r24
    1868:	0c f0       	brlt	.+2      	; 0x186c <LCD_enableSignal+0xb0>
    186a:	7b c0       	rjmp	.+246    	; 0x1962 <LCD_enableSignal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a e7       	ldi	r20, 0x7A	; 122
    1872:	54 e4       	ldi	r21, 0x44	; 68
    1874:	69 81       	ldd	r22, Y+1	; 0x01
    1876:	7a 81       	ldd	r23, Y+2	; 0x02
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	0e 94 c9 13 	call	0x2792	; 0x2792 <__divsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8e 87       	std	Y+14, r24	; 0x0e
    1886:	9f 87       	std	Y+15, r25	; 0x0f
    1888:	a8 8b       	std	Y+16, r26	; 0x10
    188a:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a e7       	ldi	r20, 0x7A	; 122
    1892:	53 e4       	ldi	r21, 0x43	; 67
    1894:	6e 85       	ldd	r22, Y+14	; 0x0e
    1896:	7f 85       	ldd	r23, Y+15	; 0x0f
    1898:	88 89       	ldd	r24, Y+16	; 0x10
    189a:	99 89       	ldd	r25, Y+17	; 0x11
    189c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	8a 8b       	std	Y+18, r24	; 0x12
    18a6:	9b 8b       	std	Y+19, r25	; 0x13
    18a8:	ac 8b       	std	Y+20, r26	; 0x14
    18aa:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	6a 89       	ldd	r22, Y+18	; 0x12
    18b6:	7b 89       	ldd	r23, Y+19	; 0x13
    18b8:	8c 89       	ldd	r24, Y+20	; 0x14
    18ba:	9d 89       	ldd	r25, Y+21	; 0x15
    18bc:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    18c0:	88 23       	and	r24, r24
    18c2:	2c f4       	brge	.+10     	; 0x18ce <LCD_enableSignal+0x112>
		__ticks = 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9f 8b       	std	Y+23, r25	; 0x17
    18ca:	8e 8b       	std	Y+22, r24	; 0x16
    18cc:	3f c0       	rjmp	.+126    	; 0x194c <LCD_enableSignal+0x190>
	else if (__tmp > 65535)
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	6a 89       	ldd	r22, Y+18	; 0x12
    18d8:	7b 89       	ldd	r23, Y+19	; 0x13
    18da:	8c 89       	ldd	r24, Y+20	; 0x14
    18dc:	9d 89       	ldd	r25, Y+21	; 0x15
    18de:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    18e2:	18 16       	cp	r1, r24
    18e4:	4c f5       	brge	.+82     	; 0x1938 <LCD_enableSignal+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	6e 85       	ldd	r22, Y+14	; 0x0e
    18f0:	7f 85       	ldd	r23, Y+15	; 0x0f
    18f2:	88 89       	ldd	r24, Y+16	; 0x10
    18f4:	99 89       	ldd	r25, Y+17	; 0x11
    18f6:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	bc 01       	movw	r22, r24
    1900:	cd 01       	movw	r24, r26
    1902:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	9f 8b       	std	Y+23, r25	; 0x17
    190c:	8e 8b       	std	Y+22, r24	; 0x16
    190e:	0f c0       	rjmp	.+30     	; 0x192e <LCD_enableSignal+0x172>
    1910:	89 e1       	ldi	r24, 0x19	; 25
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	99 8f       	std	Y+25, r25	; 0x19
    1916:	88 8f       	std	Y+24, r24	; 0x18
    1918:	88 8d       	ldd	r24, Y+24	; 0x18
    191a:	99 8d       	ldd	r25, Y+25	; 0x19
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <LCD_enableSignal+0x160>
    1920:	99 8f       	std	Y+25, r25	; 0x19
    1922:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1924:	8e 89       	ldd	r24, Y+22	; 0x16
    1926:	9f 89       	ldd	r25, Y+23	; 0x17
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	9f 8b       	std	Y+23, r25	; 0x17
    192c:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192e:	8e 89       	ldd	r24, Y+22	; 0x16
    1930:	9f 89       	ldd	r25, Y+23	; 0x17
    1932:	89 2b       	or	r24, r25
    1934:	69 f7       	brne	.-38     	; 0x1910 <LCD_enableSignal+0x154>
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <LCD_enableSignal+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1938:	6a 89       	ldd	r22, Y+18	; 0x12
    193a:	7b 89       	ldd	r23, Y+19	; 0x13
    193c:	8c 89       	ldd	r24, Y+20	; 0x14
    193e:	9d 89       	ldd	r25, Y+21	; 0x15
    1940:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	9f 8b       	std	Y+23, r25	; 0x17
    194a:	8e 8b       	std	Y+22, r24	; 0x16
    194c:	8e 89       	ldd	r24, Y+22	; 0x16
    194e:	9f 89       	ldd	r25, Y+23	; 0x17
    1950:	9b 8f       	std	Y+27, r25	; 0x1b
    1952:	8a 8f       	std	Y+26, r24	; 0x1a
    1954:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1956:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_enableSignal+0x19c>
    195c:	9b 8f       	std	Y+27, r25	; 0x1b
    195e:	8a 8f       	std	Y+26, r24	; 0x1a
    1960:	2a c0       	rjmp	.+84     	; 0x19b6 <LCD_enableSignal+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	53 e4       	ldi	r21, 0x43	; 67
    196a:	6d 81       	ldd	r22, Y+5	; 0x05
    196c:	7e 81       	ldd	r23, Y+6	; 0x06
    196e:	8f 81       	ldd	r24, Y+7	; 0x07
    1970:	98 85       	ldd	r25, Y+8	; 0x08
    1972:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    1976:	18 16       	cp	r1, r24
    1978:	ac f4       	brge	.+42     	; 0x19a4 <LCD_enableSignal+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    197a:	69 85       	ldd	r22, Y+9	; 0x09
    197c:	7a 85       	ldd	r23, Y+10	; 0x0a
    197e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1980:	9c 85       	ldd	r25, Y+12	; 0x0c
    1982:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9d 8f       	std	Y+29, r25	; 0x1d
    198c:	8c 8f       	std	Y+28, r24	; 0x1c
    198e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1990:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1992:	9f 8f       	std	Y+31, r25	; 0x1f
    1994:	8e 8f       	std	Y+30, r24	; 0x1e
    1996:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1998:	9f 8d       	ldd	r25, Y+31	; 0x1f
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_enableSignal+0x1de>
    199e:	9f 8f       	std	Y+31, r25	; 0x1f
    19a0:	8e 8f       	std	Y+30, r24	; 0x1e
    19a2:	0f c0       	rjmp	.+30     	; 0x19c2 <LCD_enableSignal+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19a4:	6d 81       	ldd	r22, Y+5	; 0x05
    19a6:	7e 81       	ldd	r23, Y+6	; 0x06
    19a8:	8f 81       	ldd	r24, Y+7	; 0x07
    19aa:	98 85       	ldd	r25, Y+8	; 0x08
    19ac:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8d 87       	std	Y+13, r24	; 0x0d
    19b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b8:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19ba:	88 a1       	ldd	r24, Y+32	; 0x20
    19bc:	8a 95       	dec	r24
    19be:	f1 f7       	brne	.-4      	; 0x19bc <LCD_enableSignal+0x200>
    19c0:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(5);
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_LOW);
    19c2:	89 a1       	ldd	r24, Y+33	; 0x21
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
#elif (_LCD_MODE == _8_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_HIGH);
	_delay_ms(5);
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_LOW);
#endif
}
    19ca:	00 00       	nop
    19cc:	a6 96       	adiw	r28, 0x26	; 38
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <LCD_setCursorPosition>:
* @param2 : copyRow
* @param3 : copyColumn
* @retVal : void
*/
static void LCD_setCursorPosition(PINS_LCD copyLCDNum , ROW_NUM copyRow , uint_8 copyColumn)
{
    19de:	0f 93       	push	r16
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	28 97       	sbiw	r28, 0x08	; 8
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	49 83       	std	Y+1, r20	; 0x01
    19f6:	5a 83       	std	Y+2, r21	; 0x02
    19f8:	6b 83       	std	Y+3, r22	; 0x03
    19fa:	7c 83       	std	Y+4, r23	; 0x04
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	2f 83       	std	Y+7, r18	; 0x07
    1a02:	08 87       	std	Y+8, r16	; 0x08
	copyColumn--;
    1a04:	88 85       	ldd	r24, Y+8	; 0x08
    1a06:	81 50       	subi	r24, 0x01	; 1
    1a08:	88 87       	std	Y+8, r24	; 0x08
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	c1 f0       	breq	.+48     	; 0x1a46 <LCD_setCursorPosition+0x68>
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	91 05       	cpc	r25, r1
    1a1a:	1c f4       	brge	.+6      	; 0x1a22 <LCD_setCursorPosition+0x44>
    1a1c:	89 2b       	or	r24, r25
    1a1e:	39 f0       	breq	.+14     	; 0x1a2e <LCD_setCursorPosition+0x50>
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    1a20:	36 c0       	rjmp	.+108    	; 0x1a8e <LCD_setCursorPosition+0xb0>
*/
static void LCD_setCursorPosition(PINS_LCD copyLCDNum , ROW_NUM copyRow , uint_8 copyColumn)
{
	copyColumn--;
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	91 05       	cpc	r25, r1
    1a26:	d9 f0       	breq	.+54     	; 0x1a5e <LCD_setCursorPosition+0x80>
    1a28:	03 97       	sbiw	r24, 0x03	; 3
    1a2a:	29 f1       	breq	.+74     	; 0x1a76 <LCD_setCursorPosition+0x98>
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    1a2c:	30 c0       	rjmp	.+96     	; 0x1a8e <LCD_setCursorPosition+0xb0>
{
	copyColumn--;
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
    1a2e:	88 85       	ldd	r24, Y+8	; 0x08
    1a30:	80 58       	subi	r24, 0x80	; 128
    1a32:	28 2f       	mov	r18, r24
    1a34:	49 81       	ldd	r20, Y+1	; 0x01
    1a36:	5a 81       	ldd	r21, Y+2	; 0x02
    1a38:	6b 81       	ldd	r22, Y+3	; 0x03
    1a3a:	7c 81       	ldd	r23, Y+4	; 0x04
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
    1a44:	24 c0       	rjmp	.+72     	; 0x1a8e <LCD_setCursorPosition+0xb0>
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
    1a46:	88 85       	ldd	r24, Y+8	; 0x08
    1a48:	80 54       	subi	r24, 0x40	; 64
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	49 81       	ldd	r20, Y+1	; 0x01
    1a4e:	5a 81       	ldd	r21, Y+2	; 0x02
    1a50:	6b 81       	ldd	r22, Y+3	; 0x03
    1a52:	7c 81       	ldd	r23, Y+4	; 0x04
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
    1a5c:	18 c0       	rjmp	.+48     	; 0x1a8e <LCD_setCursorPosition+0xb0>
		case ROW3:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_3 + copyColumn)); break;
    1a5e:	88 85       	ldd	r24, Y+8	; 0x08
    1a60:	8c 56       	subi	r24, 0x6C	; 108
    1a62:	28 2f       	mov	r18, r24
    1a64:	49 81       	ldd	r20, Y+1	; 0x01
    1a66:	5a 81       	ldd	r21, Y+2	; 0x02
    1a68:	6b 81       	ldd	r22, Y+3	; 0x03
    1a6a:	7c 81       	ldd	r23, Y+4	; 0x04
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a70:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
    1a74:	0c c0       	rjmp	.+24     	; 0x1a8e <LCD_setCursorPosition+0xb0>
		case ROW4:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_4 + copyColumn)); break;
    1a76:	88 85       	ldd	r24, Y+8	; 0x08
    1a78:	8c 52       	subi	r24, 0x2C	; 44
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	49 81       	ldd	r20, Y+1	; 0x01
    1a7e:	5a 81       	ldd	r21, Y+2	; 0x02
    1a80:	6b 81       	ldd	r22, Y+3	; 0x03
    1a82:	7c 81       	ldd	r23, Y+4	; 0x04
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_writeCMD>
    1a8c:	00 00       	nop
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    1a8e:	00 00       	nop
    1a90:	28 96       	adiw	r28, 0x08	; 8
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <LCD_convertNum_u8>:
* @param1 : copyLCDNum
* @param2 : copySTR
* @retVal : void
*/
static void LCD_convertNum_u8(uint_8 copyNum , uint_8 *copySTR)
{
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <LCD_convertNum_u8+0x6>
    1aaa:	1f 92       	push	r1
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	7b 83       	std	Y+3, r23	; 0x03
    1ab4:	6a 83       	std	Y+2, r22	; 0x02
	memset(copySTR , '\0' , 4);
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	44 e0       	ldi	r20, 0x04	; 4
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <memset>
	sprintf(copySTR , "%i", copyNum);
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	29 2f       	mov	r18, r25
    1ace:	2f 93       	push	r18
    1ad0:	8f 93       	push	r24
    1ad2:	89 ec       	ldi	r24, 0xC9	; 201
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	89 2f       	mov	r24, r25
    1ad8:	8f 93       	push	r24
    1ada:	89 ec       	ldi	r24, 0xC9	; 201
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	8f 93       	push	r24
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	8f 93       	push	r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	8f 93       	push	r24
    1ae8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <sprintf>
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
}
    1af8:	00 00       	nop
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	08 95       	ret

00001b06 <LCD_convertNum_u16>:
* @param1 : copyLCDNum
* @param2 : copyNum
* @retVal : void
*/
static void LCD_convertNum_u16(uint_16 copyNum , uint_8 *copySTR)
{
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <LCD_convertNum_u16+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <LCD_convertNum_u16+0x8>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	7c 83       	std	Y+4, r23	; 0x04
    1b18:	6b 83       	std	Y+3, r22	; 0x03
	memset(copySTR , '\0' , 6);
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	46 e0       	ldi	r20, 0x06	; 6
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <memset>
	sprintf(copySTR , "%i", copyNum);
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	8f 93       	push	r24
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	8f 93       	push	r24
    1b32:	89 ec       	ldi	r24, 0xC9	; 201
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	89 2f       	mov	r24, r25
    1b38:	8f 93       	push	r24
    1b3a:	89 ec       	ldi	r24, 0xC9	; 201
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	8f 93       	push	r24
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	8f 93       	push	r24
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	8f 93       	push	r24
    1b48:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <sprintf>
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
}
    1b58:	00 00       	nop
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	08 95       	ret

00001b68 <LCD_convertNum_u32>:
* @param1 : copyLCDNum
* @param2 : copyNum
* @retVal : void
*/
static void LCD_convertNum_u32(uint_32 copyNum , uint_8 *copySTR)
{
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <LCD_convertNum_u32+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <LCD_convertNum_u32+0x8>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <LCD_convertNum_u32+0xa>
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	69 83       	std	Y+1, r22	; 0x01
    1b78:	7a 83       	std	Y+2, r23	; 0x02
    1b7a:	8b 83       	std	Y+3, r24	; 0x03
    1b7c:	9c 83       	std	Y+4, r25	; 0x04
    1b7e:	5e 83       	std	Y+6, r21	; 0x06
    1b80:	4d 83       	std	Y+5, r20	; 0x05
	memset(copySTR , '\0' , 11);
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	4b e0       	ldi	r20, 0x0B	; 11
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <memset>
	sprintf(copySTR , "%i", copyNum);
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	8f 93       	push	r24
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	8f 93       	push	r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	8f 93       	push	r24
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	8f 93       	push	r24
    1ba2:	89 ec       	ldi	r24, 0xC9	; 201
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	89 2f       	mov	r24, r25
    1ba8:	8f 93       	push	r24
    1baa:	89 ec       	ldi	r24, 0xC9	; 201
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	8f 93       	push	r24
    1bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb2:	8f 93       	push	r24
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	8f 93       	push	r24
    1bb8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <sprintf>
    1bbc:	8d b7       	in	r24, 0x3d	; 61
    1bbe:	9e b7       	in	r25, 0x3e	; 62
    1bc0:	08 96       	adiw	r24, 0x08	; 8
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
}
    1bcc:	00 00       	nop
    1bce:	26 96       	adiw	r28, 0x06	; 6
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret

00001be0 <DCMOTOR_init>:
  * @brief   : Motors Initialization H-bridge l298 by Configure all pin IN0 ~ IN4 output.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_init(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <DCMOTOR_init+0x6>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <DCMOTOR_init+0x8>
    1be8:	1f 92       	push	r1
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	7d 83       	std	Y+5, r23	; 0x05
    1bf4:	6c 83       	std	Y+4, r22	; 0x04
	for(uint_8 count = Zero_INIT ; count < 2 ; count++)
    1bf6:	19 82       	std	Y+1, r1	; 0x01
    1bf8:	1d c0       	rjmp	.+58     	; 0x1c34 <DCMOTOR_init+0x54>
	{
		DIO_setPinDIR(copyMotor1.motor[count], _DIRECTION_PIN_OUTPUT);
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9e 01       	movw	r18, r28
    1c02:	2e 5f       	subi	r18, 0xFE	; 254
    1c04:	3f 4f       	sbci	r19, 0xFF	; 255
    1c06:	82 0f       	add	r24, r18
    1c08:	93 1f       	adc	r25, r19
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	80 81       	ld	r24, Z
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
		DIO_setPinDIR(copyMotor2.motor[count], _DIRECTION_PIN_OUTPUT);
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9e 01       	movw	r18, r28
    1c1c:	2c 5f       	subi	r18, 0xFC	; 252
    1c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c20:	82 0f       	add	r24, r18
    1c22:	93 1f       	adc	r25, r19
    1c24:	fc 01       	movw	r30, r24
    1c26:	80 81       	ld	r24, Z
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_init(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
	for(uint_8 count = Zero_INIT ; count < 2 ; count++)
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	8f 5f       	subi	r24, 0xFF	; 255
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	82 30       	cpi	r24, 0x02	; 2
    1c38:	00 f3       	brcs	.-64     	; 0x1bfa <DCMOTOR_init+0x1a>
	{
		DIO_setPinDIR(copyMotor1.motor[count], _DIRECTION_PIN_OUTPUT);
		DIO_setPinDIR(copyMotor2.motor[count], _DIRECTION_PIN_OUTPUT);
	}
}
    1c3a:	00 00       	nop
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	08 95       	ret

00001c4c <DCMOTOR_motorForward>:
  * @brief   : Motors move forward by configure pin high & next pin low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorForward(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <DCMOTOR_motorForward+0x6>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <DCMOTOR_motorForward+0x8>
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	7c 83       	std	Y+4, r23	; 0x04
    1c5e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_HIGH);
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_LOW);
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_HIGH);
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_LOW);
    1c78:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
}
    1c80:	00 00       	nop
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <DCMOTOR_motorReverse>:
  * @brief   : Motors move forward by configure pin low & next pin high.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorReverse(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <DCMOTOR_motorReverse+0x6>
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <DCMOTOR_motorReverse+0x8>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	7c 83       	std	Y+4, r23	; 0x04
    1ca2:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_HIGH);
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_HIGH);
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
}
    1cc4:	00 00       	nop
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <DCMOTOR_motorRight>:
  * @brief   : Motors move forward by configure all pins high but right motor in4 low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorRight(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <DCMOTOR_motorRight+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <DCMOTOR_motorRight+0x8>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	7c 83       	std	Y+4, r23	; 0x04
    1ce6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_LOW);
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_HIGH);
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
}
    1d08:	00 00       	nop
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	08 95       	ret

00001d18 <DCMOTOR_motorLeft>:
  * @brief   : Motors move forward by configure all pins high but left motor in2 low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorLeft(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <DCMOTOR_motorLeft+0x6>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <DCMOTOR_motorLeft+0x8>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	7c 83       	std	Y+4, r23	; 0x04
    1d2a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_HIGH);
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_LOW);
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
}
    1d4c:	00 00       	nop
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	08 95       	ret

00001d5c <DCMOTOR_motorStop>:
  * @brief   : Motors move forward by configure all pins low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorStop(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <DCMOTOR_motorStop+0x6>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <DCMOTOR_motorStop+0x8>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	7c 83       	std	Y+4, r23	; 0x04
    1d6e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_LOW);
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_LOW);
    1d88:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
}
    1d90:	00 00       	nop
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	08 95       	ret

00001da0 <KEYPAD_init>:
 *           keypad is DIRECTION_PIN_INPUTS & COLUMN PINS Directions DIRECTION_PIN_OUTPUT.
 * @param1 : copyKEYPAD
 * @retVal : void
 */
void KEYPAD_init(PINS_KEYPAD copyKEYPAD)
{
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	2a 97       	sbiw	r28, 0x0a	; 10
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	2b 83       	std	Y+3, r18	; 0x03
    1db6:	3c 83       	std	Y+4, r19	; 0x04
    1db8:	4d 83       	std	Y+5, r20	; 0x05
    1dba:	5e 83       	std	Y+6, r21	; 0x06
    1dbc:	6f 83       	std	Y+7, r22	; 0x07
    1dbe:	78 87       	std	Y+8, r23	; 0x08
    1dc0:	89 87       	std	Y+9, r24	; 0x09
    1dc2:	9a 87       	std	Y+10, r25	; 0x0a
	for(uint_8 count1 = Zero_INIT ; count1 < MAX_ROWS ; count1++)
    1dc4:	19 82       	std	Y+1, r1	; 0x01
    1dc6:	1d c0       	rjmp	.+58     	; 0x1e02 <KEYPAD_init+0x62>
	{
		DIO_setPinDIR(copyKEYPAD.ROWS[count1], _DIRECTION_PIN_INPUT);
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9e 01       	movw	r18, r28
    1dd0:	2d 5f       	subi	r18, 0xFD	; 253
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	82 0f       	add	r24, r18
    1dd6:	93 1f       	adc	r25, r19
    1dd8:	fc 01       	movw	r30, r24
    1dda:	80 81       	ld	r24, Z
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
		DIO_setPinVAL(copyKEYPAD.ROWS[count1], _STATUS_PIN_HIGH);
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9e 01       	movw	r18, r28
    1dea:	2d 5f       	subi	r18, 0xFD	; 253
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	82 0f       	add	r24, r18
    1df0:	93 1f       	adc	r25, r19
    1df2:	fc 01       	movw	r30, r24
    1df4:	80 81       	ld	r24, Z
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
 * @param1 : copyKEYPAD
 * @retVal : void
 */
void KEYPAD_init(PINS_KEYPAD copyKEYPAD)
{
	for(uint_8 count1 = Zero_INIT ; count1 < MAX_ROWS ; count1++)
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	8f 5f       	subi	r24, 0xFF	; 255
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	84 30       	cpi	r24, 0x04	; 4
    1e06:	00 f3       	brcs	.-64     	; 0x1dc8 <KEYPAD_init+0x28>
	{
		DIO_setPinDIR(copyKEYPAD.ROWS[count1], _DIRECTION_PIN_INPUT);
		DIO_setPinVAL(copyKEYPAD.ROWS[count1], _STATUS_PIN_HIGH);
	}

	for (uint_8 count2 = Zero_INIT ; count2 < MAX_COLUMN; count2++)
    1e08:	1a 82       	std	Y+2, r1	; 0x02
    1e0a:	1d c0       	rjmp	.+58     	; 0x1e46 <KEYPAD_init+0xa6>
	{
		DIO_setPinDIR(copyKEYPAD.COLUMNS[count2], _DIRECTION_PIN_OUTPUT);
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9e 01       	movw	r18, r28
    1e14:	29 5f       	subi	r18, 0xF9	; 249
    1e16:	3f 4f       	sbci	r19, 0xFF	; 255
    1e18:	82 0f       	add	r24, r18
    1e1a:	93 1f       	adc	r25, r19
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	80 81       	ld	r24, Z
    1e20:	61 e0       	ldi	r22, 0x01	; 1
    1e22:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count2], _STATUS_PIN_HIGH);
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9e 01       	movw	r18, r28
    1e2e:	29 5f       	subi	r18, 0xF9	; 249
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	82 0f       	add	r24, r18
    1e34:	93 1f       	adc	r25, r19
    1e36:	fc 01       	movw	r30, r24
    1e38:	80 81       	ld	r24, Z
    1e3a:	61 e0       	ldi	r22, 0x01	; 1
    1e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	{
		DIO_setPinDIR(copyKEYPAD.ROWS[count1], _DIRECTION_PIN_INPUT);
		DIO_setPinVAL(copyKEYPAD.ROWS[count1], _STATUS_PIN_HIGH);
	}

	for (uint_8 count2 = Zero_INIT ; count2 < MAX_COLUMN; count2++)
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	8f 5f       	subi	r24, 0xFF	; 255
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	84 30       	cpi	r24, 0x04	; 4
    1e4a:	00 f3       	brcs	.-64     	; 0x1e0c <KEYPAD_init+0x6c>
	{
		DIO_setPinDIR(copyKEYPAD.COLUMNS[count2], _DIRECTION_PIN_OUTPUT);
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count2], _STATUS_PIN_HIGH);
	}
}
    1e4c:	00 00       	nop
    1e4e:	2a 96       	adiw	r28, 0x0a	; 10
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <KEYPAD_getData>:
 * @brief  : Keypad function to get data from column & row pins .
 * @param1 : copyKEYPAD
 * @retVal : void
 */
Return_Value KEYPAD_getData(PINS_KEYPAD copyKEYPAD , uint_8 *copyKeypadValue)
{
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	6b 97       	sbiw	r28, 0x1b	; 27
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	2a 8b       	std	Y+18, r18	; 0x12
    1e7a:	3b 8b       	std	Y+19, r19	; 0x13
    1e7c:	4c 8b       	std	Y+20, r20	; 0x14
    1e7e:	5d 8b       	std	Y+21, r21	; 0x15
    1e80:	6e 8b       	std	Y+22, r22	; 0x16
    1e82:	7f 8b       	std	Y+23, r23	; 0x17
    1e84:	88 8f       	std	Y+24, r24	; 0x18
    1e86:	99 8f       	std	Y+25, r25	; 0x19
    1e88:	1b 8f       	std	Y+27, r17	; 0x1b
    1e8a:	0a 8f       	std	Y+26, r16	; 0x1a
	uint_8 count1;
	uint_8 count2;
	uint_8 flag = 0;
    1e8c:	1b 82       	std	Y+3, r1	; 0x03

	for(count1 = 0 ; count1 < 4 ; count1++)
    1e8e:	19 82       	std	Y+1, r1	; 0x01
    1e90:	db c0       	rjmp	.+438    	; 0x2048 <KEYPAD_getData+0x1e8>
	{
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_LOW);
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9e 01       	movw	r18, r28
    1e9a:	2a 5e       	subi	r18, 0xEA	; 234
    1e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9e:	82 0f       	add	r24, r18
    1ea0:	93 1f       	adc	r25, r19
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	80 81       	ld	r24, Z
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
		for(count2 = 0 ; count2 < 4 ; count2++)
    1eac:	1a 82       	std	Y+2, r1	; 0x02
    1eae:	b8 c0       	rjmp	.+368    	; 0x2020 <KEYPAD_getData+0x1c0>
		{
			if(DIO_getPinVAL(copyKEYPAD.ROWS[count2]) == 0)
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9e 01       	movw	r18, r28
    1eb8:	2e 5e       	subi	r18, 0xEE	; 238
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	82 0f       	add	r24, r18
    1ebe:	93 1f       	adc	r25, r19
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	80 81       	ld	r24, Z
    1ec4:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_getPinVAL>
    1ec8:	88 23       	and	r24, r24
    1eca:	09 f0       	breq	.+2      	; 0x1ece <KEYPAD_getData+0x6e>
    1ecc:	a6 c0       	rjmp	.+332    	; 0x201a <KEYPAD_getData+0x1ba>
			{
				*copyKeypadValue = PATTIRN_KEYPAD[count2][count1];
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	22 0f       	add	r18, r18
    1edc:	33 1f       	adc	r19, r19
    1ede:	22 0f       	add	r18, r18
    1ee0:	33 1f       	adc	r19, r19
    1ee2:	82 0f       	add	r24, r18
    1ee4:	93 1f       	adc	r25, r19
    1ee6:	84 55       	subi	r24, 0x54	; 84
    1ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eea:	fc 01       	movw	r30, r24
    1eec:	20 81       	ld	r18, Z
    1eee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ef0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	20 83       	st	Z, r18
				flag = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_getPinVAL(copyKEYPAD.ROWS[count2]) == 0);
    1efa:	00 00       	nop
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9e 01       	movw	r18, r28
    1f04:	2e 5e       	subi	r18, 0xEE	; 238
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	82 0f       	add	r24, r18
    1f0a:	93 1f       	adc	r25, r19
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	80 81       	ld	r24, Z
    1f10:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_getPinVAL>
    1f14:	88 23       	and	r24, r24
    1f16:	91 f3       	breq	.-28     	; 0x1efc <KEYPAD_getData+0x9c>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f1e:	b1 e4       	ldi	r27, 0x41	; 65
    1f20:	8c 83       	std	Y+4, r24	; 0x04
    1f22:	9d 83       	std	Y+5, r25	; 0x05
    1f24:	ae 83       	std	Y+6, r26	; 0x06
    1f26:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a e7       	ldi	r20, 0x7A	; 122
    1f2e:	53 e4       	ldi	r21, 0x43	; 67
    1f30:	6c 81       	ldd	r22, Y+4	; 0x04
    1f32:	7d 81       	ldd	r23, Y+5	; 0x05
    1f34:	8e 81       	ldd	r24, Y+6	; 0x06
    1f36:	9f 81       	ldd	r25, Y+7	; 0x07
    1f38:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	88 87       	std	Y+8, r24	; 0x08
    1f42:	99 87       	std	Y+9, r25	; 0x09
    1f44:	aa 87       	std	Y+10, r26	; 0x0a
    1f46:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	68 85       	ldd	r22, Y+8	; 0x08
    1f52:	79 85       	ldd	r23, Y+9	; 0x09
    1f54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f58:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    1f5c:	88 23       	and	r24, r24
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <KEYPAD_getData+0x10a>
		__ticks = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9d 87       	std	Y+13, r25	; 0x0d
    1f66:	8c 87       	std	Y+12, r24	; 0x0c
    1f68:	3f c0       	rjmp	.+126    	; 0x1fe8 <KEYPAD_getData+0x188>
	else if (__tmp > 65535)
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	68 85       	ldd	r22, Y+8	; 0x08
    1f74:	79 85       	ldd	r23, Y+9	; 0x09
    1f76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7a:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	4c f5       	brge	.+82     	; 0x1fd4 <KEYPAD_getData+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	6c 81       	ldd	r22, Y+4	; 0x04
    1f8c:	7d 81       	ldd	r23, Y+5	; 0x05
    1f8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f90:	9f 81       	ldd	r25, Y+7	; 0x07
    1f92:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9d 87       	std	Y+13, r25	; 0x0d
    1fa8:	8c 87       	std	Y+12, r24	; 0x0c
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <KEYPAD_getData+0x16a>
    1fac:	89 e1       	ldi	r24, 0x19	; 25
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9f 87       	std	Y+15, r25	; 0x0f
    1fb2:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <KEYPAD_getData+0x158>
    1fbc:	9f 87       	std	Y+15, r25	; 0x0f
    1fbe:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	9d 87       	std	Y+13, r25	; 0x0d
    1fc8:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fcc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fce:	89 2b       	or	r24, r25
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <KEYPAD_getData+0x14c>
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <KEYPAD_getData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd4:	68 85       	ldd	r22, Y+8	; 0x08
    1fd6:	79 85       	ldd	r23, Y+9	; 0x09
    1fd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fdc:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9d 87       	std	Y+13, r25	; 0x0d
    1fe6:	8c 87       	std	Y+12, r24	; 0x0c
    1fe8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fea:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fec:	99 8b       	std	Y+17, r25	; 0x11
    1fee:	88 8b       	std	Y+16, r24	; 0x10
    1ff0:	88 89       	ldd	r24, Y+16	; 0x10
    1ff2:	99 89       	ldd	r25, Y+17	; 0x11
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <KEYPAD_getData+0x194>
    1ff8:	99 8b       	std	Y+17, r25	; 0x11
    1ffa:	88 8b       	std	Y+16, r24	; 0x10
				_delay_ms(20);
				DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9e 01       	movw	r18, r28
    2004:	2a 5e       	subi	r18, 0xEA	; 234
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	82 0f       	add	r24, r18
    200a:	93 1f       	adc	r25, r19
    200c:	fc 01       	movw	r30, r24
    200e:	80 81       	ld	r24, Z
    2010:	61 e0       	ldi	r22, 0x01	; 1
    2012:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
				return flag;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	1c c0       	rjmp	.+56     	; 0x2052 <KEYPAD_getData+0x1f2>
	uint_8 flag = 0;

	for(count1 = 0 ; count1 < 4 ; count1++)
	{
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_LOW);
		for(count2 = 0 ; count2 < 4 ; count2++)
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	8f 5f       	subi	r24, 0xFF	; 255
    201e:	8a 83       	std	Y+2, r24	; 0x02
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	84 30       	cpi	r24, 0x04	; 4
    2024:	08 f4       	brcc	.+2      	; 0x2028 <KEYPAD_getData+0x1c8>
    2026:	44 cf       	rjmp	.-376    	; 0x1eb0 <KEYPAD_getData+0x50>
				_delay_ms(20);
				DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
				return flag;
			}
		}
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	88 2f       	mov	r24, r24
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9e 01       	movw	r18, r28
    2030:	2a 5e       	subi	r18, 0xEA	; 234
    2032:	3f 4f       	sbci	r19, 0xFF	; 255
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	fc 01       	movw	r30, r24
    203a:	80 81       	ld	r24, Z
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
{
	uint_8 count1;
	uint_8 count2;
	uint_8 flag = 0;

	for(count1 = 0 ; count1 < 4 ; count1++)
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	84 30       	cpi	r24, 0x04	; 4
    204c:	08 f4       	brcc	.+2      	; 0x2050 <KEYPAD_getData+0x1f0>
    204e:	21 cf       	rjmp	.-446    	; 0x1e92 <KEYPAD_getData+0x32>
				return flag;
			}
		}
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
	}
	return flag;
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2052:	6b 96       	adiw	r28, 0x1b	; 27
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	08 95       	ret

00002068 <setUp>:
 * @brief  : standard function setup all initializations & directions of all modules.
 * @param1 : void
 * @RetVal : void
 */
void setUp(void)
{
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	DCMOTOR_init(MOTOR1, MOTOR2);
    2070:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <MOTOR2>
    2074:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <MOTOR2+0x1>
    2078:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <MOTOR1>
    207c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <MOTOR1+0x1>
    2080:	b9 01       	movw	r22, r18
    2082:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <DCMOTOR_init>
}
    2086:	00 00       	nop
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	08 95       	ret

0000208e <Loop>:
 * @brief  : standard function loop your Program.
 * @param1 : void
 * @RetVal : void
 */
void Loop(void)
{
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	c6 54       	subi	r28, 0x46	; 70
    209c:	d1 09       	sbc	r29, r1
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
	DCMOTOR_motorForward(MOTOR1, MOTOR2);
    20a8:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <MOTOR2>
    20ac:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <MOTOR2+0x1>
    20b0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <MOTOR1>
    20b4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <MOTOR1+0x1>
    20b8:	b9 01       	movw	r22, r18
    20ba:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <DCMOTOR_motorForward>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	aa ef       	ldi	r26, 0xFA	; 250
    20c4:	b4 e4       	ldi	r27, 0x44	; 68
    20c6:	89 af       	std	Y+57, r24	; 0x39
    20c8:	9a af       	std	Y+58, r25	; 0x3a
    20ca:	ab af       	std	Y+59, r26	; 0x3b
    20cc:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a e7       	ldi	r20, 0x7A	; 122
    20d4:	53 e4       	ldi	r21, 0x43	; 67
    20d6:	69 ad       	ldd	r22, Y+57	; 0x39
    20d8:	7a ad       	ldd	r23, Y+58	; 0x3a
    20da:	8b ad       	ldd	r24, Y+59	; 0x3b
    20dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    20de:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 01       	movw	r18, r28
    20e8:	23 5c       	subi	r18, 0xC3	; 195
    20ea:	3f 4f       	sbci	r19, 0xFF	; 255
    20ec:	f9 01       	movw	r30, r18
    20ee:	80 83       	st	Z, r24
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	a2 83       	std	Z+2, r26	; 0x02
    20f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	ce 01       	movw	r24, r28
    2100:	cd 96       	adiw	r24, 0x3d	; 61
    2102:	fc 01       	movw	r30, r24
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    2110:	88 23       	and	r24, r24
    2112:	4c f4       	brge	.+18     	; 0x2126 <Loop+0x98>
		__ticks = 1;
    2114:	ce 01       	movw	r24, r28
    2116:	8f 5b       	subi	r24, 0xBF	; 191
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	21 e0       	ldi	r18, 0x01	; 1
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	fc 01       	movw	r30, r24
    2120:	31 83       	std	Z+1, r19	; 0x01
    2122:	20 83       	st	Z, r18
    2124:	67 c0       	rjmp	.+206    	; 0x21f4 <Loop+0x166>
	else if (__tmp > 65535)
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	3f ef       	ldi	r19, 0xFF	; 255
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	57 e4       	ldi	r21, 0x47	; 71
    212e:	ce 01       	movw	r24, r28
    2130:	cd 96       	adiw	r24, 0x3d	; 61
    2132:	fc 01       	movw	r30, r24
    2134:	60 81       	ld	r22, Z
    2136:	71 81       	ldd	r23, Z+1	; 0x01
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    2140:	18 16       	cp	r1, r24
    2142:	0c f0       	brlt	.+2      	; 0x2146 <Loop+0xb8>
    2144:	46 c0       	rjmp	.+140    	; 0x21d2 <Loop+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	69 ad       	ldd	r22, Y+57	; 0x39
    2150:	7a ad       	ldd	r23, Y+58	; 0x3a
    2152:	8b ad       	ldd	r24, Y+59	; 0x3b
    2154:	9c ad       	ldd	r25, Y+60	; 0x3c
    2156:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	8e 01       	movw	r16, r28
    2160:	0f 5b       	subi	r16, 0xBF	; 191
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	f8 01       	movw	r30, r16
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
    2176:	24 c0       	rjmp	.+72     	; 0x21c0 <Loop+0x132>
    2178:	ce 01       	movw	r24, r28
    217a:	8d 5b       	subi	r24, 0xBD	; 189
    217c:	9f 4f       	sbci	r25, 0xFF	; 255
    217e:	29 e1       	ldi	r18, 0x19	; 25
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	fc 01       	movw	r30, r24
    2184:	31 83       	std	Z+1, r19	; 0x01
    2186:	20 83       	st	Z, r18
    2188:	ce 01       	movw	r24, r28
    218a:	8d 5b       	subi	r24, 0xBD	; 189
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	fc 01       	movw	r30, r24
    2190:	80 81       	ld	r24, Z
    2192:	91 81       	ldd	r25, Z+1	; 0x01
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <Loop+0x106>
    2198:	9e 01       	movw	r18, r28
    219a:	2d 5b       	subi	r18, 0xBD	; 189
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	f9 01       	movw	r30, r18
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	ce 01       	movw	r24, r28
    21a6:	8f 5b       	subi	r24, 0xBF	; 191
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	9e 01       	movw	r18, r28
    21ac:	2f 5b       	subi	r18, 0xBF	; 191
    21ae:	3f 4f       	sbci	r19, 0xFF	; 255
    21b0:	f9 01       	movw	r30, r18
    21b2:	20 81       	ld	r18, Z
    21b4:	31 81       	ldd	r19, Z+1	; 0x01
    21b6:	21 50       	subi	r18, 0x01	; 1
    21b8:	31 09       	sbc	r19, r1
    21ba:	fc 01       	movw	r30, r24
    21bc:	31 83       	std	Z+1, r19	; 0x01
    21be:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	ce 01       	movw	r24, r28
    21c2:	8f 5b       	subi	r24, 0xBF	; 191
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	fc 01       	movw	r30, r24
    21c8:	80 81       	ld	r24, Z
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	89 2b       	or	r24, r25
    21ce:	a1 f6       	brne	.-88     	; 0x2178 <Loop+0xea>
    21d0:	2b c0       	rjmp	.+86     	; 0x2228 <Loop+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d2:	8e 01       	movw	r16, r28
    21d4:	0f 5b       	subi	r16, 0xBF	; 191
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	ce 01       	movw	r24, r28
    21da:	cd 96       	adiw	r24, 0x3d	; 61
    21dc:	fc 01       	movw	r30, r24
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	f8 01       	movw	r30, r16
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
    21f4:	ce 01       	movw	r24, r28
    21f6:	8b 5b       	subi	r24, 0xBB	; 187
    21f8:	9f 4f       	sbci	r25, 0xFF	; 255
    21fa:	9e 01       	movw	r18, r28
    21fc:	2f 5b       	subi	r18, 0xBF	; 191
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	f9 01       	movw	r30, r18
    2202:	20 81       	ld	r18, Z
    2204:	31 81       	ldd	r19, Z+1	; 0x01
    2206:	fc 01       	movw	r30, r24
    2208:	31 83       	std	Z+1, r19	; 0x01
    220a:	20 83       	st	Z, r18
    220c:	ce 01       	movw	r24, r28
    220e:	8b 5b       	subi	r24, 0xBB	; 187
    2210:	9f 4f       	sbci	r25, 0xFF	; 255
    2212:	fc 01       	movw	r30, r24
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <Loop+0x18a>
    221c:	9e 01       	movw	r18, r28
    221e:	2b 5b       	subi	r18, 0xBB	; 187
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	f9 01       	movw	r30, r18
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
	_delay_ms(2000);
	DCMOTOR_motorReverse(MOTOR1, MOTOR2);
    2228:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <MOTOR2>
    222c:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <MOTOR2+0x1>
    2230:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <MOTOR1>
    2234:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <MOTOR1+0x1>
    2238:	b9 01       	movw	r22, r18
    223a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DCMOTOR_motorReverse>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	aa ef       	ldi	r26, 0xFA	; 250
    2244:	b4 e4       	ldi	r27, 0x44	; 68
    2246:	8b a7       	std	Y+43, r24	; 0x2b
    2248:	9c a7       	std	Y+44, r25	; 0x2c
    224a:	ad a7       	std	Y+45, r26	; 0x2d
    224c:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4a e7       	ldi	r20, 0x7A	; 122
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	6b a5       	ldd	r22, Y+43	; 0x2b
    2258:	7c a5       	ldd	r23, Y+44	; 0x2c
    225a:	8d a5       	ldd	r24, Y+45	; 0x2d
    225c:	9e a5       	ldd	r25, Y+46	; 0x2e
    225e:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8f a7       	std	Y+47, r24	; 0x2f
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	a9 ab       	std	Y+49, r26	; 0x31
    226c:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e8       	ldi	r20, 0x80	; 128
    2274:	5f e3       	ldi	r21, 0x3F	; 63
    2276:	6f a5       	ldd	r22, Y+47	; 0x2f
    2278:	78 a9       	ldd	r23, Y+48	; 0x30
    227a:	89 a9       	ldd	r24, Y+49	; 0x31
    227c:	9a a9       	ldd	r25, Y+50	; 0x32
    227e:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <Loop+0x202>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9c ab       	std	Y+52, r25	; 0x34
    228c:	8b ab       	std	Y+51, r24	; 0x33
    228e:	3f c0       	rjmp	.+126    	; 0x230e <Loop+0x280>
	else if (__tmp > 65535)
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	3f ef       	ldi	r19, 0xFF	; 255
    2294:	4f e7       	ldi	r20, 0x7F	; 127
    2296:	57 e4       	ldi	r21, 0x47	; 71
    2298:	6f a5       	ldd	r22, Y+47	; 0x2f
    229a:	78 a9       	ldd	r23, Y+48	; 0x30
    229c:	89 a9       	ldd	r24, Y+49	; 0x31
    229e:	9a a9       	ldd	r25, Y+50	; 0x32
    22a0:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <Loop+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e2       	ldi	r20, 0x20	; 32
    22ae:	51 e4       	ldi	r21, 0x41	; 65
    22b0:	6b a5       	ldd	r22, Y+43	; 0x2b
    22b2:	7c a5       	ldd	r23, Y+44	; 0x2c
    22b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    22b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b8:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9c ab       	std	Y+52, r25	; 0x34
    22ce:	8b ab       	std	Y+51, r24	; 0x33
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <Loop+0x262>
    22d2:	89 e1       	ldi	r24, 0x19	; 25
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9e ab       	std	Y+54, r25	; 0x36
    22d8:	8d ab       	std	Y+53, r24	; 0x35
    22da:	8d a9       	ldd	r24, Y+53	; 0x35
    22dc:	9e a9       	ldd	r25, Y+54	; 0x36
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <Loop+0x250>
    22e2:	9e ab       	std	Y+54, r25	; 0x36
    22e4:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8b a9       	ldd	r24, Y+51	; 0x33
    22e8:	9c a9       	ldd	r25, Y+52	; 0x34
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9c ab       	std	Y+52, r25	; 0x34
    22ee:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8b a9       	ldd	r24, Y+51	; 0x33
    22f2:	9c a9       	ldd	r25, Y+52	; 0x34
    22f4:	89 2b       	or	r24, r25
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <Loop+0x244>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <Loop+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6f a5       	ldd	r22, Y+47	; 0x2f
    22fc:	78 a9       	ldd	r23, Y+48	; 0x30
    22fe:	89 a9       	ldd	r24, Y+49	; 0x31
    2300:	9a a9       	ldd	r25, Y+50	; 0x32
    2302:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9c ab       	std	Y+52, r25	; 0x34
    230c:	8b ab       	std	Y+51, r24	; 0x33
    230e:	8b a9       	ldd	r24, Y+51	; 0x33
    2310:	9c a9       	ldd	r25, Y+52	; 0x34
    2312:	98 af       	std	Y+56, r25	; 0x38
    2314:	8f ab       	std	Y+55, r24	; 0x37
    2316:	8f a9       	ldd	r24, Y+55	; 0x37
    2318:	98 ad       	ldd	r25, Y+56	; 0x38
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <Loop+0x28c>
    231e:	98 af       	std	Y+56, r25	; 0x38
    2320:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(2000);
	DCMOTOR_motorLeft(MOTOR1, MOTOR2);
    2322:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <MOTOR2>
    2326:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <MOTOR2+0x1>
    232a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <MOTOR1>
    232e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <MOTOR1+0x1>
    2332:	b9 01       	movw	r22, r18
    2334:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <DCMOTOR_motorLeft>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	aa ef       	ldi	r26, 0xFA	; 250
    233e:	b4 e4       	ldi	r27, 0x44	; 68
    2340:	8d 8f       	std	Y+29, r24	; 0x1d
    2342:	9e 8f       	std	Y+30, r25	; 0x1e
    2344:	af 8f       	std	Y+31, r26	; 0x1f
    2346:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4a e7       	ldi	r20, 0x7A	; 122
    234e:	53 e4       	ldi	r21, 0x43	; 67
    2350:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2352:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2354:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2356:	98 a1       	ldd	r25, Y+32	; 0x20
    2358:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	89 a3       	std	Y+33, r24	; 0x21
    2362:	9a a3       	std	Y+34, r25	; 0x22
    2364:	ab a3       	std	Y+35, r26	; 0x23
    2366:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e8       	ldi	r20, 0x80	; 128
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	69 a1       	ldd	r22, Y+33	; 0x21
    2372:	7a a1       	ldd	r23, Y+34	; 0x22
    2374:	8b a1       	ldd	r24, Y+35	; 0x23
    2376:	9c a1       	ldd	r25, Y+36	; 0x24
    2378:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <Loop+0x2fc>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9e a3       	std	Y+38, r25	; 0x26
    2386:	8d a3       	std	Y+37, r24	; 0x25
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <Loop+0x37a>
	else if (__tmp > 65535)
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	3f ef       	ldi	r19, 0xFF	; 255
    238e:	4f e7       	ldi	r20, 0x7F	; 127
    2390:	57 e4       	ldi	r21, 0x47	; 71
    2392:	69 a1       	ldd	r22, Y+33	; 0x21
    2394:	7a a1       	ldd	r23, Y+34	; 0x22
    2396:	8b a1       	ldd	r24, Y+35	; 0x23
    2398:	9c a1       	ldd	r25, Y+36	; 0x24
    239a:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <Loop+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e2       	ldi	r20, 0x20	; 32
    23a8:	51 e4       	ldi	r21, 0x41	; 65
    23aa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23ac:	7e 8d       	ldd	r23, Y+30	; 0x1e
    23ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23b0:	98 a1       	ldd	r25, Y+32	; 0x20
    23b2:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e a3       	std	Y+38, r25	; 0x26
    23c8:	8d a3       	std	Y+37, r24	; 0x25
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <Loop+0x35c>
    23cc:	89 e1       	ldi	r24, 0x19	; 25
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	98 a7       	std	Y+40, r25	; 0x28
    23d2:	8f a3       	std	Y+39, r24	; 0x27
    23d4:	8f a1       	ldd	r24, Y+39	; 0x27
    23d6:	98 a5       	ldd	r25, Y+40	; 0x28
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <Loop+0x34a>
    23dc:	98 a7       	std	Y+40, r25	; 0x28
    23de:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8d a1       	ldd	r24, Y+37	; 0x25
    23e2:	9e a1       	ldd	r25, Y+38	; 0x26
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9e a3       	std	Y+38, r25	; 0x26
    23e8:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8d a1       	ldd	r24, Y+37	; 0x25
    23ec:	9e a1       	ldd	r25, Y+38	; 0x26
    23ee:	89 2b       	or	r24, r25
    23f0:	69 f7       	brne	.-38     	; 0x23cc <Loop+0x33e>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <Loop+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	69 a1       	ldd	r22, Y+33	; 0x21
    23f6:	7a a1       	ldd	r23, Y+34	; 0x22
    23f8:	8b a1       	ldd	r24, Y+35	; 0x23
    23fa:	9c a1       	ldd	r25, Y+36	; 0x24
    23fc:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e a3       	std	Y+38, r25	; 0x26
    2406:	8d a3       	std	Y+37, r24	; 0x25
    2408:	8d a1       	ldd	r24, Y+37	; 0x25
    240a:	9e a1       	ldd	r25, Y+38	; 0x26
    240c:	9a a7       	std	Y+42, r25	; 0x2a
    240e:	89 a7       	std	Y+41, r24	; 0x29
    2410:	89 a5       	ldd	r24, Y+41	; 0x29
    2412:	9a a5       	ldd	r25, Y+42	; 0x2a
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <Loop+0x386>
    2418:	9a a7       	std	Y+42, r25	; 0x2a
    241a:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(2000);
	DCMOTOR_motorRight(MOTOR1, MOTOR2);
    241c:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <MOTOR2>
    2420:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <MOTOR2+0x1>
    2424:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <MOTOR1>
    2428:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <MOTOR1+0x1>
    242c:	b9 01       	movw	r22, r18
    242e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <DCMOTOR_motorRight>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	aa ef       	ldi	r26, 0xFA	; 250
    2438:	b4 e4       	ldi	r27, 0x44	; 68
    243a:	8f 87       	std	Y+15, r24	; 0x0f
    243c:	98 8b       	std	Y+16, r25	; 0x10
    243e:	a9 8b       	std	Y+17, r26	; 0x11
    2440:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4a e7       	ldi	r20, 0x7A	; 122
    2448:	53 e4       	ldi	r21, 0x43	; 67
    244a:	6f 85       	ldd	r22, Y+15	; 0x0f
    244c:	78 89       	ldd	r23, Y+16	; 0x10
    244e:	89 89       	ldd	r24, Y+17	; 0x11
    2450:	9a 89       	ldd	r25, Y+18	; 0x12
    2452:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8b 8b       	std	Y+19, r24	; 0x13
    245c:	9c 8b       	std	Y+20, r25	; 0x14
    245e:	ad 8b       	std	Y+21, r26	; 0x15
    2460:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	6b 89       	ldd	r22, Y+19	; 0x13
    246c:	7c 89       	ldd	r23, Y+20	; 0x14
    246e:	8d 89       	ldd	r24, Y+21	; 0x15
    2470:	9e 89       	ldd	r25, Y+22	; 0x16
    2472:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    2476:	88 23       	and	r24, r24
    2478:	2c f4       	brge	.+10     	; 0x2484 <Loop+0x3f6>
		__ticks = 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	98 8f       	std	Y+24, r25	; 0x18
    2480:	8f 8b       	std	Y+23, r24	; 0x17
    2482:	3f c0       	rjmp	.+126    	; 0x2502 <Loop+0x474>
	else if (__tmp > 65535)
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	3f ef       	ldi	r19, 0xFF	; 255
    2488:	4f e7       	ldi	r20, 0x7F	; 127
    248a:	57 e4       	ldi	r21, 0x47	; 71
    248c:	6b 89       	ldd	r22, Y+19	; 0x13
    248e:	7c 89       	ldd	r23, Y+20	; 0x14
    2490:	8d 89       	ldd	r24, Y+21	; 0x15
    2492:	9e 89       	ldd	r25, Y+22	; 0x16
    2494:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    2498:	18 16       	cp	r1, r24
    249a:	4c f5       	brge	.+82     	; 0x24ee <Loop+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e2       	ldi	r20, 0x20	; 32
    24a2:	51 e4       	ldi	r21, 0x41	; 65
    24a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    24a6:	78 89       	ldd	r23, Y+16	; 0x10
    24a8:	89 89       	ldd	r24, Y+17	; 0x11
    24aa:	9a 89       	ldd	r25, Y+18	; 0x12
    24ac:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	98 8f       	std	Y+24, r25	; 0x18
    24c2:	8f 8b       	std	Y+23, r24	; 0x17
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <Loop+0x456>
    24c6:	89 e1       	ldi	r24, 0x19	; 25
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9a 8f       	std	Y+26, r25	; 0x1a
    24cc:	89 8f       	std	Y+25, r24	; 0x19
    24ce:	89 8d       	ldd	r24, Y+25	; 0x19
    24d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <Loop+0x444>
    24d6:	9a 8f       	std	Y+26, r25	; 0x1a
    24d8:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	98 8f       	std	Y+24, r25	; 0x18
    24e2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	8f 89       	ldd	r24, Y+23	; 0x17
    24e6:	98 8d       	ldd	r25, Y+24	; 0x18
    24e8:	89 2b       	or	r24, r25
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <Loop+0x438>
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <Loop+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	6b 89       	ldd	r22, Y+19	; 0x13
    24f0:	7c 89       	ldd	r23, Y+20	; 0x14
    24f2:	8d 89       	ldd	r24, Y+21	; 0x15
    24f4:	9e 89       	ldd	r25, Y+22	; 0x16
    24f6:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	98 8f       	std	Y+24, r25	; 0x18
    2500:	8f 8b       	std	Y+23, r24	; 0x17
    2502:	8f 89       	ldd	r24, Y+23	; 0x17
    2504:	98 8d       	ldd	r25, Y+24	; 0x18
    2506:	9c 8f       	std	Y+28, r25	; 0x1c
    2508:	8b 8f       	std	Y+27, r24	; 0x1b
    250a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    250c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <Loop+0x480>
    2512:	9c 8f       	std	Y+28, r25	; 0x1c
    2514:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(2000);
	DCMOTOR_motorStop(MOTOR1, MOTOR2);
    2516:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <MOTOR2>
    251a:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <MOTOR2+0x1>
    251e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <MOTOR1>
    2522:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <MOTOR1+0x1>
    2526:	b9 01       	movw	r22, r18
    2528:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <DCMOTOR_motorStop>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	aa ef       	ldi	r26, 0xFA	; 250
    2532:	b4 e4       	ldi	r27, 0x44	; 68
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	ab 83       	std	Y+3, r26	; 0x03
    253a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a e7       	ldi	r20, 0x7A	; 122
    2542:	53 e4       	ldi	r21, 0x43	; 67
    2544:	69 81       	ldd	r22, Y+1	; 0x01
    2546:	7a 81       	ldd	r23, Y+2	; 0x02
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	af 83       	std	Y+7, r26	; 0x07
    255a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	6d 81       	ldd	r22, Y+5	; 0x05
    2566:	7e 81       	ldd	r23, Y+6	; 0x06
    2568:	8f 81       	ldd	r24, Y+7	; 0x07
    256a:	98 85       	ldd	r25, Y+8	; 0x08
    256c:	0e 94 c4 13 	call	0x2788	; 0x2788 <__cmpsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <Loop+0x4f0>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9a 87       	std	Y+10, r25	; 0x0a
    257a:	89 87       	std	Y+9, r24	; 0x09
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <Loop+0x56e>
	else if (__tmp > 65535)
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	6d 81       	ldd	r22, Y+5	; 0x05
    2588:	7e 81       	ldd	r23, Y+6	; 0x06
    258a:	8f 81       	ldd	r24, Y+7	; 0x07
    258c:	98 85       	ldd	r25, Y+8	; 0x08
    258e:	0e 94 df 14 	call	0x29be	; 0x29be <__gesf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <Loop+0x55a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	69 81       	ldd	r22, Y+1	; 0x01
    25a0:	7a 81       	ldd	r23, Y+2	; 0x02
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9a 87       	std	Y+10, r25	; 0x0a
    25bc:	89 87       	std	Y+9, r24	; 0x09
    25be:	0f c0       	rjmp	.+30     	; 0x25de <Loop+0x550>
    25c0:	89 e1       	ldi	r24, 0x19	; 25
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9c 87       	std	Y+12, r25	; 0x0c
    25c6:	8b 87       	std	Y+11, r24	; 0x0b
    25c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <Loop+0x53e>
    25d0:	9c 87       	std	Y+12, r25	; 0x0c
    25d2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9a 87       	std	Y+10, r25	; 0x0a
    25dc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	89 2b       	or	r24, r25
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <Loop+0x532>
	_delay_ms(2000);
}
    25e6:	14 c0       	rjmp	.+40     	; 0x2610 <Loop+0x582>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	6d 81       	ldd	r22, Y+5	; 0x05
    25ea:	7e 81       	ldd	r23, Y+6	; 0x06
    25ec:	8f 81       	ldd	r24, Y+7	; 0x07
    25ee:	98 85       	ldd	r25, Y+8	; 0x08
    25f0:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9a 87       	std	Y+10, r25	; 0x0a
    25fa:	89 87       	std	Y+9, r24	; 0x09
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	9e 87       	std	Y+14, r25	; 0x0e
    2602:	8d 87       	std	Y+13, r24	; 0x0d
    2604:	8d 85       	ldd	r24, Y+13	; 0x0d
    2606:	9e 85       	ldd	r25, Y+14	; 0x0e
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <Loop+0x57a>
    260c:	9e 87       	std	Y+14, r25	; 0x0e
    260e:	8d 87       	std	Y+13, r24	; 0x0d
    2610:	00 00       	nop
    2612:	ca 5b       	subi	r28, 0xBA	; 186
    2614:	df 4f       	sbci	r29, 0xFF	; 255
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	08 95       	ret

0000262a <BCD_init>:
 *           pins of 7-SEGMENT is DIRECTION_PIN_OUTPUT
 * @param1 : copyBCDNum
 * @retVal : void
 */
void BCD_init(_BCD_PINS_ copyBCDNum)
{
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	00 d0       	rcall	.+0      	; 0x2630 <BCD_init+0x6>
    2630:	00 d0       	rcall	.+0      	; 0x2632 <BCD_init+0x8>
    2632:	1f 92       	push	r1
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	49 83       	std	Y+1, r20	; 0x01
    263a:	5a 83       	std	Y+2, r21	; 0x02
    263c:	6b 83       	std	Y+3, r22	; 0x03
    263e:	7c 83       	std	Y+4, r23	; 0x04
    2640:	8d 83       	std	Y+5, r24	; 0x05
#if (_7SEG_TYPE == COMMON_ANODE)
	DIO_setPinDIR(copyBCDNum.ENABLE_PIN, _DIRECTION_PIN_OUTPUT);
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	61 e0       	ldi	r22, 0x01	; 1
    2646:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN1, _DIRECTION_PIN_OUTPUT);
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN2, _DIRECTION_PIN_OUTPUT);
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	61 e0       	ldi	r22, 0x01	; 1
    2656:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN3, _DIRECTION_PIN_OUTPUT);
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN4, _DIRECTION_PIN_OUTPUT);
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	61 e0       	ldi	r22, 0x01	; 1
    2666:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN1, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyBCDNum.PIN2, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyBCDNum.PIN3, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyBCDNum.PIN4, _DIRECTION_PIN_OUTPUT);
#endif
	BCD_displayEN(copyBCDNum);
    266a:	49 81       	ldd	r20, Y+1	; 0x01
    266c:	5a 81       	ldd	r21, Y+2	; 0x02
    266e:	6b 81       	ldd	r22, Y+3	; 0x03
    2670:	7c 81       	ldd	r23, Y+4	; 0x04
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	0e 94 45 13 	call	0x268a	; 0x268a <BCD_displayEN>
}
    2678:	00 00       	nop
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	08 95       	ret

0000268a <BCD_displayEN>:
 * 			 if 7-SEGMENT is COMMON_CATHOD SET Enable bit STATUS_PIN_LOW.
 * @param1 : copyBCDNum
 * @retVal : void
 */
void BCD_displayEN(_BCD_PINS_ copyBCDNum)
{
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	00 d0       	rcall	.+0      	; 0x2690 <BCD_displayEN+0x6>
    2690:	00 d0       	rcall	.+0      	; 0x2692 <BCD_displayEN+0x8>
    2692:	1f 92       	push	r1
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	49 83       	std	Y+1, r20	; 0x01
    269a:	5a 83       	std	Y+2, r21	; 0x02
    269c:	6b 83       	std	Y+3, r22	; 0x03
    269e:	7c 83       	std	Y+4, r23	; 0x04
    26a0:	8d 83       	std	Y+5, r24	; 0x05
#if (_7SEG_TYPE == COMMON_ANODE)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_HIGH);
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	61 e0       	ldi	r22, 0x01	; 1
    26a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
#elif (_7SEG_TYPE == COMMON_CATHOD)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_LOW);
#endif
}
    26aa:	00 00       	nop
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret

000026bc <BCD_displayDIS>:
 * 			 if 7-SEGMENT is COMMON_CATHOD SET Enable bit STATUS_PIN_HIGH.
 * @param1 : copyBCDNum
 * @retVal : void
 */
void BCD_displayDIS(_BCD_PINS_ copyBCDNum)
{
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <BCD_displayDIS+0x6>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <BCD_displayDIS+0x8>
    26c4:	1f 92       	push	r1
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	49 83       	std	Y+1, r20	; 0x01
    26cc:	5a 83       	std	Y+2, r21	; 0x02
    26ce:	6b 83       	std	Y+3, r22	; 0x03
    26d0:	7c 83       	std	Y+4, r23	; 0x04
    26d2:	8d 83       	std	Y+5, r24	; 0x05
#if (_7SEG_TYPE == COMMON_ANODE)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_LOW);
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
#elif (_7SEG_TYPE == COMMON_CATHOD)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_HIGH);
#endif
}
    26dc:	00 00       	nop
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <BCD_displayNum>:
 * @param1 : copyBCDNum
 * @param2 : copyNumber
 * @retVal : void
 */
void BCD_displayNum(_BCD_PINS_ copyBCDNum, uint_8 copyNumber)
{
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <BCD_displayNum+0x6>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <BCD_displayNum+0x8>
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <BCD_displayNum+0xa>
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	49 83       	std	Y+1, r20	; 0x01
    26fe:	5a 83       	std	Y+2, r21	; 0x02
    2700:	6b 83       	std	Y+3, r22	; 0x03
    2702:	7c 83       	std	Y+4, r23	; 0x04
    2704:	8d 83       	std	Y+5, r24	; 0x05
    2706:	2e 83       	std	Y+6, r18	; 0x06
	if(copyNumber <= 9)
    2708:	8e 81       	ldd	r24, Y+6	; 0x06
    270a:	8a 30       	cpi	r24, 0x0A	; 10
    270c:	18 f5       	brcc	.+70     	; 0x2754 <BCD_displayNum+0x66>
	{
		DIO_setPinVAL(copyBCDNum.PIN1,  copyNumber & 0x01);
    270e:	8e 81       	ldd	r24, Y+6	; 0x06
    2710:	98 2f       	mov	r25, r24
    2712:	91 70       	andi	r25, 0x01	; 1
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	69 2f       	mov	r22, r25
    2718:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
		DIO_setPinVAL(copyBCDNum.PIN2, (copyNumber >> 1) & 0x01);
    271c:	8e 81       	ldd	r24, Y+6	; 0x06
    271e:	86 95       	lsr	r24
    2720:	98 2f       	mov	r25, r24
    2722:	91 70       	andi	r25, 0x01	; 1
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	69 2f       	mov	r22, r25
    2728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
		DIO_setPinVAL(copyBCDNum.PIN3, (copyNumber >> 2) & 0x01);
    272c:	8e 81       	ldd	r24, Y+6	; 0x06
    272e:	86 95       	lsr	r24
    2730:	86 95       	lsr	r24
    2732:	98 2f       	mov	r25, r24
    2734:	91 70       	andi	r25, 0x01	; 1
    2736:	8c 81       	ldd	r24, Y+4	; 0x04
    2738:	69 2f       	mov	r22, r25
    273a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
		DIO_setPinVAL(copyBCDNum.PIN4, (copyNumber >> 3) & 0x01);
    273e:	8e 81       	ldd	r24, Y+6	; 0x06
    2740:	86 95       	lsr	r24
    2742:	86 95       	lsr	r24
    2744:	86 95       	lsr	r24
    2746:	98 2f       	mov	r25, r24
    2748:	91 70       	andi	r25, 0x01	; 1
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	69 2f       	mov	r22, r25
    274e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_setPinVAL>
	}
	else
	{
		BCD_displayDIS(copyBCDNum);
	}
}
    2752:	07 c0       	rjmp	.+14     	; 0x2762 <BCD_displayNum+0x74>
		DIO_setPinVAL(copyBCDNum.PIN3, (copyNumber >> 2) & 0x01);
		DIO_setPinVAL(copyBCDNum.PIN4, (copyNumber >> 3) & 0x01);
	}
	else
	{
		BCD_displayDIS(copyBCDNum);
    2754:	49 81       	ldd	r20, Y+1	; 0x01
    2756:	5a 81       	ldd	r21, Y+2	; 0x02
    2758:	6b 81       	ldd	r22, Y+3	; 0x03
    275a:	7c 81       	ldd	r23, Y+4	; 0x04
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <BCD_displayDIS>
	}
}
    2762:	00 00       	nop
    2764:	26 96       	adiw	r28, 0x06	; 6
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	08 95       	ret

00002776 <main>:

/*********** INCLUDES ***********/
#include "MAIN_Init.h"

int main (void)
{
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
	setUp();
    277e:	0e 94 34 10 	call	0x2068	; 0x2068 <setUp>
	while(1)
	{
		Loop();
    2782:	0e 94 47 10 	call	0x208e	; 0x208e <Loop>
    2786:	fd cf       	rjmp	.-6      	; 0x2782 <main+0xc>

00002788 <__cmpsf2>:
    2788:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__fp_cmp>
    278c:	08 f4       	brcc	.+2      	; 0x2790 <__cmpsf2+0x8>
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	08 95       	ret

00002792 <__divsf3>:
    2792:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__divsf3x>
    2796:	0c 94 a5 14 	jmp	0x294a	; 0x294a <__fp_round>
    279a:	0e 94 9e 14 	call	0x293c	; 0x293c <__fp_pscB>
    279e:	58 f0       	brcs	.+22     	; 0x27b6 <__divsf3+0x24>
    27a0:	0e 94 97 14 	call	0x292e	; 0x292e <__fp_pscA>
    27a4:	40 f0       	brcs	.+16     	; 0x27b6 <__divsf3+0x24>
    27a6:	29 f4       	brne	.+10     	; 0x27b2 <__divsf3+0x20>
    27a8:	5f 3f       	cpi	r21, 0xFF	; 255
    27aa:	29 f0       	breq	.+10     	; 0x27b6 <__divsf3+0x24>
    27ac:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_inf>
    27b0:	51 11       	cpse	r21, r1
    27b2:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__fp_szero>
    27b6:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_nan>

000027ba <__divsf3x>:
    27ba:	0e 94 b6 14 	call	0x296c	; 0x296c <__fp_split3>
    27be:	68 f3       	brcs	.-38     	; 0x279a <__divsf3+0x8>

000027c0 <__divsf3_pse>:
    27c0:	99 23       	and	r25, r25
    27c2:	b1 f3       	breq	.-20     	; 0x27b0 <__divsf3+0x1e>
    27c4:	55 23       	and	r21, r21
    27c6:	91 f3       	breq	.-28     	; 0x27ac <__divsf3+0x1a>
    27c8:	95 1b       	sub	r25, r21
    27ca:	55 0b       	sbc	r21, r21
    27cc:	bb 27       	eor	r27, r27
    27ce:	aa 27       	eor	r26, r26
    27d0:	62 17       	cp	r22, r18
    27d2:	73 07       	cpc	r23, r19
    27d4:	84 07       	cpc	r24, r20
    27d6:	38 f0       	brcs	.+14     	; 0x27e6 <__divsf3_pse+0x26>
    27d8:	9f 5f       	subi	r25, 0xFF	; 255
    27da:	5f 4f       	sbci	r21, 0xFF	; 255
    27dc:	22 0f       	add	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	44 1f       	adc	r20, r20
    27e2:	aa 1f       	adc	r26, r26
    27e4:	a9 f3       	breq	.-22     	; 0x27d0 <__divsf3_pse+0x10>
    27e6:	35 d0       	rcall	.+106    	; 0x2852 <__divsf3_pse+0x92>
    27e8:	0e 2e       	mov	r0, r30
    27ea:	3a f0       	brmi	.+14     	; 0x27fa <__divsf3_pse+0x3a>
    27ec:	e0 e8       	ldi	r30, 0x80	; 128
    27ee:	32 d0       	rcall	.+100    	; 0x2854 <__divsf3_pse+0x94>
    27f0:	91 50       	subi	r25, 0x01	; 1
    27f2:	50 40       	sbci	r21, 0x00	; 0
    27f4:	e6 95       	lsr	r30
    27f6:	00 1c       	adc	r0, r0
    27f8:	ca f7       	brpl	.-14     	; 0x27ec <__divsf3_pse+0x2c>
    27fa:	2b d0       	rcall	.+86     	; 0x2852 <__divsf3_pse+0x92>
    27fc:	fe 2f       	mov	r31, r30
    27fe:	29 d0       	rcall	.+82     	; 0x2852 <__divsf3_pse+0x92>
    2800:	66 0f       	add	r22, r22
    2802:	77 1f       	adc	r23, r23
    2804:	88 1f       	adc	r24, r24
    2806:	bb 1f       	adc	r27, r27
    2808:	26 17       	cp	r18, r22
    280a:	37 07       	cpc	r19, r23
    280c:	48 07       	cpc	r20, r24
    280e:	ab 07       	cpc	r26, r27
    2810:	b0 e8       	ldi	r27, 0x80	; 128
    2812:	09 f0       	breq	.+2      	; 0x2816 <__divsf3_pse+0x56>
    2814:	bb 0b       	sbc	r27, r27
    2816:	80 2d       	mov	r24, r0
    2818:	bf 01       	movw	r22, r30
    281a:	ff 27       	eor	r31, r31
    281c:	93 58       	subi	r25, 0x83	; 131
    281e:	5f 4f       	sbci	r21, 0xFF	; 255
    2820:	3a f0       	brmi	.+14     	; 0x2830 <__divsf3_pse+0x70>
    2822:	9e 3f       	cpi	r25, 0xFE	; 254
    2824:	51 05       	cpc	r21, r1
    2826:	78 f0       	brcs	.+30     	; 0x2846 <__divsf3_pse+0x86>
    2828:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_inf>
    282c:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__fp_szero>
    2830:	5f 3f       	cpi	r21, 0xFF	; 255
    2832:	e4 f3       	brlt	.-8      	; 0x282c <__divsf3_pse+0x6c>
    2834:	98 3e       	cpi	r25, 0xE8	; 232
    2836:	d4 f3       	brlt	.-12     	; 0x282c <__divsf3_pse+0x6c>
    2838:	86 95       	lsr	r24
    283a:	77 95       	ror	r23
    283c:	67 95       	ror	r22
    283e:	b7 95       	ror	r27
    2840:	f7 95       	ror	r31
    2842:	9f 5f       	subi	r25, 0xFF	; 255
    2844:	c9 f7       	brne	.-14     	; 0x2838 <__divsf3_pse+0x78>
    2846:	88 0f       	add	r24, r24
    2848:	91 1d       	adc	r25, r1
    284a:	96 95       	lsr	r25
    284c:	87 95       	ror	r24
    284e:	97 f9       	bld	r25, 7
    2850:	08 95       	ret
    2852:	e1 e0       	ldi	r30, 0x01	; 1
    2854:	66 0f       	add	r22, r22
    2856:	77 1f       	adc	r23, r23
    2858:	88 1f       	adc	r24, r24
    285a:	bb 1f       	adc	r27, r27
    285c:	62 17       	cp	r22, r18
    285e:	73 07       	cpc	r23, r19
    2860:	84 07       	cpc	r24, r20
    2862:	ba 07       	cpc	r27, r26
    2864:	20 f0       	brcs	.+8      	; 0x286e <__divsf3_pse+0xae>
    2866:	62 1b       	sub	r22, r18
    2868:	73 0b       	sbc	r23, r19
    286a:	84 0b       	sbc	r24, r20
    286c:	ba 0b       	sbc	r27, r26
    286e:	ee 1f       	adc	r30, r30
    2870:	88 f7       	brcc	.-30     	; 0x2854 <__divsf3_pse+0x94>
    2872:	e0 95       	com	r30
    2874:	08 95       	ret

00002876 <__fixunssfsi>:
    2876:	0e 94 be 14 	call	0x297c	; 0x297c <__fp_splitA>
    287a:	88 f0       	brcs	.+34     	; 0x289e <__fixunssfsi+0x28>
    287c:	9f 57       	subi	r25, 0x7F	; 127
    287e:	98 f0       	brcs	.+38     	; 0x28a6 <__fixunssfsi+0x30>
    2880:	b9 2f       	mov	r27, r25
    2882:	99 27       	eor	r25, r25
    2884:	b7 51       	subi	r27, 0x17	; 23
    2886:	b0 f0       	brcs	.+44     	; 0x28b4 <__fixunssfsi+0x3e>
    2888:	e1 f0       	breq	.+56     	; 0x28c2 <__fixunssfsi+0x4c>
    288a:	66 0f       	add	r22, r22
    288c:	77 1f       	adc	r23, r23
    288e:	88 1f       	adc	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	1a f0       	brmi	.+6      	; 0x289a <__fixunssfsi+0x24>
    2894:	ba 95       	dec	r27
    2896:	c9 f7       	brne	.-14     	; 0x288a <__fixunssfsi+0x14>
    2898:	14 c0       	rjmp	.+40     	; 0x28c2 <__fixunssfsi+0x4c>
    289a:	b1 30       	cpi	r27, 0x01	; 1
    289c:	91 f0       	breq	.+36     	; 0x28c2 <__fixunssfsi+0x4c>
    289e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__fp_zero>
    28a2:	b1 e0       	ldi	r27, 0x01	; 1
    28a4:	08 95       	ret
    28a6:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__fp_zero>
    28aa:	67 2f       	mov	r22, r23
    28ac:	78 2f       	mov	r23, r24
    28ae:	88 27       	eor	r24, r24
    28b0:	b8 5f       	subi	r27, 0xF8	; 248
    28b2:	39 f0       	breq	.+14     	; 0x28c2 <__fixunssfsi+0x4c>
    28b4:	b9 3f       	cpi	r27, 0xF9	; 249
    28b6:	cc f3       	brlt	.-14     	; 0x28aa <__fixunssfsi+0x34>
    28b8:	86 95       	lsr	r24
    28ba:	77 95       	ror	r23
    28bc:	67 95       	ror	r22
    28be:	b3 95       	inc	r27
    28c0:	d9 f7       	brne	.-10     	; 0x28b8 <__fixunssfsi+0x42>
    28c2:	3e f4       	brtc	.+14     	; 0x28d2 <__fixunssfsi+0x5c>
    28c4:	90 95       	com	r25
    28c6:	80 95       	com	r24
    28c8:	70 95       	com	r23
    28ca:	61 95       	neg	r22
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	8f 4f       	sbci	r24, 0xFF	; 255
    28d0:	9f 4f       	sbci	r25, 0xFF	; 255
    28d2:	08 95       	ret

000028d4 <__fp_cmp>:
    28d4:	99 0f       	add	r25, r25
    28d6:	00 08       	sbc	r0, r0
    28d8:	55 0f       	add	r21, r21
    28da:	aa 0b       	sbc	r26, r26
    28dc:	e0 e8       	ldi	r30, 0x80	; 128
    28de:	fe ef       	ldi	r31, 0xFE	; 254
    28e0:	16 16       	cp	r1, r22
    28e2:	17 06       	cpc	r1, r23
    28e4:	e8 07       	cpc	r30, r24
    28e6:	f9 07       	cpc	r31, r25
    28e8:	c0 f0       	brcs	.+48     	; 0x291a <__fp_cmp+0x46>
    28ea:	12 16       	cp	r1, r18
    28ec:	13 06       	cpc	r1, r19
    28ee:	e4 07       	cpc	r30, r20
    28f0:	f5 07       	cpc	r31, r21
    28f2:	98 f0       	brcs	.+38     	; 0x291a <__fp_cmp+0x46>
    28f4:	62 1b       	sub	r22, r18
    28f6:	73 0b       	sbc	r23, r19
    28f8:	84 0b       	sbc	r24, r20
    28fa:	95 0b       	sbc	r25, r21
    28fc:	39 f4       	brne	.+14     	; 0x290c <__fp_cmp+0x38>
    28fe:	0a 26       	eor	r0, r26
    2900:	61 f0       	breq	.+24     	; 0x291a <__fp_cmp+0x46>
    2902:	23 2b       	or	r18, r19
    2904:	24 2b       	or	r18, r20
    2906:	25 2b       	or	r18, r21
    2908:	21 f4       	brne	.+8      	; 0x2912 <__fp_cmp+0x3e>
    290a:	08 95       	ret
    290c:	0a 26       	eor	r0, r26
    290e:	09 f4       	brne	.+2      	; 0x2912 <__fp_cmp+0x3e>
    2910:	a1 40       	sbci	r26, 0x01	; 1
    2912:	a6 95       	lsr	r26
    2914:	8f ef       	ldi	r24, 0xFF	; 255
    2916:	81 1d       	adc	r24, r1
    2918:	81 1d       	adc	r24, r1
    291a:	08 95       	ret

0000291c <__fp_inf>:
    291c:	97 f9       	bld	r25, 7
    291e:	9f 67       	ori	r25, 0x7F	; 127
    2920:	80 e8       	ldi	r24, 0x80	; 128
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	60 e0       	ldi	r22, 0x00	; 0
    2926:	08 95       	ret

00002928 <__fp_nan>:
    2928:	9f ef       	ldi	r25, 0xFF	; 255
    292a:	80 ec       	ldi	r24, 0xC0	; 192
    292c:	08 95       	ret

0000292e <__fp_pscA>:
    292e:	00 24       	eor	r0, r0
    2930:	0a 94       	dec	r0
    2932:	16 16       	cp	r1, r22
    2934:	17 06       	cpc	r1, r23
    2936:	18 06       	cpc	r1, r24
    2938:	09 06       	cpc	r0, r25
    293a:	08 95       	ret

0000293c <__fp_pscB>:
    293c:	00 24       	eor	r0, r0
    293e:	0a 94       	dec	r0
    2940:	12 16       	cp	r1, r18
    2942:	13 06       	cpc	r1, r19
    2944:	14 06       	cpc	r1, r20
    2946:	05 06       	cpc	r0, r21
    2948:	08 95       	ret

0000294a <__fp_round>:
    294a:	09 2e       	mov	r0, r25
    294c:	03 94       	inc	r0
    294e:	00 0c       	add	r0, r0
    2950:	11 f4       	brne	.+4      	; 0x2956 <__fp_round+0xc>
    2952:	88 23       	and	r24, r24
    2954:	52 f0       	brmi	.+20     	; 0x296a <__fp_round+0x20>
    2956:	bb 0f       	add	r27, r27
    2958:	40 f4       	brcc	.+16     	; 0x296a <__fp_round+0x20>
    295a:	bf 2b       	or	r27, r31
    295c:	11 f4       	brne	.+4      	; 0x2962 <__fp_round+0x18>
    295e:	60 ff       	sbrs	r22, 0
    2960:	04 c0       	rjmp	.+8      	; 0x296a <__fp_round+0x20>
    2962:	6f 5f       	subi	r22, 0xFF	; 255
    2964:	7f 4f       	sbci	r23, 0xFF	; 255
    2966:	8f 4f       	sbci	r24, 0xFF	; 255
    2968:	9f 4f       	sbci	r25, 0xFF	; 255
    296a:	08 95       	ret

0000296c <__fp_split3>:
    296c:	57 fd       	sbrc	r21, 7
    296e:	90 58       	subi	r25, 0x80	; 128
    2970:	44 0f       	add	r20, r20
    2972:	55 1f       	adc	r21, r21
    2974:	59 f0       	breq	.+22     	; 0x298c <__fp_splitA+0x10>
    2976:	5f 3f       	cpi	r21, 0xFF	; 255
    2978:	71 f0       	breq	.+28     	; 0x2996 <__fp_splitA+0x1a>
    297a:	47 95       	ror	r20

0000297c <__fp_splitA>:
    297c:	88 0f       	add	r24, r24
    297e:	97 fb       	bst	r25, 7
    2980:	99 1f       	adc	r25, r25
    2982:	61 f0       	breq	.+24     	; 0x299c <__fp_splitA+0x20>
    2984:	9f 3f       	cpi	r25, 0xFF	; 255
    2986:	79 f0       	breq	.+30     	; 0x29a6 <__fp_splitA+0x2a>
    2988:	87 95       	ror	r24
    298a:	08 95       	ret
    298c:	12 16       	cp	r1, r18
    298e:	13 06       	cpc	r1, r19
    2990:	14 06       	cpc	r1, r20
    2992:	55 1f       	adc	r21, r21
    2994:	f2 cf       	rjmp	.-28     	; 0x297a <__fp_split3+0xe>
    2996:	46 95       	lsr	r20
    2998:	f1 df       	rcall	.-30     	; 0x297c <__fp_splitA>
    299a:	08 c0       	rjmp	.+16     	; 0x29ac <__fp_splitA+0x30>
    299c:	16 16       	cp	r1, r22
    299e:	17 06       	cpc	r1, r23
    29a0:	18 06       	cpc	r1, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	f1 cf       	rjmp	.-30     	; 0x2988 <__fp_splitA+0xc>
    29a6:	86 95       	lsr	r24
    29a8:	71 05       	cpc	r23, r1
    29aa:	61 05       	cpc	r22, r1
    29ac:	08 94       	sec
    29ae:	08 95       	ret

000029b0 <__fp_zero>:
    29b0:	e8 94       	clt

000029b2 <__fp_szero>:
    29b2:	bb 27       	eor	r27, r27
    29b4:	66 27       	eor	r22, r22
    29b6:	77 27       	eor	r23, r23
    29b8:	cb 01       	movw	r24, r22
    29ba:	97 f9       	bld	r25, 7
    29bc:	08 95       	ret

000029be <__gesf2>:
    29be:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__fp_cmp>
    29c2:	08 f4       	brcc	.+2      	; 0x29c6 <__gesf2+0x8>
    29c4:	8f ef       	ldi	r24, 0xFF	; 255
    29c6:	08 95       	ret

000029c8 <__mulsf3>:
    29c8:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3x>
    29cc:	0c 94 a5 14 	jmp	0x294a	; 0x294a <__fp_round>
    29d0:	0e 94 97 14 	call	0x292e	; 0x292e <__fp_pscA>
    29d4:	38 f0       	brcs	.+14     	; 0x29e4 <__mulsf3+0x1c>
    29d6:	0e 94 9e 14 	call	0x293c	; 0x293c <__fp_pscB>
    29da:	20 f0       	brcs	.+8      	; 0x29e4 <__mulsf3+0x1c>
    29dc:	95 23       	and	r25, r21
    29de:	11 f0       	breq	.+4      	; 0x29e4 <__mulsf3+0x1c>
    29e0:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_inf>
    29e4:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_nan>
    29e8:	11 24       	eor	r1, r1
    29ea:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__fp_szero>

000029ee <__mulsf3x>:
    29ee:	0e 94 b6 14 	call	0x296c	; 0x296c <__fp_split3>
    29f2:	70 f3       	brcs	.-36     	; 0x29d0 <__mulsf3+0x8>

000029f4 <__mulsf3_pse>:
    29f4:	95 9f       	mul	r25, r21
    29f6:	c1 f3       	breq	.-16     	; 0x29e8 <__mulsf3+0x20>
    29f8:	95 0f       	add	r25, r21
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	55 1f       	adc	r21, r21
    29fe:	62 9f       	mul	r22, r18
    2a00:	f0 01       	movw	r30, r0
    2a02:	72 9f       	mul	r23, r18
    2a04:	bb 27       	eor	r27, r27
    2a06:	f0 0d       	add	r31, r0
    2a08:	b1 1d       	adc	r27, r1
    2a0a:	63 9f       	mul	r22, r19
    2a0c:	aa 27       	eor	r26, r26
    2a0e:	f0 0d       	add	r31, r0
    2a10:	b1 1d       	adc	r27, r1
    2a12:	aa 1f       	adc	r26, r26
    2a14:	64 9f       	mul	r22, r20
    2a16:	66 27       	eor	r22, r22
    2a18:	b0 0d       	add	r27, r0
    2a1a:	a1 1d       	adc	r26, r1
    2a1c:	66 1f       	adc	r22, r22
    2a1e:	82 9f       	mul	r24, r18
    2a20:	22 27       	eor	r18, r18
    2a22:	b0 0d       	add	r27, r0
    2a24:	a1 1d       	adc	r26, r1
    2a26:	62 1f       	adc	r22, r18
    2a28:	73 9f       	mul	r23, r19
    2a2a:	b0 0d       	add	r27, r0
    2a2c:	a1 1d       	adc	r26, r1
    2a2e:	62 1f       	adc	r22, r18
    2a30:	83 9f       	mul	r24, r19
    2a32:	a0 0d       	add	r26, r0
    2a34:	61 1d       	adc	r22, r1
    2a36:	22 1f       	adc	r18, r18
    2a38:	74 9f       	mul	r23, r20
    2a3a:	33 27       	eor	r19, r19
    2a3c:	a0 0d       	add	r26, r0
    2a3e:	61 1d       	adc	r22, r1
    2a40:	23 1f       	adc	r18, r19
    2a42:	84 9f       	mul	r24, r20
    2a44:	60 0d       	add	r22, r0
    2a46:	21 1d       	adc	r18, r1
    2a48:	82 2f       	mov	r24, r18
    2a4a:	76 2f       	mov	r23, r22
    2a4c:	6a 2f       	mov	r22, r26
    2a4e:	11 24       	eor	r1, r1
    2a50:	9f 57       	subi	r25, 0x7F	; 127
    2a52:	50 40       	sbci	r21, 0x00	; 0
    2a54:	9a f0       	brmi	.+38     	; 0x2a7c <__mulsf3_pse+0x88>
    2a56:	f1 f0       	breq	.+60     	; 0x2a94 <__mulsf3_pse+0xa0>
    2a58:	88 23       	and	r24, r24
    2a5a:	4a f0       	brmi	.+18     	; 0x2a6e <__mulsf3_pse+0x7a>
    2a5c:	ee 0f       	add	r30, r30
    2a5e:	ff 1f       	adc	r31, r31
    2a60:	bb 1f       	adc	r27, r27
    2a62:	66 1f       	adc	r22, r22
    2a64:	77 1f       	adc	r23, r23
    2a66:	88 1f       	adc	r24, r24
    2a68:	91 50       	subi	r25, 0x01	; 1
    2a6a:	50 40       	sbci	r21, 0x00	; 0
    2a6c:	a9 f7       	brne	.-22     	; 0x2a58 <__mulsf3_pse+0x64>
    2a6e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a70:	51 05       	cpc	r21, r1
    2a72:	80 f0       	brcs	.+32     	; 0x2a94 <__mulsf3_pse+0xa0>
    2a74:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_inf>
    2a78:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__fp_szero>
    2a7c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a7e:	e4 f3       	brlt	.-8      	; 0x2a78 <__mulsf3_pse+0x84>
    2a80:	98 3e       	cpi	r25, 0xE8	; 232
    2a82:	d4 f3       	brlt	.-12     	; 0x2a78 <__mulsf3_pse+0x84>
    2a84:	86 95       	lsr	r24
    2a86:	77 95       	ror	r23
    2a88:	67 95       	ror	r22
    2a8a:	b7 95       	ror	r27
    2a8c:	f7 95       	ror	r31
    2a8e:	e7 95       	ror	r30
    2a90:	9f 5f       	subi	r25, 0xFF	; 255
    2a92:	c1 f7       	brne	.-16     	; 0x2a84 <__mulsf3_pse+0x90>
    2a94:	fe 2b       	or	r31, r30
    2a96:	88 0f       	add	r24, r24
    2a98:	91 1d       	adc	r25, r1
    2a9a:	96 95       	lsr	r25
    2a9c:	87 95       	ror	r24
    2a9e:	97 f9       	bld	r25, 7
    2aa0:	08 95       	ret

00002aa2 <memset>:
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	01 c0       	rjmp	.+2      	; 0x2aa8 <memset+0x6>
    2aa6:	6d 93       	st	X+, r22
    2aa8:	41 50       	subi	r20, 0x01	; 1
    2aaa:	50 40       	sbci	r21, 0x00	; 0
    2aac:	e0 f7       	brcc	.-8      	; 0x2aa6 <memset+0x4>
    2aae:	08 95       	ret

00002ab0 <sprintf>:
    2ab0:	ae e0       	ldi	r26, 0x0E	; 14
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	ee e5       	ldi	r30, 0x5E	; 94
    2ab6:	f5 e1       	ldi	r31, 0x15	; 21
    2ab8:	0c 94 07 18 	jmp	0x300e	; 0x300e <__prologue_saves__+0x1c>
    2abc:	0d 89       	ldd	r16, Y+21	; 0x15
    2abe:	1e 89       	ldd	r17, Y+22	; 0x16
    2ac0:	86 e0       	ldi	r24, 0x06	; 6
    2ac2:	8c 83       	std	Y+4, r24	; 0x04
    2ac4:	1a 83       	std	Y+2, r17	; 0x02
    2ac6:	09 83       	std	Y+1, r16	; 0x01
    2ac8:	8f ef       	ldi	r24, 0xFF	; 255
    2aca:	9f e7       	ldi	r25, 0x7F	; 127
    2acc:	9e 83       	std	Y+6, r25	; 0x06
    2ace:	8d 83       	std	Y+5, r24	; 0x05
    2ad0:	ae 01       	movw	r20, r28
    2ad2:	47 5e       	subi	r20, 0xE7	; 231
    2ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad6:	6f 89       	ldd	r22, Y+23	; 0x17
    2ad8:	78 8d       	ldd	r23, Y+24	; 0x18
    2ada:	ce 01       	movw	r24, r28
    2adc:	01 96       	adiw	r24, 0x01	; 1
    2ade:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <vfprintf>
    2ae2:	2f 81       	ldd	r18, Y+7	; 0x07
    2ae4:	38 85       	ldd	r19, Y+8	; 0x08
    2ae6:	02 0f       	add	r16, r18
    2ae8:	13 1f       	adc	r17, r19
    2aea:	f8 01       	movw	r30, r16
    2aec:	10 82       	st	Z, r1
    2aee:	2e 96       	adiw	r28, 0x0e	; 14
    2af0:	e4 e0       	ldi	r30, 0x04	; 4
    2af2:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__epilogue_restores__+0x1c>

00002af6 <vfprintf>:
    2af6:	ab e0       	ldi	r26, 0x0B	; 11
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e1 e8       	ldi	r30, 0x81	; 129
    2afc:	f5 e1       	ldi	r31, 0x15	; 21
    2afe:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__prologue_saves__>
    2b02:	7c 01       	movw	r14, r24
    2b04:	3b 01       	movw	r6, r22
    2b06:	8a 01       	movw	r16, r20
    2b08:	fc 01       	movw	r30, r24
    2b0a:	17 82       	std	Z+7, r1	; 0x07
    2b0c:	16 82       	std	Z+6, r1	; 0x06
    2b0e:	83 81       	ldd	r24, Z+3	; 0x03
    2b10:	81 ff       	sbrs	r24, 1
    2b12:	c8 c1       	rjmp	.+912    	; 0x2ea4 <vfprintf+0x3ae>
    2b14:	ce 01       	movw	r24, r28
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	5c 01       	movw	r10, r24
    2b1a:	f7 01       	movw	r30, r14
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	f3 01       	movw	r30, r6
    2b20:	93 fd       	sbrc	r25, 3
    2b22:	85 91       	lpm	r24, Z+
    2b24:	93 ff       	sbrs	r25, 3
    2b26:	81 91       	ld	r24, Z+
    2b28:	3f 01       	movw	r6, r30
    2b2a:	88 23       	and	r24, r24
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <vfprintf+0x3a>
    2b2e:	53 c1       	rjmp	.+678    	; 0x2dd6 <vfprintf+0x2e0>
    2b30:	85 32       	cpi	r24, 0x25	; 37
    2b32:	39 f4       	brne	.+14     	; 0x2b42 <vfprintf+0x4c>
    2b34:	93 fd       	sbrc	r25, 3
    2b36:	85 91       	lpm	r24, Z+
    2b38:	93 ff       	sbrs	r25, 3
    2b3a:	81 91       	ld	r24, Z+
    2b3c:	3f 01       	movw	r6, r30
    2b3e:	85 32       	cpi	r24, 0x25	; 37
    2b40:	29 f4       	brne	.+10     	; 0x2b4c <vfprintf+0x56>
    2b42:	b7 01       	movw	r22, r14
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <fputc>
    2b4a:	e7 cf       	rjmp	.-50     	; 0x2b1a <vfprintf+0x24>
    2b4c:	91 2c       	mov	r9, r1
    2b4e:	21 2c       	mov	r2, r1
    2b50:	31 2c       	mov	r3, r1
    2b52:	ff e1       	ldi	r31, 0x1F	; 31
    2b54:	f3 15       	cp	r31, r3
    2b56:	38 f0       	brcs	.+14     	; 0x2b66 <vfprintf+0x70>
    2b58:	8b 32       	cpi	r24, 0x2B	; 43
    2b5a:	11 f1       	breq	.+68     	; 0x2ba0 <vfprintf+0xaa>
    2b5c:	90 f4       	brcc	.+36     	; 0x2b82 <vfprintf+0x8c>
    2b5e:	80 32       	cpi	r24, 0x20	; 32
    2b60:	09 f1       	breq	.+66     	; 0x2ba4 <vfprintf+0xae>
    2b62:	83 32       	cpi	r24, 0x23	; 35
    2b64:	29 f1       	breq	.+74     	; 0x2bb0 <vfprintf+0xba>
    2b66:	37 fc       	sbrc	r3, 7
    2b68:	3c c0       	rjmp	.+120    	; 0x2be2 <vfprintf+0xec>
    2b6a:	20 ed       	ldi	r18, 0xD0	; 208
    2b6c:	28 0f       	add	r18, r24
    2b6e:	2a 30       	cpi	r18, 0x0A	; 10
    2b70:	50 f5       	brcc	.+84     	; 0x2bc6 <vfprintf+0xd0>
    2b72:	36 fe       	sbrs	r3, 6
    2b74:	20 c0       	rjmp	.+64     	; 0x2bb6 <vfprintf+0xc0>
    2b76:	8a e0       	ldi	r24, 0x0A	; 10
    2b78:	98 9e       	mul	r9, r24
    2b7a:	20 0d       	add	r18, r0
    2b7c:	11 24       	eor	r1, r1
    2b7e:	92 2e       	mov	r9, r18
    2b80:	06 c0       	rjmp	.+12     	; 0x2b8e <vfprintf+0x98>
    2b82:	8d 32       	cpi	r24, 0x2D	; 45
    2b84:	91 f0       	breq	.+36     	; 0x2baa <vfprintf+0xb4>
    2b86:	80 33       	cpi	r24, 0x30	; 48
    2b88:	71 f7       	brne	.-36     	; 0x2b66 <vfprintf+0x70>
    2b8a:	68 94       	set
    2b8c:	30 f8       	bld	r3, 0
    2b8e:	f3 01       	movw	r30, r6
    2b90:	93 fd       	sbrc	r25, 3
    2b92:	85 91       	lpm	r24, Z+
    2b94:	93 ff       	sbrs	r25, 3
    2b96:	81 91       	ld	r24, Z+
    2b98:	3f 01       	movw	r6, r30
    2b9a:	81 11       	cpse	r24, r1
    2b9c:	da cf       	rjmp	.-76     	; 0x2b52 <vfprintf+0x5c>
    2b9e:	21 c0       	rjmp	.+66     	; 0x2be2 <vfprintf+0xec>
    2ba0:	68 94       	set
    2ba2:	31 f8       	bld	r3, 1
    2ba4:	68 94       	set
    2ba6:	32 f8       	bld	r3, 2
    2ba8:	f2 cf       	rjmp	.-28     	; 0x2b8e <vfprintf+0x98>
    2baa:	68 94       	set
    2bac:	33 f8       	bld	r3, 3
    2bae:	ef cf       	rjmp	.-34     	; 0x2b8e <vfprintf+0x98>
    2bb0:	68 94       	set
    2bb2:	34 f8       	bld	r3, 4
    2bb4:	ec cf       	rjmp	.-40     	; 0x2b8e <vfprintf+0x98>
    2bb6:	ea e0       	ldi	r30, 0x0A	; 10
    2bb8:	2e 9e       	mul	r2, r30
    2bba:	20 0d       	add	r18, r0
    2bbc:	11 24       	eor	r1, r1
    2bbe:	22 2e       	mov	r2, r18
    2bc0:	68 94       	set
    2bc2:	35 f8       	bld	r3, 5
    2bc4:	e4 cf       	rjmp	.-56     	; 0x2b8e <vfprintf+0x98>
    2bc6:	8e 32       	cpi	r24, 0x2E	; 46
    2bc8:	29 f4       	brne	.+10     	; 0x2bd4 <vfprintf+0xde>
    2bca:	36 fc       	sbrc	r3, 6
    2bcc:	04 c1       	rjmp	.+520    	; 0x2dd6 <vfprintf+0x2e0>
    2bce:	68 94       	set
    2bd0:	36 f8       	bld	r3, 6
    2bd2:	dd cf       	rjmp	.-70     	; 0x2b8e <vfprintf+0x98>
    2bd4:	8c 36       	cpi	r24, 0x6C	; 108
    2bd6:	19 f4       	brne	.+6      	; 0x2bde <vfprintf+0xe8>
    2bd8:	68 94       	set
    2bda:	37 f8       	bld	r3, 7
    2bdc:	d8 cf       	rjmp	.-80     	; 0x2b8e <vfprintf+0x98>
    2bde:	88 36       	cpi	r24, 0x68	; 104
    2be0:	b1 f2       	breq	.-84     	; 0x2b8e <vfprintf+0x98>
    2be2:	98 2f       	mov	r25, r24
    2be4:	9f 7d       	andi	r25, 0xDF	; 223
    2be6:	95 54       	subi	r25, 0x45	; 69
    2be8:	93 30       	cpi	r25, 0x03	; 3
    2bea:	e0 f0       	brcs	.+56     	; 0x2c24 <vfprintf+0x12e>
    2bec:	83 36       	cpi	r24, 0x63	; 99
    2bee:	a1 f1       	breq	.+104    	; 0x2c58 <vfprintf+0x162>
    2bf0:	83 37       	cpi	r24, 0x73	; 115
    2bf2:	c1 f1       	breq	.+112    	; 0x2c64 <vfprintf+0x16e>
    2bf4:	83 35       	cpi	r24, 0x53	; 83
    2bf6:	09 f0       	breq	.+2      	; 0x2bfa <vfprintf+0x104>
    2bf8:	63 c0       	rjmp	.+198    	; 0x2cc0 <vfprintf+0x1ca>
    2bfa:	28 01       	movw	r4, r16
    2bfc:	f2 e0       	ldi	r31, 0x02	; 2
    2bfe:	4f 0e       	add	r4, r31
    2c00:	51 1c       	adc	r5, r1
    2c02:	f8 01       	movw	r30, r16
    2c04:	c0 80       	ld	r12, Z
    2c06:	d1 80       	ldd	r13, Z+1	; 0x01
    2c08:	69 2d       	mov	r22, r9
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	36 fc       	sbrc	r3, 6
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <vfprintf+0x11e>
    2c10:	6f ef       	ldi	r22, 0xFF	; 255
    2c12:	7f ef       	ldi	r23, 0xFF	; 255
    2c14:	c6 01       	movw	r24, r12
    2c16:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <strnlen_P>
    2c1a:	4c 01       	movw	r8, r24
    2c1c:	68 94       	set
    2c1e:	37 f8       	bld	r3, 7
    2c20:	82 01       	movw	r16, r4
    2c22:	0a c0       	rjmp	.+20     	; 0x2c38 <vfprintf+0x142>
    2c24:	0c 5f       	subi	r16, 0xFC	; 252
    2c26:	1f 4f       	sbci	r17, 0xFF	; 255
    2c28:	ff e3       	ldi	r31, 0x3F	; 63
    2c2a:	f9 83       	std	Y+1, r31	; 0x01
    2c2c:	88 24       	eor	r8, r8
    2c2e:	83 94       	inc	r8
    2c30:	91 2c       	mov	r9, r1
    2c32:	65 01       	movw	r12, r10
    2c34:	e8 94       	clt
    2c36:	37 f8       	bld	r3, 7
    2c38:	33 fe       	sbrs	r3, 3
    2c3a:	2d c0       	rjmp	.+90     	; 0x2c96 <vfprintf+0x1a0>
    2c3c:	52 2c       	mov	r5, r2
    2c3e:	81 14       	cp	r8, r1
    2c40:	91 04       	cpc	r9, r1
    2c42:	71 f5       	brne	.+92     	; 0x2ca0 <vfprintf+0x1aa>
    2c44:	55 20       	and	r5, r5
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <vfprintf+0x154>
    2c48:	68 cf       	rjmp	.-304    	; 0x2b1a <vfprintf+0x24>
    2c4a:	b7 01       	movw	r22, r14
    2c4c:	80 e2       	ldi	r24, 0x20	; 32
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <fputc>
    2c54:	5a 94       	dec	r5
    2c56:	f6 cf       	rjmp	.-20     	; 0x2c44 <vfprintf+0x14e>
    2c58:	f8 01       	movw	r30, r16
    2c5a:	80 81       	ld	r24, Z
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	0e 5f       	subi	r16, 0xFE	; 254
    2c60:	1f 4f       	sbci	r17, 0xFF	; 255
    2c62:	e4 cf       	rjmp	.-56     	; 0x2c2c <vfprintf+0x136>
    2c64:	28 01       	movw	r4, r16
    2c66:	f2 e0       	ldi	r31, 0x02	; 2
    2c68:	4f 0e       	add	r4, r31
    2c6a:	51 1c       	adc	r5, r1
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	c0 80       	ld	r12, Z
    2c70:	d1 80       	ldd	r13, Z+1	; 0x01
    2c72:	69 2d       	mov	r22, r9
    2c74:	70 e0       	ldi	r23, 0x00	; 0
    2c76:	36 fc       	sbrc	r3, 6
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <vfprintf+0x188>
    2c7a:	6f ef       	ldi	r22, 0xFF	; 255
    2c7c:	7f ef       	ldi	r23, 0xFF	; 255
    2c7e:	c6 01       	movw	r24, r12
    2c80:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <strnlen>
    2c84:	4c 01       	movw	r8, r24
    2c86:	82 01       	movw	r16, r4
    2c88:	d5 cf       	rjmp	.-86     	; 0x2c34 <vfprintf+0x13e>
    2c8a:	b7 01       	movw	r22, r14
    2c8c:	80 e2       	ldi	r24, 0x20	; 32
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <fputc>
    2c94:	2a 94       	dec	r2
    2c96:	28 14       	cp	r2, r8
    2c98:	19 04       	cpc	r1, r9
    2c9a:	09 f0       	breq	.+2      	; 0x2c9e <vfprintf+0x1a8>
    2c9c:	b0 f7       	brcc	.-20     	; 0x2c8a <vfprintf+0x194>
    2c9e:	ce cf       	rjmp	.-100    	; 0x2c3c <vfprintf+0x146>
    2ca0:	f6 01       	movw	r30, r12
    2ca2:	37 fc       	sbrc	r3, 7
    2ca4:	85 91       	lpm	r24, Z+
    2ca6:	37 fe       	sbrs	r3, 7
    2ca8:	81 91       	ld	r24, Z+
    2caa:	6f 01       	movw	r12, r30
    2cac:	b7 01       	movw	r22, r14
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <fputc>
    2cb4:	51 10       	cpse	r5, r1
    2cb6:	5a 94       	dec	r5
    2cb8:	f1 e0       	ldi	r31, 0x01	; 1
    2cba:	8f 1a       	sub	r8, r31
    2cbc:	91 08       	sbc	r9, r1
    2cbe:	bf cf       	rjmp	.-130    	; 0x2c3e <vfprintf+0x148>
    2cc0:	84 36       	cpi	r24, 0x64	; 100
    2cc2:	19 f0       	breq	.+6      	; 0x2cca <vfprintf+0x1d4>
    2cc4:	89 36       	cpi	r24, 0x69	; 105
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <vfprintf+0x1d4>
    2cc8:	77 c0       	rjmp	.+238    	; 0x2db8 <vfprintf+0x2c2>
    2cca:	f8 01       	movw	r30, r16
    2ccc:	37 fe       	sbrs	r3, 7
    2cce:	6b c0       	rjmp	.+214    	; 0x2da6 <vfprintf+0x2b0>
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	0c 5f       	subi	r16, 0xFC	; 252
    2cda:	1f 4f       	sbci	r17, 0xFF	; 255
    2cdc:	f3 2d       	mov	r31, r3
    2cde:	ff 76       	andi	r31, 0x6F	; 111
    2ce0:	3f 2e       	mov	r3, r31
    2ce2:	97 ff       	sbrs	r25, 7
    2ce4:	09 c0       	rjmp	.+18     	; 0x2cf8 <vfprintf+0x202>
    2ce6:	90 95       	com	r25
    2ce8:	80 95       	com	r24
    2cea:	70 95       	com	r23
    2cec:	61 95       	neg	r22
    2cee:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf0:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf4:	68 94       	set
    2cf6:	37 f8       	bld	r3, 7
    2cf8:	2a e0       	ldi	r18, 0x0A	; 10
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	a5 01       	movw	r20, r10
    2cfe:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__ultoa_invert>
    2d02:	c8 2e       	mov	r12, r24
    2d04:	ca 18       	sub	r12, r10
    2d06:	8c 2c       	mov	r8, r12
    2d08:	43 2c       	mov	r4, r3
    2d0a:	36 fe       	sbrs	r3, 6
    2d0c:	0c c0       	rjmp	.+24     	; 0x2d26 <vfprintf+0x230>
    2d0e:	e8 94       	clt
    2d10:	40 f8       	bld	r4, 0
    2d12:	c9 14       	cp	r12, r9
    2d14:	40 f4       	brcc	.+16     	; 0x2d26 <vfprintf+0x230>
    2d16:	34 fe       	sbrs	r3, 4
    2d18:	05 c0       	rjmp	.+10     	; 0x2d24 <vfprintf+0x22e>
    2d1a:	32 fc       	sbrc	r3, 2
    2d1c:	03 c0       	rjmp	.+6      	; 0x2d24 <vfprintf+0x22e>
    2d1e:	f3 2d       	mov	r31, r3
    2d20:	fe 7e       	andi	r31, 0xEE	; 238
    2d22:	4f 2e       	mov	r4, r31
    2d24:	89 2c       	mov	r8, r9
    2d26:	44 fe       	sbrs	r4, 4
    2d28:	95 c0       	rjmp	.+298    	; 0x2e54 <vfprintf+0x35e>
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	ec 0d       	add	r30, r12
    2d2e:	f1 1d       	adc	r31, r1
    2d30:	80 81       	ld	r24, Z
    2d32:	80 33       	cpi	r24, 0x30	; 48
    2d34:	09 f0       	breq	.+2      	; 0x2d38 <vfprintf+0x242>
    2d36:	87 c0       	rjmp	.+270    	; 0x2e46 <vfprintf+0x350>
    2d38:	24 2d       	mov	r18, r4
    2d3a:	29 7e       	andi	r18, 0xE9	; 233
    2d3c:	42 2e       	mov	r4, r18
    2d3e:	84 2d       	mov	r24, r4
    2d40:	88 70       	andi	r24, 0x08	; 8
    2d42:	58 2e       	mov	r5, r24
    2d44:	43 fc       	sbrc	r4, 3
    2d46:	95 c0       	rjmp	.+298    	; 0x2e72 <vfprintf+0x37c>
    2d48:	40 fe       	sbrs	r4, 0
    2d4a:	8f c0       	rjmp	.+286    	; 0x2e6a <vfprintf+0x374>
    2d4c:	9c 2c       	mov	r9, r12
    2d4e:	82 14       	cp	r8, r2
    2d50:	18 f4       	brcc	.+6      	; 0x2d58 <vfprintf+0x262>
    2d52:	2c 0c       	add	r2, r12
    2d54:	92 2c       	mov	r9, r2
    2d56:	98 18       	sub	r9, r8
    2d58:	44 fe       	sbrs	r4, 4
    2d5a:	91 c0       	rjmp	.+290    	; 0x2e7e <vfprintf+0x388>
    2d5c:	b7 01       	movw	r22, r14
    2d5e:	80 e3       	ldi	r24, 0x30	; 48
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <fputc>
    2d66:	42 fe       	sbrs	r4, 2
    2d68:	09 c0       	rjmp	.+18     	; 0x2d7c <vfprintf+0x286>
    2d6a:	88 e7       	ldi	r24, 0x78	; 120
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	41 fe       	sbrs	r4, 1
    2d70:	02 c0       	rjmp	.+4      	; 0x2d76 <vfprintf+0x280>
    2d72:	88 e5       	ldi	r24, 0x58	; 88
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	b7 01       	movw	r22, r14
    2d78:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <fputc>
    2d7c:	c9 14       	cp	r12, r9
    2d7e:	08 f4       	brcc	.+2      	; 0x2d82 <vfprintf+0x28c>
    2d80:	8a c0       	rjmp	.+276    	; 0x2e96 <vfprintf+0x3a0>
    2d82:	ca 94       	dec	r12
    2d84:	d1 2c       	mov	r13, r1
    2d86:	9f ef       	ldi	r25, 0xFF	; 255
    2d88:	c9 1a       	sub	r12, r25
    2d8a:	d9 0a       	sbc	r13, r25
    2d8c:	ca 0c       	add	r12, r10
    2d8e:	db 1c       	adc	r13, r11
    2d90:	f6 01       	movw	r30, r12
    2d92:	82 91       	ld	r24, -Z
    2d94:	6f 01       	movw	r12, r30
    2d96:	b7 01       	movw	r22, r14
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <fputc>
    2d9e:	ac 14       	cp	r10, r12
    2da0:	bd 04       	cpc	r11, r13
    2da2:	b1 f7       	brne	.-20     	; 0x2d90 <vfprintf+0x29a>
    2da4:	4f cf       	rjmp	.-354    	; 0x2c44 <vfprintf+0x14e>
    2da6:	60 81       	ld	r22, Z
    2da8:	71 81       	ldd	r23, Z+1	; 0x01
    2daa:	07 2e       	mov	r0, r23
    2dac:	00 0c       	add	r0, r0
    2dae:	88 0b       	sbc	r24, r24
    2db0:	99 0b       	sbc	r25, r25
    2db2:	0e 5f       	subi	r16, 0xFE	; 254
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	92 cf       	rjmp	.-220    	; 0x2cdc <vfprintf+0x1e6>
    2db8:	d3 2c       	mov	r13, r3
    2dba:	e8 94       	clt
    2dbc:	d4 f8       	bld	r13, 4
    2dbe:	2a e0       	ldi	r18, 0x0A	; 10
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	85 37       	cpi	r24, 0x75	; 117
    2dc4:	39 f1       	breq	.+78     	; 0x2e14 <vfprintf+0x31e>
    2dc6:	23 2d       	mov	r18, r3
    2dc8:	29 7f       	andi	r18, 0xF9	; 249
    2dca:	d2 2e       	mov	r13, r18
    2dcc:	8f 36       	cpi	r24, 0x6F	; 111
    2dce:	01 f1       	breq	.+64     	; 0x2e10 <vfprintf+0x31a>
    2dd0:	48 f4       	brcc	.+18     	; 0x2de4 <vfprintf+0x2ee>
    2dd2:	88 35       	cpi	r24, 0x58	; 88
    2dd4:	a9 f0       	breq	.+42     	; 0x2e00 <vfprintf+0x30a>
    2dd6:	f7 01       	movw	r30, r14
    2dd8:	86 81       	ldd	r24, Z+6	; 0x06
    2dda:	97 81       	ldd	r25, Z+7	; 0x07
    2ddc:	2b 96       	adiw	r28, 0x0b	; 11
    2dde:	e2 e1       	ldi	r30, 0x12	; 18
    2de0:	0c 94 15 18 	jmp	0x302a	; 0x302a <__epilogue_restores__>
    2de4:	80 37       	cpi	r24, 0x70	; 112
    2de6:	49 f0       	breq	.+18     	; 0x2dfa <vfprintf+0x304>
    2de8:	88 37       	cpi	r24, 0x78	; 120
    2dea:	a9 f7       	brne	.-22     	; 0x2dd6 <vfprintf+0x2e0>
    2dec:	d4 fe       	sbrs	r13, 4
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <vfprintf+0x2fe>
    2df0:	68 94       	set
    2df2:	d2 f8       	bld	r13, 2
    2df4:	20 e1       	ldi	r18, 0x10	; 16
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	0d c0       	rjmp	.+26     	; 0x2e14 <vfprintf+0x31e>
    2dfa:	68 94       	set
    2dfc:	d4 f8       	bld	r13, 4
    2dfe:	f6 cf       	rjmp	.-20     	; 0x2dec <vfprintf+0x2f6>
    2e00:	34 fe       	sbrs	r3, 4
    2e02:	03 c0       	rjmp	.+6      	; 0x2e0a <vfprintf+0x314>
    2e04:	82 2f       	mov	r24, r18
    2e06:	86 60       	ori	r24, 0x06	; 6
    2e08:	d8 2e       	mov	r13, r24
    2e0a:	20 e1       	ldi	r18, 0x10	; 16
    2e0c:	32 e0       	ldi	r19, 0x02	; 2
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <vfprintf+0x31e>
    2e10:	28 e0       	ldi	r18, 0x08	; 8
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	f8 01       	movw	r30, r16
    2e16:	d7 fe       	sbrs	r13, 7
    2e18:	0f c0       	rjmp	.+30     	; 0x2e38 <vfprintf+0x342>
    2e1a:	60 81       	ld	r22, Z
    2e1c:	71 81       	ldd	r23, Z+1	; 0x01
    2e1e:	82 81       	ldd	r24, Z+2	; 0x02
    2e20:	93 81       	ldd	r25, Z+3	; 0x03
    2e22:	0c 5f       	subi	r16, 0xFC	; 252
    2e24:	1f 4f       	sbci	r17, 0xFF	; 255
    2e26:	a5 01       	movw	r20, r10
    2e28:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__ultoa_invert>
    2e2c:	c8 2e       	mov	r12, r24
    2e2e:	ca 18       	sub	r12, r10
    2e30:	3d 2c       	mov	r3, r13
    2e32:	e8 94       	clt
    2e34:	37 f8       	bld	r3, 7
    2e36:	67 cf       	rjmp	.-306    	; 0x2d06 <vfprintf+0x210>
    2e38:	60 81       	ld	r22, Z
    2e3a:	71 81       	ldd	r23, Z+1	; 0x01
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	0e 5f       	subi	r16, 0xFE	; 254
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	f0 cf       	rjmp	.-32     	; 0x2e26 <vfprintf+0x330>
    2e46:	42 fc       	sbrc	r4, 2
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <vfprintf+0x358>
    2e4a:	83 94       	inc	r8
    2e4c:	78 cf       	rjmp	.-272    	; 0x2d3e <vfprintf+0x248>
    2e4e:	83 94       	inc	r8
    2e50:	83 94       	inc	r8
    2e52:	75 cf       	rjmp	.-278    	; 0x2d3e <vfprintf+0x248>
    2e54:	84 2d       	mov	r24, r4
    2e56:	86 78       	andi	r24, 0x86	; 134
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <vfprintf+0x366>
    2e5a:	71 cf       	rjmp	.-286    	; 0x2d3e <vfprintf+0x248>
    2e5c:	f6 cf       	rjmp	.-20     	; 0x2e4a <vfprintf+0x354>
    2e5e:	b7 01       	movw	r22, r14
    2e60:	80 e2       	ldi	r24, 0x20	; 32
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <fputc>
    2e68:	83 94       	inc	r8
    2e6a:	82 14       	cp	r8, r2
    2e6c:	c0 f3       	brcs	.-16     	; 0x2e5e <vfprintf+0x368>
    2e6e:	51 2c       	mov	r5, r1
    2e70:	73 cf       	rjmp	.-282    	; 0x2d58 <vfprintf+0x262>
    2e72:	52 2c       	mov	r5, r2
    2e74:	58 18       	sub	r5, r8
    2e76:	82 14       	cp	r8, r2
    2e78:	08 f4       	brcc	.+2      	; 0x2e7c <vfprintf+0x386>
    2e7a:	6e cf       	rjmp	.-292    	; 0x2d58 <vfprintf+0x262>
    2e7c:	f8 cf       	rjmp	.-16     	; 0x2e6e <vfprintf+0x378>
    2e7e:	84 2d       	mov	r24, r4
    2e80:	86 78       	andi	r24, 0x86	; 134
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <vfprintf+0x390>
    2e84:	7b cf       	rjmp	.-266    	; 0x2d7c <vfprintf+0x286>
    2e86:	8b e2       	ldi	r24, 0x2B	; 43
    2e88:	41 fe       	sbrs	r4, 1
    2e8a:	80 e2       	ldi	r24, 0x20	; 32
    2e8c:	47 fc       	sbrc	r4, 7
    2e8e:	8d e2       	ldi	r24, 0x2D	; 45
    2e90:	b7 01       	movw	r22, r14
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	71 cf       	rjmp	.-286    	; 0x2d78 <vfprintf+0x282>
    2e96:	b7 01       	movw	r22, r14
    2e98:	80 e3       	ldi	r24, 0x30	; 48
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <fputc>
    2ea0:	9a 94       	dec	r9
    2ea2:	6c cf       	rjmp	.-296    	; 0x2d7c <vfprintf+0x286>
    2ea4:	8f ef       	ldi	r24, 0xFF	; 255
    2ea6:	9f ef       	ldi	r25, 0xFF	; 255
    2ea8:	99 cf       	rjmp	.-206    	; 0x2ddc <vfprintf+0x2e6>

00002eaa <strnlen_P>:
    2eaa:	fc 01       	movw	r30, r24
    2eac:	05 90       	lpm	r0, Z+
    2eae:	61 50       	subi	r22, 0x01	; 1
    2eb0:	70 40       	sbci	r23, 0x00	; 0
    2eb2:	01 10       	cpse	r0, r1
    2eb4:	d8 f7       	brcc	.-10     	; 0x2eac <strnlen_P+0x2>
    2eb6:	80 95       	com	r24
    2eb8:	90 95       	com	r25
    2eba:	8e 0f       	add	r24, r30
    2ebc:	9f 1f       	adc	r25, r31
    2ebe:	08 95       	ret

00002ec0 <strnlen>:
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	61 50       	subi	r22, 0x01	; 1
    2ec4:	70 40       	sbci	r23, 0x00	; 0
    2ec6:	01 90       	ld	r0, Z+
    2ec8:	01 10       	cpse	r0, r1
    2eca:	d8 f7       	brcc	.-10     	; 0x2ec2 <strnlen+0x2>
    2ecc:	80 95       	com	r24
    2ece:	90 95       	com	r25
    2ed0:	8e 0f       	add	r24, r30
    2ed2:	9f 1f       	adc	r25, r31
    2ed4:	08 95       	ret

00002ed6 <fputc>:
    2ed6:	0f 93       	push	r16
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	18 2f       	mov	r17, r24
    2ee0:	09 2f       	mov	r16, r25
    2ee2:	eb 01       	movw	r28, r22
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	81 fd       	sbrc	r24, 1
    2ee8:	09 c0       	rjmp	.+18     	; 0x2efc <fputc+0x26>
    2eea:	1f ef       	ldi	r17, 0xFF	; 255
    2eec:	0f ef       	ldi	r16, 0xFF	; 255
    2eee:	81 2f       	mov	r24, r17
    2ef0:	90 2f       	mov	r25, r16
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	08 95       	ret
    2efc:	82 ff       	sbrs	r24, 2
    2efe:	14 c0       	rjmp	.+40     	; 0x2f28 <fputc+0x52>
    2f00:	2e 81       	ldd	r18, Y+6	; 0x06
    2f02:	3f 81       	ldd	r19, Y+7	; 0x07
    2f04:	8c 81       	ldd	r24, Y+4	; 0x04
    2f06:	9d 81       	ldd	r25, Y+5	; 0x05
    2f08:	28 17       	cp	r18, r24
    2f0a:	39 07       	cpc	r19, r25
    2f0c:	3c f4       	brge	.+14     	; 0x2f1c <fputc+0x46>
    2f0e:	e8 81       	ld	r30, Y
    2f10:	f9 81       	ldd	r31, Y+1	; 0x01
    2f12:	cf 01       	movw	r24, r30
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	99 83       	std	Y+1, r25	; 0x01
    2f18:	88 83       	st	Y, r24
    2f1a:	10 83       	st	Z, r17
    2f1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f20:	01 96       	adiw	r24, 0x01	; 1
    2f22:	9f 83       	std	Y+7, r25	; 0x07
    2f24:	8e 83       	std	Y+6, r24	; 0x06
    2f26:	e3 cf       	rjmp	.-58     	; 0x2eee <fputc+0x18>
    2f28:	e8 85       	ldd	r30, Y+8	; 0x08
    2f2a:	f9 85       	ldd	r31, Y+9	; 0x09
    2f2c:	81 2f       	mov	r24, r17
    2f2e:	09 95       	icall
    2f30:	89 2b       	or	r24, r25
    2f32:	a1 f3       	breq	.-24     	; 0x2f1c <fputc+0x46>
    2f34:	da cf       	rjmp	.-76     	; 0x2eea <fputc+0x14>

00002f36 <__ultoa_invert>:
    2f36:	fa 01       	movw	r30, r20
    2f38:	aa 27       	eor	r26, r26
    2f3a:	28 30       	cpi	r18, 0x08	; 8
    2f3c:	51 f1       	breq	.+84     	; 0x2f92 <__ultoa_invert+0x5c>
    2f3e:	20 31       	cpi	r18, 0x10	; 16
    2f40:	81 f1       	breq	.+96     	; 0x2fa2 <__ultoa_invert+0x6c>
    2f42:	e8 94       	clt
    2f44:	6f 93       	push	r22
    2f46:	6e 7f       	andi	r22, 0xFE	; 254
    2f48:	6e 5f       	subi	r22, 0xFE	; 254
    2f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f50:	af 4f       	sbci	r26, 0xFF	; 255
    2f52:	b1 e0       	ldi	r27, 0x01	; 1
    2f54:	3e d0       	rcall	.+124    	; 0x2fd2 <__ultoa_invert+0x9c>
    2f56:	b4 e0       	ldi	r27, 0x04	; 4
    2f58:	3c d0       	rcall	.+120    	; 0x2fd2 <__ultoa_invert+0x9c>
    2f5a:	67 0f       	add	r22, r23
    2f5c:	78 1f       	adc	r23, r24
    2f5e:	89 1f       	adc	r24, r25
    2f60:	9a 1f       	adc	r25, r26
    2f62:	a1 1d       	adc	r26, r1
    2f64:	68 0f       	add	r22, r24
    2f66:	79 1f       	adc	r23, r25
    2f68:	8a 1f       	adc	r24, r26
    2f6a:	91 1d       	adc	r25, r1
    2f6c:	a1 1d       	adc	r26, r1
    2f6e:	6a 0f       	add	r22, r26
    2f70:	71 1d       	adc	r23, r1
    2f72:	81 1d       	adc	r24, r1
    2f74:	91 1d       	adc	r25, r1
    2f76:	a1 1d       	adc	r26, r1
    2f78:	20 d0       	rcall	.+64     	; 0x2fba <__ultoa_invert+0x84>
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <__ultoa_invert+0x48>
    2f7c:	68 94       	set
    2f7e:	3f 91       	pop	r19
    2f80:	2a e0       	ldi	r18, 0x0A	; 10
    2f82:	26 9f       	mul	r18, r22
    2f84:	11 24       	eor	r1, r1
    2f86:	30 19       	sub	r19, r0
    2f88:	30 5d       	subi	r19, 0xD0	; 208
    2f8a:	31 93       	st	Z+, r19
    2f8c:	de f6       	brtc	.-74     	; 0x2f44 <__ultoa_invert+0xe>
    2f8e:	cf 01       	movw	r24, r30
    2f90:	08 95       	ret
    2f92:	46 2f       	mov	r20, r22
    2f94:	47 70       	andi	r20, 0x07	; 7
    2f96:	40 5d       	subi	r20, 0xD0	; 208
    2f98:	41 93       	st	Z+, r20
    2f9a:	b3 e0       	ldi	r27, 0x03	; 3
    2f9c:	0f d0       	rcall	.+30     	; 0x2fbc <__ultoa_invert+0x86>
    2f9e:	c9 f7       	brne	.-14     	; 0x2f92 <__ultoa_invert+0x5c>
    2fa0:	f6 cf       	rjmp	.-20     	; 0x2f8e <__ultoa_invert+0x58>
    2fa2:	46 2f       	mov	r20, r22
    2fa4:	4f 70       	andi	r20, 0x0F	; 15
    2fa6:	40 5d       	subi	r20, 0xD0	; 208
    2fa8:	4a 33       	cpi	r20, 0x3A	; 58
    2faa:	18 f0       	brcs	.+6      	; 0x2fb2 <__ultoa_invert+0x7c>
    2fac:	49 5d       	subi	r20, 0xD9	; 217
    2fae:	31 fd       	sbrc	r19, 1
    2fb0:	40 52       	subi	r20, 0x20	; 32
    2fb2:	41 93       	st	Z+, r20
    2fb4:	02 d0       	rcall	.+4      	; 0x2fba <__ultoa_invert+0x84>
    2fb6:	a9 f7       	brne	.-22     	; 0x2fa2 <__ultoa_invert+0x6c>
    2fb8:	ea cf       	rjmp	.-44     	; 0x2f8e <__ultoa_invert+0x58>
    2fba:	b4 e0       	ldi	r27, 0x04	; 4
    2fbc:	a6 95       	lsr	r26
    2fbe:	97 95       	ror	r25
    2fc0:	87 95       	ror	r24
    2fc2:	77 95       	ror	r23
    2fc4:	67 95       	ror	r22
    2fc6:	ba 95       	dec	r27
    2fc8:	c9 f7       	brne	.-14     	; 0x2fbc <__ultoa_invert+0x86>
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	61 05       	cpc	r22, r1
    2fce:	71 05       	cpc	r23, r1
    2fd0:	08 95       	ret
    2fd2:	9b 01       	movw	r18, r22
    2fd4:	ac 01       	movw	r20, r24
    2fd6:	0a 2e       	mov	r0, r26
    2fd8:	06 94       	lsr	r0
    2fda:	57 95       	ror	r21
    2fdc:	47 95       	ror	r20
    2fde:	37 95       	ror	r19
    2fe0:	27 95       	ror	r18
    2fe2:	ba 95       	dec	r27
    2fe4:	c9 f7       	brne	.-14     	; 0x2fd8 <__ultoa_invert+0xa2>
    2fe6:	62 0f       	add	r22, r18
    2fe8:	73 1f       	adc	r23, r19
    2fea:	84 1f       	adc	r24, r20
    2fec:	95 1f       	adc	r25, r21
    2fee:	a0 1d       	adc	r26, r0
    2ff0:	08 95       	ret

00002ff2 <__prologue_saves__>:
    2ff2:	2f 92       	push	r2
    2ff4:	3f 92       	push	r3
    2ff6:	4f 92       	push	r4
    2ff8:	5f 92       	push	r5
    2ffa:	6f 92       	push	r6
    2ffc:	7f 92       	push	r7
    2ffe:	8f 92       	push	r8
    3000:	9f 92       	push	r9
    3002:	af 92       	push	r10
    3004:	bf 92       	push	r11
    3006:	cf 92       	push	r12
    3008:	df 92       	push	r13
    300a:	ef 92       	push	r14
    300c:	ff 92       	push	r15
    300e:	0f 93       	push	r16
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	ca 1b       	sub	r28, r26
    301c:	db 0b       	sbc	r29, r27
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	09 94       	ijmp

0000302a <__epilogue_restores__>:
    302a:	2a 88       	ldd	r2, Y+18	; 0x12
    302c:	39 88       	ldd	r3, Y+17	; 0x11
    302e:	48 88       	ldd	r4, Y+16	; 0x10
    3030:	5f 84       	ldd	r5, Y+15	; 0x0f
    3032:	6e 84       	ldd	r6, Y+14	; 0x0e
    3034:	7d 84       	ldd	r7, Y+13	; 0x0d
    3036:	8c 84       	ldd	r8, Y+12	; 0x0c
    3038:	9b 84       	ldd	r9, Y+11	; 0x0b
    303a:	aa 84       	ldd	r10, Y+10	; 0x0a
    303c:	b9 84       	ldd	r11, Y+9	; 0x09
    303e:	c8 84       	ldd	r12, Y+8	; 0x08
    3040:	df 80       	ldd	r13, Y+7	; 0x07
    3042:	ee 80       	ldd	r14, Y+6	; 0x06
    3044:	fd 80       	ldd	r15, Y+5	; 0x05
    3046:	0c 81       	ldd	r16, Y+4	; 0x04
    3048:	1b 81       	ldd	r17, Y+3	; 0x03
    304a:	aa 81       	ldd	r26, Y+2	; 0x02
    304c:	b9 81       	ldd	r27, Y+1	; 0x01
    304e:	ce 0f       	add	r28, r30
    3050:	d1 1d       	adc	r29, r1
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	ed 01       	movw	r28, r26
    305e:	08 95       	ret

00003060 <_exit>:
    3060:	f8 94       	cli

00003062 <__stop_program>:
    3062:	ff cf       	rjmp	.-2      	; 0x3062 <__stop_program>
