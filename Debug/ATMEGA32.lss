
ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000030d8  0000314c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000d9f8  00000000  00000000  000031b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000ddd8  00000000  00000000  00010bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0001e988  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0001e99c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  0001e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  0001eebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0001f361  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  0001f37b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 13 	call	0x2710	; 0x2710 <main>
      8a:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	89 81       	ldd	r24, Y+1	; 0x01
      a0:	88 2f       	mov	r24, r24
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	29 2f       	mov	r18, r25
      a6:	33 27       	eor	r19, r19
      a8:	27 fd       	sbrc	r18, 7
      aa:	3a 95       	dec	r19
      ac:	80 e4       	ldi	r24, 0x40	; 64
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	fc 01       	movw	r30, r24
      b2:	20 83       	st	Z, r18
      b4:	89 e2       	ldi	r24, 0x29	; 41
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	29 81       	ldd	r18, Y+1	; 0x01
      ba:	fc 01       	movw	r30, r24
      bc:	20 83       	st	Z, r18
      be:	80 e4       	ldi	r24, 0x40	; 64
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	fc 01       	movw	r30, r24
      c4:	20 81       	ld	r18, Z
      c6:	80 e4       	ldi	r24, 0x40	; 64
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	2f 7b       	andi	r18, 0xBF	; 191
      cc:	fc 01       	movw	r30, r24
      ce:	20 83       	st	Z, r18
      d0:	80 e4       	ldi	r24, 0x40	; 64
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	fc 01       	movw	r30, r24
      d6:	20 81       	ld	r18, Z
      d8:	80 e4       	ldi	r24, 0x40	; 64
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	27 7f       	andi	r18, 0xF7	; 247
      de:	fc 01       	movw	r30, r24
      e0:	20 83       	st	Z, r18
      e2:	80 e4       	ldi	r24, 0x40	; 64
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	fc 01       	movw	r30, r24
      e8:	20 81       	ld	r18, Z
      ea:	80 e4       	ldi	r24, 0x40	; 64
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	22 60       	ori	r18, 0x02	; 2
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18
      f4:	80 e4       	ldi	r24, 0x40	; 64
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	fc 01       	movw	r30, r24
      fa:	20 81       	ld	r18, Z
      fc:	80 e4       	ldi	r24, 0x40	; 64
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	24 60       	ori	r18, 0x04	; 4
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18
     106:	80 e4       	ldi	r24, 0x40	; 64
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	fc 01       	movw	r30, r24
     10c:	20 81       	ld	r18, Z
     10e:	80 e4       	ldi	r24, 0x40	; 64
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	2b 7f       	andi	r18, 0xFB	; 251
     114:	fc 01       	movw	r30, r24
     116:	20 83       	st	Z, r18
     118:	8a e2       	ldi	r24, 0x2A	; 42
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	20 81       	ld	r18, Z
     120:	8a e2       	ldi	r24, 0x2A	; 42
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	28 60       	ori	r18, 0x08	; 8
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
     12a:	8a e2       	ldi	r24, 0x2A	; 42
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	fc 01       	movw	r30, r24
     130:	20 81       	ld	r18, Z
     132:	8a e2       	ldi	r24, 0x2A	; 42
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	20 61       	ori	r18, 0x10	; 16
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18
     13c:	00 00       	nop
     13e:	0f 90       	pop	r0
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	08 95       	ret

00000146 <UART_sendData>:
 * 			 communicated with MCU UART.
 * @param1 : copyData
 * @retVal : void
 */
void UART_sendData(uint_16 copyData)
{
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	00 d0       	rcall	.+0      	; 0x14c <UART_sendData+0x6>
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	9a 83       	std	Y+2, r25	; 0x02
     152:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UDRE) == 0);
     154:	00 00       	nop
     156:	8b e2       	ldi	r24, 0x2B	; 43
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	80 81       	ld	r24, Z
     15e:	82 95       	swap	r24
     160:	86 95       	lsr	r24
     162:	87 70       	andi	r24, 0x07	; 7
     164:	88 2f       	mov	r24, r24
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	81 70       	andi	r24, 0x01	; 1
     16a:	99 27       	eor	r25, r25
     16c:	89 2b       	or	r24, r25
     16e:	99 f3       	breq	.-26     	; 0x156 <UART_sendData+0x10>
	UDR = copyData;
     170:	8c e2       	ldi	r24, 0x2C	; 44
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	29 81       	ldd	r18, Y+1	; 0x01
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
}
     17a:	00 00       	nop
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <UART_receiveData>:
 * 			 communicated with MCU UART.
 * @param1 : copyVar
 * @retVal : Ret1
 */
uint_8 UART_receiveData(uint_8 *copyVar)
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	00 d0       	rcall	.+0      	; 0x18c <UART_receiveData+0x6>
     18c:	1f 92       	push	r1
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	9b 83       	std	Y+3, r25	; 0x03
     194:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Ret1 = 0;
     196:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(UCSRA,RXC))
     198:	8b e2       	ldi	r24, 0x2B	; 43
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	88 1f       	adc	r24, r24
     1a2:	88 27       	eor	r24, r24
     1a4:	88 1f       	adc	r24, r24
     1a6:	88 2f       	mov	r24, r24
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	81 70       	andi	r24, 0x01	; 1
     1ac:	99 27       	eor	r25, r25
     1ae:	89 2b       	or	r24, r25
     1b0:	59 f0       	breq	.+22     	; 0x1c8 <UART_receiveData+0x42>
	{
		*copyVar = UDR;
     1b2:	8c e2       	ldi	r24, 0x2C	; 44
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	fc 01       	movw	r30, r24
     1b8:	20 81       	ld	r18, Z
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
     1bc:	9b 81       	ldd	r25, Y+3	; 0x03
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18
		Ret1 = 1;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	89 83       	std	Y+1, r24	; 0x01
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <UART_receiveData+0x44>
	}
	else
	{
		Ret1 = 0;
     1c8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Ret1;
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
}
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <UART_reciveDataBlock>:
 * 			 communicated with MCU UART (polling).
 * @param1 : copyVar
 * @retVal : UDR
 */
uint_8 UART_reciveDataBlock(void)
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,RXC) == 0);
     1e0:	00 00       	nop
     1e2:	8b e2       	ldi	r24, 0x2B	; 43
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z
     1ea:	88 1f       	adc	r24, r24
     1ec:	88 27       	eor	r24, r24
     1ee:	88 1f       	adc	r24, r24
     1f0:	88 2f       	mov	r24, r24
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	81 70       	andi	r24, 0x01	; 1
     1f6:	99 27       	eor	r25, r25
     1f8:	89 2b       	or	r24, r25
     1fa:	99 f3       	breq	.-26     	; 0x1e2 <UART_reciveDataBlock+0xa>
	return UDR;
     1fc:	8c e2       	ldi	r24, 0x2C	; 44
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	fc 01       	movw	r30, r24
     202:	80 81       	ld	r24, Z
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <TIMER2_Init>:
 *			 from configuration file.
 * @param1 : copyPrescaler
 * @retVal : void
 */
void TIMER2_Init(_TIMER2_PRESCALER_SELECT_ copyPrescaler)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	1f 92       	push	r1
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 |= copyPrescaler;
     216:	85 e4       	ldi	r24, 0x45	; 69
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	fc 01       	movw	r30, r24
     21c:	30 81       	ld	r19, Z
     21e:	85 e4       	ldi	r24, 0x45	; 69
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	29 81       	ldd	r18, Y+1	; 0x01
     224:	23 2b       	or	r18, r19
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
#if (TIMER2_CLK_SOURCE == TIEMR2_INT)
	CLR_BIT(ASSR,AS2);
#elif (TIMER2_CLK_SOURCE == TIMER2_EXTR)
	SET_BIT(ASSR,AS2);
     22a:	82 e4       	ldi	r24, 0x42	; 66
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	fc 01       	movw	r30, r24
     230:	20 81       	ld	r18, Z
     232:	82 e4       	ldi	r24, 0x42	; 66
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	28 60       	ori	r18, 0x08	; 8
     238:	fc 01       	movw	r30, r24
     23a:	20 83       	st	Z, r18
#endif

#if (_TIMER2_MODE_WAVE == _TIMER2_NORMAL_MODE)
	CLR_BIT(TCCR2,WGM21);
     23c:	85 e4       	ldi	r24, 0x45	; 69
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	fc 01       	movw	r30, r24
     242:	20 81       	ld	r18, Z
     244:	85 e4       	ldi	r24, 0x45	; 69
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	27 7f       	andi	r18, 0xF7	; 247
     24a:	fc 01       	movw	r30, r24
     24c:	20 83       	st	Z, r18
	CLR_BIT(TCCR2,WGM20);
     24e:	85 e4       	ldi	r24, 0x45	; 69
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	20 81       	ld	r18, Z
     256:	85 e4       	ldi	r24, 0x45	; 69
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	2f 7b       	andi	r18, 0xBF	; 191
     25c:	fc 01       	movw	r30, r24
     25e:	20 83       	st	Z, r18
	SET_BIT(TCCR2,WGM21);
	SET_BIT(TCCR2,WGM20);
#endif

#if (_TIMER2_COM_OC2 == _TIMER2_OC2_DISCONNECTED)
	CLR_BIT(TCCR2,COM21);
     260:	85 e4       	ldi	r24, 0x45	; 69
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	fc 01       	movw	r30, r24
     266:	20 81       	ld	r18, Z
     268:	85 e4       	ldi	r24, 0x45	; 69
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	2f 7d       	andi	r18, 0xDF	; 223
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
	CLR_BIT(TCCR2,COM20);
     272:	85 e4       	ldi	r24, 0x45	; 69
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	fc 01       	movw	r30, r24
     278:	20 81       	ld	r18, Z
     27a:	85 e4       	ldi	r24, 0x45	; 69
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	2f 7e       	andi	r18, 0xEF	; 239
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
	CLR_BIT(TCCR2,COM20);
#elif (_TIMER2_COM_OC2 == _TIMER2_OC2_INVERTING)
	SET_BIT(TCCR2,COM21);
	SET_BIT(TCCR2,COM20);
#endif
}
     284:	00 00       	nop
     286:	0f 90       	pop	r0
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <TIMER2_Start>:
 * @brief  : Timer/Counter {2} Start counting by select prescaler from configuration file.
 * @param1 : copyPrescaler
 * @retVal : void
 */
void TIMER2_Start(_TIMER2_PRESCALER_SELECT_ copyPrescaler)
{
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	1f 92       	push	r1
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 |= copyPrescaler;
     29a:	85 e4       	ldi	r24, 0x45	; 69
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	fc 01       	movw	r30, r24
     2a0:	30 81       	ld	r19, Z
     2a2:	85 e4       	ldi	r24, 0x45	; 69
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	29 81       	ldd	r18, Y+1	; 0x01
     2a8:	23 2b       	or	r18, r19
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
}
     2ae:	00 00       	nop
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <TIMER2_Stop>:
 * @brief  : Timer/Counter {2} Stop counting.
 * @param1 : void
 * @retVal : void
 */
void TIMER2_Stop(void)
{
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= TIMER2_CLOCK_STOP;
     2c0:	85 e4       	ldi	r24, 0x45	; 69
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 81       	ld	r18, Z
     2c8:	85 e4       	ldi	r24, 0x45	; 69
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	28 7f       	andi	r18, 0xF8	; 248
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
}
     2d2:	00 00       	nop
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <TIMER2_writeOVR>:
 * @brief  : Timer/Counter {2} write over flow by put start value over flow.
 * @param1 : Copy_Start_Value
 * @retVal : void
 */
void TIMER2_writeOVR(uint_8 Copy_Start_Value)
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	1f 92       	push	r1
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_Start_Value;
     2e6:	84 e4       	ldi	r24, 0x44	; 68
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	29 81       	ldd	r18, Y+1	; 0x01
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 83       	st	Z, r18
}
     2f0:	00 00       	nop
     2f2:	0f 90       	pop	r0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <TIMER2_writeCOM>:
 * @brief  : Timer/Counter {2} write Compare match put start value comparing.
 * @param1 : Copy_Start_Value
 * @retVal : void
 */
void TIMER2_writeCOM(uint_8 Copy_Start_Value)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	1f 92       	push	r1
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_Start_Value;
     306:	83 e4       	ldi	r24, 0x43	; 67
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	29 81       	ldd	r18, Y+1	; 0x01
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
}
     310:	00 00       	nop
     312:	0f 90       	pop	r0
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <TIMER2_ovrInterruptEnable>:
 * 			 &  write one in TIMSK register in TOIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER2_ovrInterruptEnable(void)
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     322:	8f e5       	ldi	r24, 0x5F	; 95
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	fc 01       	movw	r30, r24
     328:	20 81       	ld	r18, Z
     32a:	8f e5       	ldi	r24, 0x5F	; 95
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	20 68       	ori	r18, 0x80	; 128
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
	SET_BIT(TIMSK,TOIE2);
     334:	89 e5       	ldi	r24, 0x59	; 89
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	fc 01       	movw	r30, r24
     33a:	20 81       	ld	r18, Z
     33c:	89 e5       	ldi	r24, 0x59	; 89
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	20 64       	ori	r18, 0x40	; 64
     342:	fc 01       	movw	r30, r24
     344:	20 83       	st	Z, r18
}
     346:	00 00       	nop
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <TIMER2_ovrInterruptDisable>:
 * @brief  : Timer/Counter {2} interrupt over flow disable by write zero in TIMSK register in TOIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER2_ovrInterruptDisable(void)
{
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE2);
     356:	89 e5       	ldi	r24, 0x59	; 89
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	fc 01       	movw	r30, r24
     35c:	20 81       	ld	r18, Z
     35e:	89 e5       	ldi	r24, 0x59	; 89
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	2f 7b       	andi	r18, 0xBF	; 191
     364:	fc 01       	movw	r30, r24
     366:	20 83       	st	Z, r18
}
     368:	00 00       	nop
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <TIMER2_compInterruptEnable>:
 * 			 &  write one in TIMSK register in OCIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER2_compInterruptEnable(void)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     378:	8f e5       	ldi	r24, 0x5F	; 95
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	fc 01       	movw	r30, r24
     37e:	20 81       	ld	r18, Z
     380:	8f e5       	ldi	r24, 0x5F	; 95
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	20 68       	ori	r18, 0x80	; 128
     386:	fc 01       	movw	r30, r24
     388:	20 83       	st	Z, r18
	SET_BIT(TIMSK,OCIE2);
     38a:	89 e5       	ldi	r24, 0x59	; 89
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	fc 01       	movw	r30, r24
     390:	20 81       	ld	r18, Z
     392:	89 e5       	ldi	r24, 0x59	; 89
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	20 68       	ori	r18, 0x80	; 128
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18
}
     39c:	00 00       	nop
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <TIMER2_comInterruptDisable>:
 * @brief  : Timer/Counter {2} interrupt Compare match disable by write zero in TIMSK register in OCIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER2_comInterruptDisable(void)
{
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE2);
     3ac:	89 e5       	ldi	r24, 0x59	; 89
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 81       	ld	r18, Z
     3b4:	89 e5       	ldi	r24, 0x59	; 89
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	2f 77       	andi	r18, 0x7F	; 127
     3ba:	fc 01       	movw	r30, r24
     3bc:	20 83       	st	Z, r18
}
     3be:	00 00       	nop
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <TIMER1_Init>:
 *			 from configuration file.
 * @param1 : copyPrescaler
 * @retVal : void
 */
void TIMER1_Init(_TIMER1__PRESCALER_SELECT_ copyPrescaler)
{
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	1f 92       	push	r1
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B |= copyPrescaler;
     3d2:	8e e4       	ldi	r24, 0x4E	; 78
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	fc 01       	movw	r30, r24
     3d8:	30 81       	ld	r19, Z
     3da:	8e e4       	ldi	r24, 0x4E	; 78
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	29 81       	ldd	r18, Y+1	; 0x01
     3e0:	23 2b       	or	r18, r19
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18

#if (_TIMER1_MODE_WAVE == _TIMER1_NORMAL_MODE)
	CLR_BIT(TCCR1A,WGM10);
     3e6:	8f e4       	ldi	r24, 0x4F	; 79
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	20 81       	ld	r18, Z
     3ee:	8f e4       	ldi	r24, 0x4F	; 79
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	2e 7f       	andi	r18, 0xFE	; 254
     3f4:	fc 01       	movw	r30, r24
     3f6:	20 83       	st	Z, r18
	CLR_BIT(TCCR1A,WGM11);
     3f8:	8f e4       	ldi	r24, 0x4F	; 79
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 81       	ld	r18, Z
     400:	8f e4       	ldi	r24, 0x4F	; 79
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2d 7f       	andi	r18, 0xFD	; 253
     406:	fc 01       	movw	r30, r24
     408:	20 83       	st	Z, r18
	CLR_BIT(TCCR1B,WGM12);
     40a:	8e e4       	ldi	r24, 0x4E	; 78
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	fc 01       	movw	r30, r24
     410:	20 81       	ld	r18, Z
     412:	8e e4       	ldi	r24, 0x4E	; 78
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	27 7f       	andi	r18, 0xF7	; 247
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
	CLR_BIT(TCCR1B,WGM13);
     41c:	8e e4       	ldi	r24, 0x4E	; 78
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	fc 01       	movw	r30, r24
     422:	20 81       	ld	r18, Z
     424:	8e e4       	ldi	r24, 0x4E	; 78
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	2f 7e       	andi	r18, 0xEF	; 239
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
#endif

#if (_TIMER1_COM_OC1 == _TIMER1_OC1_DISCONNECTED)
	CLR_BIT(TCCR1A,COM1A0);
     42e:	8f e4       	ldi	r24, 0x4F	; 79
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	fc 01       	movw	r30, r24
     434:	20 81       	ld	r18, Z
     436:	8f e4       	ldi	r24, 0x4F	; 79
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2f 7b       	andi	r18, 0xBF	; 191
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
	CLR_BIT(TCCR1A,COM1A1);
     440:	8f e4       	ldi	r24, 0x4F	; 79
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	fc 01       	movw	r30, r24
     446:	20 81       	ld	r18, Z
     448:	8f e4       	ldi	r24, 0x4F	; 79
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	2f 77       	andi	r18, 0x7F	; 127
     44e:	fc 01       	movw	r30, r24
     450:	20 83       	st	Z, r18
	CLR_BIT(TCCR1A,COM1B0);
     452:	8f e4       	ldi	r24, 0x4F	; 79
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	fc 01       	movw	r30, r24
     458:	20 81       	ld	r18, Z
     45a:	8f e4       	ldi	r24, 0x4F	; 79
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	2f 7e       	andi	r18, 0xEF	; 239
     460:	fc 01       	movw	r30, r24
     462:	20 83       	st	Z, r18
	CLR_BIT(TCCR1A,COM1B1);
     464:	8f e4       	ldi	r24, 0x4F	; 79
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	fc 01       	movw	r30, r24
     46a:	20 81       	ld	r18, Z
     46c:	8f e4       	ldi	r24, 0x4F	; 79
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	2f 7d       	andi	r18, 0xDF	; 223
     472:	fc 01       	movw	r30, r24
     474:	20 83       	st	Z, r18
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
#endif
}
     476:	00 00       	nop
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <TIMER1_Start>:
 * @brief  : Timer/Counter {1} Start counting by select prescaler from configuration file.
 * @param1 : copyPrescaler
 * @retVal : void
 */
void TIMER1_Start(_TIMER1__PRESCALER_SELECT_ copyPrescaler)
{
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	1f 92       	push	r1
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B |= copyPrescaler;
     48c:	8e e4       	ldi	r24, 0x4E	; 78
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	fc 01       	movw	r30, r24
     492:	30 81       	ld	r19, Z
     494:	8e e4       	ldi	r24, 0x4E	; 78
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	29 81       	ldd	r18, Y+1	; 0x01
     49a:	23 2b       	or	r18, r19
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
}
     4a0:	00 00       	nop
     4a2:	0f 90       	pop	r0
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <TIMER1_Stop>:
 * @brief  : Timer/Counter {1} Stop counting.
 * @param1 : void
 * @retVal : void
 */
void TIMER1_Stop(void)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= TIMER1_CLOCK_STOP;
     4b2:	8e e4       	ldi	r24, 0x4E	; 78
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 81       	ld	r18, Z
     4ba:	8e e4       	ldi	r24, 0x4E	; 78
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	28 7f       	andi	r18, 0xF8	; 248
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
}
     4c4:	00 00       	nop
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <TIMER0_Init>:
 *			 from configuration file.
 * @param1 : copyPrescaler
 * @retVal : void
 */
void TIMER0_Init(_TIMER0__PRESCALER_SELECT_ copyPrescaler)
{
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	1f 92       	push	r1
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	89 83       	std	Y+1, r24	; 0x01
#if (_TIMER_MODE_WAVE == _TIMER0_NORMAL_MODE)
		CLR_BIT(TCCR0,WGM00);
     4d8:	83 e5       	ldi	r24, 0x53	; 83
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	20 81       	ld	r18, Z
     4e0:	83 e5       	ldi	r24, 0x53	; 83
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	2f 7b       	andi	r18, 0xBF	; 191
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
		CLR_BIT(TCCR0,WGM01);
     4ea:	83 e5       	ldi	r24, 0x53	; 83
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 81       	ld	r18, Z
     4f2:	83 e5       	ldi	r24, 0x53	; 83
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	27 7f       	andi	r18, 0xF7	; 247
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 83       	st	Z, r18
		SET_BIT(TCCR0,FOC0);
     4fc:	83 e5       	ldi	r24, 0x53	; 83
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	fc 01       	movw	r30, r24
     502:	20 81       	ld	r18, Z
     504:	83 e5       	ldi	r24, 0x53	; 83
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	20 68       	ori	r18, 0x80	; 128
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
	SET_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
#endif

#if (_TIMER0_COM_OC0 == _TIMER0_OC0_DISCONNECTED)
	CLR_BIT(TCCR0,COM01);
     50e:	83 e5       	ldi	r24, 0x53	; 83
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	fc 01       	movw	r30, r24
     514:	20 81       	ld	r18, Z
     516:	83 e5       	ldi	r24, 0x53	; 83
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	2f 7d       	andi	r18, 0xDF	; 223
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
	CLR_BIT(TCCR0,COM00);
     520:	83 e5       	ldi	r24, 0x53	; 83
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	fc 01       	movw	r30, r24
     526:	20 81       	ld	r18, Z
     528:	83 e5       	ldi	r24, 0x53	; 83
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	2f 7e       	andi	r18, 0xEF	; 239
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
	CLR_BIT(TCCR0,COM00);
#elif	(_TIMER0_COM_OC0 == _TIMER0_OC0_TOGGLE)
	CLR_BIT(TCCR0,COM01);
	SET_BIT(TCCR0,COM00);
#endif
	TCCR0 &= TIMER0_CLOCK_STOP ;
     532:	83 e5       	ldi	r24, 0x53	; 83
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	fc 01       	movw	r30, r24
     538:	20 81       	ld	r18, Z
     53a:	83 e5       	ldi	r24, 0x53	; 83
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	28 7f       	andi	r18, 0xF8	; 248
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
	TCCR0 |= copyPrescaler;
     544:	83 e5       	ldi	r24, 0x53	; 83
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	fc 01       	movw	r30, r24
     54a:	30 81       	ld	r19, Z
     54c:	83 e5       	ldi	r24, 0x53	; 83
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	29 81       	ldd	r18, Y+1	; 0x01
     552:	23 2b       	or	r18, r19
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
}
     558:	00 00       	nop
     55a:	0f 90       	pop	r0
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <TIMER0_Start>:
 * @brief  : Timer/Counter {0} Start counting by select prescaler from configuration file.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_Start(_TIMER0__PRESCALER_SELECT_ copyPrescaler)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	1f 92       	push	r1
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= copyPrescaler;
     56e:	83 e5       	ldi	r24, 0x53	; 83
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	fc 01       	movw	r30, r24
     574:	30 81       	ld	r19, Z
     576:	83 e5       	ldi	r24, 0x53	; 83
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	29 81       	ldd	r18, Y+1	; 0x01
     57c:	23 2b       	or	r18, r19
     57e:	fc 01       	movw	r30, r24
     580:	20 83       	st	Z, r18
}
     582:	00 00       	nop
     584:	0f 90       	pop	r0
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <TIMER0_Stop>:
 * @brief  : Timer/Counter {0} Stop counting.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_Stop(void)
{
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLOCK_STOP;
     594:	83 e5       	ldi	r24, 0x53	; 83
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	fc 01       	movw	r30, r24
     59a:	20 81       	ld	r18, Z
     59c:	83 e5       	ldi	r24, 0x53	; 83
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	28 7f       	andi	r18, 0xF8	; 248
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
}
     5a6:	00 00       	nop
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <TIMER0_writeOVR>:
 * @brief  : Timer/Counter {0} write over flow by put start value over flow.
 * @param1 : Copy_Start_Value
 * @retVal : void
 */
void TIMER0_writeOVR(uint_8 Copy_Start_Value)
{
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	1f 92       	push	r1
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_Start_Value;
     5ba:	82 e5       	ldi	r24, 0x52	; 82
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	29 81       	ldd	r18, Y+1	; 0x01
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
}
     5c4:	00 00       	nop
     5c6:	0f 90       	pop	r0
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <TIMER0_writeCOM>:
 * @brief  : Timer/Counter {0} write Compare match put start value comparing.
 * @param1 : Copy_Start_Value
 * @retVal : void
 */
void TIMER0_writeCOM(uint_8 Copy_Start_Value)
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	1f 92       	push	r1
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_Start_Value;
     5da:	8c e5       	ldi	r24, 0x5C	; 92
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	29 81       	ldd	r18, Y+1	; 0x01
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
}
     5e4:	00 00       	nop
     5e6:	0f 90       	pop	r0
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <TIMER0_ovrInterruptEnable>:
 * 			 &  write one in TIMSK register in TOIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_ovrInterruptEnable(void)
{
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     5f6:	8f e5       	ldi	r24, 0x5F	; 95
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 81       	ld	r18, Z
     5fe:	8f e5       	ldi	r24, 0x5F	; 95
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	20 68       	ori	r18, 0x80	; 128
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
	SET_BIT(TIMSK,TOIE0);
     608:	89 e5       	ldi	r24, 0x59	; 89
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	20 81       	ld	r18, Z
     610:	89 e5       	ldi	r24, 0x59	; 89
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	21 60       	ori	r18, 0x01	; 1
     616:	fc 01       	movw	r30, r24
     618:	20 83       	st	Z, r18
}
     61a:	00 00       	nop
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <TIMER0_ovrInterruptDisable>:
 * @brief  : Timer/Counter {0} interrupt over flow disable by write zero in TIMSK register in TOIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_ovrInterruptDisable(void)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
     62a:	89 e5       	ldi	r24, 0x59	; 89
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	fc 01       	movw	r30, r24
     630:	20 81       	ld	r18, Z
     632:	89 e5       	ldi	r24, 0x59	; 89
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	2e 7f       	andi	r18, 0xFE	; 254
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
}
     63c:	00 00       	nop
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <TIMER0_compInterruptEnable>:
 * 			 &  write one in TIMSK register in OCIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_compInterruptEnable(void)
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     64c:	8f e5       	ldi	r24, 0x5F	; 95
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	20 81       	ld	r18, Z
     654:	8f e5       	ldi	r24, 0x5F	; 95
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	20 68       	ori	r18, 0x80	; 128
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
	SET_BIT(TIMSK,OCIE0);
     65e:	89 e5       	ldi	r24, 0x59	; 89
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	fc 01       	movw	r30, r24
     664:	20 81       	ld	r18, Z
     666:	89 e5       	ldi	r24, 0x59	; 89
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	22 60       	ori	r18, 0x02	; 2
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
}
     670:	00 00       	nop
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <TIMER0_comInterruptDisable>:
 * @brief  : Timer/Counter {0} interrupt Compare match disable by write zero in TIMSK register in OCIE0 bit.
 * @param1 : void
 * @retVal : void
 */
void TIMER0_comInterruptDisable(void)
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
     680:	89 e5       	ldi	r24, 0x59	; 89
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	fc 01       	movw	r30, r24
     686:	20 81       	ld	r18, Z
     688:	89 e5       	ldi	r24, 0x59	; 89
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	2d 7f       	andi	r18, 0xFD	; 253
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
}
     692:	00 00       	nop
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <SPI_init>:
 * @brief  : SPI initialization function select your configurations from configurations file.
 * @param1 : void
 * @retVal : void
 */
void SPI_init(void)
{
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPE); // enable SPI
     6a2:	8d e2       	ldi	r24, 0x2D	; 45
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 81       	ld	r18, Z
     6aa:	8d e2       	ldi	r24, 0x2D	; 45
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	20 64       	ori	r18, 0x40	; 64
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18

#if(_SPI_DATA_ORDER == LSB)
	SET_BIT(SPCR,DORD);
     6b4:	8d e2       	ldi	r24, 0x2D	; 45
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 81       	ld	r18, Z
     6bc:	8d e2       	ldi	r24, 0x2D	; 45
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	20 62       	ori	r18, 0x20	; 32
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
#elif (_SPI_DATA_ORDER == MSB)
	CLR_BIT(SPCR,DORD);
#endif

#if (_SPI_MODE == _SPI_MASTER)
	SET_BIT(SPCR,MSTR);
     6c6:	8d e2       	ldi	r24, 0x2D	; 45
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 81       	ld	r18, Z
     6ce:	8d e2       	ldi	r24, 0x2D	; 45
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	20 61       	ori	r18, 0x10	; 16
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
#elif (_SPI_MODE == _SPI_SLAVE)
	CLR_BIT(SPCR,MSTR);
#endif

#if (CPOL_MODE == _FALLING_RISING)
	SET_BIT(SPCR,CPOL);
     6d8:	8d e2       	ldi	r24, 0x2D	; 45
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	fc 01       	movw	r30, r24
     6de:	20 81       	ld	r18, Z
     6e0:	8d e2       	ldi	r24, 0x2D	; 45
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	28 60       	ori	r18, 0x08	; 8
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
#endif

#if (CPHA_MODE == _SAMPLE_SETUP)
	CLR_BIT(SPCR,CPHA);
#elif (CPHA_MODE == _SETUP_SAMPLE)
	SET_BIT(SPCR,CPHA);
     6ea:	8d e2       	ldi	r24, 0x2D	; 45
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 81       	ld	r18, Z
     6f2:	8d e2       	ldi	r24, 0x2D	; 45
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	24 60       	ori	r18, 0x04	; 4
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
#endif
}
     6fc:	00 00       	nop
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <SPI_master>:
 * 			 and the I-bit in SREG is set, the interrupt routine will be executed.
 * @param1 : copyData
 * @retVal : Ret1
 */
uint_8 SPI_master(uint_8 copyData)
{
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	1f 92       	push	r1
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = copyData;
     710:	8f e2       	ldi	r24, 0x2F	; 47
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	29 81       	ldd	r18, Y+1	; 0x01
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
	while(!GET_BIT(SPSR,SPIF));
     71a:	00 00       	nop
     71c:	8e e2       	ldi	r24, 0x2E	; 46
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	88 1f       	adc	r24, r24
     726:	88 27       	eor	r24, r24
     728:	88 1f       	adc	r24, r24
     72a:	88 2f       	mov	r24, r24
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	81 70       	andi	r24, 0x01	; 1
     730:	99 27       	eor	r25, r25
     732:	89 2b       	or	r24, r25
     734:	99 f3       	breq	.-26     	; 0x71c <SPI_master+0x18>
	return SPDR;
     736:	8f e2       	ldi	r24, 0x2F	; 47
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	fc 01       	movw	r30, r24
     73c:	80 81       	ld	r24, Z
}
     73e:	0f 90       	pop	r0
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <SPI_slave>:
 * 			 and the I-bit in SREG is set, the interrupt routine will be executed.
 * @param1 : copyData
 * @retVal : Ret1
 */
uint_8 SPI_slave(uint_8 copyData)
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	1f 92       	push	r1
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	89 83       	std	Y+1, r24	; 0x01
	SPDR = copyData;
     752:	8f e2       	ldi	r24, 0x2F	; 47
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	29 81       	ldd	r18, Y+1	; 0x01
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
	while(!GET_BIT(SPSR,SPIF));
     75c:	00 00       	nop
     75e:	8e e2       	ldi	r24, 0x2E	; 46
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	fc 01       	movw	r30, r24
     764:	80 81       	ld	r24, Z
     766:	88 1f       	adc	r24, r24
     768:	88 27       	eor	r24, r24
     76a:	88 1f       	adc	r24, r24
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	81 70       	andi	r24, 0x01	; 1
     772:	99 27       	eor	r25, r25
     774:	89 2b       	or	r24, r25
     776:	99 f3       	breq	.-26     	; 0x75e <SPI_slave+0x18>
	return SPDR;
     778:	8f e2       	ldi	r24, 0x2F	; 47
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
}
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <SPI_interruptEnable>:
 * 			 & set SPIE bit in SPCR register.
 * @param1 : void
 * @retVal : void
 */
void SPI_interruptEnable(void)
{
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     790:	8f e5       	ldi	r24, 0x5F	; 95
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	fc 01       	movw	r30, r24
     796:	20 81       	ld	r18, Z
     798:	8f e5       	ldi	r24, 0x5F	; 95
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	20 68       	ori	r18, 0x80	; 128
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
	SET_BIT(SPCR,SPIE);
     7a2:	8d e2       	ldi	r24, 0x2D	; 45
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 81       	ld	r18, Z
     7aa:	8d e2       	ldi	r24, 0x2D	; 45
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	20 68       	ori	r18, 0x80	; 128
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18
}
     7b4:	00 00       	nop
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <SPI_interruptDisable>:
 * @brief  : SPI interrupt disable function by clear SPIE bit in SPCR register.
 * @param1 : void
 * @retVal : void
 */
void SPI_interruptDisable(void)
{
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPIE);
     7c4:	8d e2       	ldi	r24, 0x2D	; 45
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 81       	ld	r18, Z
     7cc:	8d e2       	ldi	r24, 0x2D	; 45
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	2f 77       	andi	r18, 0x7F	; 127
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
}
     7d6:	00 00       	nop
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <EXINTER_init>:
  * 		  put status or sense of signal.
  * @param1  : copyNumInt
  * @param2  : copySense
  */
void EXINTER_init(_NUM_EX_INTERRUPT copyNumInt,_SENSE_SELECT copySense)
{
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <EXINTER_init+0x6>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	89 83       	std	Y+1, r24	; 0x01
     7ea:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(SREG,GIE);	// set general interrupt bit
     7ec:	8f e5       	ldi	r24, 0x5F	; 95
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 81       	ld	r18, Z
     7f4:	8f e5       	ldi	r24, 0x5F	; 95
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	20 68       	ori	r18, 0x80	; 128
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18

	switch(copyNumInt)
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	88 2f       	mov	r24, r24
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	91 05       	cpc	r25, r1
     808:	b9 f0       	breq	.+46     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	91 05       	cpc	r25, r1
     80e:	29 f1       	breq	.+74     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     810:	89 2b       	or	r24, r25
     812:	09 f0       	breq	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			EXINTER_controlINT2(copySense);
			SET_BIT(GICR,_INT2);
			DIO_setPinDIR(PINB2, _DIRECTION_PIN_INPUT);
			break;
	}
}
     814:	33 c0       	rjmp	.+102    	; 0x87c <__stack+0x1d>
	SET_BIT(SREG,GIE);	// set general interrupt bit

	switch(copyNumInt)
	{
		case INT0:
			EXINTER_controlINT0(copySense);
     816:	8a 81       	ldd	r24, Y+2	; 0x02
     818:	0e 94 44 04 	call	0x888	; 0x888 <EXINTER_controlINT0>
			SET_BIT(GICR,_INT0);
     81c:	8b e5       	ldi	r24, 0x5B	; 91
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	fc 01       	movw	r30, r24
     822:	20 81       	ld	r18, Z
     824:	8b e5       	ldi	r24, 0x5B	; 91
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	20 64       	ori	r18, 0x40	; 64
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
			DIO_setPinDIR(PIND2, _DIRECTION_PIN_INPUT);
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	8a e1       	ldi	r24, 0x1A	; 26
     832:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
			break;
     836:	22 c0       	rjmp	.+68     	; 0x87c <__stack+0x1d>
		case INT1:
			EXINTER_controlINT1(copySense);
     838:	8a 81       	ldd	r24, Y+2	; 0x02
     83a:	0e 94 ad 04 	call	0x95a	; 0x95a <EXINTER_controlINT1>
			SET_BIT(GICR,_INT1);
     83e:	8b e5       	ldi	r24, 0x5B	; 91
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	fc 01       	movw	r30, r24
     844:	20 81       	ld	r18, Z
     846:	8b e5       	ldi	r24, 0x5B	; 91
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	20 68       	ori	r18, 0x80	; 128
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
			DIO_setPinDIR(PIND3, _DIRECTION_PIN_INPUT);
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	8b e1       	ldi	r24, 0x1B	; 27
     854:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
			break;
     858:	11 c0       	rjmp	.+34     	; 0x87c <__stack+0x1d>
		case INT2:
			EXINTER_controlINT2(copySense);
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	0e 94 16 05 	call	0xa2c	; 0xa2c <EXINTER_controlINT2>
			SET_BIT(GICR,_INT2);
     860:	8b e5       	ldi	r24, 0x5B	; 91
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	fc 01       	movw	r30, r24
     866:	20 81       	ld	r18, Z
     868:	8b e5       	ldi	r24, 0x5B	; 91
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	20 62       	ori	r18, 0x20	; 32
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18
			DIO_setPinDIR(PINB2, _DIRECTION_PIN_INPUT);
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	8a e0       	ldi	r24, 0x0A	; 10
     876:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
			break;
     87a:	00 00       	nop
	}
}
     87c:	00 00       	nop
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <EXINTER_controlINT0>:
  * @brief  : Static Function Control Direction of External Interrupt {0}
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT0(_SENSE_SELECT copySense)
{
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	89 83       	std	Y+1, r24	; 0x01
	switch (copySense)
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	91 05       	cpc	r25, r1
     89e:	f9 f0       	breq	.+62     	; 0x8de <EXINTER_controlINT0+0x56>
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	91 05       	cpc	r25, r1
     8a4:	1c f4       	brge	.+6      	; 0x8ac <EXINTER_controlINT0+0x24>
     8a6:	89 2b       	or	r24, r25
     8a8:	39 f0       	breq	.+14     	; 0x8b8 <EXINTER_controlINT0+0x30>
		case RISING:
			SET_BIT(MCUCR,ISC01);
			SET_BIT(MCUCR,ISC00);
			break;
	}
}
     8aa:	52 c0       	rjmp	.+164    	; 0x950 <EXINTER_controlINT0+0xc8>
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT0(_SENSE_SELECT copySense)
{
	switch (copySense)
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	91 05       	cpc	r25, r1
     8b0:	49 f1       	breq	.+82     	; 0x904 <EXINTER_controlINT0+0x7c>
     8b2:	03 97       	sbiw	r24, 0x03	; 3
     8b4:	d1 f1       	breq	.+116    	; 0x92a <EXINTER_controlINT0+0xa2>
		case RISING:
			SET_BIT(MCUCR,ISC01);
			SET_BIT(MCUCR,ISC00);
			break;
	}
}
     8b6:	4c c0       	rjmp	.+152    	; 0x950 <EXINTER_controlINT0+0xc8>
static void EXINTER_controlINT0(_SENSE_SELECT copySense)
{
	switch (copySense)
	{
		case LOW:
			CLR_BIT(MCUCR,ISC01);
     8b8:	85 e5       	ldi	r24, 0x55	; 85
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	fc 01       	movw	r30, r24
     8be:	20 81       	ld	r18, Z
     8c0:	85 e5       	ldi	r24, 0x55	; 85
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	2d 7f       	andi	r18, 0xFD	; 253
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC00);
     8ca:	85 e5       	ldi	r24, 0x55	; 85
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 81       	ld	r18, Z
     8d2:	85 e5       	ldi	r24, 0x55	; 85
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	2e 7f       	andi	r18, 0xFE	; 254
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
			break;
     8dc:	39 c0       	rjmp	.+114    	; 0x950 <EXINTER_controlINT0+0xc8>
		case ANY:
			CLR_BIT(MCUCR,ISC01);
     8de:	85 e5       	ldi	r24, 0x55	; 85
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 81       	ld	r18, Z
     8e6:	85 e5       	ldi	r24, 0x55	; 85
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	2d 7f       	andi	r18, 0xFD	; 253
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC00);
     8f0:	85 e5       	ldi	r24, 0x55	; 85
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 81       	ld	r18, Z
     8f8:	85 e5       	ldi	r24, 0x55	; 85
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	21 60       	ori	r18, 0x01	; 1
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
			break;
     902:	26 c0       	rjmp	.+76     	; 0x950 <EXINTER_controlINT0+0xc8>
		case FALLING:
			SET_BIT(MCUCR,ISC01);
     904:	85 e5       	ldi	r24, 0x55	; 85
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	fc 01       	movw	r30, r24
     90a:	20 81       	ld	r18, Z
     90c:	85 e5       	ldi	r24, 0x55	; 85
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	22 60       	ori	r18, 0x02	; 2
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC00);
     916:	85 e5       	ldi	r24, 0x55	; 85
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	fc 01       	movw	r30, r24
     91c:	20 81       	ld	r18, Z
     91e:	85 e5       	ldi	r24, 0x55	; 85
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	2e 7f       	andi	r18, 0xFE	; 254
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
			break;
     928:	13 c0       	rjmp	.+38     	; 0x950 <EXINTER_controlINT0+0xc8>
		case RISING:
			SET_BIT(MCUCR,ISC01);
     92a:	85 e5       	ldi	r24, 0x55	; 85
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	fc 01       	movw	r30, r24
     930:	20 81       	ld	r18, Z
     932:	85 e5       	ldi	r24, 0x55	; 85
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	22 60       	ori	r18, 0x02	; 2
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC00);
     93c:	85 e5       	ldi	r24, 0x55	; 85
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	20 81       	ld	r18, Z
     944:	85 e5       	ldi	r24, 0x55	; 85
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	21 60       	ori	r18, 0x01	; 1
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
			break;
     94e:	00 00       	nop
	}
}
     950:	00 00       	nop
     952:	0f 90       	pop	r0
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <EXINTER_controlINT1>:
  * @brief  : Static Function Control Direction of External Interrupt {1}
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT1(_SENSE_SELECT copySense)
{
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	1f 92       	push	r1
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	89 83       	std	Y+1, r24	; 0x01
	switch (copySense)
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	88 2f       	mov	r24, r24
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	91 05       	cpc	r25, r1
     970:	f9 f0       	breq	.+62     	; 0x9b0 <EXINTER_controlINT1+0x56>
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	91 05       	cpc	r25, r1
     976:	1c f4       	brge	.+6      	; 0x97e <EXINTER_controlINT1+0x24>
     978:	89 2b       	or	r24, r25
     97a:	39 f0       	breq	.+14     	; 0x98a <EXINTER_controlINT1+0x30>
		case RISING:
			SET_BIT(MCUCR,ISC11);
			SET_BIT(MCUCR,ISC10);
			break;
	}
}
     97c:	52 c0       	rjmp	.+164    	; 0xa22 <EXINTER_controlINT1+0xc8>
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT1(_SENSE_SELECT copySense)
{
	switch (copySense)
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	91 05       	cpc	r25, r1
     982:	49 f1       	breq	.+82     	; 0x9d6 <EXINTER_controlINT1+0x7c>
     984:	03 97       	sbiw	r24, 0x03	; 3
     986:	d1 f1       	breq	.+116    	; 0x9fc <EXINTER_controlINT1+0xa2>
		case RISING:
			SET_BIT(MCUCR,ISC11);
			SET_BIT(MCUCR,ISC10);
			break;
	}
}
     988:	4c c0       	rjmp	.+152    	; 0xa22 <EXINTER_controlINT1+0xc8>
static void EXINTER_controlINT1(_SENSE_SELECT copySense)
{
	switch (copySense)
	{
		case LOW:
			CLR_BIT(MCUCR,ISC11);
     98a:	85 e5       	ldi	r24, 0x55	; 85
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	fc 01       	movw	r30, r24
     990:	20 81       	ld	r18, Z
     992:	85 e5       	ldi	r24, 0x55	; 85
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	27 7f       	andi	r18, 0xF7	; 247
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC10);
     99c:	85 e5       	ldi	r24, 0x55	; 85
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 81       	ld	r18, Z
     9a4:	85 e5       	ldi	r24, 0x55	; 85
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	2b 7f       	andi	r18, 0xFB	; 251
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
			break;
     9ae:	39 c0       	rjmp	.+114    	; 0xa22 <EXINTER_controlINT1+0xc8>
		case ANY:
			CLR_BIT(MCUCR,ISC11);
     9b0:	85 e5       	ldi	r24, 0x55	; 85
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 81       	ld	r18, Z
     9b8:	85 e5       	ldi	r24, 0x55	; 85
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	27 7f       	andi	r18, 0xF7	; 247
     9be:	fc 01       	movw	r30, r24
     9c0:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC10);
     9c2:	85 e5       	ldi	r24, 0x55	; 85
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 81       	ld	r18, Z
     9ca:	85 e5       	ldi	r24, 0x55	; 85
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	24 60       	ori	r18, 0x04	; 4
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18
			break;
     9d4:	26 c0       	rjmp	.+76     	; 0xa22 <EXINTER_controlINT1+0xc8>
		case FALLING:
			SET_BIT(MCUCR,ISC11);
     9d6:	85 e5       	ldi	r24, 0x55	; 85
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	fc 01       	movw	r30, r24
     9dc:	20 81       	ld	r18, Z
     9de:	85 e5       	ldi	r24, 0x55	; 85
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	28 60       	ori	r18, 0x08	; 8
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
			CLR_BIT(MCUCR,ISC10);
     9e8:	85 e5       	ldi	r24, 0x55	; 85
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 81       	ld	r18, Z
     9f0:	85 e5       	ldi	r24, 0x55	; 85
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	2b 7f       	andi	r18, 0xFB	; 251
     9f6:	fc 01       	movw	r30, r24
     9f8:	20 83       	st	Z, r18
			break;
     9fa:	13 c0       	rjmp	.+38     	; 0xa22 <EXINTER_controlINT1+0xc8>
		case RISING:
			SET_BIT(MCUCR,ISC11);
     9fc:	85 e5       	ldi	r24, 0x55	; 85
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fc 01       	movw	r30, r24
     a02:	20 81       	ld	r18, Z
     a04:	85 e5       	ldi	r24, 0x55	; 85
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	28 60       	ori	r18, 0x08	; 8
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18
			SET_BIT(MCUCR,ISC10);
     a0e:	85 e5       	ldi	r24, 0x55	; 85
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	fc 01       	movw	r30, r24
     a14:	20 81       	ld	r18, Z
     a16:	85 e5       	ldi	r24, 0x55	; 85
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	24 60       	ori	r18, 0x04	; 4
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18
			break;
     a20:	00 00       	nop
	}
}
     a22:	00 00       	nop
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <EXINTER_controlINT2>:
  * @brief  : Static Function Control Direction of External Interrupt {2}
  * @param1 : copySense
  * @retVal : void
  */
static void EXINTER_controlINT2(_SENSE_SELECT copySense)
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	1f 92       	push	r1
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	89 83       	std	Y+1, r24	; 0x01
	switch (copySense)
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	88 2f       	mov	r24, r24
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	91 05       	cpc	r25, r1
     a42:	19 f0       	breq	.+6      	; 0xa4a <EXINTER_controlINT2+0x1e>
     a44:	03 97       	sbiw	r24, 0x03	; 3
     a46:	59 f0       	breq	.+22     	; 0xa5e <EXINTER_controlINT2+0x32>
     a48:	14 c0       	rjmp	.+40     	; 0xa72 <EXINTER_controlINT2+0x46>
	{
		case FALLING:
			CLR_BIT(MCUCR,ISC2);
     a4a:	85 e5       	ldi	r24, 0x55	; 85
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	fc 01       	movw	r30, r24
     a50:	20 81       	ld	r18, Z
     a52:	85 e5       	ldi	r24, 0x55	; 85
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	2f 7b       	andi	r18, 0xBF	; 191
     a58:	fc 01       	movw	r30, r24
     a5a:	20 83       	st	Z, r18
			break;
     a5c:	14 c0       	rjmp	.+40     	; 0xa86 <EXINTER_controlINT2+0x5a>
		case RISING:
			SET_BIT(MCUCR,ISC2);
     a5e:	85 e5       	ldi	r24, 0x55	; 85
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	fc 01       	movw	r30, r24
     a64:	20 81       	ld	r18, Z
     a66:	85 e5       	ldi	r24, 0x55	; 85
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	20 64       	ori	r18, 0x40	; 64
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18
			break;
     a70:	0a c0       	rjmp	.+20     	; 0xa86 <EXINTER_controlINT2+0x5a>
		default:
			CLR_BIT(MCUCSR,ISC2);
     a72:	84 e5       	ldi	r24, 0x54	; 84
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	fc 01       	movw	r30, r24
     a78:	20 81       	ld	r18, Z
     a7a:	84 e5       	ldi	r24, 0x54	; 84
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	2f 7b       	andi	r18, 0xBF	; 191
     a80:	fc 01       	movw	r30, r24
     a82:	20 83       	st	Z, r18
			break;
     a84:	00 00       	nop
	}
}
     a86:	00 00       	nop
     a88:	0f 90       	pop	r0
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <I2C_init>:
 * @brief  : I2C initialization function select your configurations from configurations file.
 * @param1 : void
 * @retVal : void
 */
void I2C_init(void)
{
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62

}
     a98:	00 00       	nop
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <I2C_interruptEnabel>:
 * 			 & set TWIE bit in TWCR register.
 * @param1 : void
 * @retVal : void
 */
void I2C_interruptEnabel(void)
{
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     aa8:	8f e5       	ldi	r24, 0x5F	; 95
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	20 81       	ld	r18, Z
     ab0:	8f e5       	ldi	r24, 0x5F	; 95
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	20 68       	ori	r18, 0x80	; 128
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18
	SET_BIT(TWCR,TWIE);
     aba:	86 e5       	ldi	r24, 0x56	; 86
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	fc 01       	movw	r30, r24
     ac0:	20 81       	ld	r18, Z
     ac2:	86 e5       	ldi	r24, 0x56	; 86
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	21 60       	ori	r18, 0x01	; 1
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
}
     acc:	00 00       	nop
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <I2C_interruptDisabel>:
 * @brief  : I2C interrupt disable function by clear TWIE bit in TWCR register.
 * @param1 : void
 * @retVal : void
 */
void I2C_interruptDisabel(void)
{
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWCR,TWIE);
     adc:	86 e5       	ldi	r24, 0x56	; 86
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	fc 01       	movw	r30, r24
     ae2:	20 81       	ld	r18, Z
     ae4:	86 e5       	ldi	r24, 0x56	; 86
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	2e 7f       	andi	r18, 0xFE	; 254
     aea:	fc 01       	movw	r30, r24
     aec:	20 83       	st	Z, r18
}
     aee:	00 00       	nop
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <DIO_setPinDIR>:
 * @param2 : copyPinNum
 * @param3 : copyDir
 * @retVal : void
 */
void DIO_setPinDIR(_GPIO_PINS copyPinNum,_DIRECTION_PINS copyDir)
{
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	00 d0       	rcall	.+0      	; 0xafc <DIO_setPinDIR+0x6>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	89 83       	std	Y+1, r24	; 0x01
     b02:	6a 83       	std	Y+2, r22	; 0x02
	switch (copyDir)
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	88 2f       	mov	r24, r24
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	19 f0       	breq	.+6      	; 0xb14 <DIO_setPinDIR+0x1e>
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	89 f1       	breq	.+98     	; 0xb74 <DIO_setPinDIR+0x7e>
	{
		case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
		case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
	}
}
     b12:	5f c0       	rjmp	.+190    	; 0xbd2 <DIO_setPinDIR+0xdc>
 */
void DIO_setPinDIR(_GPIO_PINS copyPinNum,_DIRECTION_PINS copyDir)
{
	switch (copyDir)
	{
		case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	86 95       	lsr	r24
     b18:	86 95       	lsr	r24
     b1a:	86 95       	lsr	r24
     b1c:	88 2f       	mov	r24, r24
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	80 5a       	subi	r24, 0xA0	; 160
     b26:	9f 4f       	sbci	r25, 0xFF	; 255
     b28:	fc 01       	movw	r30, r24
     b2a:	80 81       	ld	r24, Z
     b2c:	91 81       	ldd	r25, Z+1	; 0x01
     b2e:	fc 01       	movw	r30, r24
     b30:	80 81       	ld	r24, Z
     b32:	48 2f       	mov	r20, r24
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	88 2f       	mov	r24, r24
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	9c 01       	movw	r18, r24
     b3c:	27 70       	andi	r18, 0x07	; 7
     b3e:	33 27       	eor	r19, r19
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_setPinDIR+0x54>
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	2a 95       	dec	r18
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_setPinDIR+0x50>
     b4e:	80 95       	com	r24
     b50:	24 2f       	mov	r18, r20
     b52:	28 23       	and	r18, r24
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	86 95       	lsr	r24
     b58:	86 95       	lsr	r24
     b5a:	86 95       	lsr	r24
     b5c:	88 2f       	mov	r24, r24
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	80 5a       	subi	r24, 0xA0	; 160
     b66:	9f 4f       	sbci	r25, 0xFF	; 255
     b68:	fc 01       	movw	r30, r24
     b6a:	80 81       	ld	r24, Z
     b6c:	91 81       	ldd	r25, Z+1	; 0x01
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
     b72:	2f c0       	rjmp	.+94     	; 0xbd2 <DIO_setPinDIR+0xdc>
		case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyPinNum / 8]),(copyPinNum % 8)); break;
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	86 95       	lsr	r24
     b78:	86 95       	lsr	r24
     b7a:	86 95       	lsr	r24
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	80 5a       	subi	r24, 0xA0	; 160
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	fc 01       	movw	r30, r24
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	fc 01       	movw	r30, r24
     b90:	80 81       	ld	r24, Z
     b92:	48 2f       	mov	r20, r24
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	88 2f       	mov	r24, r24
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	9c 01       	movw	r18, r24
     b9c:	27 70       	andi	r18, 0x07	; 7
     b9e:	33 27       	eor	r19, r19
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_setPinDIR+0xb4>
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	2a 95       	dec	r18
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_setPinDIR+0xb0>
     bae:	24 2f       	mov	r18, r20
     bb0:	28 2b       	or	r18, r24
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	86 95       	lsr	r24
     bb6:	86 95       	lsr	r24
     bb8:	86 95       	lsr	r24
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	80 5a       	subi	r24, 0xA0	; 160
     bc4:	9f 4f       	sbci	r25, 0xFF	; 255
     bc6:	fc 01       	movw	r30, r24
     bc8:	80 81       	ld	r24, Z
     bca:	91 81       	ldd	r25, Z+1	; 0x01
     bcc:	fc 01       	movw	r30, r24
     bce:	20 83       	st	Z, r18
     bd0:	00 00       	nop
	}
}
     bd2:	00 00       	nop
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <DIO_setPinVAL>:
 * @param2 : copyPinNum
 * @param3 : copyVal
 * @retVal : void
 */
void DIO_setPinVAL(_GPIO_PINS copyPinNum,_STATUS_PINS copyVal)
{
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <DIO_setPinVAL+0x6>
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	6a 83       	std	Y+2, r22	; 0x02
	switch (copyVal)
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	91 05       	cpc	r25, r1
     bf6:	b9 f1       	breq	.+110    	; 0xc66 <DIO_setPinVAL+0x88>
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	91 05       	cpc	r25, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <DIO_setPinVAL+0x22>
     bfe:	62 c0       	rjmp	.+196    	; 0xcc4 <DIO_setPinVAL+0xe6>
     c00:	89 2b       	or	r24, r25
     c02:	09 f0       	breq	.+2      	; 0xc06 <DIO_setPinVAL+0x28>
	{
		case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
		case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
		case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8)); break;
	}
}
     c04:	8e c0       	rjmp	.+284    	; 0xd22 <DIO_setPinVAL+0x144>
 */
void DIO_setPinVAL(_GPIO_PINS copyPinNum,_STATUS_PINS copyVal)
{
	switch (copyVal)
	{
		case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	86 95       	lsr	r24
     c0a:	86 95       	lsr	r24
     c0c:	86 95       	lsr	r24
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	8a 58       	subi	r24, 0x8A	; 138
     c18:	9f 4f       	sbci	r25, 0xFF	; 255
     c1a:	fc 01       	movw	r30, r24
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	fc 01       	movw	r30, r24
     c22:	80 81       	ld	r24, Z
     c24:	48 2f       	mov	r20, r24
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9c 01       	movw	r18, r24
     c2e:	27 70       	andi	r18, 0x07	; 7
     c30:	33 27       	eor	r19, r19
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_setPinVAL+0x5e>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	2a 95       	dec	r18
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_setPinVAL+0x5a>
     c40:	80 95       	com	r24
     c42:	24 2f       	mov	r18, r20
     c44:	28 23       	and	r18, r24
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	86 95       	lsr	r24
     c4a:	86 95       	lsr	r24
     c4c:	86 95       	lsr	r24
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	8a 58       	subi	r24, 0x8A	; 138
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	fc 01       	movw	r30, r24
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
     c64:	5e c0       	rjmp	.+188    	; 0xd22 <DIO_setPinVAL+0x144>
		case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8));    break;
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	86 95       	lsr	r24
     c6a:	86 95       	lsr	r24
     c6c:	86 95       	lsr	r24
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	8a 58       	subi	r24, 0x8A	; 138
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	fc 01       	movw	r30, r24
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	fc 01       	movw	r30, r24
     c82:	80 81       	ld	r24, Z
     c84:	48 2f       	mov	r20, r24
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9c 01       	movw	r18, r24
     c8e:	27 70       	andi	r18, 0x07	; 7
     c90:	33 27       	eor	r19, r19
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_setPinVAL+0xbe>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	2a 95       	dec	r18
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_setPinVAL+0xba>
     ca0:	24 2f       	mov	r18, r20
     ca2:	28 2b       	or	r18, r24
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	86 95       	lsr	r24
     ca8:	86 95       	lsr	r24
     caa:	86 95       	lsr	r24
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	8a 58       	subi	r24, 0x8A	; 138
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	fc 01       	movw	r30, r24
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
     cc2:	2f c0       	rjmp	.+94     	; 0xd22 <DIO_setPinVAL+0x144>
		case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyPinNum / 8]),(copyPinNum % 8)); break;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	86 95       	lsr	r24
     cc8:	86 95       	lsr	r24
     cca:	86 95       	lsr	r24
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	8a 58       	subi	r24, 0x8A	; 138
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	fc 01       	movw	r30, r24
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	fc 01       	movw	r30, r24
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9c 01       	movw	r18, r24
     cec:	27 70       	andi	r18, 0x07	; 7
     cee:	33 27       	eor	r19, r19
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <DIO_setPinVAL+0x11c>
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	2a 95       	dec	r18
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <DIO_setPinVAL+0x118>
     cfe:	24 2f       	mov	r18, r20
     d00:	28 27       	eor	r18, r24
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	86 95       	lsr	r24
     d06:	86 95       	lsr	r24
     d08:	86 95       	lsr	r24
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	8a 58       	subi	r24, 0x8A	; 138
     d14:	9f 4f       	sbci	r25, 0xFF	; 255
     d16:	fc 01       	movw	r30, r24
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 83       	st	Z, r18
     d20:	00 00       	nop
	}
}
     d22:	00 00       	nop
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <DIO_setPINSDIR>:
 * @param3 : copyEndPin
 * @param4 : copyDir
 * @retVal : void
 */
void DIO_setPINSDIR(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _DIRECTION_PINS copyDir)
{
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	00 d0       	rcall	.+0      	; 0xd34 <DIO_setPINSDIR+0x6>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <DIO_setPINSDIR+0x8>
     d36:	1f 92       	push	r1
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	9b 83       	std	Y+3, r25	; 0x03
     d3e:	8a 83       	std	Y+2, r24	; 0x02
     d40:	6c 83       	std	Y+4, r22	; 0x04
     d42:	4d 83       	std	Y+5, r20	; 0x05
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
     d44:	19 82       	std	Y+1, r1	; 0x01
     d46:	9b c0       	rjmp	.+310    	; 0xe7e <DIO_setPINSDIR+0x150>
	{
		switch (copyDir)
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	21 f0       	breq	.+8      	; 0xd5a <DIO_setPINSDIR+0x2c>
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_setPINSDIR+0x2a>
     d56:	49 c0       	rjmp	.+146    	; 0xdea <DIO_setPINSDIR+0xbc>
     d58:	8f c0       	rjmp	.+286    	; 0xe78 <DIO_setPINSDIR+0x14a>
		{
			case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	2a 81       	ldd	r18, Y+2	; 0x02
     d62:	3b 81       	ldd	r19, Y+3	; 0x03
     d64:	82 0f       	add	r24, r18
     d66:	93 1f       	adc	r25, r19
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	86 95       	lsr	r24
     d6e:	86 95       	lsr	r24
     d70:	86 95       	lsr	r24
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	80 5a       	subi	r24, 0xA0	; 160
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	fc 01       	movw	r30, r24
     d80:	80 81       	ld	r24, Z
     d82:	91 81       	ldd	r25, Z+1	; 0x01
     d84:	fc 01       	movw	r30, r24
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	2a 81       	ldd	r18, Y+2	; 0x02
     d92:	3b 81       	ldd	r19, Y+3	; 0x03
     d94:	82 0f       	add	r24, r18
     d96:	93 1f       	adc	r25, r19
     d98:	fc 01       	movw	r30, r24
     d9a:	80 81       	ld	r24, Z
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9c 01       	movw	r18, r24
     da2:	27 70       	andi	r18, 0x07	; 7
     da4:	33 27       	eor	r19, r19
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_setPINSDIR+0x82>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	2a 95       	dec	r18
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_setPINSDIR+0x7e>
     db4:	80 95       	com	r24
     db6:	48 23       	and	r20, r24
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	2a 81       	ldd	r18, Y+2	; 0x02
     dc0:	3b 81       	ldd	r19, Y+3	; 0x03
     dc2:	82 0f       	add	r24, r18
     dc4:	93 1f       	adc	r25, r19
     dc6:	fc 01       	movw	r30, r24
     dc8:	80 81       	ld	r24, Z
     dca:	86 95       	lsr	r24
     dcc:	86 95       	lsr	r24
     dce:	86 95       	lsr	r24
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	80 5a       	subi	r24, 0xA0	; 160
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	fc 01       	movw	r30, r24
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	24 2f       	mov	r18, r20
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <DIO_setPINSDIR+0x14a>
			case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	2a 81       	ldd	r18, Y+2	; 0x02
     df2:	3b 81       	ldd	r19, Y+3	; 0x03
     df4:	82 0f       	add	r24, r18
     df6:	93 1f       	adc	r25, r19
     df8:	fc 01       	movw	r30, r24
     dfa:	80 81       	ld	r24, Z
     dfc:	86 95       	lsr	r24
     dfe:	86 95       	lsr	r24
     e00:	86 95       	lsr	r24
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	80 5a       	subi	r24, 0xA0	; 160
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	fc 01       	movw	r30, r24
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	2a 81       	ldd	r18, Y+2	; 0x02
     e22:	3b 81       	ldd	r19, Y+3	; 0x03
     e24:	82 0f       	add	r24, r18
     e26:	93 1f       	adc	r25, r19
     e28:	fc 01       	movw	r30, r24
     e2a:	80 81       	ld	r24, Z
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9c 01       	movw	r18, r24
     e32:	27 70       	andi	r18, 0x07	; 7
     e34:	33 27       	eor	r19, r19
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_setPINSDIR+0x112>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	2a 95       	dec	r18
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_setPINSDIR+0x10e>
     e44:	48 2b       	or	r20, r24
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	2a 81       	ldd	r18, Y+2	; 0x02
     e4e:	3b 81       	ldd	r19, Y+3	; 0x03
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	fc 01       	movw	r30, r24
     e56:	80 81       	ld	r24, Z
     e58:	86 95       	lsr	r24
     e5a:	86 95       	lsr	r24
     e5c:	86 95       	lsr	r24
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	80 5a       	subi	r24, 0xA0	; 160
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	fc 01       	movw	r30, r24
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	24 2f       	mov	r18, r20
     e72:	fc 01       	movw	r30, r24
     e74:	20 83       	st	Z, r18
     e76:	00 00       	nop
 * @param4 : copyDir
 * @retVal : void
 */
void DIO_setPINSDIR(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _DIRECTION_PINS copyDir)
{
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	99 81       	ldd	r25, Y+1	; 0x01
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	98 17       	cp	r25, r24
     e84:	08 f4       	brcc	.+2      	; 0xe88 <DIO_setPINSDIR+0x15a>
     e86:	60 cf       	rjmp	.-320    	; 0xd48 <DIO_setPINSDIR+0x1a>
		{
			case _DIRECTION_PIN_INPUT  : CLR_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
			case _DIRECTION_PIN_OUTPUT : SET_BIT(*(ARR_DDR[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
		}
	}
}
     e88:	00 00       	nop
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <DIO_setPINSVAL>:
 * @param3 : copyEndPin
 * @param4 : copyVal
 * @retVal : void
 */
void DIO_setPINSVAL(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _STATUS_PINS copyVal)
{
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <DIO_setPINSVAL+0x6>
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <DIO_setPINSVAL+0x8>
     ea2:	1f 92       	push	r1
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	9b 83       	std	Y+3, r25	; 0x03
     eaa:	8a 83       	std	Y+2, r24	; 0x02
     eac:	6c 83       	std	Y+4, r22	; 0x04
     eae:	4d 83       	std	Y+5, r20	; 0x05
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
     eb0:	19 82       	std	Y+1, r1	; 0x01
     eb2:	e7 c0       	rjmp	.+462    	; 0x1082 <DIO_setPINSVAL+0x1e8>
	{
		switch (copyVal)
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <DIO_setPINSVAL+0x28>
     ec0:	4f c0       	rjmp	.+158    	; 0xf60 <DIO_setPINSVAL+0xc6>
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <DIO_setPINSVAL+0x30>
     ec8:	92 c0       	rjmp	.+292    	; 0xfee <DIO_setPINSVAL+0x154>
     eca:	89 2b       	or	r24, r25
     ecc:	09 f0       	breq	.+2      	; 0xed0 <DIO_setPINSVAL+0x36>
     ece:	d6 c0       	rjmp	.+428    	; 0x107c <DIO_setPINSVAL+0x1e2>
		{
			case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	2a 81       	ldd	r18, Y+2	; 0x02
     ed8:	3b 81       	ldd	r19, Y+3	; 0x03
     eda:	82 0f       	add	r24, r18
     edc:	93 1f       	adc	r25, r19
     ede:	fc 01       	movw	r30, r24
     ee0:	80 81       	ld	r24, Z
     ee2:	86 95       	lsr	r24
     ee4:	86 95       	lsr	r24
     ee6:	86 95       	lsr	r24
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	8a 58       	subi	r24, 0x8A	; 138
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	fc 01       	movw	r30, r24
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	2a 81       	ldd	r18, Y+2	; 0x02
     f08:	3b 81       	ldd	r19, Y+3	; 0x03
     f0a:	82 0f       	add	r24, r18
     f0c:	93 1f       	adc	r25, r19
     f0e:	fc 01       	movw	r30, r24
     f10:	80 81       	ld	r24, Z
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 01       	movw	r18, r24
     f18:	27 70       	andi	r18, 0x07	; 7
     f1a:	33 27       	eor	r19, r19
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_setPINSVAL+0x8c>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	2a 95       	dec	r18
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_setPINSVAL+0x88>
     f2a:	80 95       	com	r24
     f2c:	48 23       	and	r20, r24
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	2a 81       	ldd	r18, Y+2	; 0x02
     f36:	3b 81       	ldd	r19, Y+3	; 0x03
     f38:	82 0f       	add	r24, r18
     f3a:	93 1f       	adc	r25, r19
     f3c:	fc 01       	movw	r30, r24
     f3e:	80 81       	ld	r24, Z
     f40:	86 95       	lsr	r24
     f42:	86 95       	lsr	r24
     f44:	86 95       	lsr	r24
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	8a 58       	subi	r24, 0x8A	; 138
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	fc 01       	movw	r30, r24
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	24 2f       	mov	r18, r20
     f5a:	fc 01       	movw	r30, r24
     f5c:	20 83       	st	Z, r18
     f5e:	8e c0       	rjmp	.+284    	; 0x107c <DIO_setPINSVAL+0x1e2>
			case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	2a 81       	ldd	r18, Y+2	; 0x02
     f68:	3b 81       	ldd	r19, Y+3	; 0x03
     f6a:	82 0f       	add	r24, r18
     f6c:	93 1f       	adc	r25, r19
     f6e:	fc 01       	movw	r30, r24
     f70:	80 81       	ld	r24, Z
     f72:	86 95       	lsr	r24
     f74:	86 95       	lsr	r24
     f76:	86 95       	lsr	r24
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	8a 58       	subi	r24, 0x8A	; 138
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	fc 01       	movw	r30, r24
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	2a 81       	ldd	r18, Y+2	; 0x02
     f98:	3b 81       	ldd	r19, Y+3	; 0x03
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	fc 01       	movw	r30, r24
     fa0:	80 81       	ld	r24, Z
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9c 01       	movw	r18, r24
     fa8:	27 70       	andi	r18, 0x07	; 7
     faa:	33 27       	eor	r19, r19
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_setPINSVAL+0x11c>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	2a 95       	dec	r18
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_setPINSVAL+0x118>
     fba:	48 2b       	or	r20, r24
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	2a 81       	ldd	r18, Y+2	; 0x02
     fc4:	3b 81       	ldd	r19, Y+3	; 0x03
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	fc 01       	movw	r30, r24
     fcc:	80 81       	ld	r24, Z
     fce:	86 95       	lsr	r24
     fd0:	86 95       	lsr	r24
     fd2:	86 95       	lsr	r24
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	8a 58       	subi	r24, 0x8A	; 138
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	fc 01       	movw	r30, r24
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	24 2f       	mov	r18, r20
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
     fec:	47 c0       	rjmp	.+142    	; 0x107c <DIO_setPINSVAL+0x1e2>
			case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	2a 81       	ldd	r18, Y+2	; 0x02
     ff6:	3b 81       	ldd	r19, Y+3	; 0x03
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	fc 01       	movw	r30, r24
     ffe:	80 81       	ld	r24, Z
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	86 95       	lsr	r24
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	8a 58       	subi	r24, 0x8A	; 138
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	fc 01       	movw	r30, r24
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	fc 01       	movw	r30, r24
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	2a 81       	ldd	r18, Y+2	; 0x02
    1026:	3b 81       	ldd	r19, Y+3	; 0x03
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	fc 01       	movw	r30, r24
    102e:	80 81       	ld	r24, Z
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9c 01       	movw	r18, r24
    1036:	27 70       	andi	r18, 0x07	; 7
    1038:	33 27       	eor	r19, r19
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_setPINSVAL+0x1aa>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	2a 95       	dec	r18
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_setPINSVAL+0x1a6>
    1048:	48 27       	eor	r20, r24
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	2a 81       	ldd	r18, Y+2	; 0x02
    1052:	3b 81       	ldd	r19, Y+3	; 0x03
    1054:	82 0f       	add	r24, r18
    1056:	93 1f       	adc	r25, r19
    1058:	fc 01       	movw	r30, r24
    105a:	80 81       	ld	r24, Z
    105c:	86 95       	lsr	r24
    105e:	86 95       	lsr	r24
    1060:	86 95       	lsr	r24
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	8a 58       	subi	r24, 0x8A	; 138
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	fc 01       	movw	r30, r24
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	24 2f       	mov	r18, r20
    1076:	fc 01       	movw	r30, r24
    1078:	20 83       	st	Z, r18
    107a:	00 00       	nop
 * @param4 : copyVal
 * @retVal : void
 */
void DIO_setPINSVAL(_GPIO_PINS *copyStartPin, _GPIO_PINS copyEndPin, _STATUS_PINS copyVal)
{
	for (uint_8 Count = Zero_INIT ;  Count < copyEndPin ; Count++)
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	8f 5f       	subi	r24, 0xFF	; 255
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	99 81       	ldd	r25, Y+1	; 0x01
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	98 17       	cp	r25, r24
    1088:	08 f4       	brcc	.+2      	; 0x108c <DIO_setPINSVAL+0x1f2>
    108a:	14 cf       	rjmp	.-472    	; 0xeb4 <DIO_setPINSVAL+0x1a>
			case _STATUS_PIN_LOW    : CLR_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
			case _STATUS_PIN_HIGH   : SET_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8));    break;
			case _STATUS_PIN_TOGGLE : TOGGLE_BIT(*(ARR_PORT[copyStartPin[Count] / 8]),(copyStartPin[Count] % 8)); break;
		}
	}
}
    108c:	00 00       	nop
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <DIO_getPinVAL>:
 * @param1 : copyPortNum
 * @param2 : copyPinNum
 * @retVal : Ret1
 */
Return_Value DIO_getPinVAL(_GPIO_PINS copyPinNum)
{
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <DIO_getPinVAL+0x6>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Ret = Zero_INIT;
    10aa:	19 82       	std	Y+1, r1	; 0x01
	Ret = GET_BIT(*(ARR_PIN[copyPinNum / 8]),(copyPinNum % 8));
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	86 95       	lsr	r24
    10b0:	86 95       	lsr	r24
    10b2:	86 95       	lsr	r24
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	84 57       	subi	r24, 0x74	; 116
    10be:	9f 4f       	sbci	r25, 0xFF	; 255
    10c0:	fc 01       	movw	r30, r24
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	fc 01       	movw	r30, r24
    10c8:	80 81       	ld	r24, Z
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	2a 81       	ldd	r18, Y+2	; 0x02
    10d0:	22 2f       	mov	r18, r18
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	27 70       	andi	r18, 0x07	; 7
    10d6:	33 27       	eor	r19, r19
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_getPinVAL+0x40>
    10da:	95 95       	asr	r25
    10dc:	87 95       	ror	r24
    10de:	2a 95       	dec	r18
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_getPinVAL+0x3c>
    10e2:	81 70       	andi	r24, 0x01	; 1
    10e4:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <DIO_setPortDIR>:
 * @param1 : copyPortNum
 * @param2 : copyDir
 * @retVal : void
 */
void DIO_setPortDIR(_GPIO_PORTS copyPortNum,_DIRECTION_PORTS copyDir)
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <DIO_setPortDIR+0x6>
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	6a 83       	std	Y+2, r22	; 0x02
	*ARR_DDR[copyPortNum] = copyDir;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	80 5a       	subi	r24, 0xA0	; 160
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	fc 01       	movw	r30, r24
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	2a 81       	ldd	r18, Y+2	; 0x02
    1116:	fc 01       	movw	r30, r24
    1118:	20 83       	st	Z, r18
}
    111a:	00 00       	nop
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <DIO_setPortVAL>:
 * @param1 : copyPortNum
 * @param2 : copyVal
 * @retVal : void
 */
void DIO_setPortVAL(_GPIO_PORTS copyPortNum,_STATUS_PORTS copyVal)
{
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	00 d0       	rcall	.+0      	; 0x112c <DIO_setPortVAL+0x6>
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	6a 83       	std	Y+2, r22	; 0x02
	*ARR_PORT[copyPortNum] = copyVal;
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	8a 58       	subi	r24, 0x8A	; 138
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	fc 01       	movw	r30, r24
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	2a 81       	ldd	r18, Y+2	; 0x02
    114a:	fc 01       	movw	r30, r24
    114c:	20 83       	st	Z, r18
}
    114e:	00 00       	nop
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <DIO_getPortVAL>:
 * @brief  : if DDxn configured input All port This function get Status from PINxn Register
 * @param1 : copyPortNum
 * @retVal : Ret1
 */
Return_Value DIO_getPortVAL(_GPIO_PORTS copyPortNum)
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	00 d0       	rcall	.+0      	; 0x1160 <DIO_getPortVAL+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Ret = Zero_INIT;
    1166:	19 82       	std	Y+1, r1	; 0x01
	Ret = *ARR_PIN[copyPortNum];
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	84 57       	subi	r24, 0x74	; 116
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	fc 01       	movw	r30, r24
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	fc 01       	movw	r30, r24
    117e:	80 81       	ld	r24, Z
    1180:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
    1182:	89 81       	ldd	r24, Y+1	; 0x01
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <ADC_init>:
  * 		  By writing it to zero, the ADC is turned off. Select ADC VOLT Reference.
  * @param1 : void
  * @retVal : void
  */
void ADC_init(void)
{
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
#if (_ADC_VOLT == AVCC)
	CLR_BIT(ADMUX,REFS1);
    1196:	87 e2       	ldi	r24, 0x27	; 39
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	fc 01       	movw	r30, r24
    119c:	20 81       	ld	r18, Z
    119e:	87 e2       	ldi	r24, 0x27	; 39
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	2f 77       	andi	r18, 0x7F	; 127
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
	SET_BIT(ADMUX,REFS0);
    11a8:	87 e2       	ldi	r24, 0x27	; 39
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	fc 01       	movw	r30, r24
    11ae:	20 81       	ld	r18, Z
    11b0:	87 e2       	ldi	r24, 0x27	; 39
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	20 64       	ori	r18, 0x40	; 64
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
	SET_BIT(ADMUX,REFS1);
	SET_BIT(ADMUX,REFS0);
#endif

#if (ADC_AUTO_TRIGGER == FREE_RUNNING_MODE)
	CLR_BIT(SFIOR,ADTS2);
    11ba:	80 e5       	ldi	r24, 0x50	; 80
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	fc 01       	movw	r30, r24
    11c0:	20 81       	ld	r18, Z
    11c2:	80 e5       	ldi	r24, 0x50	; 80
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	2f 77       	andi	r18, 0x7F	; 127
    11c8:	fc 01       	movw	r30, r24
    11ca:	20 83       	st	Z, r18
	CLR_BIT(SFIOR,ADTS1);
    11cc:	80 e5       	ldi	r24, 0x50	; 80
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 81       	ld	r18, Z
    11d4:	80 e5       	ldi	r24, 0x50	; 80
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	2f 7b       	andi	r18, 0xBF	; 191
    11da:	fc 01       	movw	r30, r24
    11dc:	20 83       	st	Z, r18
	CLR_BIT(SFIOR,ADTS0);
    11de:	80 e5       	ldi	r24, 0x50	; 80
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 81       	ld	r18, Z
    11e6:	80 e5       	ldi	r24, 0x50	; 80
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	2f 7d       	andi	r18, 0xDF	; 223
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
#elif (ADC_AUTO_TRIGGER == TIMER1_CAPTURE_MODE)
	SET_BIT(SFIOR,ADTS2);
	SET_BIT(SFIOR,ADTS1);
	SET_BIT(SFIOR,ADTS0);
#endif
	SET_BIT(ADCSRA,ADEN);
    11f0:	86 e2       	ldi	r24, 0x26	; 38
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 81       	ld	r18, Z
    11f8:	86 e2       	ldi	r24, 0x26	; 38
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	20 68       	ori	r18, 0x80	; 128
    11fe:	fc 01       	movw	r30, r24
    1200:	20 83       	st	Z, r18
	ADCSRA |= _ADC_PRESCALER_SELECT;
    1202:	26 e2       	ldi	r18, 0x26	; 38
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	86 e2       	ldi	r24, 0x26	; 38
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	f9 01       	movw	r30, r18
    120c:	20 81       	ld	r18, Z
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
}
    1212:	00 00       	nop
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	08 95       	ret

0000121a <ADC_analogRead>:
  * 		  in variable uint_16
  * @param1 : copyChannel
  * @retVal : Ret1
  */
uint_16 ADC_analogRead(_ADC_CHANNELS copyChannel)
{
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	00 d0       	rcall	.+0      	; 0x1220 <ADC_analogRead+0x6>
    1220:	1f 92       	push	r1
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	8b 83       	std	Y+3, r24	; 0x03
	uint_16 Ret1 = Zero_INIT;
    1228:	1a 82       	std	Y+2, r1	; 0x02
    122a:	19 82       	std	Y+1, r1	; 0x01
	ADMUX &= _ADC_CLEAR_MASK;
    122c:	87 e2       	ldi	r24, 0x27	; 39
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	fc 01       	movw	r30, r24
    1232:	20 81       	ld	r18, Z
    1234:	87 e2       	ldi	r24, 0x27	; 39
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	20 7e       	andi	r18, 0xE0	; 224
    123a:	fc 01       	movw	r30, r24
    123c:	20 83       	st	Z, r18
	ADMUX |= copyChannel;
    123e:	87 e2       	ldi	r24, 0x27	; 39
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	fc 01       	movw	r30, r24
    1244:	30 81       	ld	r19, Z
    1246:	87 e2       	ldi	r24, 0x27	; 39
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	23 2b       	or	r18, r19
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADSC);
    1252:	86 e2       	ldi	r24, 0x26	; 38
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	fc 01       	movw	r30, r24
    1258:	20 81       	ld	r18, Z
    125a:	86 e2       	ldi	r24, 0x26	; 38
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	20 64       	ori	r18, 0x40	; 64
    1260:	fc 01       	movw	r30, r24
    1262:	20 83       	st	Z, r18
	while((GET_BIT(ADCSRA,ADSC)));	// polling data
    1264:	00 00       	nop
    1266:	86 e2       	ldi	r24, 0x26	; 38
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	fc 01       	movw	r30, r24
    126c:	80 81       	ld	r24, Z
    126e:	82 95       	swap	r24
    1270:	86 95       	lsr	r24
    1272:	86 95       	lsr	r24
    1274:	83 70       	andi	r24, 0x03	; 3
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	99 27       	eor	r25, r25
    127e:	89 2b       	or	r24, r25
    1280:	91 f7       	brne	.-28     	; 0x1266 <ADC_analogRead+0x4c>
	Ret1 = ADCL;
    1282:	84 e2       	ldi	r24, 0x24	; 36
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	fc 01       	movw	r30, r24
    1288:	80 81       	ld	r24, Z
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
	Ret1 |= (ADCH << 8);
    1292:	85 e2       	ldi	r24, 0x25	; 37
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	fc 01       	movw	r30, r24
    1298:	80 81       	ld	r24, Z
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	98 2f       	mov	r25, r24
    12a0:	88 27       	eor	r24, r24
    12a2:	9c 01       	movw	r18, r24
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	82 2b       	or	r24, r18
    12aa:	93 2b       	or	r25, r19
    12ac:	9a 83       	std	Y+2, r25	; 0x02
    12ae:	89 83       	std	Y+1, r24	; 0x01
	return Ret1;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <ADC_enable>:
  * @brief  : ADC enable Writing the ADEN bit to one the ADC is turned on.
  * @param1 : void
  * @retVal : void
  */
void ADC_enable(void)
{
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
    12c8:	86 e2       	ldi	r24, 0x26	; 38
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 81       	ld	r18, Z
    12d0:	86 e2       	ldi	r24, 0x26	; 38
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	20 68       	ori	r18, 0x80	; 128
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 83       	st	Z, r18
}
    12da:	00 00       	nop
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <ADC_disable>:
  * @brief  : ADC disable By writing it to zero, the ADC is turned off.
  * @param1 : void
  * @retVal : void
  */
void ADC_disable(void)
{
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADEN);
    12ea:	86 e2       	ldi	r24, 0x26	; 38
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 81       	ld	r18, Z
    12f2:	86 e2       	ldi	r24, 0x26	; 38
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	2f 77       	andi	r18, 0x7F	; 127
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 83       	st	Z, r18
}
    12fc:	00 00       	nop
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <ADC_enableInterrupt>:
  *  		  the ADC Conversion Complete Interrupt is activated.
  * @param1 : void
  * @retVal : void
  */
void ADC_enableInterrupt(void)
{
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
    130c:	8f e5       	ldi	r24, 0x5F	; 95
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	fc 01       	movw	r30, r24
    1312:	20 81       	ld	r18, Z
    1314:	8f e5       	ldi	r24, 0x5F	; 95
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	20 68       	ori	r18, 0x80	; 128
    131a:	fc 01       	movw	r30, r24
    131c:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADIE);
    131e:	86 e2       	ldi	r24, 0x26	; 38
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	20 81       	ld	r18, Z
    1326:	86 e2       	ldi	r24, 0x26	; 38
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	28 60       	ori	r18, 0x08	; 8
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
}
    1330:	00 00       	nop
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <ADC_disableInterrupt>:
  *  		  the ADC Conversion Complete Interrupt is activated.
  * @param1 : void
  * @retVal : void
  */
void ADC_disableInterrupt(void)
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIE);
    1340:	86 e2       	ldi	r24, 0x26	; 38
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	fc 01       	movw	r30, r24
    1346:	20 81       	ld	r18, Z
    1348:	86 e2       	ldi	r24, 0x26	; 38
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	27 7f       	andi	r18, 0xF7	; 247
    134e:	fc 01       	movw	r30, r24
    1350:	20 83       	st	Z, r18
}
    1352:	00 00       	nop
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <ADC_clearFlag>:
  * 		  conversion.
  * @param1 : void
  * @retVal : void
  */
void ADC_clearFlag(void)
{
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIF);
    1362:	86 e2       	ldi	r24, 0x26	; 38
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	fc 01       	movw	r30, r24
    1368:	20 81       	ld	r18, Z
    136a:	86 e2       	ldi	r24, 0x26	; 38
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	2f 7e       	andi	r18, 0xEF	; 239
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
}
    1374:	00 00       	nop
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <RELAY_init>:
 * @brief  : Relay function initializations to set directions output for relay's pin .
 * @param1 : void
 * @retVal : void
 */
void RELAY_init(void)
{
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDIR(RELAY_PIN, _DIRECTION_PIN_OUTPUT);
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	80 e1       	ldi	r24, 0x10	; 16
    1388:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
}
    138c:	00 00       	nop
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <RELAY_turnON>:
 * @brief  : Relay function turn on to set status high of relay's pin.
 * @param1 : void
 * @retVal : void
 */
void RELAY_turnON(void)
{
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinVAL(RELAY_PIN, _STATUS_PIN_HIGH);
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	80 e1       	ldi	r24, 0x10	; 16
    13a0:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
}
    13a4:	00 00       	nop
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <RELAY_turnOFF>:
 * @brief  : Relay function turn off to set status low of relay's pin.
 * @param1 : void
 * @retVal : void
 */
void RELAY_turnOFF(void)
{
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinVAL(RELAY_PIN, _STATUS_PIN_LOW);
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	80 e1       	ldi	r24, 0x10	; 16
    13b8:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
}
    13bc:	00 00       	nop
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <LCD_init>:
 *           if _LCD_MODE is _4_BIT_MODE_LCD then EN , RS , D4 ~ D7 is output pins.
 * @param1 : copyLCDNum
 * @retVal : void
 */
void LCD_init(PINS_LCD copyLCDNum)
{
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	e1 97       	sbiw	r28, 0x31	; 49
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	4c a7       	std	Y+44, r20	; 0x2c
    13da:	5d a7       	std	Y+45, r21	; 0x2d
    13dc:	6e a7       	std	Y+46, r22	; 0x2e
    13de:	7f a7       	std	Y+47, r23	; 0x2f
    13e0:	88 ab       	std	Y+48, r24	; 0x30
    13e2:	99 ab       	std	Y+49, r25	; 0x31
	LCD_writeCMD(copyLCDNum,_LCD_ENTERY_INC);
	LCD_writeCMD(copyLCDNum,_LCD_DISPLAY_ON);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
	LCD_writeCMD(copyLCDNum,0x80);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinDIR(copyLCDNum.EN, _DIRECTION_PIN_OUTPUT);
    13e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    13e6:	61 e0       	ldi	r22, 0x01	; 1
    13e8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
	DIO_setPinDIR(copyLCDNum.RS, _DIRECTION_PIN_OUTPUT);
    13ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
	for(uint_8 count = Zero_INIT ; count < 4 ; count++)
    13f4:	19 82       	std	Y+1, r1	; 0x01
    13f6:	10 c0       	rjmp	.+32     	; 0x1418 <LCD_init+0x54>
	{
		DIO_setPinDIR(copyLCDNum.D[count],_DIRECTION_PIN_OUTPUT);
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9e 01       	movw	r18, r28
    1400:	22 5d       	subi	r18, 0xD2	; 210
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	82 0f       	add	r24, r18
    1406:	93 1f       	adc	r25, r19
    1408:	fc 01       	movw	r30, r24
    140a:	80 81       	ld	r24, Z
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
	LCD_writeCMD(copyLCDNum,0x80);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinDIR(copyLCDNum.EN, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyLCDNum.RS, _DIRECTION_PIN_OUTPUT);
	for(uint_8 count = Zero_INIT ; count < 4 ; count++)
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	84 30       	cpi	r24, 0x04	; 4
    141c:	68 f3       	brcs	.-38     	; 0x13f8 <LCD_init+0x34>
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a0 ea       	ldi	r26, 0xA0	; 160
    1424:	b1 e4       	ldi	r27, 0x41	; 65
    1426:	8e 8f       	std	Y+30, r24	; 0x1e
    1428:	9f 8f       	std	Y+31, r25	; 0x1f
    142a:	a8 a3       	std	Y+32, r26	; 0x20
    142c:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	4a ef       	ldi	r20, 0xFA	; 250
    1434:	54 e4       	ldi	r21, 0x44	; 68
    1436:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1438:	7f 8d       	ldd	r23, Y+31	; 0x1f
    143a:	88 a1       	ldd	r24, Y+32	; 0x20
    143c:	99 a1       	ldd	r25, Y+33	; 0x21
    143e:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	8a a3       	std	Y+34, r24	; 0x22
    1448:	9b a3       	std	Y+35, r25	; 0x23
    144a:	ac a3       	std	Y+36, r26	; 0x24
    144c:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e8       	ldi	r20, 0x80	; 128
    1454:	5f e3       	ldi	r21, 0x3F	; 63
    1456:	6a a1       	ldd	r22, Y+34	; 0x22
    1458:	7b a1       	ldd	r23, Y+35	; 0x23
    145a:	8c a1       	ldd	r24, Y+36	; 0x24
    145c:	9d a1       	ldd	r25, Y+37	; 0x25
    145e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__cmpsf2>
    1462:	88 23       	and	r24, r24
    1464:	2c f4       	brge	.+10     	; 0x1470 <LCD_init+0xac>
		__ticks = 1;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9f a3       	std	Y+39, r25	; 0x27
    146c:	8e a3       	std	Y+38, r24	; 0x26
    146e:	3f c0       	rjmp	.+126    	; 0x14ee <LCD_init+0x12a>
	else if (__tmp > 65535)
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	3f ef       	ldi	r19, 0xFF	; 255
    1474:	4f e7       	ldi	r20, 0x7F	; 127
    1476:	57 e4       	ldi	r21, 0x47	; 71
    1478:	6a a1       	ldd	r22, Y+34	; 0x22
    147a:	7b a1       	ldd	r23, Y+35	; 0x23
    147c:	8c a1       	ldd	r24, Y+36	; 0x24
    147e:	9d a1       	ldd	r25, Y+37	; 0x25
    1480:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__gesf2>
    1484:	18 16       	cp	r1, r24
    1486:	4c f5       	brge	.+82     	; 0x14da <LCD_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e2       	ldi	r20, 0x20	; 32
    148e:	51 e4       	ldi	r21, 0x41	; 65
    1490:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1492:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1494:	88 a1       	ldd	r24, Y+32	; 0x20
    1496:	99 a1       	ldd	r25, Y+33	; 0x21
    1498:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	9f a3       	std	Y+39, r25	; 0x27
    14ae:	8e a3       	std	Y+38, r24	; 0x26
    14b0:	0f c0       	rjmp	.+30     	; 0x14d0 <LCD_init+0x10c>
    14b2:	88 ec       	ldi	r24, 0xC8	; 200
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	99 a7       	std	Y+41, r25	; 0x29
    14b8:	88 a7       	std	Y+40, r24	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ba:	88 a5       	ldd	r24, Y+40	; 0x28
    14bc:	99 a5       	ldd	r25, Y+41	; 0x29
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <LCD_init+0xfa>
    14c2:	99 a7       	std	Y+41, r25	; 0x29
    14c4:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c6:	8e a1       	ldd	r24, Y+38	; 0x26
    14c8:	9f a1       	ldd	r25, Y+39	; 0x27
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	9f a3       	std	Y+39, r25	; 0x27
    14ce:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d0:	8e a1       	ldd	r24, Y+38	; 0x26
    14d2:	9f a1       	ldd	r25, Y+39	; 0x27
    14d4:	89 2b       	or	r24, r25
    14d6:	69 f7       	brne	.-38     	; 0x14b2 <LCD_init+0xee>
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <LCD_init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14da:	6a a1       	ldd	r22, Y+34	; 0x22
    14dc:	7b a1       	ldd	r23, Y+35	; 0x23
    14de:	8c a1       	ldd	r24, Y+36	; 0x24
    14e0:	9d a1       	ldd	r25, Y+37	; 0x25
    14e2:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9f a3       	std	Y+39, r25	; 0x27
    14ec:	8e a3       	std	Y+38, r24	; 0x26
    14ee:	8e a1       	ldd	r24, Y+38	; 0x26
    14f0:	9f a1       	ldd	r25, Y+39	; 0x27
    14f2:	9b a7       	std	Y+43, r25	; 0x2b
    14f4:	8a a7       	std	Y+42, r24	; 0x2a
    14f6:	8a a5       	ldd	r24, Y+42	; 0x2a
    14f8:	9b a5       	ldd	r25, Y+43	; 0x2b
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <LCD_init+0x136>
    14fe:	9b a7       	std	Y+43, r25	; 0x2b
    1500:	8a a7       	std	Y+42, r24	; 0x2a
	{
		DIO_setPinDIR(copyLCDNum.D[count],_DIRECTION_PIN_OUTPUT);
	}
	_delay_ms(20);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
    1502:	28 e3       	ldi	r18, 0x38	; 56
    1504:	4c a5       	ldd	r20, Y+44	; 0x2c
    1506:	5d a5       	ldd	r21, Y+45	; 0x2d
    1508:	6e a5       	ldd	r22, Y+46	; 0x2e
    150a:	7f a5       	ldd	r23, Y+47	; 0x2f
    150c:	88 a9       	ldd	r24, Y+48	; 0x30
    150e:	99 a9       	ldd	r25, Y+49	; 0x31
    1510:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 ea       	ldi	r26, 0xA0	; 160
    151a:	b0 e4       	ldi	r27, 0x40	; 64
    151c:	88 8b       	std	Y+16, r24	; 0x10
    151e:	99 8b       	std	Y+17, r25	; 0x11
    1520:	aa 8b       	std	Y+18, r26	; 0x12
    1522:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	4a ef       	ldi	r20, 0xFA	; 250
    152a:	54 e4       	ldi	r21, 0x44	; 68
    152c:	68 89       	ldd	r22, Y+16	; 0x10
    152e:	79 89       	ldd	r23, Y+17	; 0x11
    1530:	8a 89       	ldd	r24, Y+18	; 0x12
    1532:	9b 89       	ldd	r25, Y+19	; 0x13
    1534:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8c 8b       	std	Y+20, r24	; 0x14
    153e:	9d 8b       	std	Y+21, r25	; 0x15
    1540:	ae 8b       	std	Y+22, r26	; 0x16
    1542:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e8       	ldi	r20, 0x80	; 128
    154a:	5f e3       	ldi	r21, 0x3F	; 63
    154c:	6c 89       	ldd	r22, Y+20	; 0x14
    154e:	7d 89       	ldd	r23, Y+21	; 0x15
    1550:	8e 89       	ldd	r24, Y+22	; 0x16
    1552:	9f 89       	ldd	r25, Y+23	; 0x17
    1554:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__cmpsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <LCD_init+0x1a2>
		__ticks = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	99 8f       	std	Y+25, r25	; 0x19
    1562:	88 8f       	std	Y+24, r24	; 0x18
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <LCD_init+0x220>
	else if (__tmp > 65535)
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	6c 89       	ldd	r22, Y+20	; 0x14
    1570:	7d 89       	ldd	r23, Y+21	; 0x15
    1572:	8e 89       	ldd	r24, Y+22	; 0x16
    1574:	9f 89       	ldd	r25, Y+23	; 0x17
    1576:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__gesf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <LCD_init+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e2       	ldi	r20, 0x20	; 32
    1584:	51 e4       	ldi	r21, 0x41	; 65
    1586:	68 89       	ldd	r22, Y+16	; 0x10
    1588:	79 89       	ldd	r23, Y+17	; 0x11
    158a:	8a 89       	ldd	r24, Y+18	; 0x12
    158c:	9b 89       	ldd	r25, Y+19	; 0x13
    158e:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	99 8f       	std	Y+25, r25	; 0x19
    15a4:	88 8f       	std	Y+24, r24	; 0x18
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <LCD_init+0x202>
    15a8:	88 ec       	ldi	r24, 0xC8	; 200
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9b 8f       	std	Y+27, r25	; 0x1b
    15ae:	8a 8f       	std	Y+26, r24	; 0x1a
    15b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <LCD_init+0x1f0>
    15b8:	9b 8f       	std	Y+27, r25	; 0x1b
    15ba:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	88 8d       	ldd	r24, Y+24	; 0x18
    15be:	99 8d       	ldd	r25, Y+25	; 0x19
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	99 8f       	std	Y+25, r25	; 0x19
    15c4:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c6:	88 8d       	ldd	r24, Y+24	; 0x18
    15c8:	99 8d       	ldd	r25, Y+25	; 0x19
    15ca:	89 2b       	or	r24, r25
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <LCD_init+0x1e4>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <LCD_init+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	6c 89       	ldd	r22, Y+20	; 0x14
    15d2:	7d 89       	ldd	r23, Y+21	; 0x15
    15d4:	8e 89       	ldd	r24, Y+22	; 0x16
    15d6:	9f 89       	ldd	r25, Y+23	; 0x17
    15d8:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	99 8f       	std	Y+25, r25	; 0x19
    15e2:	88 8f       	std	Y+24, r24	; 0x18
    15e4:	88 8d       	ldd	r24, Y+24	; 0x18
    15e6:	99 8d       	ldd	r25, Y+25	; 0x19
    15e8:	9d 8f       	std	Y+29, r25	; 0x1d
    15ea:	8c 8f       	std	Y+28, r24	; 0x1c
    15ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_init+0x22c>
    15f4:	9d 8f       	std	Y+29, r25	; 0x1d
    15f6:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(5);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
    15f8:	28 e3       	ldi	r18, 0x38	; 56
    15fa:	4c a5       	ldd	r20, Y+44	; 0x2c
    15fc:	5d a5       	ldd	r21, Y+45	; 0x2d
    15fe:	6e a5       	ldd	r22, Y+46	; 0x2e
    1600:	7f a5       	ldd	r23, Y+47	; 0x2f
    1602:	88 a9       	ldd	r24, Y+48	; 0x30
    1604:	99 a9       	ldd	r25, Y+49	; 0x31
    1606:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a6 e1       	ldi	r26, 0x16	; 22
    1610:	b3 e4       	ldi	r27, 0x43	; 67
    1612:	8a 83       	std	Y+2, r24	; 0x02
    1614:	9b 83       	std	Y+3, r25	; 0x03
    1616:	ac 83       	std	Y+4, r26	; 0x04
    1618:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	4a ef       	ldi	r20, 0xFA	; 250
    1620:	54 e4       	ldi	r21, 0x44	; 68
    1622:	6a 81       	ldd	r22, Y+2	; 0x02
    1624:	7b 81       	ldd	r23, Y+3	; 0x03
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	8e 83       	std	Y+6, r24	; 0x06
    1634:	9f 83       	std	Y+7, r25	; 0x07
    1636:	a8 87       	std	Y+8, r26	; 0x08
    1638:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	5f e3       	ldi	r21, 0x3F	; 63
    1642:	6e 81       	ldd	r22, Y+6	; 0x06
    1644:	7f 81       	ldd	r23, Y+7	; 0x07
    1646:	88 85       	ldd	r24, Y+8	; 0x08
    1648:	99 85       	ldd	r25, Y+9	; 0x09
    164a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__cmpsf2>
    164e:	88 23       	and	r24, r24
    1650:	2c f4       	brge	.+10     	; 0x165c <LCD_init+0x298>
		__ticks = 1;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9b 87       	std	Y+11, r25	; 0x0b
    1658:	8a 87       	std	Y+10, r24	; 0x0a
    165a:	3f c0       	rjmp	.+126    	; 0x16da <LCD_init+0x316>
	else if (__tmp > 65535)
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	57 e4       	ldi	r21, 0x47	; 71
    1664:	6e 81       	ldd	r22, Y+6	; 0x06
    1666:	7f 81       	ldd	r23, Y+7	; 0x07
    1668:	88 85       	ldd	r24, Y+8	; 0x08
    166a:	99 85       	ldd	r25, Y+9	; 0x09
    166c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__gesf2>
    1670:	18 16       	cp	r1, r24
    1672:	4c f5       	brge	.+82     	; 0x16c6 <LCD_init+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e2       	ldi	r20, 0x20	; 32
    167a:	51 e4       	ldi	r21, 0x41	; 65
    167c:	6a 81       	ldd	r22, Y+2	; 0x02
    167e:	7b 81       	ldd	r23, Y+3	; 0x03
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	9d 81       	ldd	r25, Y+5	; 0x05
    1684:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	9b 87       	std	Y+11, r25	; 0x0b
    169a:	8a 87       	std	Y+10, r24	; 0x0a
    169c:	0f c0       	rjmp	.+30     	; 0x16bc <LCD_init+0x2f8>
    169e:	88 ec       	ldi	r24, 0xC8	; 200
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9d 87       	std	Y+13, r25	; 0x0d
    16a4:	8c 87       	std	Y+12, r24	; 0x0c
    16a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    16a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <LCD_init+0x2e6>
    16ae:	9d 87       	std	Y+13, r25	; 0x0d
    16b0:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	9b 87       	std	Y+11, r25	; 0x0b
    16ba:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16be:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c0:	89 2b       	or	r24, r25
    16c2:	69 f7       	brne	.-38     	; 0x169e <LCD_init+0x2da>
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <LCD_init+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c6:	6e 81       	ldd	r22, Y+6	; 0x06
    16c8:	7f 81       	ldd	r23, Y+7	; 0x07
    16ca:	88 85       	ldd	r24, Y+8	; 0x08
    16cc:	99 85       	ldd	r25, Y+9	; 0x09
    16ce:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	9b 87       	std	Y+11, r25	; 0x0b
    16d8:	8a 87       	std	Y+10, r24	; 0x0a
    16da:	8a 85       	ldd	r24, Y+10	; 0x0a
    16dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    16de:	9f 87       	std	Y+15, r25	; 0x0f
    16e0:	8e 87       	std	Y+14, r24	; 0x0e
    16e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    16e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <LCD_init+0x322>
    16ea:	9f 87       	std	Y+15, r25	; 0x0f
    16ec:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(150);
	LCD_writeCMD(copyLCDNum,_LCD_8_BIT_MODE);
    16ee:	28 e3       	ldi	r18, 0x38	; 56
    16f0:	4c a5       	ldd	r20, Y+44	; 0x2c
    16f2:	5d a5       	ldd	r21, Y+45	; 0x2d
    16f4:	6e a5       	ldd	r22, Y+46	; 0x2e
    16f6:	7f a5       	ldd	r23, Y+47	; 0x2f
    16f8:	88 a9       	ldd	r24, Y+48	; 0x30
    16fa:	99 a9       	ldd	r25, Y+49	; 0x31
    16fc:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_CLEAR_DIS);
    1700:	21 e0       	ldi	r18, 0x01	; 1
    1702:	4c a5       	ldd	r20, Y+44	; 0x2c
    1704:	5d a5       	ldd	r21, Y+45	; 0x2d
    1706:	6e a5       	ldd	r22, Y+46	; 0x2e
    1708:	7f a5       	ldd	r23, Y+47	; 0x2f
    170a:	88 a9       	ldd	r24, Y+48	; 0x30
    170c:	99 a9       	ldd	r25, Y+49	; 0x31
    170e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_RETURN_HOME);
    1712:	22 e0       	ldi	r18, 0x02	; 2
    1714:	4c a5       	ldd	r20, Y+44	; 0x2c
    1716:	5d a5       	ldd	r21, Y+45	; 0x2d
    1718:	6e a5       	ldd	r22, Y+46	; 0x2e
    171a:	7f a5       	ldd	r23, Y+47	; 0x2f
    171c:	88 a9       	ldd	r24, Y+48	; 0x30
    171e:	99 a9       	ldd	r25, Y+49	; 0x31
    1720:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_ENTERY_INC);
    1724:	26 e0       	ldi	r18, 0x06	; 6
    1726:	4c a5       	ldd	r20, Y+44	; 0x2c
    1728:	5d a5       	ldd	r21, Y+45	; 0x2d
    172a:	6e a5       	ldd	r22, Y+46	; 0x2e
    172c:	7f a5       	ldd	r23, Y+47	; 0x2f
    172e:	88 a9       	ldd	r24, Y+48	; 0x30
    1730:	99 a9       	ldd	r25, Y+49	; 0x31
    1732:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_DISPLAY_ON);
    1736:	2c e0       	ldi	r18, 0x0C	; 12
    1738:	4c a5       	ldd	r20, Y+44	; 0x2c
    173a:	5d a5       	ldd	r21, Y+45	; 0x2d
    173c:	6e a5       	ldd	r22, Y+46	; 0x2e
    173e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1740:	88 a9       	ldd	r24, Y+48	; 0x30
    1742:	99 a9       	ldd	r25, Y+49	; 0x31
    1744:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,_LCD_4_BIT_MODE);
    1748:	28 e2       	ldi	r18, 0x28	; 40
    174a:	4c a5       	ldd	r20, Y+44	; 0x2c
    174c:	5d a5       	ldd	r21, Y+45	; 0x2d
    174e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1750:	7f a5       	ldd	r23, Y+47	; 0x2f
    1752:	88 a9       	ldd	r24, Y+48	; 0x30
    1754:	99 a9       	ldd	r25, Y+49	; 0x31
    1756:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum,0x80);
    175a:	20 e8       	ldi	r18, 0x80	; 128
    175c:	4c a5       	ldd	r20, Y+44	; 0x2c
    175e:	5d a5       	ldd	r21, Y+45	; 0x2d
    1760:	6e a5       	ldd	r22, Y+46	; 0x2e
    1762:	7f a5       	ldd	r23, Y+47	; 0x2f
    1764:	88 a9       	ldd	r24, Y+48	; 0x30
    1766:	99 a9       	ldd	r25, Y+49	; 0x31
    1768:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
	#endif
}
    176c:	00 00       	nop
    176e:	e1 96       	adiw	r28, 0x31	; 49
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <LCD_writeCMD>:
 * @param1 : copyLCDNum
 * @param2 : copyCMD
 * @retVal : void
 */
void LCD_writeCMD(PINS_LCD copyLCDNum, _LCD_COMMANDS copyCMD)
{
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	00 d0       	rcall	.+0      	; 0x1786 <LCD_writeCMD+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <LCD_writeCMD+0x8>
    1788:	00 d0       	rcall	.+0      	; 0x178a <LCD_writeCMD+0xa>
    178a:	1f 92       	push	r1
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	49 83       	std	Y+1, r20	; 0x01
    1792:	5a 83       	std	Y+2, r21	; 0x02
    1794:	6b 83       	std	Y+3, r22	; 0x03
    1796:	7c 83       	std	Y+4, r23	; 0x04
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	9e 83       	std	Y+6, r25	; 0x06
    179c:	2f 83       	std	Y+7, r18	; 0x07
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_LOW);
	DIO_setPortVAL(copyLCDNum.PORT_DATA_PIN_NUM, copyCMD);
	LCD_enableSignal(LCD);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_LOW);
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	LCD_getData(copyLCDNum , copyCMD >> 4);
    17a6:	8f 81       	ldd	r24, Y+7	; 0x07
    17a8:	82 95       	swap	r24
    17aa:	8f 70       	andi	r24, 0x0F	; 15
    17ac:	28 2f       	mov	r18, r24
    17ae:	49 81       	ldd	r20, Y+1	; 0x01
    17b0:	5a 81       	ldd	r21, Y+2	; 0x02
    17b2:	6b 81       	ldd	r22, Y+3	; 0x03
    17b4:	7c 81       	ldd	r23, Y+4	; 0x04
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_getData>
	LCD_enableSignal(LCD);
    17be:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <LCD>
    17c2:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <LCD+0x1>
    17c6:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <LCD+0x2>
    17ca:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <LCD+0x3>
    17ce:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <LCD+0x4>
    17d2:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <LCD+0x5>
    17d6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_enableSignal>
	LCD_getData(copyLCDNum,copyCMD);
    17da:	2f 81       	ldd	r18, Y+7	; 0x07
    17dc:	49 81       	ldd	r20, Y+1	; 0x01
    17de:	5a 81       	ldd	r21, Y+2	; 0x02
    17e0:	6b 81       	ldd	r22, Y+3	; 0x03
    17e2:	7c 81       	ldd	r23, Y+4	; 0x04
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_getData>
	LCD_enableSignal(LCD);
    17ec:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <LCD>
    17f0:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <LCD+0x1>
    17f4:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <LCD+0x2>
    17f8:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <LCD+0x3>
    17fc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <LCD+0x4>
    1800:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <LCD+0x5>
    1804:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_enableSignal>
#endif
}
    1808:	00 00       	nop
    180a:	27 96       	adiw	r28, 0x07	; 7
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <LCD_writeChar>:
 * @param1 : copyLCDNum
 * @param2 : copyChar
 * @retVal : void
 */
void LCD_writeChar(PINS_LCD copyLCDNum, uint_8 copyChar)
{
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	00 d0       	rcall	.+0      	; 0x1822 <LCD_writeChar+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <LCD_writeChar+0x8>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <LCD_writeChar+0xa>
    1826:	1f 92       	push	r1
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	49 83       	std	Y+1, r20	; 0x01
    182e:	5a 83       	std	Y+2, r21	; 0x02
    1830:	6b 83       	std	Y+3, r22	; 0x03
    1832:	7c 83       	std	Y+4, r23	; 0x04
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	2f 83       	std	Y+7, r18	; 0x07
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_HIGH);
	DIO_setPortVAL(copyLCDNum.PORT_DATA_PIN_NUM, copyChar);
	LCD_enableSignal(LCD);
#elif (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.RS , _STATUS_PIN_HIGH);
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	LCD_getData(copyLCDNum , copyChar >> 4);
    1842:	8f 81       	ldd	r24, Y+7	; 0x07
    1844:	82 95       	swap	r24
    1846:	8f 70       	andi	r24, 0x0F	; 15
    1848:	28 2f       	mov	r18, r24
    184a:	49 81       	ldd	r20, Y+1	; 0x01
    184c:	5a 81       	ldd	r21, Y+2	; 0x02
    184e:	6b 81       	ldd	r22, Y+3	; 0x03
    1850:	7c 81       	ldd	r23, Y+4	; 0x04
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_getData>
	LCD_enableSignal(LCD);
    185a:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <LCD>
    185e:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <LCD+0x1>
    1862:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <LCD+0x2>
    1866:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <LCD+0x3>
    186a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <LCD+0x4>
    186e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <LCD+0x5>
    1872:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_enableSignal>
	LCD_getData(copyLCDNum,copyChar);
    1876:	2f 81       	ldd	r18, Y+7	; 0x07
    1878:	49 81       	ldd	r20, Y+1	; 0x01
    187a:	5a 81       	ldd	r21, Y+2	; 0x02
    187c:	6b 81       	ldd	r22, Y+3	; 0x03
    187e:	7c 81       	ldd	r23, Y+4	; 0x04
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_getData>
	LCD_enableSignal(LCD);
    1888:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <LCD>
    188c:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <LCD+0x1>
    1890:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <LCD+0x2>
    1894:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <LCD+0x3>
    1898:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <LCD+0x4>
    189c:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <LCD+0x5>
    18a0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_enableSignal>
#endif
}
    18a4:	00 00       	nop
    18a6:	27 96       	adiw	r28, 0x07	; 7
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <LCD_writeSTR>:
 * @param1 : copyLCDNum
 * @param2 : copySTR
 * @retVal : void
 */
void LCD_writeSTR(PINS_LCD copyLCDNum, uint_8 *copySTR)
{
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	28 97       	sbiw	r28, 0x08	; 8
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	49 83       	std	Y+1, r20	; 0x01
    18ce:	5a 83       	std	Y+2, r21	; 0x02
    18d0:	6b 83       	std	Y+3, r22	; 0x03
    18d2:	7c 83       	std	Y+4, r23	; 0x04
    18d4:	8d 83       	std	Y+5, r24	; 0x05
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	38 87       	std	Y+8, r19	; 0x08
    18da:	2f 83       	std	Y+7, r18	; 0x07
	while(*copySTR)
    18dc:	12 c0       	rjmp	.+36     	; 0x1902 <LCD_writeSTR+0x4a>
	{
		LCD_writeChar(copyLCDNum, *copySTR++);
    18de:	8f 81       	ldd	r24, Y+7	; 0x07
    18e0:	98 85       	ldd	r25, Y+8	; 0x08
    18e2:	9c 01       	movw	r18, r24
    18e4:	2f 5f       	subi	r18, 0xFF	; 255
    18e6:	3f 4f       	sbci	r19, 0xFF	; 255
    18e8:	38 87       	std	Y+8, r19	; 0x08
    18ea:	2f 83       	std	Y+7, r18	; 0x07
    18ec:	fc 01       	movw	r30, r24
    18ee:	80 81       	ld	r24, Z
    18f0:	28 2f       	mov	r18, r24
    18f2:	49 81       	ldd	r20, Y+1	; 0x01
    18f4:	5a 81       	ldd	r21, Y+2	; 0x02
    18f6:	6b 81       	ldd	r22, Y+3	; 0x03
    18f8:	7c 81       	ldd	r23, Y+4	; 0x04
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_writeChar>
 * @param2 : copySTR
 * @retVal : void
 */
void LCD_writeSTR(PINS_LCD copyLCDNum, uint_8 *copySTR)
{
	while(*copySTR)
    1902:	8f 81       	ldd	r24, Y+7	; 0x07
    1904:	98 85       	ldd	r25, Y+8	; 0x08
    1906:	fc 01       	movw	r30, r24
    1908:	80 81       	ld	r24, Z
    190a:	88 23       	and	r24, r24
    190c:	41 f7       	brne	.-48     	; 0x18de <LCD_writeSTR+0x26>
	{
		LCD_writeChar(copyLCDNum, *copySTR++);
	}
}
    190e:	00 00       	nop
    1910:	28 96       	adiw	r28, 0x08	; 8
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	08 95       	ret

00001922 <LCD_writeNum_u8>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u8(PINS_LCD copyLCDNum, uint_8 *copyNum)
{
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	2d 97       	sbiw	r28, 0x0d	; 13
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	4e 83       	std	Y+6, r20	; 0x06
    1938:	5f 83       	std	Y+7, r21	; 0x07
    193a:	68 87       	std	Y+8, r22	; 0x08
    193c:	79 87       	std	Y+9, r23	; 0x09
    193e:	8a 87       	std	Y+10, r24	; 0x0a
    1940:	9b 87       	std	Y+11, r25	; 0x0b
    1942:	3d 87       	std	Y+13, r19	; 0x0d
    1944:	2c 87       	std	Y+12, r18	; 0x0c
	uint_8 Ret[5];
	LCD_convertNum_u8(copyNum, &Ret);
    1946:	8c 85       	ldd	r24, Y+12	; 0x0c
    1948:	9d 85       	ldd	r25, Y+13	; 0x0d
    194a:	28 2f       	mov	r18, r24
    194c:	ce 01       	movw	r24, r28
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	bc 01       	movw	r22, r24
    1952:	82 2f       	mov	r24, r18
    1954:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_convertNum_u8>
	LCD_writeSTR(copyLCDNum, Ret);
    1958:	ce 01       	movw	r24, r28
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	9c 01       	movw	r18, r24
    195e:	4e 81       	ldd	r20, Y+6	; 0x06
    1960:	5f 81       	ldd	r21, Y+7	; 0x07
    1962:	68 85       	ldd	r22, Y+8	; 0x08
    1964:	79 85       	ldd	r23, Y+9	; 0x09
    1966:	8a 85       	ldd	r24, Y+10	; 0x0a
    1968:	9b 85       	ldd	r25, Y+11	; 0x0b
    196a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_writeSTR>
}
    196e:	00 00       	nop
    1970:	2d 96       	adiw	r28, 0x0d	; 13
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	08 95       	ret

00001982 <LCD_writeNum_u16>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u16(PINS_LCD copyLCDNum, uint_16 *copyNum)
{
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	62 97       	sbiw	r28, 0x12	; 18
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	4b 87       	std	Y+11, r20	; 0x0b
    1998:	5c 87       	std	Y+12, r21	; 0x0c
    199a:	6d 87       	std	Y+13, r22	; 0x0d
    199c:	7e 87       	std	Y+14, r23	; 0x0e
    199e:	8f 87       	std	Y+15, r24	; 0x0f
    19a0:	98 8b       	std	Y+16, r25	; 0x10
    19a2:	3a 8b       	std	Y+18, r19	; 0x12
    19a4:	29 8b       	std	Y+17, r18	; 0x11
	uint_16 Ret[5];
	LCD_convertNum_u16(copyNum, &Ret);
    19a6:	89 89       	ldd	r24, Y+17	; 0x11
    19a8:	9a 89       	ldd	r25, Y+18	; 0x12
    19aa:	9e 01       	movw	r18, r28
    19ac:	2f 5f       	subi	r18, 0xFF	; 255
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	b9 01       	movw	r22, r18
    19b2:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_convertNum_u16>
	LCD_writeSTR(copyLCDNum, Ret);
    19b6:	ce 01       	movw	r24, r28
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	9c 01       	movw	r18, r24
    19bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    19be:	5c 85       	ldd	r21, Y+12	; 0x0c
    19c0:	6d 85       	ldd	r22, Y+13	; 0x0d
    19c2:	7e 85       	ldd	r23, Y+14	; 0x0e
    19c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c6:	98 89       	ldd	r25, Y+16	; 0x10
    19c8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_writeSTR>
}
    19cc:	00 00       	nop
    19ce:	62 96       	adiw	r28, 0x12	; 18
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <LCD_writeNum_u32>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u32(PINS_LCD copyLCDNum, uint_32 *copyNum)
{
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	6c 97       	sbiw	r28, 0x1c	; 28
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	4d 8b       	std	Y+21, r20	; 0x15
    19f6:	5e 8b       	std	Y+22, r21	; 0x16
    19f8:	6f 8b       	std	Y+23, r22	; 0x17
    19fa:	78 8f       	std	Y+24, r23	; 0x18
    19fc:	89 8f       	std	Y+25, r24	; 0x19
    19fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1a00:	3c 8f       	std	Y+28, r19	; 0x1c
    1a02:	2b 8f       	std	Y+27, r18	; 0x1b
	uint_32 Ret[5];
	LCD_convertNum_u32(copyNum, &Ret);
    1a04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a08:	09 2e       	mov	r0, r25
    1a0a:	00 0c       	add	r0, r0
    1a0c:	aa 0b       	sbc	r26, r26
    1a0e:	bb 0b       	sbc	r27, r27
    1a10:	9e 01       	movw	r18, r28
    1a12:	2f 5f       	subi	r18, 0xFF	; 255
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
    1a16:	a9 01       	movw	r20, r18
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_convertNum_u32>
	LCD_writeSTR(copyLCDNum, Ret);
    1a20:	ce 01       	movw	r24, r28
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	9c 01       	movw	r18, r24
    1a26:	4d 89       	ldd	r20, Y+21	; 0x15
    1a28:	5e 89       	ldd	r21, Y+22	; 0x16
    1a2a:	6f 89       	ldd	r22, Y+23	; 0x17
    1a2c:	78 8d       	ldd	r23, Y+24	; 0x18
    1a2e:	89 8d       	ldd	r24, Y+25	; 0x19
    1a30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a32:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_writeSTR>
}
    1a36:	00 00       	nop
    1a38:	6c 96       	adiw	r28, 0x1c	; 28
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <LCD_writeCharPosition>:
 * @param3 : copyColumn
 * @param4 : copyChar
 * @retVal : void
 */
void LCD_writeCharPosition(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn, uint_8 copyChar)
{
    1a4a:	ef 92       	push	r14
    1a4c:	0f 93       	push	r16
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	29 97       	sbiw	r28, 0x09	; 9
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	49 83       	std	Y+1, r20	; 0x01
    1a64:	5a 83       	std	Y+2, r21	; 0x02
    1a66:	6b 83       	std	Y+3, r22	; 0x03
    1a68:	7c 83       	std	Y+4, r23	; 0x04
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	2f 83       	std	Y+7, r18	; 0x07
    1a70:	08 87       	std	Y+8, r16	; 0x08
    1a72:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1a74:	08 85       	ldd	r16, Y+8	; 0x08
    1a76:	2f 81       	ldd	r18, Y+7	; 0x07
    1a78:	49 81       	ldd	r20, Y+1	; 0x01
    1a7a:	5a 81       	ldd	r21, Y+2	; 0x02
    1a7c:	6b 81       	ldd	r22, Y+3	; 0x03
    1a7e:	7c 81       	ldd	r23, Y+4	; 0x04
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_setCursorPosition>
	LCD_writeChar(copyLCDNum, copyChar);
    1a88:	29 85       	ldd	r18, Y+9	; 0x09
    1a8a:	49 81       	ldd	r20, Y+1	; 0x01
    1a8c:	5a 81       	ldd	r21, Y+2	; 0x02
    1a8e:	6b 81       	ldd	r22, Y+3	; 0x03
    1a90:	7c 81       	ldd	r23, Y+4	; 0x04
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_writeChar>
}
    1a9a:	00 00       	nop
    1a9c:	29 96       	adiw	r28, 0x09	; 9
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	0f 91       	pop	r16
    1aae:	ef 90       	pop	r14
    1ab0:	08 95       	ret

00001ab2 <LCD_writeSTRPosition>:
 * @param3 : copyColumn
 * @param4 : copySTR
 * @retVal : void
 */
void LCD_writeSTRPosition(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_8 *copySTR)
{
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	2a 97       	sbiw	r28, 0x0a	; 10
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	49 83       	std	Y+1, r20	; 0x01
    1ace:	5a 83       	std	Y+2, r21	; 0x02
    1ad0:	6b 83       	std	Y+3, r22	; 0x03
    1ad2:	7c 83       	std	Y+4, r23	; 0x04
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	2f 83       	std	Y+7, r18	; 0x07
    1ada:	08 87       	std	Y+8, r16	; 0x08
    1adc:	fa 86       	std	Y+10, r15	; 0x0a
    1ade:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1ae0:	08 85       	ldd	r16, Y+8	; 0x08
    1ae2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ae4:	49 81       	ldd	r20, Y+1	; 0x01
    1ae6:	5a 81       	ldd	r21, Y+2	; 0x02
    1ae8:	6b 81       	ldd	r22, Y+3	; 0x03
    1aea:	7c 81       	ldd	r23, Y+4	; 0x04
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_setCursorPosition>
	LCD_writeSTR(copyLCDNum, copySTR);
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	9c 01       	movw	r18, r24
    1afa:	49 81       	ldd	r20, Y+1	; 0x01
    1afc:	5a 81       	ldd	r21, Y+2	; 0x02
    1afe:	6b 81       	ldd	r22, Y+3	; 0x03
    1b00:	7c 81       	ldd	r23, Y+4	; 0x04
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_writeSTR>
}
    1b0a:	00 00       	nop
    1b0c:	2a 96       	adiw	r28, 0x0a	; 10
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	0f 91       	pop	r16
    1b1e:	ff 90       	pop	r15
    1b20:	ef 90       	pop	r14
    1b22:	08 95       	ret

00001b24 <LCD_writeNum_u8Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u8Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_8 *copyNum)
{
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	2a 97       	sbiw	r28, 0x0a	; 10
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	49 83       	std	Y+1, r20	; 0x01
    1b40:	5a 83       	std	Y+2, r21	; 0x02
    1b42:	6b 83       	std	Y+3, r22	; 0x03
    1b44:	7c 83       	std	Y+4, r23	; 0x04
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	2f 83       	std	Y+7, r18	; 0x07
    1b4c:	08 87       	std	Y+8, r16	; 0x08
    1b4e:	fa 86       	std	Y+10, r15	; 0x0a
    1b50:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1b52:	08 85       	ldd	r16, Y+8	; 0x08
    1b54:	2f 81       	ldd	r18, Y+7	; 0x07
    1b56:	49 81       	ldd	r20, Y+1	; 0x01
    1b58:	5a 81       	ldd	r21, Y+2	; 0x02
    1b5a:	6b 81       	ldd	r22, Y+3	; 0x03
    1b5c:	7c 81       	ldd	r23, Y+4	; 0x04
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_setCursorPosition>
	LCD_writeNum_u8(copyLCDNum, copyNum);
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	9c 01       	movw	r18, r24
    1b6c:	49 81       	ldd	r20, Y+1	; 0x01
    1b6e:	5a 81       	ldd	r21, Y+2	; 0x02
    1b70:	6b 81       	ldd	r22, Y+3	; 0x03
    1b72:	7c 81       	ldd	r23, Y+4	; 0x04
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	0e 94 91 0c 	call	0x1922	; 0x1922 <LCD_writeNum_u8>
}
    1b7c:	00 00       	nop
    1b7e:	2a 96       	adiw	r28, 0x0a	; 10
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	0f 91       	pop	r16
    1b90:	ff 90       	pop	r15
    1b92:	ef 90       	pop	r14
    1b94:	08 95       	ret

00001b96 <LCD_writeNum_u16Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u16Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_16 *copyNum)
{
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	0f 93       	push	r16
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	2a 97       	sbiw	r28, 0x0a	; 10
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	49 83       	std	Y+1, r20	; 0x01
    1bb2:	5a 83       	std	Y+2, r21	; 0x02
    1bb4:	6b 83       	std	Y+3, r22	; 0x03
    1bb6:	7c 83       	std	Y+4, r23	; 0x04
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	2f 83       	std	Y+7, r18	; 0x07
    1bbe:	08 87       	std	Y+8, r16	; 0x08
    1bc0:	fa 86       	std	Y+10, r15	; 0x0a
    1bc2:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1bc4:	08 85       	ldd	r16, Y+8	; 0x08
    1bc6:	2f 81       	ldd	r18, Y+7	; 0x07
    1bc8:	49 81       	ldd	r20, Y+1	; 0x01
    1bca:	5a 81       	ldd	r21, Y+2	; 0x02
    1bcc:	6b 81       	ldd	r22, Y+3	; 0x03
    1bce:	7c 81       	ldd	r23, Y+4	; 0x04
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_setCursorPosition>
	LCD_writeNum_u16(copyLCDNum, copyNum);
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	9c 01       	movw	r18, r24
    1bde:	49 81       	ldd	r20, Y+1	; 0x01
    1be0:	5a 81       	ldd	r21, Y+2	; 0x02
    1be2:	6b 81       	ldd	r22, Y+3	; 0x03
    1be4:	7c 81       	ldd	r23, Y+4	; 0x04
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_writeNum_u16>
}
    1bee:	00 00       	nop
    1bf0:	2a 96       	adiw	r28, 0x0a	; 10
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	0f 91       	pop	r16
    1c02:	ff 90       	pop	r15
    1c04:	ef 90       	pop	r14
    1c06:	08 95       	ret

00001c08 <LCD_writeNum_u32Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u32Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn,uint_32 *copyNum)
{
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	2a 97       	sbiw	r28, 0x0a	; 10
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	49 83       	std	Y+1, r20	; 0x01
    1c24:	5a 83       	std	Y+2, r21	; 0x02
    1c26:	6b 83       	std	Y+3, r22	; 0x03
    1c28:	7c 83       	std	Y+4, r23	; 0x04
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	2f 83       	std	Y+7, r18	; 0x07
    1c30:	08 87       	std	Y+8, r16	; 0x08
    1c32:	fa 86       	std	Y+10, r15	; 0x0a
    1c34:	e9 86       	std	Y+9, r14	; 0x09
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1c36:	08 85       	ldd	r16, Y+8	; 0x08
    1c38:	2f 81       	ldd	r18, Y+7	; 0x07
    1c3a:	49 81       	ldd	r20, Y+1	; 0x01
    1c3c:	5a 81       	ldd	r21, Y+2	; 0x02
    1c3e:	6b 81       	ldd	r22, Y+3	; 0x03
    1c40:	7c 81       	ldd	r23, Y+4	; 0x04
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	9e 81       	ldd	r25, Y+6	; 0x06
    1c46:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_setCursorPosition>
	LCD_writeNum_u32(copyLCDNum, copyNum);
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	9c 01       	movw	r18, r24
    1c50:	49 81       	ldd	r20, Y+1	; 0x01
    1c52:	5a 81       	ldd	r21, Y+2	; 0x02
    1c54:	6b 81       	ldd	r22, Y+3	; 0x03
    1c56:	7c 81       	ldd	r23, Y+4	; 0x04
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <LCD_writeNum_u32>
}
    1c60:	00 00       	nop
    1c62:	2a 96       	adiw	r28, 0x0a	; 10
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	08 95       	ret

00001c7a <LCD_GoTo>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_GoTo(PINS_LCD copyLCDNum, ROW_NUM copyRow, uint_8 copyColumn)
{
    1c7a:	0f 93       	push	r16
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	28 97       	sbiw	r28, 0x08	; 8
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	49 83       	std	Y+1, r20	; 0x01
    1c92:	5a 83       	std	Y+2, r21	; 0x02
    1c94:	6b 83       	std	Y+3, r22	; 0x03
    1c96:	7c 83       	std	Y+4, r23	; 0x04
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	2f 83       	std	Y+7, r18	; 0x07
    1c9e:	08 87       	std	Y+8, r16	; 0x08
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1ca0:	08 85       	ldd	r16, Y+8	; 0x08
    1ca2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ca4:	49 81       	ldd	r20, Y+1	; 0x01
    1ca6:	5a 81       	ldd	r21, Y+2	; 0x02
    1ca8:	6b 81       	ldd	r22, Y+3	; 0x03
    1caa:	7c 81       	ldd	r23, Y+4	; 0x04
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_setCursorPosition>
}
    1cb4:	00 00       	nop
    1cb6:	28 96       	adiw	r28, 0x08	; 8
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	0f 91       	pop	r16
    1cc8:	08 95       	ret

00001cca <LCD_getData>:
 * @param1 : copyLCDNum
 * @param2 : copyCMD
 * @retVal : void
 */
static void LCD_getData(PINS_LCD copyLCDNum, _LCD_COMMANDS copyCMD)
{
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <LCD_getData+0x6>
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <LCD_getData+0x8>
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <LCD_getData+0xa>
    1cd4:	1f 92       	push	r1
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	49 83       	std	Y+1, r20	; 0x01
    1cdc:	5a 83       	std	Y+2, r21	; 0x02
    1cde:	6b 83       	std	Y+3, r22	; 0x03
    1ce0:	7c 83       	std	Y+4, r23	; 0x04
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	2f 83       	std	Y+7, r18	; 0x07
	DIO_setPinVAL(copyLCDNum.D[0], (copyCMD >> 0) & (uint_8)0x01);
    1ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cea:	98 2f       	mov	r25, r24
    1cec:	91 70       	andi	r25, 0x01	; 1
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	69 2f       	mov	r22, r25
    1cf2:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyLCDNum.D[1], (copyCMD >> 1) & (uint_8)0x01);
    1cf6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf8:	86 95       	lsr	r24
    1cfa:	98 2f       	mov	r25, r24
    1cfc:	91 70       	andi	r25, 0x01	; 1
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	69 2f       	mov	r22, r25
    1d02:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyLCDNum.D[2], (copyCMD >> 2) & (uint_8)0x01);
    1d06:	8f 81       	ldd	r24, Y+7	; 0x07
    1d08:	86 95       	lsr	r24
    1d0a:	86 95       	lsr	r24
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	91 70       	andi	r25, 0x01	; 1
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	69 2f       	mov	r22, r25
    1d14:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyLCDNum.D[3], (copyCMD >> 3) & (uint_8)0x01);
    1d18:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1a:	86 95       	lsr	r24
    1d1c:	86 95       	lsr	r24
    1d1e:	86 95       	lsr	r24
    1d20:	98 2f       	mov	r25, r24
    1d22:	91 70       	andi	r25, 0x01	; 1
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	69 2f       	mov	r22, r25
    1d28:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
}
    1d2c:	00 00       	nop
    1d2e:	27 96       	adiw	r28, 0x07	; 7
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <LCD_enableSignal>:
 * @brief  : LCD enable signal static function
 * @param1 : copyLCDNum
 * @retVal : void
 */
static void LCD_enableSignal(PINS_LCD copyLCDNum)
{
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	a6 97       	sbiw	r28, 0x26	; 38
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	49 a3       	std	Y+33, r20	; 0x21
    1d56:	5a a3       	std	Y+34, r21	; 0x22
    1d58:	6b a3       	std	Y+35, r22	; 0x23
    1d5a:	7c a3       	std	Y+36, r23	; 0x24
    1d5c:	8d a3       	std	Y+37, r24	; 0x25
    1d5e:	9e a3       	std	Y+38, r25	; 0x26
#if (_LCD_MODE == _4_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_HIGH);
    1d60:	89 a1       	ldd	r24, Y+33	; 0x21
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 ea       	ldi	r26, 0xA0	; 160
    1d6e:	b0 e4       	ldi	r27, 0x40	; 64
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	ab 83       	std	Y+3, r26	; 0x03
    1d76:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1d78:	2b ea       	ldi	r18, 0xAB	; 171
    1d7a:	3a ea       	ldi	r19, 0xAA	; 170
    1d7c:	4a e2       	ldi	r20, 0x2A	; 42
    1d7e:	50 e4       	ldi	r21, 0x40	; 64
    1d80:	69 81       	ldd	r22, Y+1	; 0x01
    1d82:	7a 81       	ldd	r23, Y+2	; 0x02
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	af 83       	std	Y+7, r26	; 0x07
    1d96:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d9e:	bc 81       	ldd	r27, Y+4	; 0x04
    1da0:	9c 01       	movw	r18, r24
    1da2:	ad 01       	movw	r20, r26
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 92 13 	call	0x2724	; 0x2724 <__addsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	89 87       	std	Y+9, r24	; 0x09
    1db2:	9a 87       	std	Y+10, r25	; 0x0a
    1db4:	ab 87       	std	Y+11, r26	; 0x0b
    1db6:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	6d 81       	ldd	r22, Y+5	; 0x05
    1dc2:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc6:	98 85       	ldd	r25, Y+8	; 0x08
    1dc8:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__cmpsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	1c f4       	brge	.+6      	; 0x1dd6 <LCD_enableSignal+0x96>
		__ticks = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	8d 87       	std	Y+13, r24	; 0x0d
    1dd4:	b2 c0       	rjmp	.+356    	; 0x1f3a <LCD_enableSignal+0x1fa>
	else if (__tmp2 > 65535)
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	69 85       	ldd	r22, Y+9	; 0x09
    1de0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1de2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1de6:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__gesf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	0c f0       	brlt	.+2      	; 0x1df0 <LCD_enableSignal+0xb0>
    1dee:	7b c0       	rjmp	.+246    	; 0x1ee6 <LCD_enableSignal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a e7       	ldi	r20, 0x7A	; 122
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	69 81       	ldd	r22, Y+1	; 0x01
    1dfa:	7a 81       	ldd	r23, Y+2	; 0x02
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	0e 94 03 14 	call	0x2806	; 0x2806 <__divsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8e 87       	std	Y+14, r24	; 0x0e
    1e0a:	9f 87       	std	Y+15, r25	; 0x0f
    1e0c:	a8 8b       	std	Y+16, r26	; 0x10
    1e0e:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a ef       	ldi	r20, 0xFA	; 250
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	6e 85       	ldd	r22, Y+14	; 0x0e
    1e1a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1e1c:	88 89       	ldd	r24, Y+16	; 0x10
    1e1e:	99 89       	ldd	r25, Y+17	; 0x11
    1e20:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	8a 8b       	std	Y+18, r24	; 0x12
    1e2a:	9b 8b       	std	Y+19, r25	; 0x13
    1e2c:	ac 8b       	std	Y+20, r26	; 0x14
    1e2e:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	6a 89       	ldd	r22, Y+18	; 0x12
    1e3a:	7b 89       	ldd	r23, Y+19	; 0x13
    1e3c:	8c 89       	ldd	r24, Y+20	; 0x14
    1e3e:	9d 89       	ldd	r25, Y+21	; 0x15
    1e40:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__cmpsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <LCD_enableSignal+0x112>
		__ticks = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9f 8b       	std	Y+23, r25	; 0x17
    1e4e:	8e 8b       	std	Y+22, r24	; 0x16
    1e50:	3f c0       	rjmp	.+126    	; 0x1ed0 <LCD_enableSignal+0x190>
	else if (__tmp > 65535)
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	6a 89       	ldd	r22, Y+18	; 0x12
    1e5c:	7b 89       	ldd	r23, Y+19	; 0x13
    1e5e:	8c 89       	ldd	r24, Y+20	; 0x14
    1e60:	9d 89       	ldd	r25, Y+21	; 0x15
    1e62:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__gesf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	4c f5       	brge	.+82     	; 0x1ebc <LCD_enableSignal+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	6e 85       	ldd	r22, Y+14	; 0x0e
    1e74:	7f 85       	ldd	r23, Y+15	; 0x0f
    1e76:	88 89       	ldd	r24, Y+16	; 0x10
    1e78:	99 89       	ldd	r25, Y+17	; 0x11
    1e7a:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9f 8b       	std	Y+23, r25	; 0x17
    1e90:	8e 8b       	std	Y+22, r24	; 0x16
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <LCD_enableSignal+0x172>
    1e94:	88 ec       	ldi	r24, 0xC8	; 200
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	99 8f       	std	Y+25, r25	; 0x19
    1e9a:	88 8f       	std	Y+24, r24	; 0x18
    1e9c:	88 8d       	ldd	r24, Y+24	; 0x18
    1e9e:	99 8d       	ldd	r25, Y+25	; 0x19
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_enableSignal+0x160>
    1ea4:	99 8f       	std	Y+25, r25	; 0x19
    1ea6:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	8e 89       	ldd	r24, Y+22	; 0x16
    1eaa:	9f 89       	ldd	r25, Y+23	; 0x17
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	9f 8b       	std	Y+23, r25	; 0x17
    1eb0:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	8e 89       	ldd	r24, Y+22	; 0x16
    1eb4:	9f 89       	ldd	r25, Y+23	; 0x17
    1eb6:	89 2b       	or	r24, r25
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <LCD_enableSignal+0x154>
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <LCD_enableSignal+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	6a 89       	ldd	r22, Y+18	; 0x12
    1ebe:	7b 89       	ldd	r23, Y+19	; 0x13
    1ec0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ec2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ec4:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9f 8b       	std	Y+23, r25	; 0x17
    1ece:	8e 8b       	std	Y+22, r24	; 0x16
    1ed0:	8e 89       	ldd	r24, Y+22	; 0x16
    1ed2:	9f 89       	ldd	r25, Y+23	; 0x17
    1ed4:	9b 8f       	std	Y+27, r25	; 0x1b
    1ed6:	8a 8f       	std	Y+26, r24	; 0x1a
    1ed8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1eda:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_enableSignal+0x19c>
    1ee0:	9b 8f       	std	Y+27, r25	; 0x1b
    1ee2:	8a 8f       	std	Y+26, r24	; 0x1a
    1ee4:	2a c0       	rjmp	.+84     	; 0x1f3a <LCD_enableSignal+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	53 e4       	ldi	r21, 0x43	; 67
    1eee:	6d 81       	ldd	r22, Y+5	; 0x05
    1ef0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef4:	98 85       	ldd	r25, Y+8	; 0x08
    1ef6:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__gesf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	ac f4       	brge	.+42     	; 0x1f28 <LCD_enableSignal+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1efe:	69 85       	ldd	r22, Y+9	; 0x09
    1f00:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f02:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f04:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f06:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9d 8f       	std	Y+29, r25	; 0x1d
    1f10:	8c 8f       	std	Y+28, r24	; 0x1c
    1f12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f14:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f16:	9f 8f       	std	Y+31, r25	; 0x1f
    1f18:	8e 8f       	std	Y+30, r24	; 0x1e
    1f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f1c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_enableSignal+0x1de>
    1f22:	9f 8f       	std	Y+31, r25	; 0x1f
    1f24:	8e 8f       	std	Y+30, r24	; 0x1e
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <LCD_enableSignal+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f28:	6d 81       	ldd	r22, Y+5	; 0x05
    1f2a:	7e 81       	ldd	r23, Y+6	; 0x06
    1f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2e:	98 85       	ldd	r25, Y+8	; 0x08
    1f30:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8d 87       	std	Y+13, r24	; 0x0d
    1f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3c:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f3e:	88 a1       	ldd	r24, Y+32	; 0x20
    1f40:	8a 95       	dec	r24
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_enableSignal+0x200>
    1f44:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(5);
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_LOW);
    1f46:	89 a1       	ldd	r24, Y+33	; 0x21
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
#elif (_LCD_MODE == _8_BIT_MODE_LCD)
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_HIGH);
	_delay_ms(5);
	DIO_setPinVAL(copyLCDNum.EN, _STATUS_PIN_LOW);
#endif
}
    1f4e:	00 00       	nop
    1f50:	a6 96       	adiw	r28, 0x26	; 38
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	08 95       	ret

00001f62 <LCD_setCursorPosition>:
* @param2 : copyRow
* @param3 : copyColumn
* @retVal : void
*/
static void LCD_setCursorPosition(PINS_LCD copyLCDNum , ROW_NUM copyRow , uint_8 copyColumn)
{
    1f62:	0f 93       	push	r16
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	28 97       	sbiw	r28, 0x08	; 8
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	49 83       	std	Y+1, r20	; 0x01
    1f7a:	5a 83       	std	Y+2, r21	; 0x02
    1f7c:	6b 83       	std	Y+3, r22	; 0x03
    1f7e:	7c 83       	std	Y+4, r23	; 0x04
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	9e 83       	std	Y+6, r25	; 0x06
    1f84:	2f 83       	std	Y+7, r18	; 0x07
    1f86:	08 87       	std	Y+8, r16	; 0x08
	copyColumn--;
    1f88:	88 85       	ldd	r24, Y+8	; 0x08
    1f8a:	81 50       	subi	r24, 0x01	; 1
    1f8c:	88 87       	std	Y+8, r24	; 0x08
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
		case ROW3:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_3 + copyColumn)); break;
		case ROW4:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_4 + copyColumn)); break;
	}
#elif 	(_Rows_LCD_TYPE == LM32L_LCD)
	switch (copyRow)
    1f8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	19 f0       	breq	.+6      	; 0x1f9e <LCD_setCursorPosition+0x3c>
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	59 f0       	breq	.+22     	; 0x1fb2 <LCD_setCursorPosition+0x50>
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    1f9c:	16 c0       	rjmp	.+44     	; 0x1fca <LCD_setCursorPosition+0x68>
		case ROW4:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_4 + copyColumn)); break;
	}
#elif 	(_Rows_LCD_TYPE == LM32L_LCD)
	switch (copyRow)
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
    1f9e:	28 85       	ldd	r18, Y+8	; 0x08
    1fa0:	49 81       	ldd	r20, Y+1	; 0x01
    1fa2:	5a 81       	ldd	r21, Y+2	; 0x02
    1fa4:	6b 81       	ldd	r22, Y+3	; 0x03
    1fa6:	7c 81       	ldd	r23, Y+4	; 0x04
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
    1fb0:	0c c0       	rjmp	.+24     	; 0x1fca <LCD_setCursorPosition+0x68>
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
    1fb2:	88 85       	ldd	r24, Y+8	; 0x08
    1fb4:	80 5c       	subi	r24, 0xC0	; 192
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	49 81       	ldd	r20, Y+1	; 0x01
    1fba:	5a 81       	ldd	r21, Y+2	; 0x02
    1fbc:	6b 81       	ldd	r22, Y+3	; 0x03
    1fbe:	7c 81       	ldd	r23, Y+4	; 0x04
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_writeCMD>
    1fc8:	00 00       	nop
	}
#endif
}
    1fca:	00 00       	nop
    1fcc:	28 96       	adiw	r28, 0x08	; 8
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	0f 91       	pop	r16
    1fde:	08 95       	ret

00001fe0 <LCD_convertNum_u8>:
* @param1 : copyLCDNum
* @param2 : copySTR
* @retVal : void
*/
static void LCD_convertNum_u8(uint_8 copyNum , uint_8 *copySTR)
{
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <LCD_convertNum_u8+0x6>
    1fe6:	1f 92       	push	r1
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	7b 83       	std	Y+3, r23	; 0x03
    1ff0:	6a 83       	std	Y+2, r22	; 0x02
	memset(copySTR , '\0' , 4);
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff6:	44 e0       	ldi	r20, 0x04	; 4
    1ff8:	50 e0       	ldi	r21, 0x00	; 0
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <memset>
	sprintf(copySTR , "%i", copyNum);
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	29 2f       	mov	r18, r25
    200a:	2f 93       	push	r18
    200c:	8f 93       	push	r24
    200e:	89 ec       	ldi	r24, 0xC9	; 201
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	89 2f       	mov	r24, r25
    2014:	8f 93       	push	r24
    2016:	89 ec       	ldi	r24, 0xC9	; 201
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	8f 93       	push	r24
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	8f 93       	push	r24
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	8f 93       	push	r24
    2024:	0e 94 92 15 	call	0x2b24	; 0x2b24 <sprintf>
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
}
    2034:	00 00       	nop
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	08 95       	ret

00002042 <LCD_convertNum_u16>:
* @param1 : copyLCDNum
* @param2 : copyNum
* @retVal : void
*/
static void LCD_convertNum_u16(uint_16 copyNum , uint_8 *copySTR)
{
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	00 d0       	rcall	.+0      	; 0x2048 <LCD_convertNum_u16+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <LCD_convertNum_u16+0x8>
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	9a 83       	std	Y+2, r25	; 0x02
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	7c 83       	std	Y+4, r23	; 0x04
    2054:	6b 83       	std	Y+3, r22	; 0x03
	memset(copySTR , '\0' , 6);
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	46 e0       	ldi	r20, 0x06	; 6
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <memset>
	sprintf(copySTR , "%i", copyNum);
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	8f 93       	push	r24
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	8f 93       	push	r24
    206e:	89 ec       	ldi	r24, 0xC9	; 201
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	89 2f       	mov	r24, r25
    2074:	8f 93       	push	r24
    2076:	89 ec       	ldi	r24, 0xC9	; 201
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	8f 93       	push	r24
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	8f 93       	push	r24
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	8f 93       	push	r24
    2084:	0e 94 92 15 	call	0x2b24	; 0x2b24 <sprintf>
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
}
    2094:	00 00       	nop
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret

000020a4 <LCD_convertNum_u32>:
* @param1 : copyLCDNum
* @param2 : copyNum
* @retVal : void
*/
static void LCD_convertNum_u32(uint_32 copyNum , uint_8 *copySTR)
{
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <LCD_convertNum_u32+0x6>
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <LCD_convertNum_u32+0x8>
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <LCD_convertNum_u32+0xa>
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	69 83       	std	Y+1, r22	; 0x01
    20b4:	7a 83       	std	Y+2, r23	; 0x02
    20b6:	8b 83       	std	Y+3, r24	; 0x03
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	5e 83       	std	Y+6, r21	; 0x06
    20bc:	4d 83       	std	Y+5, r20	; 0x05
	memset(copySTR , '\0' , 11);
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	4b e0       	ldi	r20, 0x0B	; 11
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <memset>
	sprintf(copySTR , "%i", copyNum);
    20ce:	8c 81       	ldd	r24, Y+4	; 0x04
    20d0:	8f 93       	push	r24
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	8f 93       	push	r24
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	8f 93       	push	r24
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	8f 93       	push	r24
    20de:	89 ec       	ldi	r24, 0xC9	; 201
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	89 2f       	mov	r24, r25
    20e4:	8f 93       	push	r24
    20e6:	89 ec       	ldi	r24, 0xC9	; 201
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	8f 93       	push	r24
    20ec:	8e 81       	ldd	r24, Y+6	; 0x06
    20ee:	8f 93       	push	r24
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	8f 93       	push	r24
    20f4:	0e 94 92 15 	call	0x2b24	; 0x2b24 <sprintf>
    20f8:	8d b7       	in	r24, 0x3d	; 61
    20fa:	9e b7       	in	r25, 0x3e	; 62
    20fc:	08 96       	adiw	r24, 0x08	; 8
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
}
    2108:	00 00       	nop
    210a:	26 96       	adiw	r28, 0x06	; 6
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	08 95       	ret

0000211c <DCMOTOR_init>:
  * @brief   : Motors Initialization H-bridge l298 by Configure all pin IN0 ~ IN4 output.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_init(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	00 d0       	rcall	.+0      	; 0x2122 <DCMOTOR_init+0x6>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <DCMOTOR_init+0x8>
    2124:	1f 92       	push	r1
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9b 83       	std	Y+3, r25	; 0x03
    212c:	8a 83       	std	Y+2, r24	; 0x02
    212e:	7d 83       	std	Y+5, r23	; 0x05
    2130:	6c 83       	std	Y+4, r22	; 0x04
	for(uint_8 count = Zero_INIT ; count < 2 ; count++)
    2132:	19 82       	std	Y+1, r1	; 0x01
    2134:	1d c0       	rjmp	.+58     	; 0x2170 <DCMOTOR_init+0x54>
	{
		DIO_setPinDIR(copyMotor1.motor[count], _DIRECTION_PIN_OUTPUT);
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9e 01       	movw	r18, r28
    213e:	2e 5f       	subi	r18, 0xFE	; 254
    2140:	3f 4f       	sbci	r19, 0xFF	; 255
    2142:	82 0f       	add	r24, r18
    2144:	93 1f       	adc	r25, r19
    2146:	fc 01       	movw	r30, r24
    2148:	80 81       	ld	r24, Z
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
		DIO_setPinDIR(copyMotor2.motor[count], _DIRECTION_PIN_OUTPUT);
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9e 01       	movw	r18, r28
    2158:	2c 5f       	subi	r18, 0xFC	; 252
    215a:	3f 4f       	sbci	r19, 0xFF	; 255
    215c:	82 0f       	add	r24, r18
    215e:	93 1f       	adc	r25, r19
    2160:	fc 01       	movw	r30, r24
    2162:	80 81       	ld	r24, Z
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_init(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
	for(uint_8 count = Zero_INIT ; count < 2 ; count++)
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	8f 5f       	subi	r24, 0xFF	; 255
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	82 30       	cpi	r24, 0x02	; 2
    2174:	00 f3       	brcs	.-64     	; 0x2136 <DCMOTOR_init+0x1a>
	{
		DIO_setPinDIR(copyMotor1.motor[count], _DIRECTION_PIN_OUTPUT);
		DIO_setPinDIR(copyMotor2.motor[count], _DIRECTION_PIN_OUTPUT);
	}
}
    2176:	00 00       	nop
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <DCMOTOR_motorForward>:
  * @brief   : Motors move forward by configure pin high & next pin low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorForward(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	00 d0       	rcall	.+0      	; 0x218e <DCMOTOR_motorForward+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <DCMOTOR_motorForward+0x8>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	7c 83       	std	Y+4, r23	; 0x04
    219a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_HIGH);
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	61 e0       	ldi	r22, 0x01	; 1
    21a0:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_LOW);
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_HIGH);
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_LOW);
    21b4:	8c 81       	ldd	r24, Y+4	; 0x04
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
}
    21bc:	00 00       	nop
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <DCMOTOR_motorReverse>:
  * @brief   : Motors move forward by configure pin low & next pin high.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorReverse(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <DCMOTOR_motorReverse+0x6>
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <DCMOTOR_motorReverse+0x8>
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	9a 83       	std	Y+2, r25	; 0x02
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	7c 83       	std	Y+4, r23	; 0x04
    21de:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_HIGH);
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_HIGH);
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
}
    2200:	00 00       	nop
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	08 95       	ret

00002210 <DCMOTOR_motorRight>:
  * @brief   : Motors move forward by configure all pins high but right motor in4 low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorRight(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	00 d0       	rcall	.+0      	; 0x2216 <DCMOTOR_motorRight+0x6>
    2216:	00 d0       	rcall	.+0      	; 0x2218 <DCMOTOR_motorRight+0x8>
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	7c 83       	std	Y+4, r23	; 0x04
    2222:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_LOW);
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_HIGH);
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
}
    2244:	00 00       	nop
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <DCMOTOR_motorLeft>:
  * @brief   : Motors move forward by configure all pins high but left motor in2 low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorLeft(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	00 d0       	rcall	.+0      	; 0x225a <DCMOTOR_motorLeft+0x6>
    225a:	00 d0       	rcall	.+0      	; 0x225c <DCMOTOR_motorLeft+0x8>
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	7c 83       	std	Y+4, r23	; 0x04
    2266:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_HIGH);
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_LOW);
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
}
    2288:	00 00       	nop
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	08 95       	ret

00002298 <DCMOTOR_motorStop>:
  * @brief   : Motors move forward by configure all pins low.
  * @param1  : copyMotor1
  * @param1  : copyMotor2
  */
void DCMOTOR_motorStop(PINS_MOTORS copyMotor1 , PINS_MOTORS copyMotor2)
{
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	00 d0       	rcall	.+0      	; 0x229e <DCMOTOR_motorStop+0x6>
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <DCMOTOR_motorStop+0x8>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	7c 83       	std	Y+4, r23	; 0x04
    22aa:	6b 83       	std	Y+3, r22	; 0x03
	DIO_setPinVAL(copyMotor1.motor[0], _STATUS_PIN_LOW);
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor1.motor[1], _STATUS_PIN_LOW);
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[0], _STATUS_PIN_LOW);
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	DIO_setPinVAL(copyMotor2.motor[1], _STATUS_PIN_LOW);
    22c4:	8c 81       	ldd	r24, Y+4	; 0x04
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
}
    22cc:	00 00       	nop
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	08 95       	ret

000022dc <KEYPAD_init>:
 *           keypad is DIRECTION_PIN_INPUTS & COLUMN PINS Directions DIRECTION_PIN_OUTPUT.
 * @param1 : copyKEYPAD
 * @retVal : void
 */
void KEYPAD_init(PINS_KEYPAD copyKEYPAD)
{
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	2a 97       	sbiw	r28, 0x0a	; 10
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	2b 83       	std	Y+3, r18	; 0x03
    22f2:	3c 83       	std	Y+4, r19	; 0x04
    22f4:	4d 83       	std	Y+5, r20	; 0x05
    22f6:	5e 83       	std	Y+6, r21	; 0x06
    22f8:	6f 83       	std	Y+7, r22	; 0x07
    22fa:	78 87       	std	Y+8, r23	; 0x08
    22fc:	89 87       	std	Y+9, r24	; 0x09
    22fe:	9a 87       	std	Y+10, r25	; 0x0a
	for(uint_8 count1 = Zero_INIT ; count1 < MAX_ROWS ; count1++)
    2300:	19 82       	std	Y+1, r1	; 0x01
    2302:	1d c0       	rjmp	.+58     	; 0x233e <KEYPAD_init+0x62>
	{
		DIO_setPinDIR(copyKEYPAD.ROWS[count1], _DIRECTION_PIN_INPUT);
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9e 01       	movw	r18, r28
    230c:	2d 5f       	subi	r18, 0xFD	; 253
    230e:	3f 4f       	sbci	r19, 0xFF	; 255
    2310:	82 0f       	add	r24, r18
    2312:	93 1f       	adc	r25, r19
    2314:	fc 01       	movw	r30, r24
    2316:	80 81       	ld	r24, Z
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
		DIO_setPinVAL(copyKEYPAD.ROWS[count1], _STATUS_PIN_HIGH);
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e 01       	movw	r18, r28
    2326:	2d 5f       	subi	r18, 0xFD	; 253
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	82 0f       	add	r24, r18
    232c:	93 1f       	adc	r25, r19
    232e:	fc 01       	movw	r30, r24
    2330:	80 81       	ld	r24, Z
    2332:	61 e0       	ldi	r22, 0x01	; 1
    2334:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
 * @param1 : copyKEYPAD
 * @retVal : void
 */
void KEYPAD_init(PINS_KEYPAD copyKEYPAD)
{
	for(uint_8 count1 = Zero_INIT ; count1 < MAX_ROWS ; count1++)
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	8f 5f       	subi	r24, 0xFF	; 255
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	84 30       	cpi	r24, 0x04	; 4
    2342:	00 f3       	brcs	.-64     	; 0x2304 <KEYPAD_init+0x28>
	{
		DIO_setPinDIR(copyKEYPAD.ROWS[count1], _DIRECTION_PIN_INPUT);
		DIO_setPinVAL(copyKEYPAD.ROWS[count1], _STATUS_PIN_HIGH);
	}

	for (uint_8 count2 = Zero_INIT ; count2 < MAX_COLUMN; count2++)
    2344:	1a 82       	std	Y+2, r1	; 0x02
    2346:	1d c0       	rjmp	.+58     	; 0x2382 <KEYPAD_init+0xa6>
	{
		DIO_setPinDIR(copyKEYPAD.COLUMNS[count2], _DIRECTION_PIN_OUTPUT);
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9e 01       	movw	r18, r28
    2350:	29 5f       	subi	r18, 0xF9	; 249
    2352:	3f 4f       	sbci	r19, 0xFF	; 255
    2354:	82 0f       	add	r24, r18
    2356:	93 1f       	adc	r25, r19
    2358:	fc 01       	movw	r30, r24
    235a:	80 81       	ld	r24, Z
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count2], _STATUS_PIN_HIGH);
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9e 01       	movw	r18, r28
    236a:	29 5f       	subi	r18, 0xF9	; 249
    236c:	3f 4f       	sbci	r19, 0xFF	; 255
    236e:	82 0f       	add	r24, r18
    2370:	93 1f       	adc	r25, r19
    2372:	fc 01       	movw	r30, r24
    2374:	80 81       	ld	r24, Z
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	{
		DIO_setPinDIR(copyKEYPAD.ROWS[count1], _DIRECTION_PIN_INPUT);
		DIO_setPinVAL(copyKEYPAD.ROWS[count1], _STATUS_PIN_HIGH);
	}

	for (uint_8 count2 = Zero_INIT ; count2 < MAX_COLUMN; count2++)
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	8f 5f       	subi	r24, 0xFF	; 255
    2380:	8a 83       	std	Y+2, r24	; 0x02
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	84 30       	cpi	r24, 0x04	; 4
    2386:	00 f3       	brcs	.-64     	; 0x2348 <KEYPAD_init+0x6c>
	{
		DIO_setPinDIR(copyKEYPAD.COLUMNS[count2], _DIRECTION_PIN_OUTPUT);
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count2], _STATUS_PIN_HIGH);
	}
}
    2388:	00 00       	nop
    238a:	2a 96       	adiw	r28, 0x0a	; 10
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	08 95       	ret

0000239c <KEYPAD_getData>:
 * @brief  : Keypad function to get data from column & row pins .
 * @param1 : copyKEYPAD
 * @retVal : void
 */
Return_Value KEYPAD_getData(PINS_KEYPAD copyKEYPAD , uint_8 *copyKeypadValue)
{
    239c:	0f 93       	push	r16
    239e:	1f 93       	push	r17
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	6b 97       	sbiw	r28, 0x1b	; 27
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	2a 8b       	std	Y+18, r18	; 0x12
    23b6:	3b 8b       	std	Y+19, r19	; 0x13
    23b8:	4c 8b       	std	Y+20, r20	; 0x14
    23ba:	5d 8b       	std	Y+21, r21	; 0x15
    23bc:	6e 8b       	std	Y+22, r22	; 0x16
    23be:	7f 8b       	std	Y+23, r23	; 0x17
    23c0:	88 8f       	std	Y+24, r24	; 0x18
    23c2:	99 8f       	std	Y+25, r25	; 0x19
    23c4:	1b 8f       	std	Y+27, r17	; 0x1b
    23c6:	0a 8f       	std	Y+26, r16	; 0x1a
	uint_8 count1;
	uint_8 count2;
	uint_8 flag = 0;
    23c8:	1b 82       	std	Y+3, r1	; 0x03

	for(count1 = 0 ; count1 < 4 ; count1++)
    23ca:	19 82       	std	Y+1, r1	; 0x01
    23cc:	db c0       	rjmp	.+438    	; 0x2584 <KEYPAD_getData+0x1e8>
	{
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_LOW);
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	88 2f       	mov	r24, r24
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9e 01       	movw	r18, r28
    23d6:	2a 5e       	subi	r18, 0xEA	; 234
    23d8:	3f 4f       	sbci	r19, 0xFF	; 255
    23da:	82 0f       	add	r24, r18
    23dc:	93 1f       	adc	r25, r19
    23de:	fc 01       	movw	r30, r24
    23e0:	80 81       	ld	r24, Z
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
		for(count2 = 0 ; count2 < 4 ; count2++)
    23e8:	1a 82       	std	Y+2, r1	; 0x02
    23ea:	b8 c0       	rjmp	.+368    	; 0x255c <KEYPAD_getData+0x1c0>
		{
			if(DIO_getPinVAL(copyKEYPAD.ROWS[count2]) == 0)
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9e 01       	movw	r18, r28
    23f4:	2e 5e       	subi	r18, 0xEE	; 238
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	fc 01       	movw	r30, r24
    23fe:	80 81       	ld	r24, Z
    2400:	0e 94 4f 08 	call	0x109e	; 0x109e <DIO_getPinVAL>
    2404:	88 23       	and	r24, r24
    2406:	09 f0       	breq	.+2      	; 0x240a <KEYPAD_getData+0x6e>
    2408:	a6 c0       	rjmp	.+332    	; 0x2556 <KEYPAD_getData+0x1ba>
			{
				*copyKeypadValue = PATTIRN_KEYPAD[count2][count1];
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	22 0f       	add	r18, r18
    2418:	33 1f       	adc	r19, r19
    241a:	22 0f       	add	r18, r18
    241c:	33 1f       	adc	r19, r19
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	84 55       	subi	r24, 0x54	; 84
    2424:	9f 4f       	sbci	r25, 0xFF	; 255
    2426:	fc 01       	movw	r30, r24
    2428:	20 81       	ld	r18, Z
    242a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    242c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    242e:	fc 01       	movw	r30, r24
    2430:	20 83       	st	Z, r18
				flag = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_getPinVAL(copyKEYPAD.ROWS[count2]) == 0);
    2436:	00 00       	nop
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9e 01       	movw	r18, r28
    2440:	2e 5e       	subi	r18, 0xEE	; 238
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
    2444:	82 0f       	add	r24, r18
    2446:	93 1f       	adc	r25, r19
    2448:	fc 01       	movw	r30, r24
    244a:	80 81       	ld	r24, Z
    244c:	0e 94 4f 08 	call	0x109e	; 0x109e <DIO_getPinVAL>
    2450:	88 23       	and	r24, r24
    2452:	91 f3       	breq	.-28     	; 0x2438 <KEYPAD_getData+0x9c>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e2       	ldi	r26, 0x20	; 32
    245a:	b1 e4       	ldi	r27, 0x41	; 65
    245c:	8c 83       	std	Y+4, r24	; 0x04
    245e:	9d 83       	std	Y+5, r25	; 0x05
    2460:	ae 83       	std	Y+6, r26	; 0x06
    2462:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a ef       	ldi	r20, 0xFA	; 250
    246a:	54 e4       	ldi	r21, 0x44	; 68
    246c:	6c 81       	ldd	r22, Y+4	; 0x04
    246e:	7d 81       	ldd	r23, Y+5	; 0x05
    2470:	8e 81       	ldd	r24, Y+6	; 0x06
    2472:	9f 81       	ldd	r25, Y+7	; 0x07
    2474:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	88 87       	std	Y+8, r24	; 0x08
    247e:	99 87       	std	Y+9, r25	; 0x09
    2480:	aa 87       	std	Y+10, r26	; 0x0a
    2482:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	68 85       	ldd	r22, Y+8	; 0x08
    248e:	79 85       	ldd	r23, Y+9	; 0x09
    2490:	8a 85       	ldd	r24, Y+10	; 0x0a
    2492:	9b 85       	ldd	r25, Y+11	; 0x0b
    2494:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__cmpsf2>
    2498:	88 23       	and	r24, r24
    249a:	2c f4       	brge	.+10     	; 0x24a6 <KEYPAD_getData+0x10a>
		__ticks = 1;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9d 87       	std	Y+13, r25	; 0x0d
    24a2:	8c 87       	std	Y+12, r24	; 0x0c
    24a4:	3f c0       	rjmp	.+126    	; 0x2524 <KEYPAD_getData+0x188>
	else if (__tmp > 65535)
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	68 85       	ldd	r22, Y+8	; 0x08
    24b0:	79 85       	ldd	r23, Y+9	; 0x09
    24b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    24b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    24b6:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__gesf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	4c f5       	brge	.+82     	; 0x2510 <KEYPAD_getData+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	6c 81       	ldd	r22, Y+4	; 0x04
    24c8:	7d 81       	ldd	r23, Y+5	; 0x05
    24ca:	8e 81       	ldd	r24, Y+6	; 0x06
    24cc:	9f 81       	ldd	r25, Y+7	; 0x07
    24ce:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9d 87       	std	Y+13, r25	; 0x0d
    24e4:	8c 87       	std	Y+12, r24	; 0x0c
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <KEYPAD_getData+0x16a>
    24e8:	88 ec       	ldi	r24, 0xC8	; 200
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	9f 87       	std	Y+15, r25	; 0x0f
    24ee:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    24f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <KEYPAD_getData+0x158>
    24f8:	9f 87       	std	Y+15, r25	; 0x0f
    24fa:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    24fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	9d 87       	std	Y+13, r25	; 0x0d
    2504:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	8c 85       	ldd	r24, Y+12	; 0x0c
    2508:	9d 85       	ldd	r25, Y+13	; 0x0d
    250a:	89 2b       	or	r24, r25
    250c:	69 f7       	brne	.-38     	; 0x24e8 <KEYPAD_getData+0x14c>
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <KEYPAD_getData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2510:	68 85       	ldd	r22, Y+8	; 0x08
    2512:	79 85       	ldd	r23, Y+9	; 0x09
    2514:	8a 85       	ldd	r24, Y+10	; 0x0a
    2516:	9b 85       	ldd	r25, Y+11	; 0x0b
    2518:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9d 87       	std	Y+13, r25	; 0x0d
    2522:	8c 87       	std	Y+12, r24	; 0x0c
    2524:	8c 85       	ldd	r24, Y+12	; 0x0c
    2526:	9d 85       	ldd	r25, Y+13	; 0x0d
    2528:	99 8b       	std	Y+17, r25	; 0x11
    252a:	88 8b       	std	Y+16, r24	; 0x10
    252c:	88 89       	ldd	r24, Y+16	; 0x10
    252e:	99 89       	ldd	r25, Y+17	; 0x11
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <KEYPAD_getData+0x194>
    2534:	99 8b       	std	Y+17, r25	; 0x11
    2536:	88 8b       	std	Y+16, r24	; 0x10
				_delay_ms(10);
				DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e 01       	movw	r18, r28
    2540:	2a 5e       	subi	r18, 0xEA	; 234
    2542:	3f 4f       	sbci	r19, 0xFF	; 255
    2544:	82 0f       	add	r24, r18
    2546:	93 1f       	adc	r25, r19
    2548:	fc 01       	movw	r30, r24
    254a:	80 81       	ld	r24, Z
    254c:	61 e0       	ldi	r22, 0x01	; 1
    254e:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
				return flag;
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	1c c0       	rjmp	.+56     	; 0x258e <KEYPAD_getData+0x1f2>
	uint_8 flag = 0;

	for(count1 = 0 ; count1 < 4 ; count1++)
	{
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_LOW);
		for(count2 = 0 ; count2 < 4 ; count2++)
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	8a 83       	std	Y+2, r24	; 0x02
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	84 30       	cpi	r24, 0x04	; 4
    2560:	08 f4       	brcc	.+2      	; 0x2564 <KEYPAD_getData+0x1c8>
    2562:	44 cf       	rjmp	.-376    	; 0x23ec <KEYPAD_getData+0x50>
				_delay_ms(10);
				DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
				return flag;
			}
		}
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9e 01       	movw	r18, r28
    256c:	2a 5e       	subi	r18, 0xEA	; 234
    256e:	3f 4f       	sbci	r19, 0xFF	; 255
    2570:	82 0f       	add	r24, r18
    2572:	93 1f       	adc	r25, r19
    2574:	fc 01       	movw	r30, r24
    2576:	80 81       	ld	r24, Z
    2578:	61 e0       	ldi	r22, 0x01	; 1
    257a:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
{
	uint_8 count1;
	uint_8 count2;
	uint_8 flag = 0;

	for(count1 = 0 ; count1 < 4 ; count1++)
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	8f 5f       	subi	r24, 0xFF	; 255
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	84 30       	cpi	r24, 0x04	; 4
    2588:	08 f4       	brcc	.+2      	; 0x258c <KEYPAD_getData+0x1f0>
    258a:	21 cf       	rjmp	.-446    	; 0x23ce <KEYPAD_getData+0x32>
				return flag;
			}
		}
		DIO_setPinVAL(copyKEYPAD.COLUMNS[count1],_STATUS_PIN_HIGH);
	}
	return flag;
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    258e:	6b 96       	adiw	r28, 0x1b	; 27
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	08 95       	ret

000025a4 <BCD_init>:
 *           pins of 7-SEGMENT is DIRECTION_PIN_OUTPUT
 * @param1 : copyBCDNum
 * @retVal : void
 */
void BCD_init(_BCD_PINS_ copyBCDNum)
{
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <BCD_init+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <BCD_init+0x8>
    25ac:	1f 92       	push	r1
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	49 83       	std	Y+1, r20	; 0x01
    25b4:	5a 83       	std	Y+2, r21	; 0x02
    25b6:	6b 83       	std	Y+3, r22	; 0x03
    25b8:	7c 83       	std	Y+4, r23	; 0x04
    25ba:	8d 83       	std	Y+5, r24	; 0x05
#if (_7SEG_TYPE == COMMON_ANODE)
	DIO_setPinDIR(copyBCDNum.ENABLE_PIN, _DIRECTION_PIN_OUTPUT);
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	61 e0       	ldi	r22, 0x01	; 1
    25c0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN1, _DIRECTION_PIN_OUTPUT);
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	61 e0       	ldi	r22, 0x01	; 1
    25c8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN2, _DIRECTION_PIN_OUTPUT);
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	61 e0       	ldi	r22, 0x01	; 1
    25d0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN3, _DIRECTION_PIN_OUTPUT);
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	61 e0       	ldi	r22, 0x01	; 1
    25d8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN4, _DIRECTION_PIN_OUTPUT);
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_setPinDIR>
	DIO_setPinDIR(copyBCDNum.PIN1, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyBCDNum.PIN2, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyBCDNum.PIN3, _DIRECTION_PIN_OUTPUT);
	DIO_setPinDIR(copyBCDNum.PIN4, _DIRECTION_PIN_OUTPUT);
#endif
	BCD_displayEN(copyBCDNum);
    25e4:	49 81       	ldd	r20, Y+1	; 0x01
    25e6:	5a 81       	ldd	r21, Y+2	; 0x02
    25e8:	6b 81       	ldd	r22, Y+3	; 0x03
    25ea:	7c 81       	ldd	r23, Y+4	; 0x04
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	0e 94 02 13 	call	0x2604	; 0x2604 <BCD_displayEN>
}
    25f2:	00 00       	nop
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	08 95       	ret

00002604 <BCD_displayEN>:
 * 			 if 7-SEGMENT is COMMON_CATHOD SET Enable bit STATUS_PIN_LOW.
 * @param1 : copyBCDNum
 * @retVal : void
 */
void BCD_displayEN(_BCD_PINS_ copyBCDNum)
{
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	00 d0       	rcall	.+0      	; 0x260a <BCD_displayEN+0x6>
    260a:	00 d0       	rcall	.+0      	; 0x260c <BCD_displayEN+0x8>
    260c:	1f 92       	push	r1
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	49 83       	std	Y+1, r20	; 0x01
    2614:	5a 83       	std	Y+2, r21	; 0x02
    2616:	6b 83       	std	Y+3, r22	; 0x03
    2618:	7c 83       	std	Y+4, r23	; 0x04
    261a:	8d 83       	std	Y+5, r24	; 0x05
#if (_7SEG_TYPE == COMMON_ANODE)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_HIGH);
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
#elif (_7SEG_TYPE == COMMON_CATHOD)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_LOW);
#endif
}
    2624:	00 00       	nop
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	08 95       	ret

00002636 <BCD_displayDIS>:
 * 			 if 7-SEGMENT is COMMON_CATHOD SET Enable bit STATUS_PIN_HIGH.
 * @param1 : copyBCDNum
 * @retVal : void
 */
void BCD_displayDIS(_BCD_PINS_ copyBCDNum)
{
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	00 d0       	rcall	.+0      	; 0x263c <BCD_displayDIS+0x6>
    263c:	00 d0       	rcall	.+0      	; 0x263e <BCD_displayDIS+0x8>
    263e:	1f 92       	push	r1
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	49 83       	std	Y+1, r20	; 0x01
    2646:	5a 83       	std	Y+2, r21	; 0x02
    2648:	6b 83       	std	Y+3, r22	; 0x03
    264a:	7c 83       	std	Y+4, r23	; 0x04
    264c:	8d 83       	std	Y+5, r24	; 0x05
#if (_7SEG_TYPE == COMMON_ANODE)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_LOW);
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
#elif (_7SEG_TYPE == COMMON_CATHOD)
	DIO_setPinVAL(copyBCDNum.ENABLE_PIN ,_STATUS_PIN_HIGH);
#endif
}
    2656:	00 00       	nop
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	08 95       	ret

00002668 <BCD_displayNum>:
 * @param1 : copyBCDNum
 * @param2 : copyNumber
 * @retVal : void
 */
void BCD_displayNum(_BCD_PINS_ copyBCDNum, uint_8 copyNumber)
{
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	00 d0       	rcall	.+0      	; 0x266e <BCD_displayNum+0x6>
    266e:	00 d0       	rcall	.+0      	; 0x2670 <BCD_displayNum+0x8>
    2670:	00 d0       	rcall	.+0      	; 0x2672 <BCD_displayNum+0xa>
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	49 83       	std	Y+1, r20	; 0x01
    2678:	5a 83       	std	Y+2, r21	; 0x02
    267a:	6b 83       	std	Y+3, r22	; 0x03
    267c:	7c 83       	std	Y+4, r23	; 0x04
    267e:	8d 83       	std	Y+5, r24	; 0x05
    2680:	2e 83       	std	Y+6, r18	; 0x06
	if(copyNumber <= 9)
    2682:	8e 81       	ldd	r24, Y+6	; 0x06
    2684:	8a 30       	cpi	r24, 0x0A	; 10
    2686:	18 f5       	brcc	.+70     	; 0x26ce <BCD_displayNum+0x66>
	{
		DIO_setPinVAL(copyBCDNum.PIN1,  copyNumber & 0x01);
    2688:	8e 81       	ldd	r24, Y+6	; 0x06
    268a:	98 2f       	mov	r25, r24
    268c:	91 70       	andi	r25, 0x01	; 1
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	69 2f       	mov	r22, r25
    2692:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
		DIO_setPinVAL(copyBCDNum.PIN2, (copyNumber >> 1) & 0x01);
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	86 95       	lsr	r24
    269a:	98 2f       	mov	r25, r24
    269c:	91 70       	andi	r25, 0x01	; 1
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	69 2f       	mov	r22, r25
    26a2:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
		DIO_setPinVAL(copyBCDNum.PIN3, (copyNumber >> 2) & 0x01);
    26a6:	8e 81       	ldd	r24, Y+6	; 0x06
    26a8:	86 95       	lsr	r24
    26aa:	86 95       	lsr	r24
    26ac:	98 2f       	mov	r25, r24
    26ae:	91 70       	andi	r25, 0x01	; 1
    26b0:	8c 81       	ldd	r24, Y+4	; 0x04
    26b2:	69 2f       	mov	r22, r25
    26b4:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
		DIO_setPinVAL(copyBCDNum.PIN4, (copyNumber >> 3) & 0x01);
    26b8:	8e 81       	ldd	r24, Y+6	; 0x06
    26ba:	86 95       	lsr	r24
    26bc:	86 95       	lsr	r24
    26be:	86 95       	lsr	r24
    26c0:	98 2f       	mov	r25, r24
    26c2:	91 70       	andi	r25, 0x01	; 1
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	69 2f       	mov	r22, r25
    26c8:	0e 94 ef 05 	call	0xbde	; 0xbde <DIO_setPinVAL>
	}
	else
	{
		BCD_displayDIS(copyBCDNum);
	}
}
    26cc:	07 c0       	rjmp	.+14     	; 0x26dc <BCD_displayNum+0x74>
		DIO_setPinVAL(copyBCDNum.PIN3, (copyNumber >> 2) & 0x01);
		DIO_setPinVAL(copyBCDNum.PIN4, (copyNumber >> 3) & 0x01);
	}
	else
	{
		BCD_displayDIS(copyBCDNum);
    26ce:	49 81       	ldd	r20, Y+1	; 0x01
    26d0:	5a 81       	ldd	r21, Y+2	; 0x02
    26d2:	6b 81       	ldd	r22, Y+3	; 0x03
    26d4:	7c 81       	ldd	r23, Y+4	; 0x04
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	0e 94 1b 13 	call	0x2636	; 0x2636 <BCD_displayDIS>
	}
}
    26dc:	00 00       	nop
    26de:	26 96       	adiw	r28, 0x06	; 6
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	08 95       	ret

000026f0 <setUp>:
 * @brief  : standard function setup all initializations & directions of all modules.
 * @param1 : void
 * @RetVal : void
 */
void setUp(void)
{
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62

}
    26f8:	00 00       	nop
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <Loop>:
 * @brief  : standard function loop your Program.
 * @param1 : void
 * @RetVal : void
 */
void Loop(void)
{
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62

}
    2708:	00 00       	nop
    270a:	df 91       	pop	r29
    270c:	cf 91       	pop	r28
    270e:	08 95       	ret

00002710 <main>:

/*********** INCLUDES ***********/
#include "MAIN_Init.h"

int main (void)
{
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
	setUp();
    2718:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setUp>
	while(1)
	{
		Loop();
    271c:	0e 94 80 13 	call	0x2700	; 0x2700 <Loop>
    2720:	fd cf       	rjmp	.-6      	; 0x271c <main+0xc>

00002722 <__subsf3>:
    2722:	50 58       	subi	r21, 0x80	; 128

00002724 <__addsf3>:
    2724:	bb 27       	eor	r27, r27
    2726:	aa 27       	eor	r26, r26
    2728:	0e 94 a9 13 	call	0x2752	; 0x2752 <__addsf3x>
    272c:	0c 94 df 14 	jmp	0x29be	; 0x29be <__fp_round>
    2730:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__fp_pscA>
    2734:	38 f0       	brcs	.+14     	; 0x2744 <__addsf3+0x20>
    2736:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__fp_pscB>
    273a:	20 f0       	brcs	.+8      	; 0x2744 <__addsf3+0x20>
    273c:	39 f4       	brne	.+14     	; 0x274c <__addsf3+0x28>
    273e:	9f 3f       	cpi	r25, 0xFF	; 255
    2740:	19 f4       	brne	.+6      	; 0x2748 <__addsf3+0x24>
    2742:	26 f4       	brtc	.+8      	; 0x274c <__addsf3+0x28>
    2744:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__fp_nan>
    2748:	0e f4       	brtc	.+2      	; 0x274c <__addsf3+0x28>
    274a:	e0 95       	com	r30
    274c:	e7 fb       	bst	r30, 7
    274e:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__fp_inf>

00002752 <__addsf3x>:
    2752:	e9 2f       	mov	r30, r25
    2754:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__fp_split3>
    2758:	58 f3       	brcs	.-42     	; 0x2730 <__addsf3+0xc>
    275a:	ba 17       	cp	r27, r26
    275c:	62 07       	cpc	r22, r18
    275e:	73 07       	cpc	r23, r19
    2760:	84 07       	cpc	r24, r20
    2762:	95 07       	cpc	r25, r21
    2764:	20 f0       	brcs	.+8      	; 0x276e <__addsf3x+0x1c>
    2766:	79 f4       	brne	.+30     	; 0x2786 <__addsf3x+0x34>
    2768:	a6 f5       	brtc	.+104    	; 0x27d2 <__addsf3x+0x80>
    276a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__fp_zero>
    276e:	0e f4       	brtc	.+2      	; 0x2772 <__addsf3x+0x20>
    2770:	e0 95       	com	r30
    2772:	0b 2e       	mov	r0, r27
    2774:	ba 2f       	mov	r27, r26
    2776:	a0 2d       	mov	r26, r0
    2778:	0b 01       	movw	r0, r22
    277a:	b9 01       	movw	r22, r18
    277c:	90 01       	movw	r18, r0
    277e:	0c 01       	movw	r0, r24
    2780:	ca 01       	movw	r24, r20
    2782:	a0 01       	movw	r20, r0
    2784:	11 24       	eor	r1, r1
    2786:	ff 27       	eor	r31, r31
    2788:	59 1b       	sub	r21, r25
    278a:	99 f0       	breq	.+38     	; 0x27b2 <__addsf3x+0x60>
    278c:	59 3f       	cpi	r21, 0xF9	; 249
    278e:	50 f4       	brcc	.+20     	; 0x27a4 <__addsf3x+0x52>
    2790:	50 3e       	cpi	r21, 0xE0	; 224
    2792:	68 f1       	brcs	.+90     	; 0x27ee <__addsf3x+0x9c>
    2794:	1a 16       	cp	r1, r26
    2796:	f0 40       	sbci	r31, 0x00	; 0
    2798:	a2 2f       	mov	r26, r18
    279a:	23 2f       	mov	r18, r19
    279c:	34 2f       	mov	r19, r20
    279e:	44 27       	eor	r20, r20
    27a0:	58 5f       	subi	r21, 0xF8	; 248
    27a2:	f3 cf       	rjmp	.-26     	; 0x278a <__addsf3x+0x38>
    27a4:	46 95       	lsr	r20
    27a6:	37 95       	ror	r19
    27a8:	27 95       	ror	r18
    27aa:	a7 95       	ror	r26
    27ac:	f0 40       	sbci	r31, 0x00	; 0
    27ae:	53 95       	inc	r21
    27b0:	c9 f7       	brne	.-14     	; 0x27a4 <__addsf3x+0x52>
    27b2:	7e f4       	brtc	.+30     	; 0x27d2 <__addsf3x+0x80>
    27b4:	1f 16       	cp	r1, r31
    27b6:	ba 0b       	sbc	r27, r26
    27b8:	62 0b       	sbc	r22, r18
    27ba:	73 0b       	sbc	r23, r19
    27bc:	84 0b       	sbc	r24, r20
    27be:	ba f0       	brmi	.+46     	; 0x27ee <__addsf3x+0x9c>
    27c0:	91 50       	subi	r25, 0x01	; 1
    27c2:	a1 f0       	breq	.+40     	; 0x27ec <__addsf3x+0x9a>
    27c4:	ff 0f       	add	r31, r31
    27c6:	bb 1f       	adc	r27, r27
    27c8:	66 1f       	adc	r22, r22
    27ca:	77 1f       	adc	r23, r23
    27cc:	88 1f       	adc	r24, r24
    27ce:	c2 f7       	brpl	.-16     	; 0x27c0 <__addsf3x+0x6e>
    27d0:	0e c0       	rjmp	.+28     	; 0x27ee <__addsf3x+0x9c>
    27d2:	ba 0f       	add	r27, r26
    27d4:	62 1f       	adc	r22, r18
    27d6:	73 1f       	adc	r23, r19
    27d8:	84 1f       	adc	r24, r20
    27da:	48 f4       	brcc	.+18     	; 0x27ee <__addsf3x+0x9c>
    27dc:	87 95       	ror	r24
    27de:	77 95       	ror	r23
    27e0:	67 95       	ror	r22
    27e2:	b7 95       	ror	r27
    27e4:	f7 95       	ror	r31
    27e6:	9e 3f       	cpi	r25, 0xFE	; 254
    27e8:	08 f0       	brcs	.+2      	; 0x27ec <__addsf3x+0x9a>
    27ea:	b0 cf       	rjmp	.-160    	; 0x274c <__addsf3+0x28>
    27ec:	93 95       	inc	r25
    27ee:	88 0f       	add	r24, r24
    27f0:	08 f0       	brcs	.+2      	; 0x27f4 <__addsf3x+0xa2>
    27f2:	99 27       	eor	r25, r25
    27f4:	ee 0f       	add	r30, r30
    27f6:	97 95       	ror	r25
    27f8:	87 95       	ror	r24
    27fa:	08 95       	ret

000027fc <__cmpsf2>:
    27fc:	0e 94 a4 14 	call	0x2948	; 0x2948 <__fp_cmp>
    2800:	08 f4       	brcc	.+2      	; 0x2804 <__cmpsf2+0x8>
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	08 95       	ret

00002806 <__divsf3>:
    2806:	0e 94 17 14 	call	0x282e	; 0x282e <__divsf3x>
    280a:	0c 94 df 14 	jmp	0x29be	; 0x29be <__fp_round>
    280e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__fp_pscB>
    2812:	58 f0       	brcs	.+22     	; 0x282a <__divsf3+0x24>
    2814:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__fp_pscA>
    2818:	40 f0       	brcs	.+16     	; 0x282a <__divsf3+0x24>
    281a:	29 f4       	brne	.+10     	; 0x2826 <__divsf3+0x20>
    281c:	5f 3f       	cpi	r21, 0xFF	; 255
    281e:	29 f0       	breq	.+10     	; 0x282a <__divsf3+0x24>
    2820:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__fp_inf>
    2824:	51 11       	cpse	r21, r1
    2826:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__fp_szero>
    282a:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__fp_nan>

0000282e <__divsf3x>:
    282e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__fp_split3>
    2832:	68 f3       	brcs	.-38     	; 0x280e <__divsf3+0x8>

00002834 <__divsf3_pse>:
    2834:	99 23       	and	r25, r25
    2836:	b1 f3       	breq	.-20     	; 0x2824 <__divsf3+0x1e>
    2838:	55 23       	and	r21, r21
    283a:	91 f3       	breq	.-28     	; 0x2820 <__divsf3+0x1a>
    283c:	95 1b       	sub	r25, r21
    283e:	55 0b       	sbc	r21, r21
    2840:	bb 27       	eor	r27, r27
    2842:	aa 27       	eor	r26, r26
    2844:	62 17       	cp	r22, r18
    2846:	73 07       	cpc	r23, r19
    2848:	84 07       	cpc	r24, r20
    284a:	38 f0       	brcs	.+14     	; 0x285a <__divsf3_pse+0x26>
    284c:	9f 5f       	subi	r25, 0xFF	; 255
    284e:	5f 4f       	sbci	r21, 0xFF	; 255
    2850:	22 0f       	add	r18, r18
    2852:	33 1f       	adc	r19, r19
    2854:	44 1f       	adc	r20, r20
    2856:	aa 1f       	adc	r26, r26
    2858:	a9 f3       	breq	.-22     	; 0x2844 <__divsf3_pse+0x10>
    285a:	35 d0       	rcall	.+106    	; 0x28c6 <__divsf3_pse+0x92>
    285c:	0e 2e       	mov	r0, r30
    285e:	3a f0       	brmi	.+14     	; 0x286e <__divsf3_pse+0x3a>
    2860:	e0 e8       	ldi	r30, 0x80	; 128
    2862:	32 d0       	rcall	.+100    	; 0x28c8 <__divsf3_pse+0x94>
    2864:	91 50       	subi	r25, 0x01	; 1
    2866:	50 40       	sbci	r21, 0x00	; 0
    2868:	e6 95       	lsr	r30
    286a:	00 1c       	adc	r0, r0
    286c:	ca f7       	brpl	.-14     	; 0x2860 <__divsf3_pse+0x2c>
    286e:	2b d0       	rcall	.+86     	; 0x28c6 <__divsf3_pse+0x92>
    2870:	fe 2f       	mov	r31, r30
    2872:	29 d0       	rcall	.+82     	; 0x28c6 <__divsf3_pse+0x92>
    2874:	66 0f       	add	r22, r22
    2876:	77 1f       	adc	r23, r23
    2878:	88 1f       	adc	r24, r24
    287a:	bb 1f       	adc	r27, r27
    287c:	26 17       	cp	r18, r22
    287e:	37 07       	cpc	r19, r23
    2880:	48 07       	cpc	r20, r24
    2882:	ab 07       	cpc	r26, r27
    2884:	b0 e8       	ldi	r27, 0x80	; 128
    2886:	09 f0       	breq	.+2      	; 0x288a <__divsf3_pse+0x56>
    2888:	bb 0b       	sbc	r27, r27
    288a:	80 2d       	mov	r24, r0
    288c:	bf 01       	movw	r22, r30
    288e:	ff 27       	eor	r31, r31
    2890:	93 58       	subi	r25, 0x83	; 131
    2892:	5f 4f       	sbci	r21, 0xFF	; 255
    2894:	3a f0       	brmi	.+14     	; 0x28a4 <__divsf3_pse+0x70>
    2896:	9e 3f       	cpi	r25, 0xFE	; 254
    2898:	51 05       	cpc	r21, r1
    289a:	78 f0       	brcs	.+30     	; 0x28ba <__divsf3_pse+0x86>
    289c:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__fp_inf>
    28a0:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__fp_szero>
    28a4:	5f 3f       	cpi	r21, 0xFF	; 255
    28a6:	e4 f3       	brlt	.-8      	; 0x28a0 <__divsf3_pse+0x6c>
    28a8:	98 3e       	cpi	r25, 0xE8	; 232
    28aa:	d4 f3       	brlt	.-12     	; 0x28a0 <__divsf3_pse+0x6c>
    28ac:	86 95       	lsr	r24
    28ae:	77 95       	ror	r23
    28b0:	67 95       	ror	r22
    28b2:	b7 95       	ror	r27
    28b4:	f7 95       	ror	r31
    28b6:	9f 5f       	subi	r25, 0xFF	; 255
    28b8:	c9 f7       	brne	.-14     	; 0x28ac <__divsf3_pse+0x78>
    28ba:	88 0f       	add	r24, r24
    28bc:	91 1d       	adc	r25, r1
    28be:	96 95       	lsr	r25
    28c0:	87 95       	ror	r24
    28c2:	97 f9       	bld	r25, 7
    28c4:	08 95       	ret
    28c6:	e1 e0       	ldi	r30, 0x01	; 1
    28c8:	66 0f       	add	r22, r22
    28ca:	77 1f       	adc	r23, r23
    28cc:	88 1f       	adc	r24, r24
    28ce:	bb 1f       	adc	r27, r27
    28d0:	62 17       	cp	r22, r18
    28d2:	73 07       	cpc	r23, r19
    28d4:	84 07       	cpc	r24, r20
    28d6:	ba 07       	cpc	r27, r26
    28d8:	20 f0       	brcs	.+8      	; 0x28e2 <__divsf3_pse+0xae>
    28da:	62 1b       	sub	r22, r18
    28dc:	73 0b       	sbc	r23, r19
    28de:	84 0b       	sbc	r24, r20
    28e0:	ba 0b       	sbc	r27, r26
    28e2:	ee 1f       	adc	r30, r30
    28e4:	88 f7       	brcc	.-30     	; 0x28c8 <__divsf3_pse+0x94>
    28e6:	e0 95       	com	r30
    28e8:	08 95       	ret

000028ea <__fixunssfsi>:
    28ea:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fp_splitA>
    28ee:	88 f0       	brcs	.+34     	; 0x2912 <__fixunssfsi+0x28>
    28f0:	9f 57       	subi	r25, 0x7F	; 127
    28f2:	98 f0       	brcs	.+38     	; 0x291a <__fixunssfsi+0x30>
    28f4:	b9 2f       	mov	r27, r25
    28f6:	99 27       	eor	r25, r25
    28f8:	b7 51       	subi	r27, 0x17	; 23
    28fa:	b0 f0       	brcs	.+44     	; 0x2928 <__fixunssfsi+0x3e>
    28fc:	e1 f0       	breq	.+56     	; 0x2936 <__fixunssfsi+0x4c>
    28fe:	66 0f       	add	r22, r22
    2900:	77 1f       	adc	r23, r23
    2902:	88 1f       	adc	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	1a f0       	brmi	.+6      	; 0x290e <__fixunssfsi+0x24>
    2908:	ba 95       	dec	r27
    290a:	c9 f7       	brne	.-14     	; 0x28fe <__fixunssfsi+0x14>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <__fixunssfsi+0x4c>
    290e:	b1 30       	cpi	r27, 0x01	; 1
    2910:	91 f0       	breq	.+36     	; 0x2936 <__fixunssfsi+0x4c>
    2912:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__fp_zero>
    2916:	b1 e0       	ldi	r27, 0x01	; 1
    2918:	08 95       	ret
    291a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__fp_zero>
    291e:	67 2f       	mov	r22, r23
    2920:	78 2f       	mov	r23, r24
    2922:	88 27       	eor	r24, r24
    2924:	b8 5f       	subi	r27, 0xF8	; 248
    2926:	39 f0       	breq	.+14     	; 0x2936 <__fixunssfsi+0x4c>
    2928:	b9 3f       	cpi	r27, 0xF9	; 249
    292a:	cc f3       	brlt	.-14     	; 0x291e <__fixunssfsi+0x34>
    292c:	86 95       	lsr	r24
    292e:	77 95       	ror	r23
    2930:	67 95       	ror	r22
    2932:	b3 95       	inc	r27
    2934:	d9 f7       	brne	.-10     	; 0x292c <__fixunssfsi+0x42>
    2936:	3e f4       	brtc	.+14     	; 0x2946 <__fixunssfsi+0x5c>
    2938:	90 95       	com	r25
    293a:	80 95       	com	r24
    293c:	70 95       	com	r23
    293e:	61 95       	neg	r22
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	8f 4f       	sbci	r24, 0xFF	; 255
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	08 95       	ret

00002948 <__fp_cmp>:
    2948:	99 0f       	add	r25, r25
    294a:	00 08       	sbc	r0, r0
    294c:	55 0f       	add	r21, r21
    294e:	aa 0b       	sbc	r26, r26
    2950:	e0 e8       	ldi	r30, 0x80	; 128
    2952:	fe ef       	ldi	r31, 0xFE	; 254
    2954:	16 16       	cp	r1, r22
    2956:	17 06       	cpc	r1, r23
    2958:	e8 07       	cpc	r30, r24
    295a:	f9 07       	cpc	r31, r25
    295c:	c0 f0       	brcs	.+48     	; 0x298e <__fp_cmp+0x46>
    295e:	12 16       	cp	r1, r18
    2960:	13 06       	cpc	r1, r19
    2962:	e4 07       	cpc	r30, r20
    2964:	f5 07       	cpc	r31, r21
    2966:	98 f0       	brcs	.+38     	; 0x298e <__fp_cmp+0x46>
    2968:	62 1b       	sub	r22, r18
    296a:	73 0b       	sbc	r23, r19
    296c:	84 0b       	sbc	r24, r20
    296e:	95 0b       	sbc	r25, r21
    2970:	39 f4       	brne	.+14     	; 0x2980 <__fp_cmp+0x38>
    2972:	0a 26       	eor	r0, r26
    2974:	61 f0       	breq	.+24     	; 0x298e <__fp_cmp+0x46>
    2976:	23 2b       	or	r18, r19
    2978:	24 2b       	or	r18, r20
    297a:	25 2b       	or	r18, r21
    297c:	21 f4       	brne	.+8      	; 0x2986 <__fp_cmp+0x3e>
    297e:	08 95       	ret
    2980:	0a 26       	eor	r0, r26
    2982:	09 f4       	brne	.+2      	; 0x2986 <__fp_cmp+0x3e>
    2984:	a1 40       	sbci	r26, 0x01	; 1
    2986:	a6 95       	lsr	r26
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	81 1d       	adc	r24, r1
    298c:	81 1d       	adc	r24, r1
    298e:	08 95       	ret

00002990 <__fp_inf>:
    2990:	97 f9       	bld	r25, 7
    2992:	9f 67       	ori	r25, 0x7F	; 127
    2994:	80 e8       	ldi	r24, 0x80	; 128
    2996:	70 e0       	ldi	r23, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	08 95       	ret

0000299c <__fp_nan>:
    299c:	9f ef       	ldi	r25, 0xFF	; 255
    299e:	80 ec       	ldi	r24, 0xC0	; 192
    29a0:	08 95       	ret

000029a2 <__fp_pscA>:
    29a2:	00 24       	eor	r0, r0
    29a4:	0a 94       	dec	r0
    29a6:	16 16       	cp	r1, r22
    29a8:	17 06       	cpc	r1, r23
    29aa:	18 06       	cpc	r1, r24
    29ac:	09 06       	cpc	r0, r25
    29ae:	08 95       	ret

000029b0 <__fp_pscB>:
    29b0:	00 24       	eor	r0, r0
    29b2:	0a 94       	dec	r0
    29b4:	12 16       	cp	r1, r18
    29b6:	13 06       	cpc	r1, r19
    29b8:	14 06       	cpc	r1, r20
    29ba:	05 06       	cpc	r0, r21
    29bc:	08 95       	ret

000029be <__fp_round>:
    29be:	09 2e       	mov	r0, r25
    29c0:	03 94       	inc	r0
    29c2:	00 0c       	add	r0, r0
    29c4:	11 f4       	brne	.+4      	; 0x29ca <__fp_round+0xc>
    29c6:	88 23       	and	r24, r24
    29c8:	52 f0       	brmi	.+20     	; 0x29de <__fp_round+0x20>
    29ca:	bb 0f       	add	r27, r27
    29cc:	40 f4       	brcc	.+16     	; 0x29de <__fp_round+0x20>
    29ce:	bf 2b       	or	r27, r31
    29d0:	11 f4       	brne	.+4      	; 0x29d6 <__fp_round+0x18>
    29d2:	60 ff       	sbrs	r22, 0
    29d4:	04 c0       	rjmp	.+8      	; 0x29de <__fp_round+0x20>
    29d6:	6f 5f       	subi	r22, 0xFF	; 255
    29d8:	7f 4f       	sbci	r23, 0xFF	; 255
    29da:	8f 4f       	sbci	r24, 0xFF	; 255
    29dc:	9f 4f       	sbci	r25, 0xFF	; 255
    29de:	08 95       	ret

000029e0 <__fp_split3>:
    29e0:	57 fd       	sbrc	r21, 7
    29e2:	90 58       	subi	r25, 0x80	; 128
    29e4:	44 0f       	add	r20, r20
    29e6:	55 1f       	adc	r21, r21
    29e8:	59 f0       	breq	.+22     	; 0x2a00 <__fp_splitA+0x10>
    29ea:	5f 3f       	cpi	r21, 0xFF	; 255
    29ec:	71 f0       	breq	.+28     	; 0x2a0a <__fp_splitA+0x1a>
    29ee:	47 95       	ror	r20

000029f0 <__fp_splitA>:
    29f0:	88 0f       	add	r24, r24
    29f2:	97 fb       	bst	r25, 7
    29f4:	99 1f       	adc	r25, r25
    29f6:	61 f0       	breq	.+24     	; 0x2a10 <__fp_splitA+0x20>
    29f8:	9f 3f       	cpi	r25, 0xFF	; 255
    29fa:	79 f0       	breq	.+30     	; 0x2a1a <__fp_splitA+0x2a>
    29fc:	87 95       	ror	r24
    29fe:	08 95       	ret
    2a00:	12 16       	cp	r1, r18
    2a02:	13 06       	cpc	r1, r19
    2a04:	14 06       	cpc	r1, r20
    2a06:	55 1f       	adc	r21, r21
    2a08:	f2 cf       	rjmp	.-28     	; 0x29ee <__fp_split3+0xe>
    2a0a:	46 95       	lsr	r20
    2a0c:	f1 df       	rcall	.-30     	; 0x29f0 <__fp_splitA>
    2a0e:	08 c0       	rjmp	.+16     	; 0x2a20 <__fp_splitA+0x30>
    2a10:	16 16       	cp	r1, r22
    2a12:	17 06       	cpc	r1, r23
    2a14:	18 06       	cpc	r1, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	f1 cf       	rjmp	.-30     	; 0x29fc <__fp_splitA+0xc>
    2a1a:	86 95       	lsr	r24
    2a1c:	71 05       	cpc	r23, r1
    2a1e:	61 05       	cpc	r22, r1
    2a20:	08 94       	sec
    2a22:	08 95       	ret

00002a24 <__fp_zero>:
    2a24:	e8 94       	clt

00002a26 <__fp_szero>:
    2a26:	bb 27       	eor	r27, r27
    2a28:	66 27       	eor	r22, r22
    2a2a:	77 27       	eor	r23, r23
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	97 f9       	bld	r25, 7
    2a30:	08 95       	ret

00002a32 <__gesf2>:
    2a32:	0e 94 a4 14 	call	0x2948	; 0x2948 <__fp_cmp>
    2a36:	08 f4       	brcc	.+2      	; 0x2a3a <__gesf2+0x8>
    2a38:	8f ef       	ldi	r24, 0xFF	; 255
    2a3a:	08 95       	ret

00002a3c <__mulsf3>:
    2a3c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__mulsf3x>
    2a40:	0c 94 df 14 	jmp	0x29be	; 0x29be <__fp_round>
    2a44:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__fp_pscA>
    2a48:	38 f0       	brcs	.+14     	; 0x2a58 <__mulsf3+0x1c>
    2a4a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__fp_pscB>
    2a4e:	20 f0       	brcs	.+8      	; 0x2a58 <__mulsf3+0x1c>
    2a50:	95 23       	and	r25, r21
    2a52:	11 f0       	breq	.+4      	; 0x2a58 <__mulsf3+0x1c>
    2a54:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__fp_inf>
    2a58:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__fp_nan>
    2a5c:	11 24       	eor	r1, r1
    2a5e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__fp_szero>

00002a62 <__mulsf3x>:
    2a62:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__fp_split3>
    2a66:	70 f3       	brcs	.-36     	; 0x2a44 <__mulsf3+0x8>

00002a68 <__mulsf3_pse>:
    2a68:	95 9f       	mul	r25, r21
    2a6a:	c1 f3       	breq	.-16     	; 0x2a5c <__mulsf3+0x20>
    2a6c:	95 0f       	add	r25, r21
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	55 1f       	adc	r21, r21
    2a72:	62 9f       	mul	r22, r18
    2a74:	f0 01       	movw	r30, r0
    2a76:	72 9f       	mul	r23, r18
    2a78:	bb 27       	eor	r27, r27
    2a7a:	f0 0d       	add	r31, r0
    2a7c:	b1 1d       	adc	r27, r1
    2a7e:	63 9f       	mul	r22, r19
    2a80:	aa 27       	eor	r26, r26
    2a82:	f0 0d       	add	r31, r0
    2a84:	b1 1d       	adc	r27, r1
    2a86:	aa 1f       	adc	r26, r26
    2a88:	64 9f       	mul	r22, r20
    2a8a:	66 27       	eor	r22, r22
    2a8c:	b0 0d       	add	r27, r0
    2a8e:	a1 1d       	adc	r26, r1
    2a90:	66 1f       	adc	r22, r22
    2a92:	82 9f       	mul	r24, r18
    2a94:	22 27       	eor	r18, r18
    2a96:	b0 0d       	add	r27, r0
    2a98:	a1 1d       	adc	r26, r1
    2a9a:	62 1f       	adc	r22, r18
    2a9c:	73 9f       	mul	r23, r19
    2a9e:	b0 0d       	add	r27, r0
    2aa0:	a1 1d       	adc	r26, r1
    2aa2:	62 1f       	adc	r22, r18
    2aa4:	83 9f       	mul	r24, r19
    2aa6:	a0 0d       	add	r26, r0
    2aa8:	61 1d       	adc	r22, r1
    2aaa:	22 1f       	adc	r18, r18
    2aac:	74 9f       	mul	r23, r20
    2aae:	33 27       	eor	r19, r19
    2ab0:	a0 0d       	add	r26, r0
    2ab2:	61 1d       	adc	r22, r1
    2ab4:	23 1f       	adc	r18, r19
    2ab6:	84 9f       	mul	r24, r20
    2ab8:	60 0d       	add	r22, r0
    2aba:	21 1d       	adc	r18, r1
    2abc:	82 2f       	mov	r24, r18
    2abe:	76 2f       	mov	r23, r22
    2ac0:	6a 2f       	mov	r22, r26
    2ac2:	11 24       	eor	r1, r1
    2ac4:	9f 57       	subi	r25, 0x7F	; 127
    2ac6:	50 40       	sbci	r21, 0x00	; 0
    2ac8:	9a f0       	brmi	.+38     	; 0x2af0 <__mulsf3_pse+0x88>
    2aca:	f1 f0       	breq	.+60     	; 0x2b08 <__mulsf3_pse+0xa0>
    2acc:	88 23       	and	r24, r24
    2ace:	4a f0       	brmi	.+18     	; 0x2ae2 <__mulsf3_pse+0x7a>
    2ad0:	ee 0f       	add	r30, r30
    2ad2:	ff 1f       	adc	r31, r31
    2ad4:	bb 1f       	adc	r27, r27
    2ad6:	66 1f       	adc	r22, r22
    2ad8:	77 1f       	adc	r23, r23
    2ada:	88 1f       	adc	r24, r24
    2adc:	91 50       	subi	r25, 0x01	; 1
    2ade:	50 40       	sbci	r21, 0x00	; 0
    2ae0:	a9 f7       	brne	.-22     	; 0x2acc <__mulsf3_pse+0x64>
    2ae2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ae4:	51 05       	cpc	r21, r1
    2ae6:	80 f0       	brcs	.+32     	; 0x2b08 <__mulsf3_pse+0xa0>
    2ae8:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__fp_inf>
    2aec:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__fp_szero>
    2af0:	5f 3f       	cpi	r21, 0xFF	; 255
    2af2:	e4 f3       	brlt	.-8      	; 0x2aec <__mulsf3_pse+0x84>
    2af4:	98 3e       	cpi	r25, 0xE8	; 232
    2af6:	d4 f3       	brlt	.-12     	; 0x2aec <__mulsf3_pse+0x84>
    2af8:	86 95       	lsr	r24
    2afa:	77 95       	ror	r23
    2afc:	67 95       	ror	r22
    2afe:	b7 95       	ror	r27
    2b00:	f7 95       	ror	r31
    2b02:	e7 95       	ror	r30
    2b04:	9f 5f       	subi	r25, 0xFF	; 255
    2b06:	c1 f7       	brne	.-16     	; 0x2af8 <__mulsf3_pse+0x90>
    2b08:	fe 2b       	or	r31, r30
    2b0a:	88 0f       	add	r24, r24
    2b0c:	91 1d       	adc	r25, r1
    2b0e:	96 95       	lsr	r25
    2b10:	87 95       	ror	r24
    2b12:	97 f9       	bld	r25, 7
    2b14:	08 95       	ret

00002b16 <memset>:
    2b16:	dc 01       	movw	r26, r24
    2b18:	01 c0       	rjmp	.+2      	; 0x2b1c <memset+0x6>
    2b1a:	6d 93       	st	X+, r22
    2b1c:	41 50       	subi	r20, 0x01	; 1
    2b1e:	50 40       	sbci	r21, 0x00	; 0
    2b20:	e0 f7       	brcc	.-8      	; 0x2b1a <memset+0x4>
    2b22:	08 95       	ret

00002b24 <sprintf>:
    2b24:	ae e0       	ldi	r26, 0x0E	; 14
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	e8 e9       	ldi	r30, 0x98	; 152
    2b2a:	f5 e1       	ldi	r31, 0x15	; 21
    2b2c:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x1c>
    2b30:	0d 89       	ldd	r16, Y+21	; 0x15
    2b32:	1e 89       	ldd	r17, Y+22	; 0x16
    2b34:	86 e0       	ldi	r24, 0x06	; 6
    2b36:	8c 83       	std	Y+4, r24	; 0x04
    2b38:	1a 83       	std	Y+2, r17	; 0x02
    2b3a:	09 83       	std	Y+1, r16	; 0x01
    2b3c:	8f ef       	ldi	r24, 0xFF	; 255
    2b3e:	9f e7       	ldi	r25, 0x7F	; 127
    2b40:	9e 83       	std	Y+6, r25	; 0x06
    2b42:	8d 83       	std	Y+5, r24	; 0x05
    2b44:	ae 01       	movw	r20, r28
    2b46:	47 5e       	subi	r20, 0xE7	; 231
    2b48:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4a:	6f 89       	ldd	r22, Y+23	; 0x17
    2b4c:	78 8d       	ldd	r23, Y+24	; 0x18
    2b4e:	ce 01       	movw	r24, r28
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <vfprintf>
    2b56:	2f 81       	ldd	r18, Y+7	; 0x07
    2b58:	38 85       	ldd	r19, Y+8	; 0x08
    2b5a:	02 0f       	add	r16, r18
    2b5c:	13 1f       	adc	r17, r19
    2b5e:	f8 01       	movw	r30, r16
    2b60:	10 82       	st	Z, r1
    2b62:	2e 96       	adiw	r28, 0x0e	; 14
    2b64:	e4 e0       	ldi	r30, 0x04	; 4
    2b66:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x1c>

00002b6a <vfprintf>:
    2b6a:	ab e0       	ldi	r26, 0x0B	; 11
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	eb eb       	ldi	r30, 0xBB	; 187
    2b70:	f5 e1       	ldi	r31, 0x15	; 21
    2b72:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__prologue_saves__>
    2b76:	7c 01       	movw	r14, r24
    2b78:	3b 01       	movw	r6, r22
    2b7a:	8a 01       	movw	r16, r20
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	17 82       	std	Z+7, r1	; 0x07
    2b80:	16 82       	std	Z+6, r1	; 0x06
    2b82:	83 81       	ldd	r24, Z+3	; 0x03
    2b84:	81 ff       	sbrs	r24, 1
    2b86:	c8 c1       	rjmp	.+912    	; 0x2f18 <vfprintf+0x3ae>
    2b88:	ce 01       	movw	r24, r28
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	5c 01       	movw	r10, r24
    2b8e:	f7 01       	movw	r30, r14
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	f3 01       	movw	r30, r6
    2b94:	93 fd       	sbrc	r25, 3
    2b96:	85 91       	lpm	r24, Z+
    2b98:	93 ff       	sbrs	r25, 3
    2b9a:	81 91       	ld	r24, Z+
    2b9c:	3f 01       	movw	r6, r30
    2b9e:	88 23       	and	r24, r24
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <vfprintf+0x3a>
    2ba2:	53 c1       	rjmp	.+678    	; 0x2e4a <vfprintf+0x2e0>
    2ba4:	85 32       	cpi	r24, 0x25	; 37
    2ba6:	39 f4       	brne	.+14     	; 0x2bb6 <vfprintf+0x4c>
    2ba8:	93 fd       	sbrc	r25, 3
    2baa:	85 91       	lpm	r24, Z+
    2bac:	93 ff       	sbrs	r25, 3
    2bae:	81 91       	ld	r24, Z+
    2bb0:	3f 01       	movw	r6, r30
    2bb2:	85 32       	cpi	r24, 0x25	; 37
    2bb4:	29 f4       	brne	.+10     	; 0x2bc0 <vfprintf+0x56>
    2bb6:	b7 01       	movw	r22, r14
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <fputc>
    2bbe:	e7 cf       	rjmp	.-50     	; 0x2b8e <vfprintf+0x24>
    2bc0:	91 2c       	mov	r9, r1
    2bc2:	21 2c       	mov	r2, r1
    2bc4:	31 2c       	mov	r3, r1
    2bc6:	ff e1       	ldi	r31, 0x1F	; 31
    2bc8:	f3 15       	cp	r31, r3
    2bca:	38 f0       	brcs	.+14     	; 0x2bda <vfprintf+0x70>
    2bcc:	8b 32       	cpi	r24, 0x2B	; 43
    2bce:	11 f1       	breq	.+68     	; 0x2c14 <vfprintf+0xaa>
    2bd0:	90 f4       	brcc	.+36     	; 0x2bf6 <vfprintf+0x8c>
    2bd2:	80 32       	cpi	r24, 0x20	; 32
    2bd4:	09 f1       	breq	.+66     	; 0x2c18 <vfprintf+0xae>
    2bd6:	83 32       	cpi	r24, 0x23	; 35
    2bd8:	29 f1       	breq	.+74     	; 0x2c24 <vfprintf+0xba>
    2bda:	37 fc       	sbrc	r3, 7
    2bdc:	3c c0       	rjmp	.+120    	; 0x2c56 <vfprintf+0xec>
    2bde:	20 ed       	ldi	r18, 0xD0	; 208
    2be0:	28 0f       	add	r18, r24
    2be2:	2a 30       	cpi	r18, 0x0A	; 10
    2be4:	50 f5       	brcc	.+84     	; 0x2c3a <vfprintf+0xd0>
    2be6:	36 fe       	sbrs	r3, 6
    2be8:	20 c0       	rjmp	.+64     	; 0x2c2a <vfprintf+0xc0>
    2bea:	8a e0       	ldi	r24, 0x0A	; 10
    2bec:	98 9e       	mul	r9, r24
    2bee:	20 0d       	add	r18, r0
    2bf0:	11 24       	eor	r1, r1
    2bf2:	92 2e       	mov	r9, r18
    2bf4:	06 c0       	rjmp	.+12     	; 0x2c02 <vfprintf+0x98>
    2bf6:	8d 32       	cpi	r24, 0x2D	; 45
    2bf8:	91 f0       	breq	.+36     	; 0x2c1e <vfprintf+0xb4>
    2bfa:	80 33       	cpi	r24, 0x30	; 48
    2bfc:	71 f7       	brne	.-36     	; 0x2bda <vfprintf+0x70>
    2bfe:	68 94       	set
    2c00:	30 f8       	bld	r3, 0
    2c02:	f3 01       	movw	r30, r6
    2c04:	93 fd       	sbrc	r25, 3
    2c06:	85 91       	lpm	r24, Z+
    2c08:	93 ff       	sbrs	r25, 3
    2c0a:	81 91       	ld	r24, Z+
    2c0c:	3f 01       	movw	r6, r30
    2c0e:	81 11       	cpse	r24, r1
    2c10:	da cf       	rjmp	.-76     	; 0x2bc6 <vfprintf+0x5c>
    2c12:	21 c0       	rjmp	.+66     	; 0x2c56 <vfprintf+0xec>
    2c14:	68 94       	set
    2c16:	31 f8       	bld	r3, 1
    2c18:	68 94       	set
    2c1a:	32 f8       	bld	r3, 2
    2c1c:	f2 cf       	rjmp	.-28     	; 0x2c02 <vfprintf+0x98>
    2c1e:	68 94       	set
    2c20:	33 f8       	bld	r3, 3
    2c22:	ef cf       	rjmp	.-34     	; 0x2c02 <vfprintf+0x98>
    2c24:	68 94       	set
    2c26:	34 f8       	bld	r3, 4
    2c28:	ec cf       	rjmp	.-40     	; 0x2c02 <vfprintf+0x98>
    2c2a:	ea e0       	ldi	r30, 0x0A	; 10
    2c2c:	2e 9e       	mul	r2, r30
    2c2e:	20 0d       	add	r18, r0
    2c30:	11 24       	eor	r1, r1
    2c32:	22 2e       	mov	r2, r18
    2c34:	68 94       	set
    2c36:	35 f8       	bld	r3, 5
    2c38:	e4 cf       	rjmp	.-56     	; 0x2c02 <vfprintf+0x98>
    2c3a:	8e 32       	cpi	r24, 0x2E	; 46
    2c3c:	29 f4       	brne	.+10     	; 0x2c48 <vfprintf+0xde>
    2c3e:	36 fc       	sbrc	r3, 6
    2c40:	04 c1       	rjmp	.+520    	; 0x2e4a <vfprintf+0x2e0>
    2c42:	68 94       	set
    2c44:	36 f8       	bld	r3, 6
    2c46:	dd cf       	rjmp	.-70     	; 0x2c02 <vfprintf+0x98>
    2c48:	8c 36       	cpi	r24, 0x6C	; 108
    2c4a:	19 f4       	brne	.+6      	; 0x2c52 <vfprintf+0xe8>
    2c4c:	68 94       	set
    2c4e:	37 f8       	bld	r3, 7
    2c50:	d8 cf       	rjmp	.-80     	; 0x2c02 <vfprintf+0x98>
    2c52:	88 36       	cpi	r24, 0x68	; 104
    2c54:	b1 f2       	breq	.-84     	; 0x2c02 <vfprintf+0x98>
    2c56:	98 2f       	mov	r25, r24
    2c58:	9f 7d       	andi	r25, 0xDF	; 223
    2c5a:	95 54       	subi	r25, 0x45	; 69
    2c5c:	93 30       	cpi	r25, 0x03	; 3
    2c5e:	e0 f0       	brcs	.+56     	; 0x2c98 <vfprintf+0x12e>
    2c60:	83 36       	cpi	r24, 0x63	; 99
    2c62:	a1 f1       	breq	.+104    	; 0x2ccc <vfprintf+0x162>
    2c64:	83 37       	cpi	r24, 0x73	; 115
    2c66:	c1 f1       	breq	.+112    	; 0x2cd8 <vfprintf+0x16e>
    2c68:	83 35       	cpi	r24, 0x53	; 83
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <vfprintf+0x104>
    2c6c:	63 c0       	rjmp	.+198    	; 0x2d34 <vfprintf+0x1ca>
    2c6e:	28 01       	movw	r4, r16
    2c70:	f2 e0       	ldi	r31, 0x02	; 2
    2c72:	4f 0e       	add	r4, r31
    2c74:	51 1c       	adc	r5, r1
    2c76:	f8 01       	movw	r30, r16
    2c78:	c0 80       	ld	r12, Z
    2c7a:	d1 80       	ldd	r13, Z+1	; 0x01
    2c7c:	69 2d       	mov	r22, r9
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	36 fc       	sbrc	r3, 6
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <vfprintf+0x11e>
    2c84:	6f ef       	ldi	r22, 0xFF	; 255
    2c86:	7f ef       	ldi	r23, 0xFF	; 255
    2c88:	c6 01       	movw	r24, r12
    2c8a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <strnlen_P>
    2c8e:	4c 01       	movw	r8, r24
    2c90:	68 94       	set
    2c92:	37 f8       	bld	r3, 7
    2c94:	82 01       	movw	r16, r4
    2c96:	0a c0       	rjmp	.+20     	; 0x2cac <vfprintf+0x142>
    2c98:	0c 5f       	subi	r16, 0xFC	; 252
    2c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9c:	ff e3       	ldi	r31, 0x3F	; 63
    2c9e:	f9 83       	std	Y+1, r31	; 0x01
    2ca0:	88 24       	eor	r8, r8
    2ca2:	83 94       	inc	r8
    2ca4:	91 2c       	mov	r9, r1
    2ca6:	65 01       	movw	r12, r10
    2ca8:	e8 94       	clt
    2caa:	37 f8       	bld	r3, 7
    2cac:	33 fe       	sbrs	r3, 3
    2cae:	2d c0       	rjmp	.+90     	; 0x2d0a <vfprintf+0x1a0>
    2cb0:	52 2c       	mov	r5, r2
    2cb2:	81 14       	cp	r8, r1
    2cb4:	91 04       	cpc	r9, r1
    2cb6:	71 f5       	brne	.+92     	; 0x2d14 <vfprintf+0x1aa>
    2cb8:	55 20       	and	r5, r5
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <vfprintf+0x154>
    2cbc:	68 cf       	rjmp	.-304    	; 0x2b8e <vfprintf+0x24>
    2cbe:	b7 01       	movw	r22, r14
    2cc0:	80 e2       	ldi	r24, 0x20	; 32
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <fputc>
    2cc8:	5a 94       	dec	r5
    2cca:	f6 cf       	rjmp	.-20     	; 0x2cb8 <vfprintf+0x14e>
    2ccc:	f8 01       	movw	r30, r16
    2cce:	80 81       	ld	r24, Z
    2cd0:	89 83       	std	Y+1, r24	; 0x01
    2cd2:	0e 5f       	subi	r16, 0xFE	; 254
    2cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd6:	e4 cf       	rjmp	.-56     	; 0x2ca0 <vfprintf+0x136>
    2cd8:	28 01       	movw	r4, r16
    2cda:	f2 e0       	ldi	r31, 0x02	; 2
    2cdc:	4f 0e       	add	r4, r31
    2cde:	51 1c       	adc	r5, r1
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	c0 80       	ld	r12, Z
    2ce4:	d1 80       	ldd	r13, Z+1	; 0x01
    2ce6:	69 2d       	mov	r22, r9
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	36 fc       	sbrc	r3, 6
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <vfprintf+0x188>
    2cee:	6f ef       	ldi	r22, 0xFF	; 255
    2cf0:	7f ef       	ldi	r23, 0xFF	; 255
    2cf2:	c6 01       	movw	r24, r12
    2cf4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <strnlen>
    2cf8:	4c 01       	movw	r8, r24
    2cfa:	82 01       	movw	r16, r4
    2cfc:	d5 cf       	rjmp	.-86     	; 0x2ca8 <vfprintf+0x13e>
    2cfe:	b7 01       	movw	r22, r14
    2d00:	80 e2       	ldi	r24, 0x20	; 32
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <fputc>
    2d08:	2a 94       	dec	r2
    2d0a:	28 14       	cp	r2, r8
    2d0c:	19 04       	cpc	r1, r9
    2d0e:	09 f0       	breq	.+2      	; 0x2d12 <vfprintf+0x1a8>
    2d10:	b0 f7       	brcc	.-20     	; 0x2cfe <vfprintf+0x194>
    2d12:	ce cf       	rjmp	.-100    	; 0x2cb0 <vfprintf+0x146>
    2d14:	f6 01       	movw	r30, r12
    2d16:	37 fc       	sbrc	r3, 7
    2d18:	85 91       	lpm	r24, Z+
    2d1a:	37 fe       	sbrs	r3, 7
    2d1c:	81 91       	ld	r24, Z+
    2d1e:	6f 01       	movw	r12, r30
    2d20:	b7 01       	movw	r22, r14
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <fputc>
    2d28:	51 10       	cpse	r5, r1
    2d2a:	5a 94       	dec	r5
    2d2c:	f1 e0       	ldi	r31, 0x01	; 1
    2d2e:	8f 1a       	sub	r8, r31
    2d30:	91 08       	sbc	r9, r1
    2d32:	bf cf       	rjmp	.-130    	; 0x2cb2 <vfprintf+0x148>
    2d34:	84 36       	cpi	r24, 0x64	; 100
    2d36:	19 f0       	breq	.+6      	; 0x2d3e <vfprintf+0x1d4>
    2d38:	89 36       	cpi	r24, 0x69	; 105
    2d3a:	09 f0       	breq	.+2      	; 0x2d3e <vfprintf+0x1d4>
    2d3c:	77 c0       	rjmp	.+238    	; 0x2e2c <vfprintf+0x2c2>
    2d3e:	f8 01       	movw	r30, r16
    2d40:	37 fe       	sbrs	r3, 7
    2d42:	6b c0       	rjmp	.+214    	; 0x2e1a <vfprintf+0x2b0>
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	0c 5f       	subi	r16, 0xFC	; 252
    2d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d50:	f3 2d       	mov	r31, r3
    2d52:	ff 76       	andi	r31, 0x6F	; 111
    2d54:	3f 2e       	mov	r3, r31
    2d56:	97 ff       	sbrs	r25, 7
    2d58:	09 c0       	rjmp	.+18     	; 0x2d6c <vfprintf+0x202>
    2d5a:	90 95       	com	r25
    2d5c:	80 95       	com	r24
    2d5e:	70 95       	com	r23
    2d60:	61 95       	neg	r22
    2d62:	7f 4f       	sbci	r23, 0xFF	; 255
    2d64:	8f 4f       	sbci	r24, 0xFF	; 255
    2d66:	9f 4f       	sbci	r25, 0xFF	; 255
    2d68:	68 94       	set
    2d6a:	37 f8       	bld	r3, 7
    2d6c:	2a e0       	ldi	r18, 0x0A	; 10
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	a5 01       	movw	r20, r10
    2d72:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__ultoa_invert>
    2d76:	c8 2e       	mov	r12, r24
    2d78:	ca 18       	sub	r12, r10
    2d7a:	8c 2c       	mov	r8, r12
    2d7c:	43 2c       	mov	r4, r3
    2d7e:	36 fe       	sbrs	r3, 6
    2d80:	0c c0       	rjmp	.+24     	; 0x2d9a <vfprintf+0x230>
    2d82:	e8 94       	clt
    2d84:	40 f8       	bld	r4, 0
    2d86:	c9 14       	cp	r12, r9
    2d88:	40 f4       	brcc	.+16     	; 0x2d9a <vfprintf+0x230>
    2d8a:	34 fe       	sbrs	r3, 4
    2d8c:	05 c0       	rjmp	.+10     	; 0x2d98 <vfprintf+0x22e>
    2d8e:	32 fc       	sbrc	r3, 2
    2d90:	03 c0       	rjmp	.+6      	; 0x2d98 <vfprintf+0x22e>
    2d92:	f3 2d       	mov	r31, r3
    2d94:	fe 7e       	andi	r31, 0xEE	; 238
    2d96:	4f 2e       	mov	r4, r31
    2d98:	89 2c       	mov	r8, r9
    2d9a:	44 fe       	sbrs	r4, 4
    2d9c:	95 c0       	rjmp	.+298    	; 0x2ec8 <vfprintf+0x35e>
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ec 0d       	add	r30, r12
    2da2:	f1 1d       	adc	r31, r1
    2da4:	80 81       	ld	r24, Z
    2da6:	80 33       	cpi	r24, 0x30	; 48
    2da8:	09 f0       	breq	.+2      	; 0x2dac <vfprintf+0x242>
    2daa:	87 c0       	rjmp	.+270    	; 0x2eba <vfprintf+0x350>
    2dac:	24 2d       	mov	r18, r4
    2dae:	29 7e       	andi	r18, 0xE9	; 233
    2db0:	42 2e       	mov	r4, r18
    2db2:	84 2d       	mov	r24, r4
    2db4:	88 70       	andi	r24, 0x08	; 8
    2db6:	58 2e       	mov	r5, r24
    2db8:	43 fc       	sbrc	r4, 3
    2dba:	95 c0       	rjmp	.+298    	; 0x2ee6 <vfprintf+0x37c>
    2dbc:	40 fe       	sbrs	r4, 0
    2dbe:	8f c0       	rjmp	.+286    	; 0x2ede <vfprintf+0x374>
    2dc0:	9c 2c       	mov	r9, r12
    2dc2:	82 14       	cp	r8, r2
    2dc4:	18 f4       	brcc	.+6      	; 0x2dcc <vfprintf+0x262>
    2dc6:	2c 0c       	add	r2, r12
    2dc8:	92 2c       	mov	r9, r2
    2dca:	98 18       	sub	r9, r8
    2dcc:	44 fe       	sbrs	r4, 4
    2dce:	91 c0       	rjmp	.+290    	; 0x2ef2 <vfprintf+0x388>
    2dd0:	b7 01       	movw	r22, r14
    2dd2:	80 e3       	ldi	r24, 0x30	; 48
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <fputc>
    2dda:	42 fe       	sbrs	r4, 2
    2ddc:	09 c0       	rjmp	.+18     	; 0x2df0 <vfprintf+0x286>
    2dde:	88 e7       	ldi	r24, 0x78	; 120
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	41 fe       	sbrs	r4, 1
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <vfprintf+0x280>
    2de6:	88 e5       	ldi	r24, 0x58	; 88
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	b7 01       	movw	r22, r14
    2dec:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <fputc>
    2df0:	c9 14       	cp	r12, r9
    2df2:	08 f4       	brcc	.+2      	; 0x2df6 <vfprintf+0x28c>
    2df4:	8a c0       	rjmp	.+276    	; 0x2f0a <vfprintf+0x3a0>
    2df6:	ca 94       	dec	r12
    2df8:	d1 2c       	mov	r13, r1
    2dfa:	9f ef       	ldi	r25, 0xFF	; 255
    2dfc:	c9 1a       	sub	r12, r25
    2dfe:	d9 0a       	sbc	r13, r25
    2e00:	ca 0c       	add	r12, r10
    2e02:	db 1c       	adc	r13, r11
    2e04:	f6 01       	movw	r30, r12
    2e06:	82 91       	ld	r24, -Z
    2e08:	6f 01       	movw	r12, r30
    2e0a:	b7 01       	movw	r22, r14
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <fputc>
    2e12:	ac 14       	cp	r10, r12
    2e14:	bd 04       	cpc	r11, r13
    2e16:	b1 f7       	brne	.-20     	; 0x2e04 <vfprintf+0x29a>
    2e18:	4f cf       	rjmp	.-354    	; 0x2cb8 <vfprintf+0x14e>
    2e1a:	60 81       	ld	r22, Z
    2e1c:	71 81       	ldd	r23, Z+1	; 0x01
    2e1e:	07 2e       	mov	r0, r23
    2e20:	00 0c       	add	r0, r0
    2e22:	88 0b       	sbc	r24, r24
    2e24:	99 0b       	sbc	r25, r25
    2e26:	0e 5f       	subi	r16, 0xFE	; 254
    2e28:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2a:	92 cf       	rjmp	.-220    	; 0x2d50 <vfprintf+0x1e6>
    2e2c:	d3 2c       	mov	r13, r3
    2e2e:	e8 94       	clt
    2e30:	d4 f8       	bld	r13, 4
    2e32:	2a e0       	ldi	r18, 0x0A	; 10
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	85 37       	cpi	r24, 0x75	; 117
    2e38:	39 f1       	breq	.+78     	; 0x2e88 <vfprintf+0x31e>
    2e3a:	23 2d       	mov	r18, r3
    2e3c:	29 7f       	andi	r18, 0xF9	; 249
    2e3e:	d2 2e       	mov	r13, r18
    2e40:	8f 36       	cpi	r24, 0x6F	; 111
    2e42:	01 f1       	breq	.+64     	; 0x2e84 <vfprintf+0x31a>
    2e44:	48 f4       	brcc	.+18     	; 0x2e58 <vfprintf+0x2ee>
    2e46:	88 35       	cpi	r24, 0x58	; 88
    2e48:	a9 f0       	breq	.+42     	; 0x2e74 <vfprintf+0x30a>
    2e4a:	f7 01       	movw	r30, r14
    2e4c:	86 81       	ldd	r24, Z+6	; 0x06
    2e4e:	97 81       	ldd	r25, Z+7	; 0x07
    2e50:	2b 96       	adiw	r28, 0x0b	; 11
    2e52:	e2 e1       	ldi	r30, 0x12	; 18
    2e54:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__epilogue_restores__>
    2e58:	80 37       	cpi	r24, 0x70	; 112
    2e5a:	49 f0       	breq	.+18     	; 0x2e6e <vfprintf+0x304>
    2e5c:	88 37       	cpi	r24, 0x78	; 120
    2e5e:	a9 f7       	brne	.-22     	; 0x2e4a <vfprintf+0x2e0>
    2e60:	d4 fe       	sbrs	r13, 4
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <vfprintf+0x2fe>
    2e64:	68 94       	set
    2e66:	d2 f8       	bld	r13, 2
    2e68:	20 e1       	ldi	r18, 0x10	; 16
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	0d c0       	rjmp	.+26     	; 0x2e88 <vfprintf+0x31e>
    2e6e:	68 94       	set
    2e70:	d4 f8       	bld	r13, 4
    2e72:	f6 cf       	rjmp	.-20     	; 0x2e60 <vfprintf+0x2f6>
    2e74:	34 fe       	sbrs	r3, 4
    2e76:	03 c0       	rjmp	.+6      	; 0x2e7e <vfprintf+0x314>
    2e78:	82 2f       	mov	r24, r18
    2e7a:	86 60       	ori	r24, 0x06	; 6
    2e7c:	d8 2e       	mov	r13, r24
    2e7e:	20 e1       	ldi	r18, 0x10	; 16
    2e80:	32 e0       	ldi	r19, 0x02	; 2
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <vfprintf+0x31e>
    2e84:	28 e0       	ldi	r18, 0x08	; 8
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	f8 01       	movw	r30, r16
    2e8a:	d7 fe       	sbrs	r13, 7
    2e8c:	0f c0       	rjmp	.+30     	; 0x2eac <vfprintf+0x342>
    2e8e:	60 81       	ld	r22, Z
    2e90:	71 81       	ldd	r23, Z+1	; 0x01
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	93 81       	ldd	r25, Z+3	; 0x03
    2e96:	0c 5f       	subi	r16, 0xFC	; 252
    2e98:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9a:	a5 01       	movw	r20, r10
    2e9c:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__ultoa_invert>
    2ea0:	c8 2e       	mov	r12, r24
    2ea2:	ca 18       	sub	r12, r10
    2ea4:	3d 2c       	mov	r3, r13
    2ea6:	e8 94       	clt
    2ea8:	37 f8       	bld	r3, 7
    2eaa:	67 cf       	rjmp	.-306    	; 0x2d7a <vfprintf+0x210>
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	0e 5f       	subi	r16, 0xFE	; 254
    2eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb8:	f0 cf       	rjmp	.-32     	; 0x2e9a <vfprintf+0x330>
    2eba:	42 fc       	sbrc	r4, 2
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <vfprintf+0x358>
    2ebe:	83 94       	inc	r8
    2ec0:	78 cf       	rjmp	.-272    	; 0x2db2 <vfprintf+0x248>
    2ec2:	83 94       	inc	r8
    2ec4:	83 94       	inc	r8
    2ec6:	75 cf       	rjmp	.-278    	; 0x2db2 <vfprintf+0x248>
    2ec8:	84 2d       	mov	r24, r4
    2eca:	86 78       	andi	r24, 0x86	; 134
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <vfprintf+0x366>
    2ece:	71 cf       	rjmp	.-286    	; 0x2db2 <vfprintf+0x248>
    2ed0:	f6 cf       	rjmp	.-20     	; 0x2ebe <vfprintf+0x354>
    2ed2:	b7 01       	movw	r22, r14
    2ed4:	80 e2       	ldi	r24, 0x20	; 32
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <fputc>
    2edc:	83 94       	inc	r8
    2ede:	82 14       	cp	r8, r2
    2ee0:	c0 f3       	brcs	.-16     	; 0x2ed2 <vfprintf+0x368>
    2ee2:	51 2c       	mov	r5, r1
    2ee4:	73 cf       	rjmp	.-282    	; 0x2dcc <vfprintf+0x262>
    2ee6:	52 2c       	mov	r5, r2
    2ee8:	58 18       	sub	r5, r8
    2eea:	82 14       	cp	r8, r2
    2eec:	08 f4       	brcc	.+2      	; 0x2ef0 <vfprintf+0x386>
    2eee:	6e cf       	rjmp	.-292    	; 0x2dcc <vfprintf+0x262>
    2ef0:	f8 cf       	rjmp	.-16     	; 0x2ee2 <vfprintf+0x378>
    2ef2:	84 2d       	mov	r24, r4
    2ef4:	86 78       	andi	r24, 0x86	; 134
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <vfprintf+0x390>
    2ef8:	7b cf       	rjmp	.-266    	; 0x2df0 <vfprintf+0x286>
    2efa:	8b e2       	ldi	r24, 0x2B	; 43
    2efc:	41 fe       	sbrs	r4, 1
    2efe:	80 e2       	ldi	r24, 0x20	; 32
    2f00:	47 fc       	sbrc	r4, 7
    2f02:	8d e2       	ldi	r24, 0x2D	; 45
    2f04:	b7 01       	movw	r22, r14
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	71 cf       	rjmp	.-286    	; 0x2dec <vfprintf+0x282>
    2f0a:	b7 01       	movw	r22, r14
    2f0c:	80 e3       	ldi	r24, 0x30	; 48
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <fputc>
    2f14:	9a 94       	dec	r9
    2f16:	6c cf       	rjmp	.-296    	; 0x2df0 <vfprintf+0x286>
    2f18:	8f ef       	ldi	r24, 0xFF	; 255
    2f1a:	9f ef       	ldi	r25, 0xFF	; 255
    2f1c:	99 cf       	rjmp	.-206    	; 0x2e50 <vfprintf+0x2e6>

00002f1e <strnlen_P>:
    2f1e:	fc 01       	movw	r30, r24
    2f20:	05 90       	lpm	r0, Z+
    2f22:	61 50       	subi	r22, 0x01	; 1
    2f24:	70 40       	sbci	r23, 0x00	; 0
    2f26:	01 10       	cpse	r0, r1
    2f28:	d8 f7       	brcc	.-10     	; 0x2f20 <strnlen_P+0x2>
    2f2a:	80 95       	com	r24
    2f2c:	90 95       	com	r25
    2f2e:	8e 0f       	add	r24, r30
    2f30:	9f 1f       	adc	r25, r31
    2f32:	08 95       	ret

00002f34 <strnlen>:
    2f34:	fc 01       	movw	r30, r24
    2f36:	61 50       	subi	r22, 0x01	; 1
    2f38:	70 40       	sbci	r23, 0x00	; 0
    2f3a:	01 90       	ld	r0, Z+
    2f3c:	01 10       	cpse	r0, r1
    2f3e:	d8 f7       	brcc	.-10     	; 0x2f36 <strnlen+0x2>
    2f40:	80 95       	com	r24
    2f42:	90 95       	com	r25
    2f44:	8e 0f       	add	r24, r30
    2f46:	9f 1f       	adc	r25, r31
    2f48:	08 95       	ret

00002f4a <fputc>:
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	18 2f       	mov	r17, r24
    2f54:	09 2f       	mov	r16, r25
    2f56:	eb 01       	movw	r28, r22
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	81 fd       	sbrc	r24, 1
    2f5c:	09 c0       	rjmp	.+18     	; 0x2f70 <fputc+0x26>
    2f5e:	1f ef       	ldi	r17, 0xFF	; 255
    2f60:	0f ef       	ldi	r16, 0xFF	; 255
    2f62:	81 2f       	mov	r24, r17
    2f64:	90 2f       	mov	r25, r16
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	1f 91       	pop	r17
    2f6c:	0f 91       	pop	r16
    2f6e:	08 95       	ret
    2f70:	82 ff       	sbrs	r24, 2
    2f72:	14 c0       	rjmp	.+40     	; 0x2f9c <fputc+0x52>
    2f74:	2e 81       	ldd	r18, Y+6	; 0x06
    2f76:	3f 81       	ldd	r19, Y+7	; 0x07
    2f78:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7c:	28 17       	cp	r18, r24
    2f7e:	39 07       	cpc	r19, r25
    2f80:	3c f4       	brge	.+14     	; 0x2f90 <fputc+0x46>
    2f82:	e8 81       	ld	r30, Y
    2f84:	f9 81       	ldd	r31, Y+1	; 0x01
    2f86:	cf 01       	movw	r24, r30
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	99 83       	std	Y+1, r25	; 0x01
    2f8c:	88 83       	st	Y, r24
    2f8e:	10 83       	st	Z, r17
    2f90:	8e 81       	ldd	r24, Y+6	; 0x06
    2f92:	9f 81       	ldd	r25, Y+7	; 0x07
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	9f 83       	std	Y+7, r25	; 0x07
    2f98:	8e 83       	std	Y+6, r24	; 0x06
    2f9a:	e3 cf       	rjmp	.-58     	; 0x2f62 <fputc+0x18>
    2f9c:	e8 85       	ldd	r30, Y+8	; 0x08
    2f9e:	f9 85       	ldd	r31, Y+9	; 0x09
    2fa0:	81 2f       	mov	r24, r17
    2fa2:	09 95       	icall
    2fa4:	89 2b       	or	r24, r25
    2fa6:	a1 f3       	breq	.-24     	; 0x2f90 <fputc+0x46>
    2fa8:	da cf       	rjmp	.-76     	; 0x2f5e <fputc+0x14>

00002faa <__ultoa_invert>:
    2faa:	fa 01       	movw	r30, r20
    2fac:	aa 27       	eor	r26, r26
    2fae:	28 30       	cpi	r18, 0x08	; 8
    2fb0:	51 f1       	breq	.+84     	; 0x3006 <__ultoa_invert+0x5c>
    2fb2:	20 31       	cpi	r18, 0x10	; 16
    2fb4:	81 f1       	breq	.+96     	; 0x3016 <__ultoa_invert+0x6c>
    2fb6:	e8 94       	clt
    2fb8:	6f 93       	push	r22
    2fba:	6e 7f       	andi	r22, 0xFE	; 254
    2fbc:	6e 5f       	subi	r22, 0xFE	; 254
    2fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc0:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc4:	af 4f       	sbci	r26, 0xFF	; 255
    2fc6:	b1 e0       	ldi	r27, 0x01	; 1
    2fc8:	3e d0       	rcall	.+124    	; 0x3046 <__ultoa_invert+0x9c>
    2fca:	b4 e0       	ldi	r27, 0x04	; 4
    2fcc:	3c d0       	rcall	.+120    	; 0x3046 <__ultoa_invert+0x9c>
    2fce:	67 0f       	add	r22, r23
    2fd0:	78 1f       	adc	r23, r24
    2fd2:	89 1f       	adc	r24, r25
    2fd4:	9a 1f       	adc	r25, r26
    2fd6:	a1 1d       	adc	r26, r1
    2fd8:	68 0f       	add	r22, r24
    2fda:	79 1f       	adc	r23, r25
    2fdc:	8a 1f       	adc	r24, r26
    2fde:	91 1d       	adc	r25, r1
    2fe0:	a1 1d       	adc	r26, r1
    2fe2:	6a 0f       	add	r22, r26
    2fe4:	71 1d       	adc	r23, r1
    2fe6:	81 1d       	adc	r24, r1
    2fe8:	91 1d       	adc	r25, r1
    2fea:	a1 1d       	adc	r26, r1
    2fec:	20 d0       	rcall	.+64     	; 0x302e <__ultoa_invert+0x84>
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <__ultoa_invert+0x48>
    2ff0:	68 94       	set
    2ff2:	3f 91       	pop	r19
    2ff4:	2a e0       	ldi	r18, 0x0A	; 10
    2ff6:	26 9f       	mul	r18, r22
    2ff8:	11 24       	eor	r1, r1
    2ffa:	30 19       	sub	r19, r0
    2ffc:	30 5d       	subi	r19, 0xD0	; 208
    2ffe:	31 93       	st	Z+, r19
    3000:	de f6       	brtc	.-74     	; 0x2fb8 <__ultoa_invert+0xe>
    3002:	cf 01       	movw	r24, r30
    3004:	08 95       	ret
    3006:	46 2f       	mov	r20, r22
    3008:	47 70       	andi	r20, 0x07	; 7
    300a:	40 5d       	subi	r20, 0xD0	; 208
    300c:	41 93       	st	Z+, r20
    300e:	b3 e0       	ldi	r27, 0x03	; 3
    3010:	0f d0       	rcall	.+30     	; 0x3030 <__ultoa_invert+0x86>
    3012:	c9 f7       	brne	.-14     	; 0x3006 <__ultoa_invert+0x5c>
    3014:	f6 cf       	rjmp	.-20     	; 0x3002 <__ultoa_invert+0x58>
    3016:	46 2f       	mov	r20, r22
    3018:	4f 70       	andi	r20, 0x0F	; 15
    301a:	40 5d       	subi	r20, 0xD0	; 208
    301c:	4a 33       	cpi	r20, 0x3A	; 58
    301e:	18 f0       	brcs	.+6      	; 0x3026 <__ultoa_invert+0x7c>
    3020:	49 5d       	subi	r20, 0xD9	; 217
    3022:	31 fd       	sbrc	r19, 1
    3024:	40 52       	subi	r20, 0x20	; 32
    3026:	41 93       	st	Z+, r20
    3028:	02 d0       	rcall	.+4      	; 0x302e <__ultoa_invert+0x84>
    302a:	a9 f7       	brne	.-22     	; 0x3016 <__ultoa_invert+0x6c>
    302c:	ea cf       	rjmp	.-44     	; 0x3002 <__ultoa_invert+0x58>
    302e:	b4 e0       	ldi	r27, 0x04	; 4
    3030:	a6 95       	lsr	r26
    3032:	97 95       	ror	r25
    3034:	87 95       	ror	r24
    3036:	77 95       	ror	r23
    3038:	67 95       	ror	r22
    303a:	ba 95       	dec	r27
    303c:	c9 f7       	brne	.-14     	; 0x3030 <__ultoa_invert+0x86>
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	61 05       	cpc	r22, r1
    3042:	71 05       	cpc	r23, r1
    3044:	08 95       	ret
    3046:	9b 01       	movw	r18, r22
    3048:	ac 01       	movw	r20, r24
    304a:	0a 2e       	mov	r0, r26
    304c:	06 94       	lsr	r0
    304e:	57 95       	ror	r21
    3050:	47 95       	ror	r20
    3052:	37 95       	ror	r19
    3054:	27 95       	ror	r18
    3056:	ba 95       	dec	r27
    3058:	c9 f7       	brne	.-14     	; 0x304c <__ultoa_invert+0xa2>
    305a:	62 0f       	add	r22, r18
    305c:	73 1f       	adc	r23, r19
    305e:	84 1f       	adc	r24, r20
    3060:	95 1f       	adc	r25, r21
    3062:	a0 1d       	adc	r26, r0
    3064:	08 95       	ret

00003066 <__prologue_saves__>:
    3066:	2f 92       	push	r2
    3068:	3f 92       	push	r3
    306a:	4f 92       	push	r4
    306c:	5f 92       	push	r5
    306e:	6f 92       	push	r6
    3070:	7f 92       	push	r7
    3072:	8f 92       	push	r8
    3074:	9f 92       	push	r9
    3076:	af 92       	push	r10
    3078:	bf 92       	push	r11
    307a:	cf 92       	push	r12
    307c:	df 92       	push	r13
    307e:	ef 92       	push	r14
    3080:	ff 92       	push	r15
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	ca 1b       	sub	r28, r26
    3090:	db 0b       	sbc	r29, r27
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	09 94       	ijmp

0000309e <__epilogue_restores__>:
    309e:	2a 88       	ldd	r2, Y+18	; 0x12
    30a0:	39 88       	ldd	r3, Y+17	; 0x11
    30a2:	48 88       	ldd	r4, Y+16	; 0x10
    30a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    30a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    30a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    30aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    30b0:	b9 84       	ldd	r11, Y+9	; 0x09
    30b2:	c8 84       	ldd	r12, Y+8	; 0x08
    30b4:	df 80       	ldd	r13, Y+7	; 0x07
    30b6:	ee 80       	ldd	r14, Y+6	; 0x06
    30b8:	fd 80       	ldd	r15, Y+5	; 0x05
    30ba:	0c 81       	ldd	r16, Y+4	; 0x04
    30bc:	1b 81       	ldd	r17, Y+3	; 0x03
    30be:	aa 81       	ldd	r26, Y+2	; 0x02
    30c0:	b9 81       	ldd	r27, Y+1	; 0x01
    30c2:	ce 0f       	add	r28, r30
    30c4:	d1 1d       	adc	r29, r1
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	ed 01       	movw	r28, r26
    30d2:	08 95       	ret

000030d4 <_exit>:
    30d4:	f8 94       	cli

000030d6 <__stop_program>:
    30d6:	ff cf       	rjmp	.-2      	; 0x30d6 <__stop_program>
