
Driver_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000352a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000352a  000035be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000a6  008000a6  00003604  2**0
                  ALLOC
  3 .stab         000075d8  00000000  00000000  00003604  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006459  00000000  00000000  0000abdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00011035  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00011048  2**2
                  CONTENTS, READONLY
  7 .avr.prop     00000016  00000000  00000000  00011084  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000052e  00000000  00000000  0001109a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004e7  00000000  00000000  000115c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00011aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001af  00000000  00000000  00011ac9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_1>
       8:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_2>
       c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 18 16 	call	0x2c30	; 0x2c30 <main>
      8a:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	89 e2       	ldi	r24, 0x29	; 41
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	29 81       	ldd	r18, Y+1	; 0x01
      a4:	fc 01       	movw	r30, r24
      a6:	20 83       	st	Z, r18
      a8:	80 e4       	ldi	r24, 0x40	; 64
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	fc 01       	movw	r30, r24
      ae:	20 81       	ld	r18, Z
      b0:	80 e4       	ldi	r24, 0x40	; 64
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	2f 7b       	andi	r18, 0xBF	; 191
      b6:	fc 01       	movw	r30, r24
      b8:	20 83       	st	Z, r18
      ba:	80 e4       	ldi	r24, 0x40	; 64
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	fc 01       	movw	r30, r24
      c0:	20 81       	ld	r18, Z
      c2:	80 e4       	ldi	r24, 0x40	; 64
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	27 7f       	andi	r18, 0xF7	; 247
      c8:	fc 01       	movw	r30, r24
      ca:	20 83       	st	Z, r18
      cc:	80 e4       	ldi	r24, 0x40	; 64
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	fc 01       	movw	r30, r24
      d2:	20 81       	ld	r18, Z
      d4:	80 e4       	ldi	r24, 0x40	; 64
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	22 60       	ori	r18, 0x02	; 2
      da:	fc 01       	movw	r30, r24
      dc:	20 83       	st	Z, r18
      de:	80 e4       	ldi	r24, 0x40	; 64
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	fc 01       	movw	r30, r24
      e4:	20 81       	ld	r18, Z
      e6:	80 e4       	ldi	r24, 0x40	; 64
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	24 60       	ori	r18, 0x04	; 4
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
      f0:	80 e4       	ldi	r24, 0x40	; 64
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	fc 01       	movw	r30, r24
      f6:	20 81       	ld	r18, Z
      f8:	80 e4       	ldi	r24, 0x40	; 64
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	2b 7f       	andi	r18, 0xFB	; 251
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
     102:	8a e2       	ldi	r24, 0x2A	; 42
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	fc 01       	movw	r30, r24
     108:	20 81       	ld	r18, Z
     10a:	8a e2       	ldi	r24, 0x2A	; 42
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	28 60       	ori	r18, 0x08	; 8
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
     114:	8a e2       	ldi	r24, 0x2A	; 42
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	fc 01       	movw	r30, r24
     11a:	20 81       	ld	r18, Z
     11c:	8a e2       	ldi	r24, 0x2A	; 42
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	20 61       	ori	r18, 0x10	; 16
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	00 00       	nop
     128:	0f 90       	pop	r0
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <UART_sendData>:
	 SET_BIT(UCSRB,TXEN);
	 SET_BIT(UCSRB,RXEN);
}

void UART_sendData(u16 copyData)
{
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	00 d0       	rcall	.+0      	; 0x136 <UART_sendData+0x6>
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	9a 83       	std	Y+2, r25	; 0x02
     13c:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UDRE) == 0);
     13e:	00 00       	nop
     140:	8b e2       	ldi	r24, 0x2B	; 43
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	fc 01       	movw	r30, r24
     146:	80 81       	ld	r24, Z
     148:	82 95       	swap	r24
     14a:	86 95       	lsr	r24
     14c:	87 70       	andi	r24, 0x07	; 7
     14e:	88 2f       	mov	r24, r24
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	81 70       	andi	r24, 0x01	; 1
     154:	99 27       	eor	r25, r25
     156:	89 2b       	or	r24, r25
     158:	99 f3       	breq	.-26     	; 0x140 <UART_sendData+0x10>
	UDR = copyData;
     15a:	8c e2       	ldi	r24, 0x2C	; 44
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	29 81       	ldd	r18, Y+1	; 0x01
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18
}
     164:	00 00       	nop
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <UART_reciveData>:

u8 UART_reciveData(u8 *copyVar)
{
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	00 d0       	rcall	.+0      	; 0x176 <UART_reciveData+0x6>
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	9a 83       	std	Y+2, r25	; 0x02
     17c:	89 83       	std	Y+1, r24	; 0x01
//	while(GET_BIT(UCSRA,RXC) == 0);
	if(GET_BIT(UCSRA,RXC))
     17e:	8b e2       	ldi	r24, 0x2B	; 43
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	fc 01       	movw	r30, r24
     184:	80 81       	ld	r24, Z
     186:	88 1f       	adc	r24, r24
     188:	88 27       	eor	r24, r24
     18a:	88 1f       	adc	r24, r24
     18c:	88 2f       	mov	r24, r24
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	81 70       	andi	r24, 0x01	; 1
     192:	99 27       	eor	r25, r25
     194:	89 2b       	or	r24, r25
     196:	51 f0       	breq	.+20     	; 0x1ac <UART_reciveData+0x3c>
	{
		*copyVar = UDR;
     198:	8c e2       	ldi	r24, 0x2C	; 44
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	20 81       	ld	r18, Z
     1a0:	89 81       	ldd	r24, Y+1	; 0x01
     1a2:	9a 81       	ldd	r25, Y+2	; 0x02
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 83       	st	Z, r18
		return 1;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <UART_reciveData+0x3e>
	}
	else
	{
		return 0;
     1ac:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <TIMER0_Init>:
/************ INCLUDES ***********/
#include "TIMER0_Init.h"

/************ FUNCTIONS DIFEN ***********/
void TIMER0_Init(void)
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
#if TIMER_MODE_WAVE == NORMAL_MODE
	CLR_BIT(TCCR0,WGM00);
     1c0:	83 e5       	ldi	r24, 0x53	; 83
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	20 81       	ld	r18, Z
     1c8:	83 e5       	ldi	r24, 0x53	; 83
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	2f 7b       	andi	r18, 0xBF	; 191
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
	CLR_BIT(TCCR0,WGM01);
     1d2:	83 e5       	ldi	r24, 0x53	; 83
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 81       	ld	r18, Z
     1da:	83 e5       	ldi	r24, 0x53	; 83
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	27 7f       	andi	r18, 0xF7	; 247
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
#elif TIMER_MODE_WAVE == FAST_PWM_MODE
	SET_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
	TCCR0 |= TIMER_COMP_OUTPUT_MODE;
#endif
}
     1e4:	00 00       	nop
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <TIMER0_Start>:


void TIMER0_Start(void)
{
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= TIMER_SELECT_ENABLE;
     1f4:	83 e5       	ldi	r24, 0x53	; 83
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	fc 01       	movw	r30, r24
     1fa:	20 81       	ld	r18, Z
     1fc:	83 e5       	ldi	r24, 0x53	; 83
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	22 60       	ori	r18, 0x02	; 2
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
}
     206:	00 00       	nop
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <TIMER0_Stop>:

void TIMER0_Stop(void)
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLOCK_STOP;
     216:	83 e5       	ldi	r24, 0x53	; 83
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	fc 01       	movw	r30, r24
     21c:	20 81       	ld	r18, Z
     21e:	83 e5       	ldi	r24, 0x53	; 83
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	28 7f       	andi	r18, 0xF8	; 248
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18
}
     228:	00 00       	nop
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <TIMER0_writeOVR>:

void TIMER0_writeOVR(u8 Copy_Start_Value)
{
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	1f 92       	push	r1
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_Start_Value;
     23c:	82 e5       	ldi	r24, 0x52	; 82
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	29 81       	ldd	r18, Y+1	; 0x01
     242:	fc 01       	movw	r30, r24
     244:	20 83       	st	Z, r18
}
     246:	00 00       	nop
     248:	0f 90       	pop	r0
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <TIMER0_writeCOM>:

void TIMER0_writeCOM(u8 Copy_Start_Value)
{
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	1f 92       	push	r1
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_Start_Value;
     25c:	8c e5       	ldi	r24, 0x5C	; 92
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
}
     266:	00 00       	nop
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <TIMER0_ovrInterruptEnable>:

void TIMER0_ovrInterruptEnable(void)
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_GIE);
     278:	8f e5       	ldi	r24, 0x5F	; 95
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	fc 01       	movw	r30, r24
     27e:	20 81       	ld	r18, Z
     280:	8f e5       	ldi	r24, 0x5F	; 95
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	20 68       	ori	r18, 0x80	; 128
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
	SET_BIT(TIMSK,TOIE0);
     28a:	89 e5       	ldi	r24, 0x59	; 89
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	fc 01       	movw	r30, r24
     290:	20 81       	ld	r18, Z
     292:	89 e5       	ldi	r24, 0x59	; 89
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	21 60       	ori	r18, 0x01	; 1
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
}
     29c:	00 00       	nop
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <TIMER0_ovrInterruptDisable>:

void TIMER0_ovrInterruptDisable(void)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
     2ac:	89 e5       	ldi	r24, 0x59	; 89
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 81       	ld	r18, Z
     2b4:	89 e5       	ldi	r24, 0x59	; 89
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	2e 7f       	andi	r18, 0xFE	; 254
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 83       	st	Z, r18
}
     2be:	00 00       	nop
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <TIMER0_compInterruptEnable>:

void TIMER0_compInterruptEnable(void)
{
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_GIE);
     2ce:	8f e5       	ldi	r24, 0x5F	; 95
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 81       	ld	r18, Z
     2d6:	8f e5       	ldi	r24, 0x5F	; 95
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	20 68       	ori	r18, 0x80	; 128
     2dc:	fc 01       	movw	r30, r24
     2de:	20 83       	st	Z, r18
	SET_BIT(TIMSK,OCIE0);
     2e0:	89 e5       	ldi	r24, 0x59	; 89
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 81       	ld	r18, Z
     2e8:	89 e5       	ldi	r24, 0x59	; 89
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	22 60       	ori	r18, 0x02	; 2
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
}
     2f2:	00 00       	nop
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <TIMER0_comInterruptDisable>:

void TIMER0_comInterruptDisable(void)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
     302:	89 e5       	ldi	r24, 0x59	; 89
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	fc 01       	movw	r30, r24
     308:	20 81       	ld	r18, Z
     30a:	89 e5       	ldi	r24, 0x59	; 89
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	2d 7f       	andi	r18, 0xFD	; 253
     310:	fc 01       	movw	r30, r24
     312:	20 83       	st	Z, r18
}
     314:	00 00       	nop
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <__vector_1>:
#include "EX_Init.h"
#include "../DIO/dio_Init.h"

/* -------------------- Section : ISR FUNCTIONS DEFINITIONS -------------------- */
ISR(INT0_VECTR)
{
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	2f 93       	push	r18
     328:	3f 93       	push	r19
     32a:	4f 93       	push	r20
     32c:	5f 93       	push	r21
     32e:	6f 93       	push	r22
     330:	7f 93       	push	r23
     332:	8f 93       	push	r24
     334:	9f 93       	push	r25
     336:	af 93       	push	r26
     338:	bf 93       	push	r27
     33a:	ef 93       	push	r30
     33c:	ff 93       	push	r31
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
	ISR_FUN_INT0();
     346:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <ISR_FUN_INT0>
     34a:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <ISR_FUN_INT0+0x1>
     34e:	fc 01       	movw	r30, r24
     350:	09 95       	icall
}
     352:	00 00       	nop
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	bf 91       	pop	r27
     35e:	af 91       	pop	r26
     360:	9f 91       	pop	r25
     362:	8f 91       	pop	r24
     364:	7f 91       	pop	r23
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <__vector_2>:
ISR(INT1_VECTR)
{
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	2f 93       	push	r18
     386:	3f 93       	push	r19
     388:	4f 93       	push	r20
     38a:	5f 93       	push	r21
     38c:	6f 93       	push	r22
     38e:	7f 93       	push	r23
     390:	8f 93       	push	r24
     392:	9f 93       	push	r25
     394:	af 93       	push	r26
     396:	bf 93       	push	r27
     398:	ef 93       	push	r30
     39a:	ff 93       	push	r31
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
	ISR_FUN_INT1();
     3a4:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <ISR_FUN_INT1>
     3a8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <ISR_FUN_INT1+0x1>
     3ac:	fc 01       	movw	r30, r24
     3ae:	09 95       	icall
}
     3b0:	00 00       	nop
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	ff 91       	pop	r31
     3b8:	ef 91       	pop	r30
     3ba:	bf 91       	pop	r27
     3bc:	af 91       	pop	r26
     3be:	9f 91       	pop	r25
     3c0:	8f 91       	pop	r24
     3c2:	7f 91       	pop	r23
     3c4:	6f 91       	pop	r22
     3c6:	5f 91       	pop	r21
     3c8:	4f 91       	pop	r20
     3ca:	3f 91       	pop	r19
     3cc:	2f 91       	pop	r18
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <__vector_3>:
ISR(INT2_VECTR)
{
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	2f 93       	push	r18
     3e4:	3f 93       	push	r19
     3e6:	4f 93       	push	r20
     3e8:	5f 93       	push	r21
     3ea:	6f 93       	push	r22
     3ec:	7f 93       	push	r23
     3ee:	8f 93       	push	r24
     3f0:	9f 93       	push	r25
     3f2:	af 93       	push	r26
     3f4:	bf 93       	push	r27
     3f6:	ef 93       	push	r30
     3f8:	ff 93       	push	r31
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
	ISR_FUN_INT2();
     402:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     406:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__data_end+0x1>
     40a:	fc 01       	movw	r30, r24
     40c:	09 95       	icall
}
     40e:	00 00       	nop
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	ff 91       	pop	r31
     416:	ef 91       	pop	r30
     418:	bf 91       	pop	r27
     41a:	af 91       	pop	r26
     41c:	9f 91       	pop	r25
     41e:	8f 91       	pop	r24
     420:	7f 91       	pop	r23
     422:	6f 91       	pop	r22
     424:	5f 91       	pop	r21
     426:	4f 91       	pop	r20
     428:	3f 91       	pop	r19
     42a:	2f 91       	pop	r18
     42c:	0f 90       	pop	r0
     42e:	0f be       	out	0x3f, r0	; 63
     430:	0f 90       	pop	r0
     432:	1f 90       	pop	r1
     434:	18 95       	reti

00000436 <EXI_Init>:
  * @brief  : Initialization External Interrupt
  * @param  : CopyNumEXI
  * @param  : CopyDirIn
  */
void EXI_Init(EX_Interrupt_Num CopyNumEXI , EX_Interrupt_Dir CopyDirIn)
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	00 d0       	rcall	.+0      	; 0x43c <EXI_Init+0x6>
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	89 83       	std	Y+1, r24	; 0x01
     442:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyNumEXI)
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	88 2f       	mov	r24, r24
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	91 05       	cpc	r25, r1
     44e:	01 f1       	breq	.+64     	; 0x490 <__stack+0x31>
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	91 05       	cpc	r25, r1
     454:	b9 f1       	breq	.+110    	; 0x4c4 <__stack+0x65>
     456:	89 2b       	or	r24, r25
     458:	09 f0       	breq	.+2      	; 0x45c <EXI_Init+0x26>
			SET_BIT(GICR , GICR_INT2);	// Enable Local Interrupt Register of INT2
			EX_ControlIN2(CopyDirIn);
			Dio_setPinDir(PortB_p3,Direction_Pin_Input);
			break;
	}
}
     45a:	4e c0       	rjmp	.+156    	; 0x4f8 <__stack+0x99>
void EXI_Init(EX_Interrupt_Num CopyNumEXI , EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyNumEXI)
	{
		case IN0:
			SET_BIT(SREG,SREG_GIE);		// Enable General Interrupt Register
     45c:	8f e5       	ldi	r24, 0x5F	; 95
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	20 81       	ld	r18, Z
     464:	8f e5       	ldi	r24, 0x5F	; 95
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	20 68       	ori	r18, 0x80	; 128
     46a:	fc 01       	movw	r30, r24
     46c:	20 83       	st	Z, r18
			SET_BIT(GICR , GICR_INT0);	// Enable Local Interrupt Register of INT0
     46e:	8b e5       	ldi	r24, 0x5B	; 91
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	fc 01       	movw	r30, r24
     474:	20 81       	ld	r18, Z
     476:	8b e5       	ldi	r24, 0x5B	; 91
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	20 64       	ori	r18, 0x40	; 64
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
			EX_ControlIN0(CopyDirIn);
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	0e 94 82 02 	call	0x504	; 0x504 <EX_ControlIN0>
			Dio_setPinDir(PortD_p2,Direction_Pin_Input);
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	8a e1       	ldi	r24, 0x1A	; 26
     48a:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
			break;
     48e:	34 c0       	rjmp	.+104    	; 0x4f8 <__stack+0x99>
		case IN1:
			SET_BIT(SREG,SREG_GIE);		// Enable General Interrupt Register
     490:	8f e5       	ldi	r24, 0x5F	; 95
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	fc 01       	movw	r30, r24
     496:	20 81       	ld	r18, Z
     498:	8f e5       	ldi	r24, 0x5F	; 95
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	20 68       	ori	r18, 0x80	; 128
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
			SET_BIT(GICR , GICR_INT1);	// Enable Local Interrupt Register of INT1
     4a2:	8b e5       	ldi	r24, 0x5B	; 91
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 81       	ld	r18, Z
     4aa:	8b e5       	ldi	r24, 0x5B	; 91
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	20 68       	ori	r18, 0x80	; 128
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
			EX_ControlIN1(CopyDirIn);
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <EX_ControlIN1>
			Dio_setPinDir(PortD_p3,Direction_Pin_Input);
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	8b e1       	ldi	r24, 0x1B	; 27
     4be:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
			break;
     4c2:	1a c0       	rjmp	.+52     	; 0x4f8 <__stack+0x99>
		case IN2:
			SET_BIT(SREG,SREG_GIE);		// Enable General Interrupt Register
     4c4:	8f e5       	ldi	r24, 0x5F	; 95
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 81       	ld	r18, Z
     4cc:	8f e5       	ldi	r24, 0x5F	; 95
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	20 68       	ori	r18, 0x80	; 128
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
			SET_BIT(GICR , GICR_INT2);	// Enable Local Interrupt Register of INT2
     4d6:	8b e5       	ldi	r24, 0x5B	; 91
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	fc 01       	movw	r30, r24
     4dc:	20 81       	ld	r18, Z
     4de:	8b e5       	ldi	r24, 0x5B	; 91
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	20 62       	ori	r18, 0x20	; 32
     4e4:	fc 01       	movw	r30, r24
     4e6:	20 83       	st	Z, r18
			EX_ControlIN2(CopyDirIn);
     4e8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <EX_ControlIN2>
			Dio_setPinDir(PortB_p3,Direction_Pin_Input);
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	8b e0       	ldi	r24, 0x0B	; 11
     4f2:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
			break;
     4f6:	00 00       	nop
	}
}
     4f8:	00 00       	nop
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <EX_ControlIN0>:
/**
  * @brief  : Static Function Control Direction of External Interrupt {0}
  * @param  : CopyDirIn
  */
static void EX_ControlIN0(EX_Interrupt_Dir CopyDirIn)
{
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	1f 92       	push	r1
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	89 83       	std	Y+1, r24	; 0x01
	switch (CopyDirIn)
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	88 2f       	mov	r24, r24
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	91 05       	cpc	r25, r1
     51a:	f9 f0       	breq	.+62     	; 0x55a <EX_ControlIN0+0x56>
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	91 05       	cpc	r25, r1
     520:	1c f4       	brge	.+6      	; 0x528 <EX_ControlIN0+0x24>
     522:	89 2b       	or	r24, r25
     524:	39 f0       	breq	.+14     	; 0x534 <EX_ControlIN0+0x30>
		case RISING_AGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
			SET_BIT(MCUCR , MCUCR_ISC10);
			break;
	}
}
     526:	52 c0       	rjmp	.+164    	; 0x5cc <EX_ControlIN0+0xc8>
  * @brief  : Static Function Control Direction of External Interrupt {0}
  * @param  : CopyDirIn
  */
static void EX_ControlIN0(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn)
     528:	82 30       	cpi	r24, 0x02	; 2
     52a:	91 05       	cpc	r25, r1
     52c:	49 f1       	breq	.+82     	; 0x580 <EX_ControlIN0+0x7c>
     52e:	03 97       	sbiw	r24, 0x03	; 3
     530:	d1 f1       	breq	.+116    	; 0x5a6 <EX_ControlIN0+0xa2>
		case RISING_AGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
			SET_BIT(MCUCR , MCUCR_ISC10);
			break;
	}
}
     532:	4c c0       	rjmp	.+152    	; 0x5cc <EX_ControlIN0+0xc8>
static void EX_ControlIN0(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn)
	{
		case LOW_LEVEL:
			CLR_BIT(MCUCR , MCUCR_ISC11);
     534:	85 e5       	ldi	r24, 0x55	; 85
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	fc 01       	movw	r30, r24
     53a:	20 81       	ld	r18, Z
     53c:	85 e5       	ldi	r24, 0x55	; 85
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	27 7f       	andi	r18, 0xF7	; 247
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
			CLR_BIT(MCUCR , MCUCR_ISC10);
     546:	85 e5       	ldi	r24, 0x55	; 85
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	20 81       	ld	r18, Z
     54e:	85 e5       	ldi	r24, 0x55	; 85
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	2b 7f       	andi	r18, 0xFB	; 251
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
			break;
     558:	39 c0       	rjmp	.+114    	; 0x5cc <EX_ControlIN0+0xc8>
		case ANY_LOGIC:
			CLR_BIT(MCUCR , MCUCR_ISC11);
     55a:	85 e5       	ldi	r24, 0x55	; 85
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	fc 01       	movw	r30, r24
     560:	20 81       	ld	r18, Z
     562:	85 e5       	ldi	r24, 0x55	; 85
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	27 7f       	andi	r18, 0xF7	; 247
     568:	fc 01       	movw	r30, r24
     56a:	20 83       	st	Z, r18
			SET_BIT(MCUCR , MCUCR_ISC10);
     56c:	85 e5       	ldi	r24, 0x55	; 85
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	fc 01       	movw	r30, r24
     572:	20 81       	ld	r18, Z
     574:	85 e5       	ldi	r24, 0x55	; 85
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	24 60       	ori	r18, 0x04	; 4
     57a:	fc 01       	movw	r30, r24
     57c:	20 83       	st	Z, r18
			break;
     57e:	26 c0       	rjmp	.+76     	; 0x5cc <EX_ControlIN0+0xc8>
		case FALLING_EDGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
     580:	85 e5       	ldi	r24, 0x55	; 85
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	fc 01       	movw	r30, r24
     586:	20 81       	ld	r18, Z
     588:	85 e5       	ldi	r24, 0x55	; 85
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	28 60       	ori	r18, 0x08	; 8
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
			CLR_BIT(MCUCR , MCUCR_ISC10);
     592:	85 e5       	ldi	r24, 0x55	; 85
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	fc 01       	movw	r30, r24
     598:	20 81       	ld	r18, Z
     59a:	85 e5       	ldi	r24, 0x55	; 85
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	2b 7f       	andi	r18, 0xFB	; 251
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
			break;
     5a4:	13 c0       	rjmp	.+38     	; 0x5cc <EX_ControlIN0+0xc8>
		case RISING_AGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
     5a6:	85 e5       	ldi	r24, 0x55	; 85
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 81       	ld	r18, Z
     5ae:	85 e5       	ldi	r24, 0x55	; 85
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	28 60       	ori	r18, 0x08	; 8
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18
			SET_BIT(MCUCR , MCUCR_ISC10);
     5b8:	85 e5       	ldi	r24, 0x55	; 85
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	fc 01       	movw	r30, r24
     5be:	20 81       	ld	r18, Z
     5c0:	85 e5       	ldi	r24, 0x55	; 85
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	24 60       	ori	r18, 0x04	; 4
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 83       	st	Z, r18
			break;
     5ca:	00 00       	nop
	}
}
     5cc:	00 00       	nop
     5ce:	0f 90       	pop	r0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <EX_ControlIN1>:
/**
  * @brief  : Static Function Control Direction of External Interrupt {1}
  * @param  : CopyDirIn
  */
static void EX_ControlIN1(EX_Interrupt_Dir CopyDirIn)
{
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	1f 92       	push	r1
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	89 83       	std	Y+1, r24	; 0x01
	switch (CopyDirIn)
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	88 2f       	mov	r24, r24
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	91 05       	cpc	r25, r1
     5ec:	f9 f0       	breq	.+62     	; 0x62c <EX_ControlIN1+0x56>
     5ee:	82 30       	cpi	r24, 0x02	; 2
     5f0:	91 05       	cpc	r25, r1
     5f2:	1c f4       	brge	.+6      	; 0x5fa <EX_ControlIN1+0x24>
     5f4:	89 2b       	or	r24, r25
     5f6:	39 f0       	breq	.+14     	; 0x606 <EX_ControlIN1+0x30>
			case RISING_AGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
				SET_BIT(MCUCR , MCUCR_ISC00);
				break;
		}
}
     5f8:	52 c0       	rjmp	.+164    	; 0x69e <EX_ControlIN1+0xc8>
  * @brief  : Static Function Control Direction of External Interrupt {1}
  * @param  : CopyDirIn
  */
static void EX_ControlIN1(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn)
     5fa:	82 30       	cpi	r24, 0x02	; 2
     5fc:	91 05       	cpc	r25, r1
     5fe:	49 f1       	breq	.+82     	; 0x652 <EX_ControlIN1+0x7c>
     600:	03 97       	sbiw	r24, 0x03	; 3
     602:	d1 f1       	breq	.+116    	; 0x678 <EX_ControlIN1+0xa2>
			case RISING_AGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
				SET_BIT(MCUCR , MCUCR_ISC00);
				break;
		}
}
     604:	4c c0       	rjmp	.+152    	; 0x69e <EX_ControlIN1+0xc8>
static void EX_ControlIN1(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn)
	{
			case LOW_LEVEL:
				CLR_BIT(MCUCR , MCUCR_ISC01);
     606:	85 e5       	ldi	r24, 0x55	; 85
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	20 81       	ld	r18, Z
     60e:	85 e5       	ldi	r24, 0x55	; 85
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	2d 7f       	andi	r18, 0xFD	; 253
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
				CLR_BIT(MCUCR , MCUCR_ISC00);
     618:	85 e5       	ldi	r24, 0x55	; 85
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fc 01       	movw	r30, r24
     61e:	20 81       	ld	r18, Z
     620:	85 e5       	ldi	r24, 0x55	; 85
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	2e 7f       	andi	r18, 0xFE	; 254
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
				break;
     62a:	39 c0       	rjmp	.+114    	; 0x69e <EX_ControlIN1+0xc8>
			case ANY_LOGIC:
				CLR_BIT(MCUCR , MCUCR_ISC01);
     62c:	85 e5       	ldi	r24, 0x55	; 85
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	fc 01       	movw	r30, r24
     632:	20 81       	ld	r18, Z
     634:	85 e5       	ldi	r24, 0x55	; 85
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	2d 7f       	andi	r18, 0xFD	; 253
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
				SET_BIT(MCUCR , MCUCR_ISC00);
     63e:	85 e5       	ldi	r24, 0x55	; 85
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	fc 01       	movw	r30, r24
     644:	20 81       	ld	r18, Z
     646:	85 e5       	ldi	r24, 0x55	; 85
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	21 60       	ori	r18, 0x01	; 1
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
				break;
     650:	26 c0       	rjmp	.+76     	; 0x69e <EX_ControlIN1+0xc8>
			case FALLING_EDGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
     652:	85 e5       	ldi	r24, 0x55	; 85
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	fc 01       	movw	r30, r24
     658:	20 81       	ld	r18, Z
     65a:	85 e5       	ldi	r24, 0x55	; 85
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	22 60       	ori	r18, 0x02	; 2
     660:	fc 01       	movw	r30, r24
     662:	20 83       	st	Z, r18
				CLR_BIT(MCUCR , MCUCR_ISC00);
     664:	85 e5       	ldi	r24, 0x55	; 85
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	fc 01       	movw	r30, r24
     66a:	20 81       	ld	r18, Z
     66c:	85 e5       	ldi	r24, 0x55	; 85
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2e 7f       	andi	r18, 0xFE	; 254
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
				break;
     676:	13 c0       	rjmp	.+38     	; 0x69e <EX_ControlIN1+0xc8>
			case RISING_AGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
     678:	85 e5       	ldi	r24, 0x55	; 85
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	fc 01       	movw	r30, r24
     67e:	20 81       	ld	r18, Z
     680:	85 e5       	ldi	r24, 0x55	; 85
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	22 60       	ori	r18, 0x02	; 2
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
				SET_BIT(MCUCR , MCUCR_ISC00);
     68a:	85 e5       	ldi	r24, 0x55	; 85
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	fc 01       	movw	r30, r24
     690:	20 81       	ld	r18, Z
     692:	85 e5       	ldi	r24, 0x55	; 85
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	21 60       	ori	r18, 0x01	; 1
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
				break;
     69c:	00 00       	nop
		}
}
     69e:	00 00       	nop
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <EX_ControlIN2>:
/**
  * @brief  : Static Function Control Direction of External Interrupt {2}
  * @param  : CopyDirIn
  */
static void EX_ControlIN2(EX_Interrupt_Dir CopyDirIn)
{
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	1f 92       	push	r1
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	89 83       	std	Y+1, r24	; 0x01
	switch (CopyDirIn)
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	91 05       	cpc	r25, r1
     6be:	19 f0       	breq	.+6      	; 0x6c6 <EX_ControlIN2+0x1e>
     6c0:	03 97       	sbiw	r24, 0x03	; 3
     6c2:	59 f0       	breq	.+22     	; 0x6da <EX_ControlIN2+0x32>
     6c4:	14 c0       	rjmp	.+40     	; 0x6ee <EX_ControlIN2+0x46>
	{
			case FALLING_EDGE:
				CLR_BIT(MCUCSR , MCUCSR_ISC2);
     6c6:	84 e5       	ldi	r24, 0x54	; 84
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 81       	ld	r18, Z
     6ce:	84 e5       	ldi	r24, 0x54	; 84
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	2f 7b       	andi	r18, 0xBF	; 191
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
				break;
     6d8:	14 c0       	rjmp	.+40     	; 0x702 <EX_ControlIN2+0x5a>
			case RISING_AGE:
				SET_BIT(MCUCSR , MCUCSR_ISC2);
     6da:	84 e5       	ldi	r24, 0x54	; 84
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	fc 01       	movw	r30, r24
     6e0:	20 81       	ld	r18, Z
     6e2:	84 e5       	ldi	r24, 0x54	; 84
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	20 64       	ori	r18, 0x40	; 64
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
				break;
     6ec:	0a c0       	rjmp	.+20     	; 0x702 <EX_ControlIN2+0x5a>
			default:
				CLR_BIT(MCUCSR , MCUCSR_ISC2);
     6ee:	84 e5       	ldi	r24, 0x54	; 84
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 81       	ld	r18, Z
     6f6:	84 e5       	ldi	r24, 0x54	; 84
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	2f 7b       	andi	r18, 0xBF	; 191
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
				break;
     700:	00 00       	nop
		}
}
     702:	00 00       	nop
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <Dio_setPinDir>:
  * @brief  : Set Direction of Bit (Input or Output)
  * @param  : CopyPinNum
  * @param  : CopyPinDir
  */
void Dio_setPinDir(u8 CopyPinNum,u8 CopyPinDir)
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	00 d0       	rcall	.+0      	; 0x712 <Dio_setPinDir+0x6>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyPinDir)
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	88 2f       	mov	r24, r24
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	00 97       	sbiw	r24, 0x00	; 0
     722:	91 f1       	breq	.+100    	; 0x788 <Dio_setPinDir+0x7c>
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	09 f0       	breq	.+2      	; 0x72a <Dio_setPinDir+0x1e>
		case Direction_Pin_Input:
				CLR_BIT(*Arr_DDr[CopyPinNum / 8 ],CopyPinNum % 8 );
			break;

		default :
			break;
     728:	5f c0       	rjmp	.+190    	; 0x7e8 <Dio_setPinDir+0xdc>
void Dio_setPinDir(u8 CopyPinNum,u8 CopyPinDir)
{
	switch (CopyPinDir)
	{
		case Direction_Pin_Output:
				SET_BIT(*Arr_DDr[CopyPinNum / 8 ],CopyPinNum % 8 );
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	86 95       	lsr	r24
     72e:	86 95       	lsr	r24
     730:	86 95       	lsr	r24
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	80 5a       	subi	r24, 0xA0	; 160
     73c:	9f 4f       	sbci	r25, 0xFF	; 255
     73e:	fc 01       	movw	r30, r24
     740:	80 81       	ld	r24, Z
     742:	91 81       	ldd	r25, Z+1	; 0x01
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	48 2f       	mov	r20, r24
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	88 2f       	mov	r24, r24
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	9c 01       	movw	r18, r24
     752:	27 70       	andi	r18, 0x07	; 7
     754:	33 27       	eor	r19, r19
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	02 c0       	rjmp	.+4      	; 0x760 <Dio_setPinDir+0x54>
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	2a 95       	dec	r18
     762:	e2 f7       	brpl	.-8      	; 0x75c <Dio_setPinDir+0x50>
     764:	24 2f       	mov	r18, r20
     766:	28 2b       	or	r18, r24
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	86 95       	lsr	r24
     76c:	86 95       	lsr	r24
     76e:	86 95       	lsr	r24
     770:	88 2f       	mov	r24, r24
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	80 5a       	subi	r24, 0xA0	; 160
     77a:	9f 4f       	sbci	r25, 0xFF	; 255
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
     780:	91 81       	ldd	r25, Z+1	; 0x01
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
			break;
     786:	30 c0       	rjmp	.+96     	; 0x7e8 <Dio_setPinDir+0xdc>

		case Direction_Pin_Input:
				CLR_BIT(*Arr_DDr[CopyPinNum / 8 ],CopyPinNum % 8 );
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	86 95       	lsr	r24
     78c:	86 95       	lsr	r24
     78e:	86 95       	lsr	r24
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	80 5a       	subi	r24, 0xA0	; 160
     79a:	9f 4f       	sbci	r25, 0xFF	; 255
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	fc 01       	movw	r30, r24
     7a4:	80 81       	ld	r24, Z
     7a6:	48 2f       	mov	r20, r24
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	88 2f       	mov	r24, r24
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9c 01       	movw	r18, r24
     7b0:	27 70       	andi	r18, 0x07	; 7
     7b2:	33 27       	eor	r19, r19
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <Dio_setPinDir+0xb2>
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	2a 95       	dec	r18
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <Dio_setPinDir+0xae>
     7c2:	80 95       	com	r24
     7c4:	24 2f       	mov	r18, r20
     7c6:	28 23       	and	r18, r24
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	86 95       	lsr	r24
     7cc:	86 95       	lsr	r24
     7ce:	86 95       	lsr	r24
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	80 5a       	subi	r24, 0xA0	; 160
     7da:	9f 4f       	sbci	r25, 0xFF	; 255
     7dc:	fc 01       	movw	r30, r24
     7de:	80 81       	ld	r24, Z
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
			break;
     7e6:	00 00       	nop

		default :
			break;
	}
}
     7e8:	00 00       	nop
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <Dio_setPinVal>:
  * @brief  : Set Status of Bit (High or Low or Toggle)
  * @param  : CopyPinNum
  * @param  : CopyPinVal
  */
void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <Dio_setPinVal+0x6>
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyPinVal)
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	88 2f       	mov	r24, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	91 05       	cpc	r25, r1
     80c:	39 f0       	breq	.+14     	; 0x81c <Dio_setPinVal+0x28>
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	91 05       	cpc	r25, r1
     812:	09 f4       	brne	.+2      	; 0x816 <Dio_setPinVal+0x22>
     814:	62 c0       	rjmp	.+196    	; 0x8da <Dio_setPinVal+0xe6>
     816:	89 2b       	or	r24, r25
     818:	81 f1       	breq	.+96     	; 0x87a <Dio_setPinVal+0x86>
		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
			break;

		default :
			break;
     81a:	8e c0       	rjmp	.+284    	; 0x938 <Dio_setPinVal+0x144>
void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
	switch (CopyPinVal)
	{
		case Status_Pin_High:
				SET_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	86 95       	lsr	r24
     820:	86 95       	lsr	r24
     822:	86 95       	lsr	r24
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	88 59       	subi	r24, 0x98	; 152
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	fc 01       	movw	r30, r24
     832:	80 81       	ld	r24, Z
     834:	91 81       	ldd	r25, Z+1	; 0x01
     836:	fc 01       	movw	r30, r24
     838:	80 81       	ld	r24, Z
     83a:	48 2f       	mov	r20, r24
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	88 2f       	mov	r24, r24
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	9c 01       	movw	r18, r24
     844:	27 70       	andi	r18, 0x07	; 7
     846:	33 27       	eor	r19, r19
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	02 c0       	rjmp	.+4      	; 0x852 <Dio_setPinVal+0x5e>
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	2a 95       	dec	r18
     854:	e2 f7       	brpl	.-8      	; 0x84e <Dio_setPinVal+0x5a>
     856:	24 2f       	mov	r18, r20
     858:	28 2b       	or	r18, r24
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	86 95       	lsr	r24
     85e:	86 95       	lsr	r24
     860:	86 95       	lsr	r24
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	88 59       	subi	r24, 0x98	; 152
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	fc 01       	movw	r30, r24
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
			break;
     878:	5f c0       	rjmp	.+190    	; 0x938 <Dio_setPinVal+0x144>

		case Status_Pin_Low:
				CLR_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	86 95       	lsr	r24
     87e:	86 95       	lsr	r24
     880:	86 95       	lsr	r24
     882:	88 2f       	mov	r24, r24
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	88 59       	subi	r24, 0x98	; 152
     88c:	9f 4f       	sbci	r25, 0xFF	; 255
     88e:	fc 01       	movw	r30, r24
     890:	80 81       	ld	r24, Z
     892:	91 81       	ldd	r25, Z+1	; 0x01
     894:	fc 01       	movw	r30, r24
     896:	80 81       	ld	r24, Z
     898:	48 2f       	mov	r20, r24
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	9c 01       	movw	r18, r24
     8a2:	27 70       	andi	r18, 0x07	; 7
     8a4:	33 27       	eor	r19, r19
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <Dio_setPinVal+0xbc>
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	2a 95       	dec	r18
     8b2:	e2 f7       	brpl	.-8      	; 0x8ac <Dio_setPinVal+0xb8>
     8b4:	80 95       	com	r24
     8b6:	24 2f       	mov	r18, r20
     8b8:	28 23       	and	r18, r24
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	86 95       	lsr	r24
     8be:	86 95       	lsr	r24
     8c0:	86 95       	lsr	r24
     8c2:	88 2f       	mov	r24, r24
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	88 59       	subi	r24, 0x98	; 152
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	fc 01       	movw	r30, r24
     8d0:	80 81       	ld	r24, Z
     8d2:	91 81       	ldd	r25, Z+1	; 0x01
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
			break;
     8d8:	2f c0       	rjmp	.+94     	; 0x938 <Dio_setPinVal+0x144>

		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	86 95       	lsr	r24
     8de:	86 95       	lsr	r24
     8e0:	86 95       	lsr	r24
     8e2:	88 2f       	mov	r24, r24
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	88 59       	subi	r24, 0x98	; 152
     8ec:	9f 4f       	sbci	r25, 0xFF	; 255
     8ee:	fc 01       	movw	r30, r24
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	48 2f       	mov	r20, r24
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	88 2f       	mov	r24, r24
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	9c 01       	movw	r18, r24
     902:	27 70       	andi	r18, 0x07	; 7
     904:	33 27       	eor	r19, r19
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	02 c0       	rjmp	.+4      	; 0x910 <Dio_setPinVal+0x11c>
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	2a 95       	dec	r18
     912:	e2 f7       	brpl	.-8      	; 0x90c <Dio_setPinVal+0x118>
     914:	24 2f       	mov	r18, r20
     916:	28 27       	eor	r18, r24
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	86 95       	lsr	r24
     91c:	86 95       	lsr	r24
     91e:	86 95       	lsr	r24
     920:	88 2f       	mov	r24, r24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	88 59       	subi	r24, 0x98	; 152
     92a:	9f 4f       	sbci	r25, 0xFF	; 255
     92c:	fc 01       	movw	r30, r24
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
			break;
     936:	00 00       	nop

		default :
			break;
	}
}
     938:	00 00       	nop
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <Dio_getPinVal>:
  * @brief  : Get Status of Bit (High or Low)
  * @param  : CopyPinNum
  * @RetVal : Ret
  */
Std_Return Dio_getPinVal(u8 CopyPinNum)
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	00 d0       	rcall	.+0      	; 0x94a <Dio_getPinVal+0x6>
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     950:	19 82       	std	Y+1, r1	; 0x01
	Ret = GET_BIT(*Arr_Pin[CopyPinNum / 8 ],CopyPinNum % 8 );
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	86 95       	lsr	r24
     956:	86 95       	lsr	r24
     958:	86 95       	lsr	r24
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	80 59       	subi	r24, 0x90	; 144
     964:	9f 4f       	sbci	r25, 0xFF	; 255
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	fc 01       	movw	r30, r24
     96e:	80 81       	ld	r24, Z
     970:	88 2f       	mov	r24, r24
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	2a 81       	ldd	r18, Y+2	; 0x02
     976:	22 2f       	mov	r18, r18
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	27 70       	andi	r18, 0x07	; 7
     97c:	33 27       	eor	r19, r19
     97e:	02 c0       	rjmp	.+4      	; 0x984 <Dio_getPinVal+0x40>
     980:	95 95       	asr	r25
     982:	87 95       	ror	r24
     984:	2a 95       	dec	r18
     986:	e2 f7       	brpl	.-8      	; 0x980 <Dio_getPinVal+0x3c>
     988:	81 70       	andi	r24, 0x01	; 1
     98a:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     98c:	89 81       	ldd	r24, Y+1	; 0x01
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <DIO_vidSetPinSDir>:
  * @param  : u8PinsNum
  * @param  : Copyu8Size
  * @param  : Copyu8Dir
  */
void DIO_vidSetPinSDir(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Dir)
{
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	00 d0       	rcall	.+0      	; 0x99e <DIO_vidSetPinSDir+0x6>
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <DIO_vidSetPinSDir+0x8>
     9a0:	1f 92       	push	r1
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	9b 83       	std	Y+3, r25	; 0x03
     9a8:	8a 83       	std	Y+2, r24	; 0x02
     9aa:	6c 83       	std	Y+4, r22	; 0x04
     9ac:	4d 83       	std	Y+5, r20	; 0x05
	u8 i;
	for(i=0;i<Copyu8Size;i++)
     9ae:	19 82       	std	Y+1, r1	; 0x01
     9b0:	9b c0       	rjmp	.+310    	; 0xae8 <DIO_vidSetPinSDir+0x150>
	{
		switch (Copyu8Dir)
     9b2:	8d 81       	ldd	r24, Y+5	; 0x05
     9b4:	88 2f       	mov	r24, r24
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	21 f0       	breq	.+8      	; 0x9c4 <DIO_vidSetPinSDir+0x2c>
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	09 f4       	brne	.+2      	; 0x9c2 <DIO_vidSetPinSDir+0x2a>
     9c0:	49 c0       	rjmp	.+146    	; 0xa54 <DIO_vidSetPinSDir+0xbc>
     9c2:	8f c0       	rjmp	.+286    	; 0xae2 <DIO_vidSetPinSDir+0x14a>
		{
		case Direction_Pin_Input  :CLR_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	88 2f       	mov	r24, r24
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	2a 81       	ldd	r18, Y+2	; 0x02
     9cc:	3b 81       	ldd	r19, Y+3	; 0x03
     9ce:	82 0f       	add	r24, r18
     9d0:	93 1f       	adc	r25, r19
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	86 95       	lsr	r24
     9d8:	86 95       	lsr	r24
     9da:	86 95       	lsr	r24
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	80 5a       	subi	r24, 0xA0	; 160
     9e6:	9f 4f       	sbci	r25, 0xFF	; 255
     9e8:	fc 01       	movw	r30, r24
     9ea:	80 81       	ld	r24, Z
     9ec:	91 81       	ldd	r25, Z+1	; 0x01
     9ee:	fc 01       	movw	r30, r24
     9f0:	80 81       	ld	r24, Z
     9f2:	48 2f       	mov	r20, r24
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	88 2f       	mov	r24, r24
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	2a 81       	ldd	r18, Y+2	; 0x02
     9fc:	3b 81       	ldd	r19, Y+3	; 0x03
     9fe:	82 0f       	add	r24, r18
     a00:	93 1f       	adc	r25, r19
     a02:	fc 01       	movw	r30, r24
     a04:	80 81       	ld	r24, Z
     a06:	88 2f       	mov	r24, r24
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	9c 01       	movw	r18, r24
     a0c:	27 70       	andi	r18, 0x07	; 7
     a0e:	33 27       	eor	r19, r19
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_vidSetPinSDir+0x82>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	2a 95       	dec	r18
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_vidSetPinSDir+0x7e>
     a1e:	80 95       	com	r24
     a20:	48 23       	and	r20, r24
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	88 2f       	mov	r24, r24
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	2a 81       	ldd	r18, Y+2	; 0x02
     a2a:	3b 81       	ldd	r19, Y+3	; 0x03
     a2c:	82 0f       	add	r24, r18
     a2e:	93 1f       	adc	r25, r19
     a30:	fc 01       	movw	r30, r24
     a32:	80 81       	ld	r24, Z
     a34:	86 95       	lsr	r24
     a36:	86 95       	lsr	r24
     a38:	86 95       	lsr	r24
     a3a:	88 2f       	mov	r24, r24
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	80 5a       	subi	r24, 0xA0	; 160
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	fc 01       	movw	r30, r24
     a48:	80 81       	ld	r24, Z
     a4a:	91 81       	ldd	r25, Z+1	; 0x01
     a4c:	24 2f       	mov	r18, r20
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	47 c0       	rjmp	.+142    	; 0xae2 <DIO_vidSetPinSDir+0x14a>
		case Direction_Pin_Output :SET_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	2a 81       	ldd	r18, Y+2	; 0x02
     a5c:	3b 81       	ldd	r19, Y+3	; 0x03
     a5e:	82 0f       	add	r24, r18
     a60:	93 1f       	adc	r25, r19
     a62:	fc 01       	movw	r30, r24
     a64:	80 81       	ld	r24, Z
     a66:	86 95       	lsr	r24
     a68:	86 95       	lsr	r24
     a6a:	86 95       	lsr	r24
     a6c:	88 2f       	mov	r24, r24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	80 5a       	subi	r24, 0xA0	; 160
     a76:	9f 4f       	sbci	r25, 0xFF	; 255
     a78:	fc 01       	movw	r30, r24
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	fc 01       	movw	r30, r24
     a80:	80 81       	ld	r24, Z
     a82:	48 2f       	mov	r20, r24
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	2a 81       	ldd	r18, Y+2	; 0x02
     a8c:	3b 81       	ldd	r19, Y+3	; 0x03
     a8e:	82 0f       	add	r24, r18
     a90:	93 1f       	adc	r25, r19
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	88 2f       	mov	r24, r24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	9c 01       	movw	r18, r24
     a9c:	27 70       	andi	r18, 0x07	; 7
     a9e:	33 27       	eor	r19, r19
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_vidSetPinSDir+0x112>
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	2a 95       	dec	r18
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_vidSetPinSDir+0x10e>
     aae:	48 2b       	or	r20, r24
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	2a 81       	ldd	r18, Y+2	; 0x02
     ab8:	3b 81       	ldd	r19, Y+3	; 0x03
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	86 95       	lsr	r24
     ac4:	86 95       	lsr	r24
     ac6:	86 95       	lsr	r24
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	80 5a       	subi	r24, 0xA0	; 160
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
     ad4:	fc 01       	movw	r30, r24
     ad6:	80 81       	ld	r24, Z
     ad8:	91 81       	ldd	r25, Z+1	; 0x01
     ada:	24 2f       	mov	r18, r20
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
     ae0:	00 00       	nop
  * @param  : Copyu8Dir
  */
void DIO_vidSetPinSDir(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Dir)
{
	u8 i;
	for(i=0;i<Copyu8Size;i++)
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	99 81       	ldd	r25, Y+1	; 0x01
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	98 17       	cp	r25, r24
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <DIO_vidSetPinSDir+0x15a>
     af0:	60 cf       	rjmp	.-320    	; 0x9b2 <DIO_vidSetPinSDir+0x1a>
		{
		case Direction_Pin_Input  :CLR_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
		case Direction_Pin_Output :SET_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
		}
	}
}
     af2:	00 00       	nop
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <DIO_vidSetPinSVal>:
  * @param  : u8PinsNum
  * @param  : Copyu8Size
  * @param  : Copyu8Val
  */
void DIO_vidSetPinSVal(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Val)
{
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	00 d0       	rcall	.+0      	; 0xb0a <DIO_vidSetPinSVal+0x6>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <DIO_vidSetPinSVal+0x8>
     b0c:	1f 92       	push	r1
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	9b 83       	std	Y+3, r25	; 0x03
     b14:	8a 83       	std	Y+2, r24	; 0x02
     b16:	6c 83       	std	Y+4, r22	; 0x04
     b18:	4d 83       	std	Y+5, r20	; 0x05
	u8 i;
	for(i=0;i<Copyu8Size;i++)
     b1a:	19 82       	std	Y+1, r1	; 0x01
     b1c:	9b c0       	rjmp	.+310    	; 0xc54 <DIO_vidSetPinSVal+0x150>
	{
		switch (Copyu8Val)
     b1e:	8d 81       	ldd	r24, Y+5	; 0x05
     b20:	88 2f       	mov	r24, r24
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	21 f0       	breq	.+8      	; 0xb30 <DIO_vidSetPinSVal+0x2c>
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	09 f4       	brne	.+2      	; 0xb2e <DIO_vidSetPinSVal+0x2a>
     b2c:	49 c0       	rjmp	.+146    	; 0xbc0 <DIO_vidSetPinSVal+0xbc>
     b2e:	8f c0       	rjmp	.+286    	; 0xc4e <DIO_vidSetPinSVal+0x14a>
		{
		case Status_Pin_Low  :CLR_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	88 2f       	mov	r24, r24
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	2a 81       	ldd	r18, Y+2	; 0x02
     b38:	3b 81       	ldd	r19, Y+3	; 0x03
     b3a:	82 0f       	add	r24, r18
     b3c:	93 1f       	adc	r25, r19
     b3e:	fc 01       	movw	r30, r24
     b40:	80 81       	ld	r24, Z
     b42:	86 95       	lsr	r24
     b44:	86 95       	lsr	r24
     b46:	86 95       	lsr	r24
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	88 59       	subi	r24, 0x98	; 152
     b52:	9f 4f       	sbci	r25, 0xFF	; 255
     b54:	fc 01       	movw	r30, r24
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	fc 01       	movw	r30, r24
     b5c:	80 81       	ld	r24, Z
     b5e:	48 2f       	mov	r20, r24
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	2a 81       	ldd	r18, Y+2	; 0x02
     b68:	3b 81       	ldd	r19, Y+3	; 0x03
     b6a:	82 0f       	add	r24, r18
     b6c:	93 1f       	adc	r25, r19
     b6e:	fc 01       	movw	r30, r24
     b70:	80 81       	ld	r24, Z
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	9c 01       	movw	r18, r24
     b78:	27 70       	andi	r18, 0x07	; 7
     b7a:	33 27       	eor	r19, r19
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <DIO_vidSetPinSVal+0x82>
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	2a 95       	dec	r18
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <DIO_vidSetPinSVal+0x7e>
     b8a:	80 95       	com	r24
     b8c:	48 23       	and	r20, r24
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	2a 81       	ldd	r18, Y+2	; 0x02
     b96:	3b 81       	ldd	r19, Y+3	; 0x03
     b98:	82 0f       	add	r24, r18
     b9a:	93 1f       	adc	r25, r19
     b9c:	fc 01       	movw	r30, r24
     b9e:	80 81       	ld	r24, Z
     ba0:	86 95       	lsr	r24
     ba2:	86 95       	lsr	r24
     ba4:	86 95       	lsr	r24
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	88 59       	subi	r24, 0x98	; 152
     bb0:	9f 4f       	sbci	r25, 0xFF	; 255
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	24 2f       	mov	r18, r20
     bba:	fc 01       	movw	r30, r24
     bbc:	20 83       	st	Z, r18
     bbe:	47 c0       	rjmp	.+142    	; 0xc4e <DIO_vidSetPinSVal+0x14a>
		case Status_Pin_High :SET_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	88 2f       	mov	r24, r24
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	2a 81       	ldd	r18, Y+2	; 0x02
     bc8:	3b 81       	ldd	r19, Y+3	; 0x03
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	fc 01       	movw	r30, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	86 95       	lsr	r24
     bd4:	86 95       	lsr	r24
     bd6:	86 95       	lsr	r24
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	88 59       	subi	r24, 0x98	; 152
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
     be4:	fc 01       	movw	r30, r24
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	fc 01       	movw	r30, r24
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	2a 81       	ldd	r18, Y+2	; 0x02
     bf8:	3b 81       	ldd	r19, Y+3	; 0x03
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
     bfe:	fc 01       	movw	r30, r24
     c00:	80 81       	ld	r24, Z
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	9c 01       	movw	r18, r24
     c08:	27 70       	andi	r18, 0x07	; 7
     c0a:	33 27       	eor	r19, r19
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <DIO_vidSetPinSVal+0x112>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	2a 95       	dec	r18
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <DIO_vidSetPinSVal+0x10e>
     c1a:	48 2b       	or	r20, r24
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	2a 81       	ldd	r18, Y+2	; 0x02
     c24:	3b 81       	ldd	r19, Y+3	; 0x03
     c26:	82 0f       	add	r24, r18
     c28:	93 1f       	adc	r25, r19
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	86 95       	lsr	r24
     c30:	86 95       	lsr	r24
     c32:	86 95       	lsr	r24
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	88 59       	subi	r24, 0x98	; 152
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	fc 01       	movw	r30, r24
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	24 2f       	mov	r18, r20
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
     c4c:	00 00       	nop
  * @param  : Copyu8Val
  */
void DIO_vidSetPinSVal(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Val)
{
	u8 i;
	for(i=0;i<Copyu8Size;i++)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	8f 5f       	subi	r24, 0xFF	; 255
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	99 81       	ldd	r25, Y+1	; 0x01
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	98 17       	cp	r25, r24
     c5a:	08 f4       	brcc	.+2      	; 0xc5e <DIO_vidSetPinSVal+0x15a>
     c5c:	60 cf       	rjmp	.-320    	; 0xb1e <DIO_vidSetPinSVal+0x1a>
		{
		case Status_Pin_Low  :CLR_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
		case Status_Pin_High :SET_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
		}
	}
}
     c5e:	00 00       	nop
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <Dio_setPortDir>:
  * @brief  : Set Direction of Port (Input or Output)
  * @param  : CopyPortNum
  * @param  : CopyPinDir
  */
void Dio_setPortDir(u8 CopyPortNum,u8 CopyPinDir)
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	00 d0       	rcall	.+0      	; 0xc76 <Dio_setPortDir+0x6>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_DDr[CopyPortNum] = CopyPinDir;
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	80 5a       	subi	r24, 0xA0	; 160
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	fc 01       	movw	r30, r24
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	2a 81       	ldd	r18, Y+2	; 0x02
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
}
     c98:	00 00       	nop
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <Dio_setPortVal>:
  * @brief  : Set Status of Port (High or Low or Toggle)
  * @param  : CopyPortNum
  * @param  : CopyPinVal
  */
void Dio_setPortVal(u8 CopyPortNum,u8 CopyPinVal)
{
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <Dio_setPortVal+0x6>
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_Port[CopyPortNum] = CopyPinVal;
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	88 59       	subi	r24, 0x98	; 152
     cbe:	9f 4f       	sbci	r25, 0xFF	; 255
     cc0:	fc 01       	movw	r30, r24
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	2a 81       	ldd	r18, Y+2	; 0x02
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
}
     ccc:	00 00       	nop
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <Dio_getPortVal>:
  * @brief  : Get Status of Port (High or Low)
  * @param  : CopyPortNum
  * @RetVal : Ret
  */
Std_Return Dio_getPortVal(u8 CopyPortNum)
{
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	00 d0       	rcall	.+0      	; 0xcde <Dio_getPortVal+0x6>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     ce4:	19 82       	std	Y+1, r1	; 0x01
	Ret = *Arr_Pin[CopyPortNum];
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	80 59       	subi	r24, 0x90	; 144
     cf2:	9f 4f       	sbci	r25, 0xFF	; 255
     cf4:	fc 01       	movw	r30, r24
     cf6:	80 81       	ld	r24, Z
     cf8:	91 81       	ldd	r25, Z+1	; 0x01
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     d00:	89 81       	ldd	r24, Y+1	; 0x01
}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <ADC_INIT>:

/**
  * @brief  : Initialization ADC
  */
void ADC_INIT(void)
{
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
#if	ADC_Stat == ADC_AREF
	CLR_BIT(ADMUX_Reg , ADMUX_REFS0);
	CLR_BIT(ADMUX_Reg , ADMUX_REFS1);
#elif ADC_Stat == ADC_AVCC
	SET_BIT(ADMUX_Reg , ADMUX_REFS0);
     d14:	87 e2       	ldi	r24, 0x27	; 39
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	fc 01       	movw	r30, r24
     d1a:	20 81       	ld	r18, Z
     d1c:	87 e2       	ldi	r24, 0x27	; 39
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	20 64       	ori	r18, 0x40	; 64
     d22:	fc 01       	movw	r30, r24
     d24:	20 83       	st	Z, r18
	CLR_BIT(ADMUX_Reg , ADMUX_REFS1);
     d26:	87 e2       	ldi	r24, 0x27	; 39
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 81       	ld	r18, Z
     d2e:	87 e2       	ldi	r24, 0x27	; 39
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	2f 77       	andi	r18, 0x7F	; 127
     d34:	fc 01       	movw	r30, r24
     d36:	20 83       	st	Z, r18
#elif ADC_Stat == ADC_Inter
	SET_BIT(ADMUX_Reg , ADMUX_REFS0);
	SET_BIT(ADMUX_Reg , ADMUX_REFS1);
#endif
	SET_BIT(ADCSRA_Reg,ADCSRA_ADEN);
     d38:	86 e2       	ldi	r24, 0x26	; 38
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 81       	ld	r18, Z
     d40:	86 e2       	ldi	r24, 0x26	; 38
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	20 68       	ori	r18, 0x80	; 128
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18
	ADCSRA_Reg |= ADC_PRESCALER;
     d4a:	86 e2       	ldi	r24, 0x26	; 38
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	fc 01       	movw	r30, r24
     d50:	20 81       	ld	r18, Z
     d52:	86 e2       	ldi	r24, 0x26	; 38
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	21 60       	ori	r18, 0x01	; 1
     d58:	fc 01       	movw	r30, r24
     d5a:	20 83       	st	Z, r18
}
     d5c:	00 00       	nop
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <ADC_readDigitalSignal>:
  * @brief  : Conversion Digital Signal to Analog Signal And Return The Result
  * @param  : CopyChanal
  * @retval : Res
  */
u16 ADC_readDigitalSignal(ADC_CHANNEL CopyChanal)
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	00 d0       	rcall	.+0      	; 0xd6a <ADC_readDigitalSignal+0x6>
     d6a:	1f 92       	push	r1
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	8b 83       	std	Y+3, r24	; 0x03
	u16 Res = Initial_Counter;
     d72:	1a 82       	std	Y+2, r1	; 0x02
     d74:	19 82       	std	Y+1, r1	; 0x01
	ADMUX_Reg &= ADC_CLEAR_MASK;
     d76:	87 e2       	ldi	r24, 0x27	; 39
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 81       	ld	r18, Z
     d7e:	87 e2       	ldi	r24, 0x27	; 39
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	20 7e       	andi	r18, 0xE0	; 224
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
	ADMUX_Reg |= CopyChanal;
     d88:	87 e2       	ldi	r24, 0x27	; 39
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	fc 01       	movw	r30, r24
     d8e:	30 81       	ld	r19, Z
     d90:	87 e2       	ldi	r24, 0x27	; 39
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	2b 81       	ldd	r18, Y+3	; 0x03
     d96:	23 2b       	or	r18, r19
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18
	SET_BIT(ADCSRA_Reg,ADCSRA_ADSC);
     d9c:	86 e2       	ldi	r24, 0x26	; 38
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	fc 01       	movw	r30, r24
     da2:	20 81       	ld	r18, Z
     da4:	86 e2       	ldi	r24, 0x26	; 38
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	20 64       	ori	r18, 0x40	; 64
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
	while((GET_BIT(ADCSRA_Reg,ADCSRA_ADSC)));
     dae:	00 00       	nop
     db0:	86 e2       	ldi	r24, 0x26	; 38
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	fc 01       	movw	r30, r24
     db6:	80 81       	ld	r24, Z
     db8:	82 95       	swap	r24
     dba:	86 95       	lsr	r24
     dbc:	86 95       	lsr	r24
     dbe:	83 70       	andi	r24, 0x03	; 3
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	81 70       	andi	r24, 0x01	; 1
     dc6:	99 27       	eor	r25, r25
     dc8:	89 2b       	or	r24, r25
     dca:	91 f7       	brne	.-28     	; 0xdb0 <ADC_readDigitalSignal+0x4c>
	Res = ADCL_Reg;
     dcc:	84 e2       	ldi	r24, 0x24	; 36
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
	Res |= (ADCH_Reg << 8);
     ddc:	85 e2       	ldi	r24, 0x25	; 37
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	80 81       	ld	r24, Z
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	98 2f       	mov	r25, r24
     dea:	88 27       	eor	r24, r24
     dec:	9c 01       	movw	r18, r24
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	82 2b       	or	r24, r18
     df4:	93 2b       	or	r25, r19
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
	return Res;
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <ADC_Enable>:

/**
  * @brief  : Enable ADC
  */
void ADC_Enable(void)
{
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA_Reg,ADCSRA_ADEN);
     e12:	86 e2       	ldi	r24, 0x26	; 38
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	fc 01       	movw	r30, r24
     e18:	20 81       	ld	r18, Z
     e1a:	86 e2       	ldi	r24, 0x26	; 38
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	20 68       	ori	r18, 0x80	; 128
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18
}
     e24:	00 00       	nop
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <ADC_Disable>:

/**
  * @brief  : Disable ADC
  */
void ADC_Disable(void)
{
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Reg,ADCSRA_ADEN);
     e34:	86 e2       	ldi	r24, 0x26	; 38
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	fc 01       	movw	r30, r24
     e3a:	20 81       	ld	r18, Z
     e3c:	86 e2       	ldi	r24, 0x26	; 38
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	2f 77       	andi	r18, 0x7F	; 127
     e42:	fc 01       	movw	r30, r24
     e44:	20 83       	st	Z, r18
}
     e46:	00 00       	nop
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <ADC_EnableINT>:

/**
  * @brief  : Enable Interrupt of ADC
  */
void ADC_EnableINT(void)
{
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_Reg , GIE);
     e56:	8f e5       	ldi	r24, 0x5F	; 95
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 81       	ld	r18, Z
     e5e:	8f e5       	ldi	r24, 0x5F	; 95
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	20 68       	ori	r18, 0x80	; 128
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
	SET_BIT(ADCSRA_Reg, ADCSRA_ADIE);
     e68:	86 e2       	ldi	r24, 0x26	; 38
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 81       	ld	r18, Z
     e70:	86 e2       	ldi	r24, 0x26	; 38
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	28 60       	ori	r18, 0x08	; 8
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18
}
     e7a:	00 00       	nop
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <ADC_DisableINT>:

/**
  * @brief  : Disable Interrupt of ADC
  */
void ADC_DisableINT(void)
{
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Reg, ADCSRA_ADIE);
     e8a:	86 e2       	ldi	r24, 0x26	; 38
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	fc 01       	movw	r30, r24
     e90:	20 81       	ld	r18, Z
     e92:	86 e2       	ldi	r24, 0x26	; 38
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	27 7f       	andi	r18, 0xF7	; 247
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
}
     e9c:	00 00       	nop
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <ADC_CLRflag>:

/**
  * @brief  : Clear The ADCSRA_ADIF Bit
  */
void ADC_CLRflag(void)
{
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Reg , ADCSRA_ADIF);
     eac:	86 e2       	ldi	r24, 0x26	; 38
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 81       	ld	r18, Z
     eb4:	86 e2       	ldi	r24, 0x26	; 38
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	2f 7e       	andi	r18, 0xEF	; 239
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
}
     ebe:	00 00       	nop
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <LCD_init>:
 *           if _LCD_MODE is _4_BIT_MODE_LCD then EN , RS , D4 ~ D7 is output pins.
 * @param1 : copyLCDNum
 * @retVal : void
 */
void LCD_init(PINS_LCD copyLCDNum)
{
     ec6:	cf 92       	push	r12
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	c8 54       	subi	r28, 0x48	; 72
     eda:	d1 09       	sbc	r29, r1
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	ee ae       	std	Y+62, r14	; 0x3e
     ee8:	ff ae       	std	Y+63, r15	; 0x3f
     eea:	fe 01       	movw	r30, r28
     eec:	e0 5c       	subi	r30, 0xC0	; 192
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	00 83       	st	Z, r16
     ef2:	fe 01       	movw	r30, r28
     ef4:	ef 5b       	subi	r30, 0xBF	; 191
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	10 83       	st	Z, r17
     efa:	fe 01       	movw	r30, r28
     efc:	ee 5b       	subi	r30, 0xBE	; 190
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	20 83       	st	Z, r18
     f02:	fe 01       	movw	r30, r28
     f04:	ed 5b       	subi	r30, 0xBD	; 189
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	30 83       	st	Z, r19
     f0a:	9e 01       	movw	r18, r28
     f0c:	2c 5b       	subi	r18, 0xBC	; 188
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	f9 01       	movw	r30, r18
     f12:	40 83       	st	Z, r20
     f14:	9e 01       	movw	r18, r28
     f16:	2b 5b       	subi	r18, 0xBB	; 187
     f18:	3f 4f       	sbci	r19, 0xFF	; 255
     f1a:	f9 01       	movw	r30, r18
     f1c:	50 83       	st	Z, r21
     f1e:	9e 01       	movw	r18, r28
     f20:	2a 5b       	subi	r18, 0xBA	; 186
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	f9 01       	movw	r30, r18
     f26:	60 83       	st	Z, r22
     f28:	9e 01       	movw	r18, r28
     f2a:	29 5b       	subi	r18, 0xB9	; 185
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	f9 01       	movw	r30, r18
     f30:	70 83       	st	Z, r23
     f32:	9e 01       	movw	r18, r28
     f34:	28 5b       	subi	r18, 0xB8	; 184
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	f9 01       	movw	r30, r18
     f3a:	80 83       	st	Z, r24
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	u8 Counter = Initial_Counter;
     f3c:	19 82       	std	Y+1, r1	; 0x01
	Dio_setPinDir(copyLCDNum.EN, Direction_Pin_Output);
     f3e:	8f ad       	ldd	r24, Y+63	; 0x3f
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
	Dio_setPinDir(copyLCDNum.RS, Direction_Pin_Output);
     f46:	ce 01       	movw	r24, r28
     f48:	80 5c       	subi	r24, 0xC0	; 192
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	fc 01       	movw	r30, r24
     f4e:	80 81       	ld	r24, Z
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
	for (Counter = Initial_Counter;  Counter < 8; Counter++)
     f56:	19 82       	std	Y+1, r1	; 0x01
     f58:	10 c0       	rjmp	.+32     	; 0xf7a <LCD_init+0xb4>
	{
		Dio_setPinDir(copyLCDNum.D[Counter], Direction_Pin_Output);
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9e 01       	movw	r18, r28
     f62:	2f 5b       	subi	r18, 0xBF	; 191
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	fc 01       	movw	r30, r24
     f6c:	80 81       	ld	r24, Z
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
{
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	u8 Counter = Initial_Counter;
	Dio_setPinDir(copyLCDNum.EN, Direction_Pin_Output);
	Dio_setPinDir(copyLCDNum.RS, Direction_Pin_Output);
	for (Counter = Initial_Counter;  Counter < 8; Counter++)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	8f 5f       	subi	r24, 0xFF	; 255
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	88 30       	cpi	r24, 0x08	; 8
     f7e:	68 f3       	brcs	.-38     	; 0xf5a <LCD_init+0x94>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a0 ea       	ldi	r26, 0xA0	; 160
     f86:	b1 e4       	ldi	r27, 0x41	; 65
     f88:	88 ab       	std	Y+48, r24	; 0x30
     f8a:	99 ab       	std	Y+49, r25	; 0x31
     f8c:	aa ab       	std	Y+50, r26	; 0x32
     f8e:	bb ab       	std	Y+51, r27	; 0x33

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4a e7       	ldi	r20, 0x7A	; 122
     f96:	53 e4       	ldi	r21, 0x43	; 67
     f98:	68 a9       	ldd	r22, Y+48	; 0x30
     f9a:	79 a9       	ldd	r23, Y+49	; 0x31
     f9c:	8a a9       	ldd	r24, Y+50	; 0x32
     f9e:	9b a9       	ldd	r25, Y+51	; 0x33
     fa0:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	8c ab       	std	Y+52, r24	; 0x34
     faa:	9d ab       	std	Y+53, r25	; 0x35
     fac:	ae ab       	std	Y+54, r26	; 0x36
     fae:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e8       	ldi	r20, 0x80	; 128
     fb6:	5f e3       	ldi	r21, 0x3F	; 63
     fb8:	6c a9       	ldd	r22, Y+52	; 0x34
     fba:	7d a9       	ldd	r23, Y+53	; 0x35
     fbc:	8e a9       	ldd	r24, Y+54	; 0x36
     fbe:	9f a9       	ldd	r25, Y+55	; 0x37
     fc0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <LCD_init+0x10c>
		__ticks = 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	99 af       	std	Y+57, r25	; 0x39
     fce:	88 af       	std	Y+56, r24	; 0x38
     fd0:	3f c0       	rjmp	.+126    	; 0x1050 <LCD_init+0x18a>
	else if (__tmp > 65535)
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	57 e4       	ldi	r21, 0x47	; 71
     fda:	6c a9       	ldd	r22, Y+52	; 0x34
     fdc:	7d a9       	ldd	r23, Y+53	; 0x35
     fde:	8e a9       	ldd	r24, Y+54	; 0x36
     fe0:	9f a9       	ldd	r25, Y+55	; 0x37
     fe2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	4c f5       	brge	.+82     	; 0x103c <LCD_init+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	68 a9       	ldd	r22, Y+48	; 0x30
     ff4:	79 a9       	ldd	r23, Y+49	; 0x31
     ff6:	8a a9       	ldd	r24, Y+50	; 0x32
     ff8:	9b a9       	ldd	r25, Y+51	; 0x33
     ffa:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	99 af       	std	Y+57, r25	; 0x39
    1010:	88 af       	std	Y+56, r24	; 0x38
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <LCD_init+0x16c>
    1014:	89 e1       	ldi	r24, 0x19	; 25
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9b af       	std	Y+59, r25	; 0x3b
    101a:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    101c:	8a ad       	ldd	r24, Y+58	; 0x3a
    101e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <LCD_init+0x15a>
    1024:	9b af       	std	Y+59, r25	; 0x3b
    1026:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	88 ad       	ldd	r24, Y+56	; 0x38
    102a:	99 ad       	ldd	r25, Y+57	; 0x39
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	99 af       	std	Y+57, r25	; 0x39
    1030:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	88 ad       	ldd	r24, Y+56	; 0x38
    1034:	99 ad       	ldd	r25, Y+57	; 0x39
    1036:	89 2b       	or	r24, r25
    1038:	69 f7       	brne	.-38     	; 0x1014 <LCD_init+0x14e>
    103a:	14 c0       	rjmp	.+40     	; 0x1064 <LCD_init+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103c:	6c a9       	ldd	r22, Y+52	; 0x34
    103e:	7d a9       	ldd	r23, Y+53	; 0x35
    1040:	8e a9       	ldd	r24, Y+54	; 0x36
    1042:	9f a9       	ldd	r25, Y+55	; 0x37
    1044:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	99 af       	std	Y+57, r25	; 0x39
    104e:	88 af       	std	Y+56, r24	; 0x38
    1050:	88 ad       	ldd	r24, Y+56	; 0x38
    1052:	99 ad       	ldd	r25, Y+57	; 0x39
    1054:	9d af       	std	Y+61, r25	; 0x3d
    1056:	8c af       	std	Y+60, r24	; 0x3c
    1058:	8c ad       	ldd	r24, Y+60	; 0x3c
    105a:	9d ad       	ldd	r25, Y+61	; 0x3d
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <LCD_init+0x196>
    1060:	9d af       	std	Y+61, r25	; 0x3d
    1062:	8c af       	std	Y+60, r24	; 0x3c
	{
		Dio_setPinDir(copyLCDNum.D[Counter], Direction_Pin_Output);
	}
	_delay_ms(20);
	LCD_writeCMD(copyLCDNum, _LCD_8_BIT_MODE);
    1064:	0f 2e       	mov	r0, r31
    1066:	f8 e3       	ldi	r31, 0x38	; 56
    1068:	cf 2e       	mov	r12, r31
    106a:	f0 2d       	mov	r31, r0
    106c:	ee ac       	ldd	r14, Y+62	; 0x3e
    106e:	ff ac       	ldd	r15, Y+63	; 0x3f
    1070:	ce 01       	movw	r24, r28
    1072:	80 5c       	subi	r24, 0xC0	; 192
    1074:	9f 4f       	sbci	r25, 0xFF	; 255
    1076:	fc 01       	movw	r30, r24
    1078:	00 81       	ld	r16, Z
    107a:	ce 01       	movw	r24, r28
    107c:	8f 5b       	subi	r24, 0xBF	; 191
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	fc 01       	movw	r30, r24
    1082:	10 81       	ld	r17, Z
    1084:	ce 01       	movw	r24, r28
    1086:	8e 5b       	subi	r24, 0xBE	; 190
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	fc 01       	movw	r30, r24
    108c:	20 81       	ld	r18, Z
    108e:	ce 01       	movw	r24, r28
    1090:	8d 5b       	subi	r24, 0xBD	; 189
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	fc 01       	movw	r30, r24
    1096:	30 81       	ld	r19, Z
    1098:	ce 01       	movw	r24, r28
    109a:	8c 5b       	subi	r24, 0xBC	; 188
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	fc 01       	movw	r30, r24
    10a0:	40 81       	ld	r20, Z
    10a2:	ce 01       	movw	r24, r28
    10a4:	8b 5b       	subi	r24, 0xBB	; 187
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	fc 01       	movw	r30, r24
    10aa:	50 81       	ld	r21, Z
    10ac:	ce 01       	movw	r24, r28
    10ae:	8a 5b       	subi	r24, 0xBA	; 186
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	fc 01       	movw	r30, r24
    10b4:	60 81       	ld	r22, Z
    10b6:	ce 01       	movw	r24, r28
    10b8:	89 5b       	subi	r24, 0xB9	; 185
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	fc 01       	movw	r30, r24
    10be:	70 81       	ld	r23, Z
    10c0:	ce 01       	movw	r24, r28
    10c2:	88 5b       	subi	r24, 0xB8	; 184
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	fc 01       	movw	r30, r24
    10c8:	80 81       	ld	r24, Z
    10ca:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	a0 ea       	ldi	r26, 0xA0	; 160
    10d4:	b0 e4       	ldi	r27, 0x40	; 64
    10d6:	8a a3       	std	Y+34, r24	; 0x22
    10d8:	9b a3       	std	Y+35, r25	; 0x23
    10da:	ac a3       	std	Y+36, r26	; 0x24
    10dc:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a e7       	ldi	r20, 0x7A	; 122
    10e4:	53 e4       	ldi	r21, 0x43	; 67
    10e6:	6a a1       	ldd	r22, Y+34	; 0x22
    10e8:	7b a1       	ldd	r23, Y+35	; 0x23
    10ea:	8c a1       	ldd	r24, Y+36	; 0x24
    10ec:	9d a1       	ldd	r25, Y+37	; 0x25
    10ee:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	8e a3       	std	Y+38, r24	; 0x26
    10f8:	9f a3       	std	Y+39, r25	; 0x27
    10fa:	a8 a7       	std	Y+40, r26	; 0x28
    10fc:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	6e a1       	ldd	r22, Y+38	; 0x26
    1108:	7f a1       	ldd	r23, Y+39	; 0x27
    110a:	88 a5       	ldd	r24, Y+40	; 0x28
    110c:	99 a5       	ldd	r25, Y+41	; 0x29
    110e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1112:	88 23       	and	r24, r24
    1114:	2c f4       	brge	.+10     	; 0x1120 <LCD_init+0x25a>
		__ticks = 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9b a7       	std	Y+43, r25	; 0x2b
    111c:	8a a7       	std	Y+42, r24	; 0x2a
    111e:	3f c0       	rjmp	.+126    	; 0x119e <LCD_init+0x2d8>
	else if (__tmp > 65535)
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	6e a1       	ldd	r22, Y+38	; 0x26
    112a:	7f a1       	ldd	r23, Y+39	; 0x27
    112c:	88 a5       	ldd	r24, Y+40	; 0x28
    112e:	99 a5       	ldd	r25, Y+41	; 0x29
    1130:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    1134:	18 16       	cp	r1, r24
    1136:	4c f5       	brge	.+82     	; 0x118a <LCD_init+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	6a a1       	ldd	r22, Y+34	; 0x22
    1142:	7b a1       	ldd	r23, Y+35	; 0x23
    1144:	8c a1       	ldd	r24, Y+36	; 0x24
    1146:	9d a1       	ldd	r25, Y+37	; 0x25
    1148:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9b a7       	std	Y+43, r25	; 0x2b
    115e:	8a a7       	std	Y+42, r24	; 0x2a
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <LCD_init+0x2ba>
    1162:	89 e1       	ldi	r24, 0x19	; 25
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9d a7       	std	Y+45, r25	; 0x2d
    1168:	8c a7       	std	Y+44, r24	; 0x2c
    116a:	8c a5       	ldd	r24, Y+44	; 0x2c
    116c:	9d a5       	ldd	r25, Y+45	; 0x2d
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <LCD_init+0x2a8>
    1172:	9d a7       	std	Y+45, r25	; 0x2d
    1174:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1176:	8a a5       	ldd	r24, Y+42	; 0x2a
    1178:	9b a5       	ldd	r25, Y+43	; 0x2b
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	9b a7       	std	Y+43, r25	; 0x2b
    117e:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1180:	8a a5       	ldd	r24, Y+42	; 0x2a
    1182:	9b a5       	ldd	r25, Y+43	; 0x2b
    1184:	89 2b       	or	r24, r25
    1186:	69 f7       	brne	.-38     	; 0x1162 <LCD_init+0x29c>
    1188:	14 c0       	rjmp	.+40     	; 0x11b2 <LCD_init+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118a:	6e a1       	ldd	r22, Y+38	; 0x26
    118c:	7f a1       	ldd	r23, Y+39	; 0x27
    118e:	88 a5       	ldd	r24, Y+40	; 0x28
    1190:	99 a5       	ldd	r25, Y+41	; 0x29
    1192:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9b a7       	std	Y+43, r25	; 0x2b
    119c:	8a a7       	std	Y+42, r24	; 0x2a
    119e:	8a a5       	ldd	r24, Y+42	; 0x2a
    11a0:	9b a5       	ldd	r25, Y+43	; 0x2b
    11a2:	9f a7       	std	Y+47, r25	; 0x2f
    11a4:	8e a7       	std	Y+46, r24	; 0x2e
    11a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    11a8:	9f a5       	ldd	r25, Y+47	; 0x2f
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <LCD_init+0x2e4>
    11ae:	9f a7       	std	Y+47, r25	; 0x2f
    11b0:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_ms(5);
	LCD_writeCMD(copyLCDNum, _LCD_8_BIT_MODE);
    11b2:	0f 2e       	mov	r0, r31
    11b4:	f8 e3       	ldi	r31, 0x38	; 56
    11b6:	cf 2e       	mov	r12, r31
    11b8:	f0 2d       	mov	r31, r0
    11ba:	ee ac       	ldd	r14, Y+62	; 0x3e
    11bc:	ff ac       	ldd	r15, Y+63	; 0x3f
    11be:	ce 01       	movw	r24, r28
    11c0:	80 5c       	subi	r24, 0xC0	; 192
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	fc 01       	movw	r30, r24
    11c6:	00 81       	ld	r16, Z
    11c8:	ce 01       	movw	r24, r28
    11ca:	8f 5b       	subi	r24, 0xBF	; 191
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	fc 01       	movw	r30, r24
    11d0:	10 81       	ld	r17, Z
    11d2:	ce 01       	movw	r24, r28
    11d4:	8e 5b       	subi	r24, 0xBE	; 190
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	fc 01       	movw	r30, r24
    11da:	20 81       	ld	r18, Z
    11dc:	ce 01       	movw	r24, r28
    11de:	8d 5b       	subi	r24, 0xBD	; 189
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	fc 01       	movw	r30, r24
    11e4:	30 81       	ld	r19, Z
    11e6:	ce 01       	movw	r24, r28
    11e8:	8c 5b       	subi	r24, 0xBC	; 188
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	fc 01       	movw	r30, r24
    11ee:	40 81       	ld	r20, Z
    11f0:	ce 01       	movw	r24, r28
    11f2:	8b 5b       	subi	r24, 0xBB	; 187
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	fc 01       	movw	r30, r24
    11f8:	50 81       	ld	r21, Z
    11fa:	ce 01       	movw	r24, r28
    11fc:	8a 5b       	subi	r24, 0xBA	; 186
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	fc 01       	movw	r30, r24
    1202:	60 81       	ld	r22, Z
    1204:	ce 01       	movw	r24, r28
    1206:	89 5b       	subi	r24, 0xB9	; 185
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	fc 01       	movw	r30, r24
    120c:	70 81       	ld	r23, Z
    120e:	ce 01       	movw	r24, r28
    1210:	88 5b       	subi	r24, 0xB8	; 184
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	fc 01       	movw	r30, r24
    1216:	80 81       	ld	r24, Z
    1218:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a6 e1       	ldi	r26, 0x16	; 22
    1222:	b3 e4       	ldi	r27, 0x43	; 67
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	9b 83       	std	Y+3, r25	; 0x03
    1228:	ac 83       	std	Y+4, r26	; 0x04
    122a:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    122c:	2b ea       	ldi	r18, 0xAB	; 171
    122e:	3a ea       	ldi	r19, 0xAA	; 170
    1230:	4a ea       	ldi	r20, 0xAA	; 170
    1232:	5e e3       	ldi	r21, 0x3E	; 62
    1234:	6a 81       	ldd	r22, Y+2	; 0x02
    1236:	7b 81       	ldd	r23, Y+3	; 0x03
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8e 83       	std	Y+6, r24	; 0x06
    1246:	9f 83       	std	Y+7, r25	; 0x07
    1248:	a8 87       	std	Y+8, r26	; 0x08
    124a:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5e e3       	ldi	r21, 0x3E	; 62
    1254:	6a 81       	ldd	r22, Y+2	; 0x02
    1256:	7b 81       	ldd	r23, Y+3	; 0x03
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	9d 81       	ldd	r25, Y+5	; 0x05
    125c:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	8a 87       	std	Y+10, r24	; 0x0a
    1266:	9b 87       	std	Y+11, r25	; 0x0b
    1268:	ac 87       	std	Y+12, r26	; 0x0c
    126a:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	6e 81       	ldd	r22, Y+6	; 0x06
    1276:	7f 81       	ldd	r23, Y+7	; 0x07
    1278:	88 85       	ldd	r24, Y+8	; 0x08
    127a:	99 85       	ldd	r25, Y+9	; 0x09
    127c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1280:	88 23       	and	r24, r24
    1282:	1c f4       	brge	.+6      	; 0x128a <LCD_init+0x3c4>
		__ticks = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8e 87       	std	Y+14, r24	; 0x0e
    1288:	b2 c0       	rjmp	.+356    	; 0x13ee <LCD_init+0x528>
	else if (__tmp2 > 65535)
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	3f ef       	ldi	r19, 0xFF	; 255
    128e:	4f e7       	ldi	r20, 0x7F	; 127
    1290:	57 e4       	ldi	r21, 0x47	; 71
    1292:	6a 85       	ldd	r22, Y+10	; 0x0a
    1294:	7b 85       	ldd	r23, Y+11	; 0x0b
    1296:	8c 85       	ldd	r24, Y+12	; 0x0c
    1298:	9d 85       	ldd	r25, Y+13	; 0x0d
    129a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    129e:	18 16       	cp	r1, r24
    12a0:	0c f0       	brlt	.+2      	; 0x12a4 <LCD_init+0x3de>
    12a2:	7b c0       	rjmp	.+246    	; 0x139a <LCD_init+0x4d4>
	{
		_delay_ms(__us / 1000.0);
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	4a e7       	ldi	r20, 0x7A	; 122
    12aa:	54 e4       	ldi	r21, 0x44	; 68
    12ac:	6a 81       	ldd	r22, Y+2	; 0x02
    12ae:	7b 81       	ldd	r23, Y+3	; 0x03
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	9d 81       	ldd	r25, Y+5	; 0x05
    12b4:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__divsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8f 87       	std	Y+15, r24	; 0x0f
    12be:	98 8b       	std	Y+16, r25	; 0x10
    12c0:	a9 8b       	std	Y+17, r26	; 0x11
    12c2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a e7       	ldi	r20, 0x7A	; 122
    12ca:	53 e4       	ldi	r21, 0x43	; 67
    12cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    12ce:	78 89       	ldd	r23, Y+16	; 0x10
    12d0:	89 89       	ldd	r24, Y+17	; 0x11
    12d2:	9a 89       	ldd	r25, Y+18	; 0x12
    12d4:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8b 8b       	std	Y+19, r24	; 0x13
    12de:	9c 8b       	std	Y+20, r25	; 0x14
    12e0:	ad 8b       	std	Y+21, r26	; 0x15
    12e2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	6b 89       	ldd	r22, Y+19	; 0x13
    12ee:	7c 89       	ldd	r23, Y+20	; 0x14
    12f0:	8d 89       	ldd	r24, Y+21	; 0x15
    12f2:	9e 89       	ldd	r25, Y+22	; 0x16
    12f4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	2c f4       	brge	.+10     	; 0x1306 <LCD_init+0x440>
		__ticks = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	98 8f       	std	Y+24, r25	; 0x18
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	3f c0       	rjmp	.+126    	; 0x1384 <LCD_init+0x4be>
	else if (__tmp > 65535)
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	6b 89       	ldd	r22, Y+19	; 0x13
    1310:	7c 89       	ldd	r23, Y+20	; 0x14
    1312:	8d 89       	ldd	r24, Y+21	; 0x15
    1314:	9e 89       	ldd	r25, Y+22	; 0x16
    1316:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    131a:	18 16       	cp	r1, r24
    131c:	4c f5       	brge	.+82     	; 0x1370 <LCD_init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	6f 85       	ldd	r22, Y+15	; 0x0f
    1328:	78 89       	ldd	r23, Y+16	; 0x10
    132a:	89 89       	ldd	r24, Y+17	; 0x11
    132c:	9a 89       	ldd	r25, Y+18	; 0x12
    132e:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	98 8f       	std	Y+24, r25	; 0x18
    1344:	8f 8b       	std	Y+23, r24	; 0x17
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <LCD_init+0x4a0>
    1348:	89 e1       	ldi	r24, 0x19	; 25
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9a 8f       	std	Y+26, r25	; 0x1a
    134e:	89 8f       	std	Y+25, r24	; 0x19
    1350:	89 8d       	ldd	r24, Y+25	; 0x19
    1352:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <LCD_init+0x48e>
    1358:	9a 8f       	std	Y+26, r25	; 0x1a
    135a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	8f 89       	ldd	r24, Y+23	; 0x17
    135e:	98 8d       	ldd	r25, Y+24	; 0x18
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	98 8f       	std	Y+24, r25	; 0x18
    1364:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	8f 89       	ldd	r24, Y+23	; 0x17
    1368:	98 8d       	ldd	r25, Y+24	; 0x18
    136a:	89 2b       	or	r24, r25
    136c:	69 f7       	brne	.-38     	; 0x1348 <LCD_init+0x482>
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <LCD_init+0x528>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1370:	6b 89       	ldd	r22, Y+19	; 0x13
    1372:	7c 89       	ldd	r23, Y+20	; 0x14
    1374:	8d 89       	ldd	r24, Y+21	; 0x15
    1376:	9e 89       	ldd	r25, Y+22	; 0x16
    1378:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	98 8f       	std	Y+24, r25	; 0x18
    1382:	8f 8b       	std	Y+23, r24	; 0x17
    1384:	8f 89       	ldd	r24, Y+23	; 0x17
    1386:	98 8d       	ldd	r25, Y+24	; 0x18
    1388:	9c 8f       	std	Y+28, r25	; 0x1c
    138a:	8b 8f       	std	Y+27, r24	; 0x1b
    138c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    138e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_init+0x4ca>
    1394:	9c 8f       	std	Y+28, r25	; 0x1c
    1396:	8b 8f       	std	Y+27, r24	; 0x1b
    1398:	2a c0       	rjmp	.+84     	; 0x13ee <LCD_init+0x528>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	4f e7       	ldi	r20, 0x7F	; 127
    13a0:	53 e4       	ldi	r21, 0x43	; 67
    13a2:	6e 81       	ldd	r22, Y+6	; 0x06
    13a4:	7f 81       	ldd	r23, Y+7	; 0x07
    13a6:	88 85       	ldd	r24, Y+8	; 0x08
    13a8:	99 85       	ldd	r25, Y+9	; 0x09
    13aa:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	ac f4       	brge	.+42     	; 0x13dc <LCD_init+0x516>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    13b2:	6a 85       	ldd	r22, Y+10	; 0x0a
    13b4:	7b 85       	ldd	r23, Y+11	; 0x0b
    13b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    13b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ba:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9e 8f       	std	Y+30, r25	; 0x1e
    13c4:	8d 8f       	std	Y+29, r24	; 0x1d
    13c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ca:	98 a3       	std	Y+32, r25	; 0x20
    13cc:	8f 8f       	std	Y+31, r24	; 0x1f
    13ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13d0:	98 a1       	ldd	r25, Y+32	; 0x20
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LCD_init+0x50c>
    13d6:	98 a3       	std	Y+32, r25	; 0x20
    13d8:	8f 8f       	std	Y+31, r24	; 0x1f
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <LCD_init+0x534>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13dc:	6e 81       	ldd	r22, Y+6	; 0x06
    13de:	7f 81       	ldd	r23, Y+7	; 0x07
    13e0:	88 85       	ldd	r24, Y+8	; 0x08
    13e2:	99 85       	ldd	r25, Y+9	; 0x09
    13e4:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	8e 87       	std	Y+14, r24	; 0x0e
    13ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f0:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13f2:	89 a1       	ldd	r24, Y+33	; 0x21
    13f4:	8a 95       	dec	r24
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LCD_init+0x52e>
    13f8:	89 a3       	std	Y+33, r24	; 0x21
	_delay_us(150);
	LCD_writeCMD(copyLCDNum, _LCD_8_BIT_MODE);
    13fa:	0f 2e       	mov	r0, r31
    13fc:	f8 e3       	ldi	r31, 0x38	; 56
    13fe:	cf 2e       	mov	r12, r31
    1400:	f0 2d       	mov	r31, r0
    1402:	ee ac       	ldd	r14, Y+62	; 0x3e
    1404:	ff ac       	ldd	r15, Y+63	; 0x3f
    1406:	ce 01       	movw	r24, r28
    1408:	80 5c       	subi	r24, 0xC0	; 192
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	fc 01       	movw	r30, r24
    140e:	00 81       	ld	r16, Z
    1410:	ce 01       	movw	r24, r28
    1412:	8f 5b       	subi	r24, 0xBF	; 191
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	fc 01       	movw	r30, r24
    1418:	10 81       	ld	r17, Z
    141a:	ce 01       	movw	r24, r28
    141c:	8e 5b       	subi	r24, 0xBE	; 190
    141e:	9f 4f       	sbci	r25, 0xFF	; 255
    1420:	fc 01       	movw	r30, r24
    1422:	20 81       	ld	r18, Z
    1424:	ce 01       	movw	r24, r28
    1426:	8d 5b       	subi	r24, 0xBD	; 189
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	fc 01       	movw	r30, r24
    142c:	30 81       	ld	r19, Z
    142e:	ce 01       	movw	r24, r28
    1430:	8c 5b       	subi	r24, 0xBC	; 188
    1432:	9f 4f       	sbci	r25, 0xFF	; 255
    1434:	fc 01       	movw	r30, r24
    1436:	40 81       	ld	r20, Z
    1438:	ce 01       	movw	r24, r28
    143a:	8b 5b       	subi	r24, 0xBB	; 187
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	fc 01       	movw	r30, r24
    1440:	50 81       	ld	r21, Z
    1442:	ce 01       	movw	r24, r28
    1444:	8a 5b       	subi	r24, 0xBA	; 186
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	fc 01       	movw	r30, r24
    144a:	60 81       	ld	r22, Z
    144c:	ce 01       	movw	r24, r28
    144e:	89 5b       	subi	r24, 0xB9	; 185
    1450:	9f 4f       	sbci	r25, 0xFF	; 255
    1452:	fc 01       	movw	r30, r24
    1454:	70 81       	ld	r23, Z
    1456:	ce 01       	movw	r24, r28
    1458:	88 5b       	subi	r24, 0xB8	; 184
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	fc 01       	movw	r30, r24
    145e:	80 81       	ld	r24, Z
    1460:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum, _LCD_CLEAR_DIS);
    1464:	cc 24       	eor	r12, r12
    1466:	c3 94       	inc	r12
    1468:	ee ac       	ldd	r14, Y+62	; 0x3e
    146a:	ff ac       	ldd	r15, Y+63	; 0x3f
    146c:	ce 01       	movw	r24, r28
    146e:	80 5c       	subi	r24, 0xC0	; 192
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	fc 01       	movw	r30, r24
    1474:	00 81       	ld	r16, Z
    1476:	ce 01       	movw	r24, r28
    1478:	8f 5b       	subi	r24, 0xBF	; 191
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	fc 01       	movw	r30, r24
    147e:	10 81       	ld	r17, Z
    1480:	ce 01       	movw	r24, r28
    1482:	8e 5b       	subi	r24, 0xBE	; 190
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	fc 01       	movw	r30, r24
    1488:	20 81       	ld	r18, Z
    148a:	ce 01       	movw	r24, r28
    148c:	8d 5b       	subi	r24, 0xBD	; 189
    148e:	9f 4f       	sbci	r25, 0xFF	; 255
    1490:	fc 01       	movw	r30, r24
    1492:	30 81       	ld	r19, Z
    1494:	ce 01       	movw	r24, r28
    1496:	8c 5b       	subi	r24, 0xBC	; 188
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	fc 01       	movw	r30, r24
    149c:	40 81       	ld	r20, Z
    149e:	ce 01       	movw	r24, r28
    14a0:	8b 5b       	subi	r24, 0xBB	; 187
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	fc 01       	movw	r30, r24
    14a6:	50 81       	ld	r21, Z
    14a8:	ce 01       	movw	r24, r28
    14aa:	8a 5b       	subi	r24, 0xBA	; 186
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	fc 01       	movw	r30, r24
    14b0:	60 81       	ld	r22, Z
    14b2:	ce 01       	movw	r24, r28
    14b4:	89 5b       	subi	r24, 0xB9	; 185
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	fc 01       	movw	r30, r24
    14ba:	70 81       	ld	r23, Z
    14bc:	ce 01       	movw	r24, r28
    14be:	88 5b       	subi	r24, 0xB8	; 184
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	fc 01       	movw	r30, r24
    14c4:	80 81       	ld	r24, Z
    14c6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum, _LCD_RETURN_HOME);
    14ca:	68 94       	set
    14cc:	cc 24       	eor	r12, r12
    14ce:	c1 f8       	bld	r12, 1
    14d0:	ee ac       	ldd	r14, Y+62	; 0x3e
    14d2:	ff ac       	ldd	r15, Y+63	; 0x3f
    14d4:	ce 01       	movw	r24, r28
    14d6:	80 5c       	subi	r24, 0xC0	; 192
    14d8:	9f 4f       	sbci	r25, 0xFF	; 255
    14da:	fc 01       	movw	r30, r24
    14dc:	00 81       	ld	r16, Z
    14de:	ce 01       	movw	r24, r28
    14e0:	8f 5b       	subi	r24, 0xBF	; 191
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	fc 01       	movw	r30, r24
    14e6:	10 81       	ld	r17, Z
    14e8:	ce 01       	movw	r24, r28
    14ea:	8e 5b       	subi	r24, 0xBE	; 190
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 81       	ld	r18, Z
    14f2:	ce 01       	movw	r24, r28
    14f4:	8d 5b       	subi	r24, 0xBD	; 189
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	fc 01       	movw	r30, r24
    14fa:	30 81       	ld	r19, Z
    14fc:	ce 01       	movw	r24, r28
    14fe:	8c 5b       	subi	r24, 0xBC	; 188
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	fc 01       	movw	r30, r24
    1504:	40 81       	ld	r20, Z
    1506:	ce 01       	movw	r24, r28
    1508:	8b 5b       	subi	r24, 0xBB	; 187
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	fc 01       	movw	r30, r24
    150e:	50 81       	ld	r21, Z
    1510:	ce 01       	movw	r24, r28
    1512:	8a 5b       	subi	r24, 0xBA	; 186
    1514:	9f 4f       	sbci	r25, 0xFF	; 255
    1516:	fc 01       	movw	r30, r24
    1518:	60 81       	ld	r22, Z
    151a:	ce 01       	movw	r24, r28
    151c:	89 5b       	subi	r24, 0xB9	; 185
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	fc 01       	movw	r30, r24
    1522:	70 81       	ld	r23, Z
    1524:	ce 01       	movw	r24, r28
    1526:	88 5b       	subi	r24, 0xB8	; 184
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	fc 01       	movw	r30, r24
    152c:	80 81       	ld	r24, Z
    152e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum, _LCD_ENTERY_INC);
    1532:	0f 2e       	mov	r0, r31
    1534:	f6 e0       	ldi	r31, 0x06	; 6
    1536:	cf 2e       	mov	r12, r31
    1538:	f0 2d       	mov	r31, r0
    153a:	ee ac       	ldd	r14, Y+62	; 0x3e
    153c:	ff ac       	ldd	r15, Y+63	; 0x3f
    153e:	ce 01       	movw	r24, r28
    1540:	80 5c       	subi	r24, 0xC0	; 192
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	fc 01       	movw	r30, r24
    1546:	00 81       	ld	r16, Z
    1548:	ce 01       	movw	r24, r28
    154a:	8f 5b       	subi	r24, 0xBF	; 191
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	fc 01       	movw	r30, r24
    1550:	10 81       	ld	r17, Z
    1552:	ce 01       	movw	r24, r28
    1554:	8e 5b       	subi	r24, 0xBE	; 190
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	fc 01       	movw	r30, r24
    155a:	20 81       	ld	r18, Z
    155c:	ce 01       	movw	r24, r28
    155e:	8d 5b       	subi	r24, 0xBD	; 189
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	fc 01       	movw	r30, r24
    1564:	30 81       	ld	r19, Z
    1566:	ce 01       	movw	r24, r28
    1568:	8c 5b       	subi	r24, 0xBC	; 188
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	fc 01       	movw	r30, r24
    156e:	40 81       	ld	r20, Z
    1570:	ce 01       	movw	r24, r28
    1572:	8b 5b       	subi	r24, 0xBB	; 187
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	fc 01       	movw	r30, r24
    1578:	50 81       	ld	r21, Z
    157a:	ce 01       	movw	r24, r28
    157c:	8a 5b       	subi	r24, 0xBA	; 186
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	fc 01       	movw	r30, r24
    1582:	60 81       	ld	r22, Z
    1584:	ce 01       	movw	r24, r28
    1586:	89 5b       	subi	r24, 0xB9	; 185
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	fc 01       	movw	r30, r24
    158c:	70 81       	ld	r23, Z
    158e:	ce 01       	movw	r24, r28
    1590:	88 5b       	subi	r24, 0xB8	; 184
    1592:	9f 4f       	sbci	r25, 0xFF	; 255
    1594:	fc 01       	movw	r30, r24
    1596:	80 81       	ld	r24, Z
    1598:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum, _LCD_DISPLAY_ON);
    159c:	0f 2e       	mov	r0, r31
    159e:	fc e0       	ldi	r31, 0x0C	; 12
    15a0:	cf 2e       	mov	r12, r31
    15a2:	f0 2d       	mov	r31, r0
    15a4:	ee ac       	ldd	r14, Y+62	; 0x3e
    15a6:	ff ac       	ldd	r15, Y+63	; 0x3f
    15a8:	ce 01       	movw	r24, r28
    15aa:	80 5c       	subi	r24, 0xC0	; 192
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	fc 01       	movw	r30, r24
    15b0:	00 81       	ld	r16, Z
    15b2:	ce 01       	movw	r24, r28
    15b4:	8f 5b       	subi	r24, 0xBF	; 191
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	fc 01       	movw	r30, r24
    15ba:	10 81       	ld	r17, Z
    15bc:	ce 01       	movw	r24, r28
    15be:	8e 5b       	subi	r24, 0xBE	; 190
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	fc 01       	movw	r30, r24
    15c4:	20 81       	ld	r18, Z
    15c6:	ce 01       	movw	r24, r28
    15c8:	8d 5b       	subi	r24, 0xBD	; 189
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	fc 01       	movw	r30, r24
    15ce:	30 81       	ld	r19, Z
    15d0:	ce 01       	movw	r24, r28
    15d2:	8c 5b       	subi	r24, 0xBC	; 188
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	fc 01       	movw	r30, r24
    15d8:	40 81       	ld	r20, Z
    15da:	ce 01       	movw	r24, r28
    15dc:	8b 5b       	subi	r24, 0xBB	; 187
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	fc 01       	movw	r30, r24
    15e2:	50 81       	ld	r21, Z
    15e4:	ce 01       	movw	r24, r28
    15e6:	8a 5b       	subi	r24, 0xBA	; 186
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	fc 01       	movw	r30, r24
    15ec:	60 81       	ld	r22, Z
    15ee:	ce 01       	movw	r24, r28
    15f0:	89 5b       	subi	r24, 0xB9	; 185
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	fc 01       	movw	r30, r24
    15f6:	70 81       	ld	r23, Z
    15f8:	ce 01       	movw	r24, r28
    15fa:	88 5b       	subi	r24, 0xB8	; 184
    15fc:	9f 4f       	sbci	r25, 0xFF	; 255
    15fe:	fc 01       	movw	r30, r24
    1600:	80 81       	ld	r24, Z
    1602:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum, _LCD_8_BIT_MODE);
    1606:	0f 2e       	mov	r0, r31
    1608:	f8 e3       	ldi	r31, 0x38	; 56
    160a:	cf 2e       	mov	r12, r31
    160c:	f0 2d       	mov	r31, r0
    160e:	ee ac       	ldd	r14, Y+62	; 0x3e
    1610:	ff ac       	ldd	r15, Y+63	; 0x3f
    1612:	ce 01       	movw	r24, r28
    1614:	80 5c       	subi	r24, 0xC0	; 192
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	fc 01       	movw	r30, r24
    161a:	00 81       	ld	r16, Z
    161c:	ce 01       	movw	r24, r28
    161e:	8f 5b       	subi	r24, 0xBF	; 191
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	fc 01       	movw	r30, r24
    1624:	10 81       	ld	r17, Z
    1626:	ce 01       	movw	r24, r28
    1628:	8e 5b       	subi	r24, 0xBE	; 190
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	fc 01       	movw	r30, r24
    162e:	20 81       	ld	r18, Z
    1630:	ce 01       	movw	r24, r28
    1632:	8d 5b       	subi	r24, 0xBD	; 189
    1634:	9f 4f       	sbci	r25, 0xFF	; 255
    1636:	fc 01       	movw	r30, r24
    1638:	30 81       	ld	r19, Z
    163a:	ce 01       	movw	r24, r28
    163c:	8c 5b       	subi	r24, 0xBC	; 188
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	fc 01       	movw	r30, r24
    1642:	40 81       	ld	r20, Z
    1644:	ce 01       	movw	r24, r28
    1646:	8b 5b       	subi	r24, 0xBB	; 187
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	fc 01       	movw	r30, r24
    164c:	50 81       	ld	r21, Z
    164e:	ce 01       	movw	r24, r28
    1650:	8a 5b       	subi	r24, 0xBA	; 186
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	fc 01       	movw	r30, r24
    1656:	60 81       	ld	r22, Z
    1658:	ce 01       	movw	r24, r28
    165a:	89 5b       	subi	r24, 0xB9	; 185
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	fc 01       	movw	r30, r24
    1660:	70 81       	ld	r23, Z
    1662:	ce 01       	movw	r24, r28
    1664:	88 5b       	subi	r24, 0xB8	; 184
    1666:	9f 4f       	sbci	r25, 0xFF	; 255
    1668:	fc 01       	movw	r30, r24
    166a:	80 81       	ld	r24, Z
    166c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum, 0x80);
    1670:	68 94       	set
    1672:	cc 24       	eor	r12, r12
    1674:	c7 f8       	bld	r12, 7
    1676:	ee ac       	ldd	r14, Y+62	; 0x3e
    1678:	ff ac       	ldd	r15, Y+63	; 0x3f
    167a:	ce 01       	movw	r24, r28
    167c:	80 5c       	subi	r24, 0xC0	; 192
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	fc 01       	movw	r30, r24
    1682:	00 81       	ld	r16, Z
    1684:	ce 01       	movw	r24, r28
    1686:	8f 5b       	subi	r24, 0xBF	; 191
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	fc 01       	movw	r30, r24
    168c:	10 81       	ld	r17, Z
    168e:	ce 01       	movw	r24, r28
    1690:	8e 5b       	subi	r24, 0xBE	; 190
    1692:	9f 4f       	sbci	r25, 0xFF	; 255
    1694:	fc 01       	movw	r30, r24
    1696:	20 81       	ld	r18, Z
    1698:	ce 01       	movw	r24, r28
    169a:	8d 5b       	subi	r24, 0xBD	; 189
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	fc 01       	movw	r30, r24
    16a0:	30 81       	ld	r19, Z
    16a2:	ce 01       	movw	r24, r28
    16a4:	8c 5b       	subi	r24, 0xBC	; 188
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	fc 01       	movw	r30, r24
    16aa:	40 81       	ld	r20, Z
    16ac:	ce 01       	movw	r24, r28
    16ae:	8b 5b       	subi	r24, 0xBB	; 187
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	fc 01       	movw	r30, r24
    16b4:	50 81       	ld	r21, Z
    16b6:	ce 01       	movw	r24, r28
    16b8:	8a 5b       	subi	r24, 0xBA	; 186
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	fc 01       	movw	r30, r24
    16be:	60 81       	ld	r22, Z
    16c0:	ce 01       	movw	r24, r28
    16c2:	89 5b       	subi	r24, 0xB9	; 185
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	fc 01       	movw	r30, r24
    16c8:	70 81       	ld	r23, Z
    16ca:	ce 01       	movw	r24, r28
    16cc:	88 5b       	subi	r24, 0xB8	; 184
    16ce:	9f 4f       	sbci	r25, 0xFF	; 255
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
	LCD_writeCMD(copyLCDNum, _LCD_ENTERY_INC);
	LCD_writeCMD(copyLCDNum, _LCD_DISPLAY_ON);
	LCD_writeCMD(copyLCDNum, _LCD_4_BIT_MODE);
	LCD_writeCMD(copyLCDNum, 0x80);
	#endif
}
    16d8:	00 00       	nop
    16da:	c8 5b       	subi	r28, 0xB8	; 184
    16dc:	df 4f       	sbci	r29, 0xFF	; 255
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	cf 90       	pop	r12
    16f6:	08 95       	ret

000016f8 <LCD_writeCMD>:
 * @param1 : copyLCDNum
 * @param2 : copyCMD
 * @retVal : void
 */
void LCD_writeCMD(PINS_LCD copyLCDNum, _LCD_COMMANDS copyCMD)
{
    16f8:	cf 92       	push	r12
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	2d 97       	sbiw	r28, 0x0d	; 13
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	ea 82       	std	Y+2, r14	; 0x02
    1718:	fb 82       	std	Y+3, r15	; 0x03
    171a:	0c 83       	std	Y+4, r16	; 0x04
    171c:	1d 83       	std	Y+5, r17	; 0x05
    171e:	2e 83       	std	Y+6, r18	; 0x06
    1720:	3f 83       	std	Y+7, r19	; 0x07
    1722:	48 87       	std	Y+8, r20	; 0x08
    1724:	59 87       	std	Y+9, r21	; 0x09
    1726:	6a 87       	std	Y+10, r22	; 0x0a
    1728:	7b 87       	std	Y+11, r23	; 0x0b
    172a:	8c 87       	std	Y+12, r24	; 0x0c
    172c:	cd 86       	std	Y+13, r12	; 0x0d
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	u8 Counter = Initial_Counter;
    172e:	19 82       	std	Y+1, r1	; 0x01
	Dio_setPinVal(copyLCDNum.RS , Status_Pin_Low);
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
	for(Counter = Initial_Counter; Counter < 8 ; Counter++)
    1738:	19 82       	std	Y+1, r1	; 0x01
    173a:	1d c0       	rjmp	.+58     	; 0x1776 <LCD_writeCMD+0x7e>
	{
		Dio_setPinVal(copyLCDNum.D[Counter], ((copyCMD >> Counter) & (u8)0x01));
    173c:	8d 85       	ldd	r24, Y+13	; 0x0d
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	29 81       	ldd	r18, Y+1	; 0x01
    1744:	22 2f       	mov	r18, r18
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	02 c0       	rjmp	.+4      	; 0x174e <LCD_writeCMD+0x56>
    174a:	95 95       	asr	r25
    174c:	87 95       	ror	r24
    174e:	2a 95       	dec	r18
    1750:	e2 f7       	brpl	.-8      	; 0x174a <LCD_writeCMD+0x52>
    1752:	48 2f       	mov	r20, r24
    1754:	41 70       	andi	r20, 0x01	; 1
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9e 01       	movw	r18, r28
    175e:	2b 5f       	subi	r18, 0xFB	; 251
    1760:	3f 4f       	sbci	r19, 0xFF	; 255
    1762:	82 0f       	add	r24, r18
    1764:	93 1f       	adc	r25, r19
    1766:	fc 01       	movw	r30, r24
    1768:	80 81       	ld	r24, Z
    176a:	64 2f       	mov	r22, r20
    176c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
void LCD_writeCMD(PINS_LCD copyLCDNum, _LCD_COMMANDS copyCMD)
{
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	u8 Counter = Initial_Counter;
	Dio_setPinVal(copyLCDNum.RS , Status_Pin_Low);
	for(Counter = Initial_Counter; Counter < 8 ; Counter++)
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	8f 5f       	subi	r24, 0xFF	; 255
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	00 f3       	brcs	.-64     	; 0x173c <LCD_writeCMD+0x44>
	{
		Dio_setPinVal(copyLCDNum.D[Counter], ((copyCMD >> Counter) & (u8)0x01));
	}
	LCD_enableSignal(copyLCDNum);
    177c:	ea 80       	ldd	r14, Y+2	; 0x02
    177e:	fb 80       	ldd	r15, Y+3	; 0x03
    1780:	0c 81       	ldd	r16, Y+4	; 0x04
    1782:	1d 81       	ldd	r17, Y+5	; 0x05
    1784:	2e 81       	ldd	r18, Y+6	; 0x06
    1786:	3f 81       	ldd	r19, Y+7	; 0x07
    1788:	48 85       	ldd	r20, Y+8	; 0x08
    178a:	59 85       	ldd	r21, Y+9	; 0x09
    178c:	6a 85       	ldd	r22, Y+10	; 0x0a
    178e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1790:	8c 85       	ldd	r24, Y+12	; 0x0c
    1792:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_enableSignal>
	LCD_getData(copyLCDNum,copyCMD >> 4);
	LCD_enableSignal(copyLCDNum);
	LCD_getData(copyLCDNum,copyCMD);
	LCD_enableSignal(copyLCDNum);
#endif
}
    1796:	00 00       	nop
    1798:	2d 96       	adiw	r28, 0x0d	; 13
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	cf 90       	pop	r12
    17b2:	08 95       	ret

000017b4 <LCD_writeChar>:
 * @param1 : copyLCDNum
 * @param2 : copyChar
 * @retVal : void
 */
void LCD_writeChar(PINS_LCD copyLCDNum, u8 copyChar)
{
    17b4:	cf 92       	push	r12
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	6a 97       	sbiw	r28, 0x1a	; 26
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	ef 86       	std	Y+15, r14	; 0x0f
    17d4:	f8 8a       	std	Y+16, r15	; 0x10
    17d6:	09 8b       	std	Y+17, r16	; 0x11
    17d8:	1a 8b       	std	Y+18, r17	; 0x12
    17da:	2b 8b       	std	Y+19, r18	; 0x13
    17dc:	3c 8b       	std	Y+20, r19	; 0x14
    17de:	4d 8b       	std	Y+21, r20	; 0x15
    17e0:	5e 8b       	std	Y+22, r21	; 0x16
    17e2:	6f 8b       	std	Y+23, r22	; 0x17
    17e4:	78 8f       	std	Y+24, r23	; 0x18
    17e6:	89 8f       	std	Y+25, r24	; 0x19
    17e8:	ca 8e       	std	Y+26, r12	; 0x1a
#if (_LCD_MODE == _8_BIT_MODE_LCD)
	Dio_setPinVal(copyLCDNum.RS , Status_Pin_High);
    17ea:	89 89       	ldd	r24, Y+17	; 0x11
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
	Dio_setPortVal(copyLCDNum.PORT_DATA_PIN_NUM, copyChar);
    17f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17f6:	0e 94 52 06 	call	0xca4	; 0xca4 <Dio_setPortVal>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e8       	ldi	r26, 0x80	; 128
    1800:	bf e3       	ldi	r27, 0x3F	; 63
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	ab 83       	std	Y+3, r26	; 0x03
    1808:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a e7       	ldi	r20, 0x7A	; 122
    1810:	53 e4       	ldi	r21, 0x43	; 67
    1812:	69 81       	ldd	r22, Y+1	; 0x01
    1814:	7a 81       	ldd	r23, Y+2	; 0x02
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	af 83       	std	Y+7, r26	; 0x07
    1828:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	6d 81       	ldd	r22, Y+5	; 0x05
    1834:	7e 81       	ldd	r23, Y+6	; 0x06
    1836:	8f 81       	ldd	r24, Y+7	; 0x07
    1838:	98 85       	ldd	r25, Y+8	; 0x08
    183a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    183e:	88 23       	and	r24, r24
    1840:	2c f4       	brge	.+10     	; 0x184c <LCD_writeChar+0x98>
		__ticks = 1;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9a 87       	std	Y+10, r25	; 0x0a
    1848:	89 87       	std	Y+9, r24	; 0x09
    184a:	3f c0       	rjmp	.+126    	; 0x18ca <LCD_writeChar+0x116>
	else if (__tmp > 65535)
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	6d 81       	ldd	r22, Y+5	; 0x05
    1856:	7e 81       	ldd	r23, Y+6	; 0x06
    1858:	8f 81       	ldd	r24, Y+7	; 0x07
    185a:	98 85       	ldd	r25, Y+8	; 0x08
    185c:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    1860:	18 16       	cp	r1, r24
    1862:	4c f5       	brge	.+82     	; 0x18b6 <LCD_writeChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	69 81       	ldd	r22, Y+1	; 0x01
    186e:	7a 81       	ldd	r23, Y+2	; 0x02
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9a 87       	std	Y+10, r25	; 0x0a
    188a:	89 87       	std	Y+9, r24	; 0x09
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <LCD_writeChar+0xf8>
    188e:	89 e1       	ldi	r24, 0x19	; 25
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9c 87       	std	Y+12, r25	; 0x0c
    1894:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1896:	8b 85       	ldd	r24, Y+11	; 0x0b
    1898:	9c 85       	ldd	r25, Y+12	; 0x0c
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_writeChar+0xe6>
    189e:	9c 87       	std	Y+12, r25	; 0x0c
    18a0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	89 85       	ldd	r24, Y+9	; 0x09
    18a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	9a 87       	std	Y+10, r25	; 0x0a
    18aa:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	89 85       	ldd	r24, Y+9	; 0x09
    18ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b0:	89 2b       	or	r24, r25
    18b2:	69 f7       	brne	.-38     	; 0x188e <LCD_writeChar+0xda>
    18b4:	14 c0       	rjmp	.+40     	; 0x18de <LCD_writeChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	6d 81       	ldd	r22, Y+5	; 0x05
    18b8:	7e 81       	ldd	r23, Y+6	; 0x06
    18ba:	8f 81       	ldd	r24, Y+7	; 0x07
    18bc:	98 85       	ldd	r25, Y+8	; 0x08
    18be:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	9a 87       	std	Y+10, r25	; 0x0a
    18c8:	89 87       	std	Y+9, r24	; 0x09
    18ca:	89 85       	ldd	r24, Y+9	; 0x09
    18cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ce:	9e 87       	std	Y+14, r25	; 0x0e
    18d0:	8d 87       	std	Y+13, r24	; 0x0d
    18d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <LCD_writeChar+0x122>
    18da:	9e 87       	std	Y+14, r25	; 0x0e
    18dc:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);
	LCD_enableSignal(copyLCDNum);
    18de:	ef 84       	ldd	r14, Y+15	; 0x0f
    18e0:	f8 88       	ldd	r15, Y+16	; 0x10
    18e2:	09 89       	ldd	r16, Y+17	; 0x11
    18e4:	1a 89       	ldd	r17, Y+18	; 0x12
    18e6:	2b 89       	ldd	r18, Y+19	; 0x13
    18e8:	3c 89       	ldd	r19, Y+20	; 0x14
    18ea:	4d 89       	ldd	r20, Y+21	; 0x15
    18ec:	5e 89       	ldd	r21, Y+22	; 0x16
    18ee:	6f 89       	ldd	r22, Y+23	; 0x17
    18f0:	78 8d       	ldd	r23, Y+24	; 0x18
    18f2:	89 8d       	ldd	r24, Y+25	; 0x19
    18f4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_enableSignal>
	LCD_getData(copyLCDNum,copyChar >> 4);
	LCD_enableSignal(copyLCDNum);
	LCD_getData(copyLCDNum,copyChar);
	LCD_enableSignal(copyLCDNum);
#endif
}
    18f8:	00 00       	nop
    18fa:	6a 96       	adiw	r28, 0x1a	; 26
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	cf 90       	pop	r12
    1914:	08 95       	ret

00001916 <LCD_writeSTR>:
 * @param1 : copyLCDNum
 * @param2 : copySTR
 * @retVal : void
 */
void LCD_writeSTR(PINS_LCD copyLCDNum, u8 *copySTR)
{
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	2d 97       	sbiw	r28, 0x0d	; 13
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	e9 82       	std	Y+1, r14	; 0x01
    1938:	fa 82       	std	Y+2, r15	; 0x02
    193a:	0b 83       	std	Y+3, r16	; 0x03
    193c:	1c 83       	std	Y+4, r17	; 0x04
    193e:	2d 83       	std	Y+5, r18	; 0x05
    1940:	3e 83       	std	Y+6, r19	; 0x06
    1942:	4f 83       	std	Y+7, r20	; 0x07
    1944:	58 87       	std	Y+8, r21	; 0x08
    1946:	69 87       	std	Y+9, r22	; 0x09
    1948:	7a 87       	std	Y+10, r23	; 0x0a
    194a:	8b 87       	std	Y+11, r24	; 0x0b
    194c:	dd 86       	std	Y+13, r13	; 0x0d
    194e:	cc 86       	std	Y+12, r12	; 0x0c
	while(*copySTR)
    1950:	17 c0       	rjmp	.+46     	; 0x1980 <LCD_writeSTR+0x6a>
	{
		LCD_writeChar(copyLCDNum, *copySTR++);
    1952:	8c 85       	ldd	r24, Y+12	; 0x0c
    1954:	9d 85       	ldd	r25, Y+13	; 0x0d
    1956:	9c 01       	movw	r18, r24
    1958:	2f 5f       	subi	r18, 0xFF	; 255
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	3d 87       	std	Y+13, r19	; 0x0d
    195e:	2c 87       	std	Y+12, r18	; 0x0c
    1960:	fc 01       	movw	r30, r24
    1962:	80 81       	ld	r24, Z
    1964:	c8 2e       	mov	r12, r24
    1966:	e9 80       	ldd	r14, Y+1	; 0x01
    1968:	fa 80       	ldd	r15, Y+2	; 0x02
    196a:	0b 81       	ldd	r16, Y+3	; 0x03
    196c:	1c 81       	ldd	r17, Y+4	; 0x04
    196e:	2d 81       	ldd	r18, Y+5	; 0x05
    1970:	3e 81       	ldd	r19, Y+6	; 0x06
    1972:	4f 81       	ldd	r20, Y+7	; 0x07
    1974:	58 85       	ldd	r21, Y+8	; 0x08
    1976:	69 85       	ldd	r22, Y+9	; 0x09
    1978:	7a 85       	ldd	r23, Y+10	; 0x0a
    197a:	8b 85       	ldd	r24, Y+11	; 0x0b
    197c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_writeChar>
 * @param2 : copySTR
 * @retVal : void
 */
void LCD_writeSTR(PINS_LCD copyLCDNum, u8 *copySTR)
{
	while(*copySTR)
    1980:	8c 85       	ldd	r24, Y+12	; 0x0c
    1982:	9d 85       	ldd	r25, Y+13	; 0x0d
    1984:	fc 01       	movw	r30, r24
    1986:	80 81       	ld	r24, Z
    1988:	88 23       	and	r24, r24
    198a:	19 f7       	brne	.-58     	; 0x1952 <LCD_writeSTR+0x3c>
	{
		LCD_writeChar(copyLCDNum, *copySTR++);
	}
}
    198c:	00 00       	nop
    198e:	2d 96       	adiw	r28, 0x0d	; 13
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	df 90       	pop	r13
    19a8:	cf 90       	pop	r12
    19aa:	08 95       	ret

000019ac <LCD_writeNum_u8>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u8(PINS_LCD copyLCDNum, u8 *copyNum)
{
    19ac:	cf 92       	push	r12
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	62 97       	sbiw	r28, 0x12	; 18
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	ee 82       	std	Y+6, r14	; 0x06
    19ce:	ff 82       	std	Y+7, r15	; 0x07
    19d0:	08 87       	std	Y+8, r16	; 0x08
    19d2:	19 87       	std	Y+9, r17	; 0x09
    19d4:	2a 87       	std	Y+10, r18	; 0x0a
    19d6:	3b 87       	std	Y+11, r19	; 0x0b
    19d8:	4c 87       	std	Y+12, r20	; 0x0c
    19da:	5d 87       	std	Y+13, r21	; 0x0d
    19dc:	6e 87       	std	Y+14, r22	; 0x0e
    19de:	7f 87       	std	Y+15, r23	; 0x0f
    19e0:	88 8b       	std	Y+16, r24	; 0x10
    19e2:	da 8a       	std	Y+18, r13	; 0x12
    19e4:	c9 8a       	std	Y+17, r12	; 0x11
	u8 Ret[5];
	LCD_convertNum_u8(copyNum, &Ret);
    19e6:	89 89       	ldd	r24, Y+17	; 0x11
    19e8:	9a 89       	ldd	r25, Y+18	; 0x12
    19ea:	28 2f       	mov	r18, r24
    19ec:	ce 01       	movw	r24, r28
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	bc 01       	movw	r22, r24
    19f2:	82 2f       	mov	r24, r18
    19f4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_convertNum_u8>
	LCD_writeSTR(copyLCDNum, Ret);
    19f8:	ce 01       	movw	r24, r28
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	6c 01       	movw	r12, r24
    19fe:	ee 80       	ldd	r14, Y+6	; 0x06
    1a00:	ff 80       	ldd	r15, Y+7	; 0x07
    1a02:	08 85       	ldd	r16, Y+8	; 0x08
    1a04:	19 85       	ldd	r17, Y+9	; 0x09
    1a06:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a08:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a0a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a0c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a0e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a10:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a12:	88 89       	ldd	r24, Y+16	; 0x10
    1a14:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LCD_writeSTR>
}
    1a18:	00 00       	nop
    1a1a:	62 96       	adiw	r28, 0x12	; 18
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	cf 90       	pop	r12
    1a36:	08 95       	ret

00001a38 <LCD_writeNum_u16>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u16(PINS_LCD copyLCDNum, u16 *copyNum)
{
    1a38:	cf 92       	push	r12
    1a3a:	df 92       	push	r13
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	67 97       	sbiw	r28, 0x17	; 23
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	eb 86       	std	Y+11, r14	; 0x0b
    1a5a:	fc 86       	std	Y+12, r15	; 0x0c
    1a5c:	0d 87       	std	Y+13, r16	; 0x0d
    1a5e:	1e 87       	std	Y+14, r17	; 0x0e
    1a60:	2f 87       	std	Y+15, r18	; 0x0f
    1a62:	38 8b       	std	Y+16, r19	; 0x10
    1a64:	49 8b       	std	Y+17, r20	; 0x11
    1a66:	5a 8b       	std	Y+18, r21	; 0x12
    1a68:	6b 8b       	std	Y+19, r22	; 0x13
    1a6a:	7c 8b       	std	Y+20, r23	; 0x14
    1a6c:	8d 8b       	std	Y+21, r24	; 0x15
    1a6e:	df 8a       	std	Y+23, r13	; 0x17
    1a70:	ce 8a       	std	Y+22, r12	; 0x16
	u16 Ret[5];
	LCD_convertNum_u16(copyNum, &Ret);
    1a72:	8e 89       	ldd	r24, Y+22	; 0x16
    1a74:	9f 89       	ldd	r25, Y+23	; 0x17
    1a76:	9e 01       	movw	r18, r28
    1a78:	2f 5f       	subi	r18, 0xFF	; 255
    1a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7c:	b9 01       	movw	r22, r18
    1a7e:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_convertNum_u16>
	LCD_writeSTR(copyLCDNum, Ret);
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	6c 01       	movw	r12, r24
    1a88:	eb 84       	ldd	r14, Y+11	; 0x0b
    1a8a:	fc 84       	ldd	r15, Y+12	; 0x0c
    1a8c:	0d 85       	ldd	r16, Y+13	; 0x0d
    1a8e:	1e 85       	ldd	r17, Y+14	; 0x0e
    1a90:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a92:	38 89       	ldd	r19, Y+16	; 0x10
    1a94:	49 89       	ldd	r20, Y+17	; 0x11
    1a96:	5a 89       	ldd	r21, Y+18	; 0x12
    1a98:	6b 89       	ldd	r22, Y+19	; 0x13
    1a9a:	7c 89       	ldd	r23, Y+20	; 0x14
    1a9c:	8d 89       	ldd	r24, Y+21	; 0x15
    1a9e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LCD_writeSTR>
}
    1aa2:	00 00       	nop
    1aa4:	67 96       	adiw	r28, 0x17	; 23
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	df 90       	pop	r13
    1abe:	cf 90       	pop	r12
    1ac0:	08 95       	ret

00001ac2 <LCD_writeNum_u32>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u32(PINS_LCD copyLCDNum, u32 *copyNum)
{
    1ac2:	cf 92       	push	r12
    1ac4:	df 92       	push	r13
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	a1 97       	sbiw	r28, 0x21	; 33
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	ed 8a       	std	Y+21, r14	; 0x15
    1ae4:	fe 8a       	std	Y+22, r15	; 0x16
    1ae6:	0f 8b       	std	Y+23, r16	; 0x17
    1ae8:	18 8f       	std	Y+24, r17	; 0x18
    1aea:	29 8f       	std	Y+25, r18	; 0x19
    1aec:	3a 8f       	std	Y+26, r19	; 0x1a
    1aee:	4b 8f       	std	Y+27, r20	; 0x1b
    1af0:	5c 8f       	std	Y+28, r21	; 0x1c
    1af2:	6d 8f       	std	Y+29, r22	; 0x1d
    1af4:	7e 8f       	std	Y+30, r23	; 0x1e
    1af6:	8f 8f       	std	Y+31, r24	; 0x1f
    1af8:	d9 a2       	std	Y+33, r13	; 0x21
    1afa:	c8 a2       	std	Y+32, r12	; 0x20
	u32 Ret[5];
	LCD_convertNum_u32(copyNum, &Ret);
    1afc:	88 a1       	ldd	r24, Y+32	; 0x20
    1afe:	99 a1       	ldd	r25, Y+33	; 0x21
    1b00:	09 2e       	mov	r0, r25
    1b02:	00 0c       	add	r0, r0
    1b04:	aa 0b       	sbc	r26, r26
    1b06:	bb 0b       	sbc	r27, r27
    1b08:	9e 01       	movw	r18, r28
    1b0a:	2f 5f       	subi	r18, 0xFF	; 255
    1b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0e:	a9 01       	movw	r20, r18
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 d5 11 	call	0x23aa	; 0x23aa <LCD_convertNum_u32>
	LCD_writeSTR(copyLCDNum, Ret);
    1b18:	ce 01       	movw	r24, r28
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	6c 01       	movw	r12, r24
    1b1e:	ed 88       	ldd	r14, Y+21	; 0x15
    1b20:	fe 88       	ldd	r15, Y+22	; 0x16
    1b22:	0f 89       	ldd	r16, Y+23	; 0x17
    1b24:	18 8d       	ldd	r17, Y+24	; 0x18
    1b26:	29 8d       	ldd	r18, Y+25	; 0x19
    1b28:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1b2a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1b2c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1b2e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b30:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b34:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LCD_writeSTR>
}
    1b38:	00 00       	nop
    1b3a:	a1 96       	adiw	r28, 0x21	; 33
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	ff 90       	pop	r15
    1b50:	ef 90       	pop	r14
    1b52:	df 90       	pop	r13
    1b54:	cf 90       	pop	r12
    1b56:	08 95       	ret

00001b58 <LCD_writeCharPosition>:
 * @param3 : copyColumn
 * @param4 : copyChar
 * @retVal : void
 */
void LCD_writeCharPosition(PINS_LCD copyLCDNum, ROW_NUM copyRow, u8 copyColumn, u8 copyChar)
{
    1b58:	8f 92       	push	r8
    1b5a:	af 92       	push	r10
    1b5c:	cf 92       	push	r12
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	2e 97       	sbiw	r28, 0x0e	; 14
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	e9 82       	std	Y+1, r14	; 0x01
    1b7c:	fa 82       	std	Y+2, r15	; 0x02
    1b7e:	0b 83       	std	Y+3, r16	; 0x03
    1b80:	1c 83       	std	Y+4, r17	; 0x04
    1b82:	2d 83       	std	Y+5, r18	; 0x05
    1b84:	3e 83       	std	Y+6, r19	; 0x06
    1b86:	4f 83       	std	Y+7, r20	; 0x07
    1b88:	58 87       	std	Y+8, r21	; 0x08
    1b8a:	69 87       	std	Y+9, r22	; 0x09
    1b8c:	7a 87       	std	Y+10, r23	; 0x0a
    1b8e:	8b 87       	std	Y+11, r24	; 0x0b
    1b90:	cc 86       	std	Y+12, r12	; 0x0c
    1b92:	ad 86       	std	Y+13, r10	; 0x0d
    1b94:	8e 86       	std	Y+14, r8	; 0x0e
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1b96:	ad 84       	ldd	r10, Y+13	; 0x0d
    1b98:	cc 84       	ldd	r12, Y+12	; 0x0c
    1b9a:	e9 80       	ldd	r14, Y+1	; 0x01
    1b9c:	fa 80       	ldd	r15, Y+2	; 0x02
    1b9e:	0b 81       	ldd	r16, Y+3	; 0x03
    1ba0:	1c 81       	ldd	r17, Y+4	; 0x04
    1ba2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ba4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba6:	4f 81       	ldd	r20, Y+7	; 0x07
    1ba8:	58 85       	ldd	r21, Y+8	; 0x08
    1baa:	69 85       	ldd	r22, Y+9	; 0x09
    1bac:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bae:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bb0:	0e 94 ed 10 	call	0x21da	; 0x21da <LCD_setCursorPosition>
	LCD_writeChar(copyLCDNum, copyChar);
    1bb4:	ce 84       	ldd	r12, Y+14	; 0x0e
    1bb6:	e9 80       	ldd	r14, Y+1	; 0x01
    1bb8:	fa 80       	ldd	r15, Y+2	; 0x02
    1bba:	0b 81       	ldd	r16, Y+3	; 0x03
    1bbc:	1c 81       	ldd	r17, Y+4	; 0x04
    1bbe:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc0:	3e 81       	ldd	r19, Y+6	; 0x06
    1bc2:	4f 81       	ldd	r20, Y+7	; 0x07
    1bc4:	58 85       	ldd	r21, Y+8	; 0x08
    1bc6:	69 85       	ldd	r22, Y+9	; 0x09
    1bc8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bca:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bcc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_writeChar>
}
    1bd0:	00 00       	nop
    1bd2:	2e 96       	adiw	r28, 0x0e	; 14
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	ff 90       	pop	r15
    1be8:	ef 90       	pop	r14
    1bea:	cf 90       	pop	r12
    1bec:	af 90       	pop	r10
    1bee:	8f 90       	pop	r8
    1bf0:	08 95       	ret

00001bf2 <LCD_writeSTRPosition>:
 * @param3 : copyColumn
 * @param4 : copySTR
 * @retVal : void
 */
void LCD_writeSTRPosition(PINS_LCD copyLCDNum, ROW_NUM copyRow, u8 copyColumn,u8 *copySTR)
{
    1bf2:	8f 92       	push	r8
    1bf4:	9f 92       	push	r9
    1bf6:	af 92       	push	r10
    1bf8:	cf 92       	push	r12
    1bfa:	df 92       	push	r13
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	2f 97       	sbiw	r28, 0x0f	; 15
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	e9 82       	std	Y+1, r14	; 0x01
    1c1a:	fa 82       	std	Y+2, r15	; 0x02
    1c1c:	0b 83       	std	Y+3, r16	; 0x03
    1c1e:	1c 83       	std	Y+4, r17	; 0x04
    1c20:	2d 83       	std	Y+5, r18	; 0x05
    1c22:	3e 83       	std	Y+6, r19	; 0x06
    1c24:	4f 83       	std	Y+7, r20	; 0x07
    1c26:	58 87       	std	Y+8, r21	; 0x08
    1c28:	69 87       	std	Y+9, r22	; 0x09
    1c2a:	7a 87       	std	Y+10, r23	; 0x0a
    1c2c:	8b 87       	std	Y+11, r24	; 0x0b
    1c2e:	cc 86       	std	Y+12, r12	; 0x0c
    1c30:	ad 86       	std	Y+13, r10	; 0x0d
    1c32:	9f 86       	std	Y+15, r9	; 0x0f
    1c34:	8e 86       	std	Y+14, r8	; 0x0e
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1c36:	ad 84       	ldd	r10, Y+13	; 0x0d
    1c38:	cc 84       	ldd	r12, Y+12	; 0x0c
    1c3a:	e9 80       	ldd	r14, Y+1	; 0x01
    1c3c:	fa 80       	ldd	r15, Y+2	; 0x02
    1c3e:	0b 81       	ldd	r16, Y+3	; 0x03
    1c40:	1c 81       	ldd	r17, Y+4	; 0x04
    1c42:	2d 81       	ldd	r18, Y+5	; 0x05
    1c44:	3e 81       	ldd	r19, Y+6	; 0x06
    1c46:	4f 81       	ldd	r20, Y+7	; 0x07
    1c48:	58 85       	ldd	r21, Y+8	; 0x08
    1c4a:	69 85       	ldd	r22, Y+9	; 0x09
    1c4c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c50:	0e 94 ed 10 	call	0x21da	; 0x21da <LCD_setCursorPosition>
	LCD_writeSTR(copyLCDNum, copySTR);
    1c54:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c56:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c58:	6c 01       	movw	r12, r24
    1c5a:	e9 80       	ldd	r14, Y+1	; 0x01
    1c5c:	fa 80       	ldd	r15, Y+2	; 0x02
    1c5e:	0b 81       	ldd	r16, Y+3	; 0x03
    1c60:	1c 81       	ldd	r17, Y+4	; 0x04
    1c62:	2d 81       	ldd	r18, Y+5	; 0x05
    1c64:	3e 81       	ldd	r19, Y+6	; 0x06
    1c66:	4f 81       	ldd	r20, Y+7	; 0x07
    1c68:	58 85       	ldd	r21, Y+8	; 0x08
    1c6a:	69 85       	ldd	r22, Y+9	; 0x09
    1c6c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c70:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LCD_writeSTR>
}
    1c74:	00 00       	nop
    1c76:	2f 96       	adiw	r28, 0x0f	; 15
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	df 90       	pop	r13
    1c90:	cf 90       	pop	r12
    1c92:	af 90       	pop	r10
    1c94:	9f 90       	pop	r9
    1c96:	8f 90       	pop	r8
    1c98:	08 95       	ret

00001c9a <LCD_writeNum_u8Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u8Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, u8 copyColumn,u8 *copyNum)
{
    1c9a:	8f 92       	push	r8
    1c9c:	9f 92       	push	r9
    1c9e:	af 92       	push	r10
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	2f 97       	sbiw	r28, 0x0f	; 15
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	e9 82       	std	Y+1, r14	; 0x01
    1cc2:	fa 82       	std	Y+2, r15	; 0x02
    1cc4:	0b 83       	std	Y+3, r16	; 0x03
    1cc6:	1c 83       	std	Y+4, r17	; 0x04
    1cc8:	2d 83       	std	Y+5, r18	; 0x05
    1cca:	3e 83       	std	Y+6, r19	; 0x06
    1ccc:	4f 83       	std	Y+7, r20	; 0x07
    1cce:	58 87       	std	Y+8, r21	; 0x08
    1cd0:	69 87       	std	Y+9, r22	; 0x09
    1cd2:	7a 87       	std	Y+10, r23	; 0x0a
    1cd4:	8b 87       	std	Y+11, r24	; 0x0b
    1cd6:	cc 86       	std	Y+12, r12	; 0x0c
    1cd8:	ad 86       	std	Y+13, r10	; 0x0d
    1cda:	9f 86       	std	Y+15, r9	; 0x0f
    1cdc:	8e 86       	std	Y+14, r8	; 0x0e
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1cde:	ad 84       	ldd	r10, Y+13	; 0x0d
    1ce0:	cc 84       	ldd	r12, Y+12	; 0x0c
    1ce2:	e9 80       	ldd	r14, Y+1	; 0x01
    1ce4:	fa 80       	ldd	r15, Y+2	; 0x02
    1ce6:	0b 81       	ldd	r16, Y+3	; 0x03
    1ce8:	1c 81       	ldd	r17, Y+4	; 0x04
    1cea:	2d 81       	ldd	r18, Y+5	; 0x05
    1cec:	3e 81       	ldd	r19, Y+6	; 0x06
    1cee:	4f 81       	ldd	r20, Y+7	; 0x07
    1cf0:	58 85       	ldd	r21, Y+8	; 0x08
    1cf2:	69 85       	ldd	r22, Y+9	; 0x09
    1cf4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cf6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cf8:	0e 94 ed 10 	call	0x21da	; 0x21da <LCD_setCursorPosition>
	LCD_writeNum_u8(copyLCDNum, copyNum);
    1cfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d00:	6c 01       	movw	r12, r24
    1d02:	e9 80       	ldd	r14, Y+1	; 0x01
    1d04:	fa 80       	ldd	r15, Y+2	; 0x02
    1d06:	0b 81       	ldd	r16, Y+3	; 0x03
    1d08:	1c 81       	ldd	r17, Y+4	; 0x04
    1d0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d0e:	4f 81       	ldd	r20, Y+7	; 0x07
    1d10:	58 85       	ldd	r21, Y+8	; 0x08
    1d12:	69 85       	ldd	r22, Y+9	; 0x09
    1d14:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d18:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_writeNum_u8>
}
    1d1c:	00 00       	nop
    1d1e:	2f 96       	adiw	r28, 0x0f	; 15
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	df 90       	pop	r13
    1d38:	cf 90       	pop	r12
    1d3a:	af 90       	pop	r10
    1d3c:	9f 90       	pop	r9
    1d3e:	8f 90       	pop	r8
    1d40:	08 95       	ret

00001d42 <LCD_writeNum_u16Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u16Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, u8 copyColumn,u16 *copyNum)
{
    1d42:	8f 92       	push	r8
    1d44:	9f 92       	push	r9
    1d46:	af 92       	push	r10
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	2f 97       	sbiw	r28, 0x0f	; 15
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	e9 82       	std	Y+1, r14	; 0x01
    1d6a:	fa 82       	std	Y+2, r15	; 0x02
    1d6c:	0b 83       	std	Y+3, r16	; 0x03
    1d6e:	1c 83       	std	Y+4, r17	; 0x04
    1d70:	2d 83       	std	Y+5, r18	; 0x05
    1d72:	3e 83       	std	Y+6, r19	; 0x06
    1d74:	4f 83       	std	Y+7, r20	; 0x07
    1d76:	58 87       	std	Y+8, r21	; 0x08
    1d78:	69 87       	std	Y+9, r22	; 0x09
    1d7a:	7a 87       	std	Y+10, r23	; 0x0a
    1d7c:	8b 87       	std	Y+11, r24	; 0x0b
    1d7e:	cc 86       	std	Y+12, r12	; 0x0c
    1d80:	ad 86       	std	Y+13, r10	; 0x0d
    1d82:	9f 86       	std	Y+15, r9	; 0x0f
    1d84:	8e 86       	std	Y+14, r8	; 0x0e
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1d86:	ad 84       	ldd	r10, Y+13	; 0x0d
    1d88:	cc 84       	ldd	r12, Y+12	; 0x0c
    1d8a:	e9 80       	ldd	r14, Y+1	; 0x01
    1d8c:	fa 80       	ldd	r15, Y+2	; 0x02
    1d8e:	0b 81       	ldd	r16, Y+3	; 0x03
    1d90:	1c 81       	ldd	r17, Y+4	; 0x04
    1d92:	2d 81       	ldd	r18, Y+5	; 0x05
    1d94:	3e 81       	ldd	r19, Y+6	; 0x06
    1d96:	4f 81       	ldd	r20, Y+7	; 0x07
    1d98:	58 85       	ldd	r21, Y+8	; 0x08
    1d9a:	69 85       	ldd	r22, Y+9	; 0x09
    1d9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1da0:	0e 94 ed 10 	call	0x21da	; 0x21da <LCD_setCursorPosition>
	LCD_writeNum_u16(copyLCDNum, copyNum);
    1da4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1da6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1da8:	6c 01       	movw	r12, r24
    1daa:	e9 80       	ldd	r14, Y+1	; 0x01
    1dac:	fa 80       	ldd	r15, Y+2	; 0x02
    1dae:	0b 81       	ldd	r16, Y+3	; 0x03
    1db0:	1c 81       	ldd	r17, Y+4	; 0x04
    1db2:	2d 81       	ldd	r18, Y+5	; 0x05
    1db4:	3e 81       	ldd	r19, Y+6	; 0x06
    1db6:	4f 81       	ldd	r20, Y+7	; 0x07
    1db8:	58 85       	ldd	r21, Y+8	; 0x08
    1dba:	69 85       	ldd	r22, Y+9	; 0x09
    1dbc:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dc0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <LCD_writeNum_u16>
}
    1dc4:	00 00       	nop
    1dc6:	2f 96       	adiw	r28, 0x0f	; 15
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	af 90       	pop	r10
    1de4:	9f 90       	pop	r9
    1de6:	8f 90       	pop	r8
    1de8:	08 95       	ret

00001dea <LCD_writeNum_u32Position>:
 * @param1 : copyLCDNum
 * @param2 : copyNum
 * @retVal : void
 */
void LCD_writeNum_u32Position(PINS_LCD copyLCDNum, ROW_NUM copyRow, u8 copyColumn,u32 *copyNum)
{
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    1df0:	cf 92       	push	r12
    1df2:	df 92       	push	r13
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	2f 97       	sbiw	r28, 0x0f	; 15
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	e9 82       	std	Y+1, r14	; 0x01
    1e12:	fa 82       	std	Y+2, r15	; 0x02
    1e14:	0b 83       	std	Y+3, r16	; 0x03
    1e16:	1c 83       	std	Y+4, r17	; 0x04
    1e18:	2d 83       	std	Y+5, r18	; 0x05
    1e1a:	3e 83       	std	Y+6, r19	; 0x06
    1e1c:	4f 83       	std	Y+7, r20	; 0x07
    1e1e:	58 87       	std	Y+8, r21	; 0x08
    1e20:	69 87       	std	Y+9, r22	; 0x09
    1e22:	7a 87       	std	Y+10, r23	; 0x0a
    1e24:	8b 87       	std	Y+11, r24	; 0x0b
    1e26:	cc 86       	std	Y+12, r12	; 0x0c
    1e28:	ad 86       	std	Y+13, r10	; 0x0d
    1e2a:	9f 86       	std	Y+15, r9	; 0x0f
    1e2c:	8e 86       	std	Y+14, r8	; 0x0e
	LCD_setCursorPosition(copyLCDNum, copyRow, copyColumn);
    1e2e:	ad 84       	ldd	r10, Y+13	; 0x0d
    1e30:	cc 84       	ldd	r12, Y+12	; 0x0c
    1e32:	e9 80       	ldd	r14, Y+1	; 0x01
    1e34:	fa 80       	ldd	r15, Y+2	; 0x02
    1e36:	0b 81       	ldd	r16, Y+3	; 0x03
    1e38:	1c 81       	ldd	r17, Y+4	; 0x04
    1e3a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e3e:	4f 81       	ldd	r20, Y+7	; 0x07
    1e40:	58 85       	ldd	r21, Y+8	; 0x08
    1e42:	69 85       	ldd	r22, Y+9	; 0x09
    1e44:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e46:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e48:	0e 94 ed 10 	call	0x21da	; 0x21da <LCD_setCursorPosition>
	LCD_writeNum_u32(copyLCDNum, copyNum);
    1e4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e50:	6c 01       	movw	r12, r24
    1e52:	e9 80       	ldd	r14, Y+1	; 0x01
    1e54:	fa 80       	ldd	r15, Y+2	; 0x02
    1e56:	0b 81       	ldd	r16, Y+3	; 0x03
    1e58:	1c 81       	ldd	r17, Y+4	; 0x04
    1e5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e5e:	4f 81       	ldd	r20, Y+7	; 0x07
    1e60:	58 85       	ldd	r21, Y+8	; 0x08
    1e62:	69 85       	ldd	r22, Y+9	; 0x09
    1e64:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e68:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <LCD_writeNum_u32>
}
    1e6c:	00 00       	nop
    1e6e:	2f 96       	adiw	r28, 0x0f	; 15
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	df 90       	pop	r13
    1e88:	cf 90       	pop	r12
    1e8a:	af 90       	pop	r10
    1e8c:	9f 90       	pop	r9
    1e8e:	8f 90       	pop	r8
    1e90:	08 95       	ret

00001e92 <LCD_goTo>:
* @param2 : copyRow
* @param3 : copyColumn
* @retVal : void
*/
void LCD_goTo(PINS_LCD copyLCDNum , ROW_NUM copyRow , u8 copyColumn)
{
    1e92:	af 92       	push	r10
    1e94:	cf 92       	push	r12
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	2d 97       	sbiw	r28, 0x0d	; 13
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	e9 82       	std	Y+1, r14	; 0x01
    1eb4:	fa 82       	std	Y+2, r15	; 0x02
    1eb6:	0b 83       	std	Y+3, r16	; 0x03
    1eb8:	1c 83       	std	Y+4, r17	; 0x04
    1eba:	2d 83       	std	Y+5, r18	; 0x05
    1ebc:	3e 83       	std	Y+6, r19	; 0x06
    1ebe:	4f 83       	std	Y+7, r20	; 0x07
    1ec0:	58 87       	std	Y+8, r21	; 0x08
    1ec2:	69 87       	std	Y+9, r22	; 0x09
    1ec4:	7a 87       	std	Y+10, r23	; 0x0a
    1ec6:	8b 87       	std	Y+11, r24	; 0x0b
    1ec8:	cc 86       	std	Y+12, r12	; 0x0c
    1eca:	ad 86       	std	Y+13, r10	; 0x0d
	copyColumn--;
    1ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ece:	81 50       	subi	r24, 0x01	; 1
    1ed0:	8d 87       	std	Y+13, r24	; 0x0d
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
    1ed2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	91 05       	cpc	r25, r1
    1edc:	e9 f0       	breq	.+58     	; 0x1f18 <LCD_goTo+0x86>
    1ede:	82 30       	cpi	r24, 0x02	; 2
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	1c f4       	brge	.+6      	; 0x1eea <LCD_goTo+0x58>
    1ee4:	89 2b       	or	r24, r25
    1ee6:	39 f0       	breq	.+14     	; 0x1ef6 <LCD_goTo+0x64>
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    1ee8:	4a c0       	rjmp	.+148    	; 0x1f7e <LCD_goTo+0xec>
*/
void LCD_goTo(PINS_LCD copyLCDNum , ROW_NUM copyRow , u8 copyColumn)
{
	copyColumn--;
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	91 05       	cpc	r25, r1
    1eee:	29 f1       	breq	.+74     	; 0x1f3a <LCD_goTo+0xa8>
    1ef0:	03 97       	sbiw	r24, 0x03	; 3
    1ef2:	a1 f1       	breq	.+104    	; 0x1f5c <LCD_goTo+0xca>
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    1ef4:	44 c0       	rjmp	.+136    	; 0x1f7e <LCD_goTo+0xec>
{
	copyColumn--;
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
	{
		case ROW1 : LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
    1ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef8:	80 58       	subi	r24, 0x80	; 128
    1efa:	c8 2e       	mov	r12, r24
    1efc:	e9 80       	ldd	r14, Y+1	; 0x01
    1efe:	fa 80       	ldd	r15, Y+2	; 0x02
    1f00:	0b 81       	ldd	r16, Y+3	; 0x03
    1f02:	1c 81       	ldd	r17, Y+4	; 0x04
    1f04:	2d 81       	ldd	r18, Y+5	; 0x05
    1f06:	3e 81       	ldd	r19, Y+6	; 0x06
    1f08:	4f 81       	ldd	r20, Y+7	; 0x07
    1f0a:	58 85       	ldd	r21, Y+8	; 0x08
    1f0c:	69 85       	ldd	r22, Y+9	; 0x09
    1f0e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f10:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f12:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    1f16:	33 c0       	rjmp	.+102    	; 0x1f7e <LCD_goTo+0xec>
		case ROW2 : LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
    1f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1a:	80 54       	subi	r24, 0x40	; 64
    1f1c:	c8 2e       	mov	r12, r24
    1f1e:	e9 80       	ldd	r14, Y+1	; 0x01
    1f20:	fa 80       	ldd	r15, Y+2	; 0x02
    1f22:	0b 81       	ldd	r16, Y+3	; 0x03
    1f24:	1c 81       	ldd	r17, Y+4	; 0x04
    1f26:	2d 81       	ldd	r18, Y+5	; 0x05
    1f28:	3e 81       	ldd	r19, Y+6	; 0x06
    1f2a:	4f 81       	ldd	r20, Y+7	; 0x07
    1f2c:	58 85       	ldd	r21, Y+8	; 0x08
    1f2e:	69 85       	ldd	r22, Y+9	; 0x09
    1f30:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f34:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    1f38:	22 c0       	rjmp	.+68     	; 0x1f7e <LCD_goTo+0xec>
		case ROW3 : LCD_writeCMD(copyLCDNum, (ADDREES_ROW_3 + copyColumn)); break;
    1f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3c:	8c 56       	subi	r24, 0x6C	; 108
    1f3e:	c8 2e       	mov	r12, r24
    1f40:	e9 80       	ldd	r14, Y+1	; 0x01
    1f42:	fa 80       	ldd	r15, Y+2	; 0x02
    1f44:	0b 81       	ldd	r16, Y+3	; 0x03
    1f46:	1c 81       	ldd	r17, Y+4	; 0x04
    1f48:	2d 81       	ldd	r18, Y+5	; 0x05
    1f4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f4c:	4f 81       	ldd	r20, Y+7	; 0x07
    1f4e:	58 85       	ldd	r21, Y+8	; 0x08
    1f50:	69 85       	ldd	r22, Y+9	; 0x09
    1f52:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f54:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f56:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    1f5a:	11 c0       	rjmp	.+34     	; 0x1f7e <LCD_goTo+0xec>
		case ROW4 : LCD_writeCMD(copyLCDNum, (ADDREES_ROW_4 + copyColumn)); break;
    1f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5e:	8c 52       	subi	r24, 0x2C	; 44
    1f60:	c8 2e       	mov	r12, r24
    1f62:	e9 80       	ldd	r14, Y+1	; 0x01
    1f64:	fa 80       	ldd	r15, Y+2	; 0x02
    1f66:	0b 81       	ldd	r16, Y+3	; 0x03
    1f68:	1c 81       	ldd	r17, Y+4	; 0x04
    1f6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6e:	4f 81       	ldd	r20, Y+7	; 0x07
    1f70:	58 85       	ldd	r21, Y+8	; 0x08
    1f72:	69 85       	ldd	r22, Y+9	; 0x09
    1f74:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f78:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    1f7c:	00 00       	nop
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    1f7e:	00 00       	nop
    1f80:	2d 96       	adiw	r28, 0x0d	; 13
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	ff 90       	pop	r15
    1f96:	ef 90       	pop	r14
    1f98:	cf 90       	pop	r12
    1f9a:	af 90       	pop	r10
    1f9c:	08 95       	ret

00001f9e <LCD_enableSignal>:
 * @brief  : LCD enable signal static function
 * @param1 : copyLCDNum
 * @retVal : void
 */
static void LCD_enableSignal(PINS_LCD copyLCDNum)
{
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	ab 97       	sbiw	r28, 0x2b	; 43
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	e9 a2       	std	Y+33, r14	; 0x21
    1fbc:	fa a2       	std	Y+34, r15	; 0x22
    1fbe:	0b a3       	std	Y+35, r16	; 0x23
    1fc0:	1c a3       	std	Y+36, r17	; 0x24
    1fc2:	2d a3       	std	Y+37, r18	; 0x25
    1fc4:	3e a3       	std	Y+38, r19	; 0x26
    1fc6:	4f a3       	std	Y+39, r20	; 0x27
    1fc8:	58 a7       	std	Y+40, r21	; 0x28
    1fca:	69 a7       	std	Y+41, r22	; 0x29
    1fcc:	7a a7       	std	Y+42, r23	; 0x2a
    1fce:	8b a7       	std	Y+43, r24	; 0x2b
#if (_LCD_MODE == _4_BIT_MODE_LCD)
	Dio_setPinVal(copyLCDNum.EN,Status_Pin_High);
	_delay_us(5);
	Dio_setPinVal(copyLCDNum.EN, Status_Pin_Low);
#elif (_LCD_MODE == _8_BIT_MODE_LCD)
	Dio_setPinVal(copyLCDNum.EN, Status_Pin_High);
    1fd0:	8a a1       	ldd	r24, Y+34	; 0x22
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a0 ea       	ldi	r26, 0xA0	; 160
    1fde:	b0 e4       	ldi	r27, 0x40	; 64
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	ab 83       	std	Y+3, r26	; 0x03
    1fe6:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1fe8:	2b ea       	ldi	r18, 0xAB	; 171
    1fea:	3a ea       	ldi	r19, 0xAA	; 170
    1fec:	4a ea       	ldi	r20, 0xAA	; 170
    1fee:	5e e3       	ldi	r21, 0x3E	; 62
    1ff0:	69 81       	ldd	r22, Y+1	; 0x01
    1ff2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	8d 83       	std	Y+5, r24	; 0x05
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	af 83       	std	Y+7, r26	; 0x07
    2006:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5e e3       	ldi	r21, 0x3E	; 62
    2010:	69 81       	ldd	r22, Y+1	; 0x01
    2012:	7a 81       	ldd	r23, Y+2	; 0x02
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	89 87       	std	Y+9, r24	; 0x09
    2022:	9a 87       	std	Y+10, r25	; 0x0a
    2024:	ab 87       	std	Y+11, r26	; 0x0b
    2026:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	6d 81       	ldd	r22, Y+5	; 0x05
    2032:	7e 81       	ldd	r23, Y+6	; 0x06
    2034:	8f 81       	ldd	r24, Y+7	; 0x07
    2036:	98 85       	ldd	r25, Y+8	; 0x08
    2038:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    203c:	88 23       	and	r24, r24
    203e:	1c f4       	brge	.+6      	; 0x2046 <LCD_enableSignal+0xa8>
		__ticks = 1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	8d 87       	std	Y+13, r24	; 0x0d
    2044:	b2 c0       	rjmp	.+356    	; 0x21aa <LCD_enableSignal+0x20c>
	else if (__tmp2 > 65535)
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	69 85       	ldd	r22, Y+9	; 0x09
    2050:	7a 85       	ldd	r23, Y+10	; 0x0a
    2052:	8b 85       	ldd	r24, Y+11	; 0x0b
    2054:	9c 85       	ldd	r25, Y+12	; 0x0c
    2056:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    205a:	18 16       	cp	r1, r24
    205c:	0c f0       	brlt	.+2      	; 0x2060 <LCD_enableSignal+0xc2>
    205e:	7b c0       	rjmp	.+246    	; 0x2156 <LCD_enableSignal+0x1b8>
	{
		_delay_ms(__us / 1000.0);
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	4a e7       	ldi	r20, 0x7A	; 122
    2066:	54 e4       	ldi	r21, 0x44	; 68
    2068:	69 81       	ldd	r22, Y+1	; 0x01
    206a:	7a 81       	ldd	r23, Y+2	; 0x02
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__divsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	8e 87       	std	Y+14, r24	; 0x0e
    207a:	9f 87       	std	Y+15, r25	; 0x0f
    207c:	a8 8b       	std	Y+16, r26	; 0x10
    207e:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a e7       	ldi	r20, 0x7A	; 122
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	6e 85       	ldd	r22, Y+14	; 0x0e
    208a:	7f 85       	ldd	r23, Y+15	; 0x0f
    208c:	88 89       	ldd	r24, Y+16	; 0x10
    208e:	99 89       	ldd	r25, Y+17	; 0x11
    2090:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	8a 8b       	std	Y+18, r24	; 0x12
    209a:	9b 8b       	std	Y+19, r25	; 0x13
    209c:	ac 8b       	std	Y+20, r26	; 0x14
    209e:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	6a 89       	ldd	r22, Y+18	; 0x12
    20aa:	7b 89       	ldd	r23, Y+19	; 0x13
    20ac:	8c 89       	ldd	r24, Y+20	; 0x14
    20ae:	9d 89       	ldd	r25, Y+21	; 0x15
    20b0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	2c f4       	brge	.+10     	; 0x20c2 <LCD_enableSignal+0x124>
		__ticks = 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9f 8b       	std	Y+23, r25	; 0x17
    20be:	8e 8b       	std	Y+22, r24	; 0x16
    20c0:	3f c0       	rjmp	.+126    	; 0x2140 <LCD_enableSignal+0x1a2>
	else if (__tmp > 65535)
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	6a 89       	ldd	r22, Y+18	; 0x12
    20cc:	7b 89       	ldd	r23, Y+19	; 0x13
    20ce:	8c 89       	ldd	r24, Y+20	; 0x14
    20d0:	9d 89       	ldd	r25, Y+21	; 0x15
    20d2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	4c f5       	brge	.+82     	; 0x212c <LCD_enableSignal+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	6e 85       	ldd	r22, Y+14	; 0x0e
    20e4:	7f 85       	ldd	r23, Y+15	; 0x0f
    20e6:	88 89       	ldd	r24, Y+16	; 0x10
    20e8:	99 89       	ldd	r25, Y+17	; 0x11
    20ea:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9f 8b       	std	Y+23, r25	; 0x17
    2100:	8e 8b       	std	Y+22, r24	; 0x16
    2102:	0f c0       	rjmp	.+30     	; 0x2122 <LCD_enableSignal+0x184>
    2104:	89 e1       	ldi	r24, 0x19	; 25
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	99 8f       	std	Y+25, r25	; 0x19
    210a:	88 8f       	std	Y+24, r24	; 0x18
    210c:	88 8d       	ldd	r24, Y+24	; 0x18
    210e:	99 8d       	ldd	r25, Y+25	; 0x19
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_enableSignal+0x172>
    2114:	99 8f       	std	Y+25, r25	; 0x19
    2116:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	8e 89       	ldd	r24, Y+22	; 0x16
    211a:	9f 89       	ldd	r25, Y+23	; 0x17
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	9f 8b       	std	Y+23, r25	; 0x17
    2120:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	8e 89       	ldd	r24, Y+22	; 0x16
    2124:	9f 89       	ldd	r25, Y+23	; 0x17
    2126:	89 2b       	or	r24, r25
    2128:	69 f7       	brne	.-38     	; 0x2104 <LCD_enableSignal+0x166>
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <LCD_enableSignal+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	6a 89       	ldd	r22, Y+18	; 0x12
    212e:	7b 89       	ldd	r23, Y+19	; 0x13
    2130:	8c 89       	ldd	r24, Y+20	; 0x14
    2132:	9d 89       	ldd	r25, Y+21	; 0x15
    2134:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9f 8b       	std	Y+23, r25	; 0x17
    213e:	8e 8b       	std	Y+22, r24	; 0x16
    2140:	8e 89       	ldd	r24, Y+22	; 0x16
    2142:	9f 89       	ldd	r25, Y+23	; 0x17
    2144:	9b 8f       	std	Y+27, r25	; 0x1b
    2146:	8a 8f       	std	Y+26, r24	; 0x1a
    2148:	8a 8d       	ldd	r24, Y+26	; 0x1a
    214a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_enableSignal+0x1ae>
    2150:	9b 8f       	std	Y+27, r25	; 0x1b
    2152:	8a 8f       	std	Y+26, r24	; 0x1a
    2154:	2a c0       	rjmp	.+84     	; 0x21aa <LCD_enableSignal+0x20c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	53 e4       	ldi	r21, 0x43	; 67
    215e:	6d 81       	ldd	r22, Y+5	; 0x05
    2160:	7e 81       	ldd	r23, Y+6	; 0x06
    2162:	8f 81       	ldd	r24, Y+7	; 0x07
    2164:	98 85       	ldd	r25, Y+8	; 0x08
    2166:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    216a:	18 16       	cp	r1, r24
    216c:	ac f4       	brge	.+42     	; 0x2198 <LCD_enableSignal+0x1fa>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    216e:	69 85       	ldd	r22, Y+9	; 0x09
    2170:	7a 85       	ldd	r23, Y+10	; 0x0a
    2172:	8b 85       	ldd	r24, Y+11	; 0x0b
    2174:	9c 85       	ldd	r25, Y+12	; 0x0c
    2176:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9d 8f       	std	Y+29, r25	; 0x1d
    2180:	8c 8f       	std	Y+28, r24	; 0x1c
    2182:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2184:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2186:	9f 8f       	std	Y+31, r25	; 0x1f
    2188:	8e 8f       	std	Y+30, r24	; 0x1e
    218a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    218c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_enableSignal+0x1f0>
    2192:	9f 8f       	std	Y+31, r25	; 0x1f
    2194:	8e 8f       	std	Y+30, r24	; 0x1e
    2196:	0f c0       	rjmp	.+30     	; 0x21b6 <LCD_enableSignal+0x218>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2198:	6d 81       	ldd	r22, Y+5	; 0x05
    219a:	7e 81       	ldd	r23, Y+6	; 0x06
    219c:	8f 81       	ldd	r24, Y+7	; 0x07
    219e:	98 85       	ldd	r25, Y+8	; 0x08
    21a0:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	8d 87       	std	Y+13, r24	; 0x0d
    21aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ac:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21ae:	88 a1       	ldd	r24, Y+32	; 0x20
    21b0:	8a 95       	dec	r24
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_enableSignal+0x212>
    21b4:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(5);
	Dio_setPinVal(copyLCDNum.EN, Status_Pin_Low);
    21b6:	8a a1       	ldd	r24, Y+34	; 0x22
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
#endif
}
    21be:	00 00       	nop
    21c0:	ab 96       	adiw	r28, 0x2b	; 43
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	ff 90       	pop	r15
    21d6:	ef 90       	pop	r14
    21d8:	08 95       	ret

000021da <LCD_setCursorPosition>:
* @param2 : copyRow
* @param3 : copyColumn
* @retVal : void
*/
static void LCD_setCursorPosition(PINS_LCD copyLCDNum , ROW_NUM copyRow , u8 copyColumn)
{
    21da:	af 92       	push	r10
    21dc:	cf 92       	push	r12
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	2d 97       	sbiw	r28, 0x0d	; 13
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	e9 82       	std	Y+1, r14	; 0x01
    21fc:	fa 82       	std	Y+2, r15	; 0x02
    21fe:	0b 83       	std	Y+3, r16	; 0x03
    2200:	1c 83       	std	Y+4, r17	; 0x04
    2202:	2d 83       	std	Y+5, r18	; 0x05
    2204:	3e 83       	std	Y+6, r19	; 0x06
    2206:	4f 83       	std	Y+7, r20	; 0x07
    2208:	58 87       	std	Y+8, r21	; 0x08
    220a:	69 87       	std	Y+9, r22	; 0x09
    220c:	7a 87       	std	Y+10, r23	; 0x0a
    220e:	8b 87       	std	Y+11, r24	; 0x0b
    2210:	cc 86       	std	Y+12, r12	; 0x0c
    2212:	ad 86       	std	Y+13, r10	; 0x0d
	copyColumn--;
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	81 50       	subi	r24, 0x01	; 1
    2218:	8d 87       	std	Y+13, r24	; 0x0d
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
    221a:	8c 85       	ldd	r24, Y+12	; 0x0c
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	91 05       	cpc	r25, r1
    2224:	e9 f0       	breq	.+58     	; 0x2260 <LCD_setCursorPosition+0x86>
    2226:	82 30       	cpi	r24, 0x02	; 2
    2228:	91 05       	cpc	r25, r1
    222a:	1c f4       	brge	.+6      	; 0x2232 <LCD_setCursorPosition+0x58>
    222c:	89 2b       	or	r24, r25
    222e:	39 f0       	breq	.+14     	; 0x223e <LCD_setCursorPosition+0x64>
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    2230:	4a c0       	rjmp	.+148    	; 0x22c6 <LCD_setCursorPosition+0xec>
*/
static void LCD_setCursorPosition(PINS_LCD copyLCDNum , ROW_NUM copyRow , u8 copyColumn)
{
	copyColumn--;
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	91 05       	cpc	r25, r1
    2236:	29 f1       	breq	.+74     	; 0x2282 <LCD_setCursorPosition+0xa8>
    2238:	03 97       	sbiw	r24, 0x03	; 3
    223a:	a1 f1       	breq	.+104    	; 0x22a4 <LCD_setCursorPosition+0xca>
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    223c:	44 c0       	rjmp	.+136    	; 0x22c6 <LCD_setCursorPosition+0xec>
{
	copyColumn--;
#if ((_Rows_LCD_TYPE == LM044_LCD) || (_Rows_LCD_TYPE == LM04L_LCD))
	switch (copyRow)
	{
		case ROW1 : LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
    223e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2240:	80 58       	subi	r24, 0x80	; 128
    2242:	c8 2e       	mov	r12, r24
    2244:	e9 80       	ldd	r14, Y+1	; 0x01
    2246:	fa 80       	ldd	r15, Y+2	; 0x02
    2248:	0b 81       	ldd	r16, Y+3	; 0x03
    224a:	1c 81       	ldd	r17, Y+4	; 0x04
    224c:	2d 81       	ldd	r18, Y+5	; 0x05
    224e:	3e 81       	ldd	r19, Y+6	; 0x06
    2250:	4f 81       	ldd	r20, Y+7	; 0x07
    2252:	58 85       	ldd	r21, Y+8	; 0x08
    2254:	69 85       	ldd	r22, Y+9	; 0x09
    2256:	7a 85       	ldd	r23, Y+10	; 0x0a
    2258:	8b 85       	ldd	r24, Y+11	; 0x0b
    225a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    225e:	33 c0       	rjmp	.+102    	; 0x22c6 <LCD_setCursorPosition+0xec>
		case ROW2 : LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
    2260:	8d 85       	ldd	r24, Y+13	; 0x0d
    2262:	80 54       	subi	r24, 0x40	; 64
    2264:	c8 2e       	mov	r12, r24
    2266:	e9 80       	ldd	r14, Y+1	; 0x01
    2268:	fa 80       	ldd	r15, Y+2	; 0x02
    226a:	0b 81       	ldd	r16, Y+3	; 0x03
    226c:	1c 81       	ldd	r17, Y+4	; 0x04
    226e:	2d 81       	ldd	r18, Y+5	; 0x05
    2270:	3e 81       	ldd	r19, Y+6	; 0x06
    2272:	4f 81       	ldd	r20, Y+7	; 0x07
    2274:	58 85       	ldd	r21, Y+8	; 0x08
    2276:	69 85       	ldd	r22, Y+9	; 0x09
    2278:	7a 85       	ldd	r23, Y+10	; 0x0a
    227a:	8b 85       	ldd	r24, Y+11	; 0x0b
    227c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    2280:	22 c0       	rjmp	.+68     	; 0x22c6 <LCD_setCursorPosition+0xec>
		case ROW3 : LCD_writeCMD(copyLCDNum, (ADDREES_ROW_3 + copyColumn)); break;
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	8c 56       	subi	r24, 0x6C	; 108
    2286:	c8 2e       	mov	r12, r24
    2288:	e9 80       	ldd	r14, Y+1	; 0x01
    228a:	fa 80       	ldd	r15, Y+2	; 0x02
    228c:	0b 81       	ldd	r16, Y+3	; 0x03
    228e:	1c 81       	ldd	r17, Y+4	; 0x04
    2290:	2d 81       	ldd	r18, Y+5	; 0x05
    2292:	3e 81       	ldd	r19, Y+6	; 0x06
    2294:	4f 81       	ldd	r20, Y+7	; 0x07
    2296:	58 85       	ldd	r21, Y+8	; 0x08
    2298:	69 85       	ldd	r22, Y+9	; 0x09
    229a:	7a 85       	ldd	r23, Y+10	; 0x0a
    229c:	8b 85       	ldd	r24, Y+11	; 0x0b
    229e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    22a2:	11 c0       	rjmp	.+34     	; 0x22c6 <LCD_setCursorPosition+0xec>
		case ROW4 : LCD_writeCMD(copyLCDNum, (ADDREES_ROW_4 + copyColumn)); break;
    22a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a6:	8c 52       	subi	r24, 0x2C	; 44
    22a8:	c8 2e       	mov	r12, r24
    22aa:	e9 80       	ldd	r14, Y+1	; 0x01
    22ac:	fa 80       	ldd	r15, Y+2	; 0x02
    22ae:	0b 81       	ldd	r16, Y+3	; 0x03
    22b0:	1c 81       	ldd	r17, Y+4	; 0x04
    22b2:	2d 81       	ldd	r18, Y+5	; 0x05
    22b4:	3e 81       	ldd	r19, Y+6	; 0x06
    22b6:	4f 81       	ldd	r20, Y+7	; 0x07
    22b8:	58 85       	ldd	r21, Y+8	; 0x08
    22ba:	69 85       	ldd	r22, Y+9	; 0x09
    22bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    22be:	8b 85       	ldd	r24, Y+11	; 0x0b
    22c0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_writeCMD>
    22c4:	00 00       	nop
	{
		case ROW1:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_1 + copyColumn)); break;
		case ROW2:LCD_writeCMD(copyLCDNum, (ADDREES_ROW_2 + copyColumn)); break;
	}
#endif
}
    22c6:	00 00       	nop
    22c8:	2d 96       	adiw	r28, 0x0d	; 13
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ff 90       	pop	r15
    22de:	ef 90       	pop	r14
    22e0:	cf 90       	pop	r12
    22e2:	af 90       	pop	r10
    22e4:	08 95       	ret

000022e6 <LCD_convertNum_u8>:
* @param1 : copyLCDNum
* @param2 : copySTR
* @retVal : void
*/
static void LCD_convertNum_u8(u8 copyNum , u8 *copySTR)
{
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <LCD_convertNum_u8+0x6>
    22ec:	1f 92       	push	r1
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	7b 83       	std	Y+3, r23	; 0x03
    22f6:	6a 83       	std	Y+2, r22	; 0x02
	memset(copySTR , '\0' , 4);
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	9b 81       	ldd	r25, Y+3	; 0x03
    22fc:	44 e0       	ldi	r20, 0x04	; 4
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <memset>
	sprintf(copySTR , "%i", copyNum);
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	88 2f       	mov	r24, r24
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	29 2f       	mov	r18, r25
    2310:	2f 93       	push	r18
    2312:	8f 93       	push	r24
    2314:	83 ea       	ldi	r24, 0xA3	; 163
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	89 2f       	mov	r24, r25
    231a:	8f 93       	push	r24
    231c:	83 ea       	ldi	r24, 0xA3	; 163
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	8f 93       	push	r24
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	8f 93       	push	r24
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	8f 93       	push	r24
    232a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <sprintf>
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
}
    233a:	00 00       	nop
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <LCD_convertNum_u16>:
* @param1 : copyLCDNum
* @param2 : copyNum
* @retVal : void
*/
static void LCD_convertNum_u16(u16 copyNum , u8 *copySTR)
{
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	00 d0       	rcall	.+0      	; 0x234e <LCD_convertNum_u16+0x6>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <LCD_convertNum_u16+0x8>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	7c 83       	std	Y+4, r23	; 0x04
    235a:	6b 83       	std	Y+3, r22	; 0x03
	memset(copySTR , '\0' , 6);
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	46 e0       	ldi	r20, 0x06	; 6
    2362:	50 e0       	ldi	r21, 0x00	; 0
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <memset>
	sprintf(copySTR , "%i", copyNum);
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	8f 93       	push	r24
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	8f 93       	push	r24
    2374:	83 ea       	ldi	r24, 0xA3	; 163
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	89 2f       	mov	r24, r25
    237a:	8f 93       	push	r24
    237c:	83 ea       	ldi	r24, 0xA3	; 163
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	8f 93       	push	r24
    2382:	8c 81       	ldd	r24, Y+4	; 0x04
    2384:	8f 93       	push	r24
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	8f 93       	push	r24
    238a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <sprintf>
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
}
    239a:	00 00       	nop
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	08 95       	ret

000023aa <LCD_convertNum_u32>:
* @param1 : copyLCDNum
* @param2 : copyNum
* @retVal : void
*/
static void LCD_convertNum_u32(u32 copyNum , u8 *copySTR)
{
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <LCD_convertNum_u32+0x6>
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <LCD_convertNum_u32+0x8>
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <LCD_convertNum_u32+0xa>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	69 83       	std	Y+1, r22	; 0x01
    23ba:	7a 83       	std	Y+2, r23	; 0x02
    23bc:	8b 83       	std	Y+3, r24	; 0x03
    23be:	9c 83       	std	Y+4, r25	; 0x04
    23c0:	5e 83       	std	Y+6, r21	; 0x06
    23c2:	4d 83       	std	Y+5, r20	; 0x05
	memset(copySTR , '\0' , 11);
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	4b e0       	ldi	r20, 0x0B	; 11
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	70 e0       	ldi	r23, 0x00	; 0
    23d0:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <memset>
	sprintf(copySTR , "%i", copyNum);
    23d4:	8c 81       	ldd	r24, Y+4	; 0x04
    23d6:	8f 93       	push	r24
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	8f 93       	push	r24
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	8f 93       	push	r24
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	8f 93       	push	r24
    23e4:	83 ea       	ldi	r24, 0xA3	; 163
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	89 2f       	mov	r24, r25
    23ea:	8f 93       	push	r24
    23ec:	83 ea       	ldi	r24, 0xA3	; 163
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	8f 93       	push	r24
    23f2:	8e 81       	ldd	r24, Y+6	; 0x06
    23f4:	8f 93       	push	r24
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	8f 93       	push	r24
    23fa:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <sprintf>
    23fe:	8d b7       	in	r24, 0x3d	; 61
    2400:	9e b7       	in	r25, 0x3e	; 62
    2402:	08 96       	adiw	r24, 0x08	; 8
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
}
    240e:	00 00       	nop
    2410:	26 96       	adiw	r28, 0x06	; 6
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	08 95       	ret

00002422 <keypad_vidInit>:
/**
  * @brief  : Initialization KeyPad Pins
  * @param  : CopyKeyPad
  */
void keypad_vidInit()
{
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinSDir(Row_Pin,NO_ROW,Direction_Pin_Input);
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	64 e0       	ldi	r22, 0x04	; 4
    242e:	83 e9       	ldi	r24, 0x93	; 147
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 cc 04 	call	0x998	; 0x998 <DIO_vidSetPinSDir>
	DIO_vidSetPinSDir(Col_Pin,NO_COL,Direction_Pin_Output);
    2436:	41 e0       	ldi	r20, 0x01	; 1
    2438:	64 e0       	ldi	r22, 0x04	; 4
    243a:	87 e9       	ldi	r24, 0x97	; 151
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 cc 04 	call	0x998	; 0x998 <DIO_vidSetPinSDir>
	DIO_vidSetPinSVal(Row_Pin,NO_ROW,Status_Pin_High);
    2442:	41 e0       	ldi	r20, 0x01	; 1
    2444:	64 e0       	ldi	r22, 0x04	; 4
    2446:	83 e9       	ldi	r24, 0x93	; 147
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 82 05 	call	0xb04	; 0xb04 <DIO_vidSetPinSVal>
	DIO_vidSetPinSVal(Col_Pin,NO_COL,Status_Pin_High);
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	64 e0       	ldi	r22, 0x04	; 4
    2452:	87 e9       	ldi	r24, 0x97	; 151
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0e 94 82 05 	call	0xb04	; 0xb04 <DIO_vidSetPinSVal>
}
    245a:	00 00       	nop
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	08 95       	ret

00002462 <keypad_u8Stat>:
  * @brief  : Get Value From KeyPad Pins And Store It In CopyValue
  * @param  : CopyKeyPad
  * @param  : CopyValue
  */
u8 keypad_u8Stat(u8 *ptr)
{
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	63 97       	sbiw	r28, 0x13	; 19
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	9b 8b       	std	Y+19, r25	; 0x13
    2478:	8a 8b       	std	Y+18, r24	; 0x12
	u8 i , j;
	u8 flag = 0;
    247a:	1b 82       	std	Y+3, r1	; 0x03
	for(i = 0 ; i < 4 ; i++)
    247c:	19 82       	std	Y+1, r1	; 0x01
    247e:	cc c0       	rjmp	.+408    	; 0x2618 <keypad_u8Stat+0x1b6>
	{
		Dio_setPinVal(Col_Pin[i],Status_Pin_Low);
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	88 2f       	mov	r24, r24
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	89 56       	subi	r24, 0x69	; 105
    2488:	9f 4f       	sbci	r25, 0xFF	; 255
    248a:	fc 01       	movw	r30, r24
    248c:	80 81       	ld	r24, Z
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
		for(j=0;j<4;j++)
    2494:	1a 82       	std	Y+2, r1	; 0x02
    2496:	af c0       	rjmp	.+350    	; 0x25f6 <keypad_u8Stat+0x194>
		{
			if(Dio_getPinVal(Row_Pin[j]) == 0)
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	88 2f       	mov	r24, r24
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	8d 56       	subi	r24, 0x6D	; 109
    24a0:	9f 4f       	sbci	r25, 0xFF	; 255
    24a2:	fc 01       	movw	r30, r24
    24a4:	80 81       	ld	r24, Z
    24a6:	0e 94 a2 04 	call	0x944	; 0x944 <Dio_getPinVal>
    24aa:	88 23       	and	r24, r24
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <keypad_u8Stat+0x4e>
    24ae:	a0 c0       	rjmp	.+320    	; 0x25f0 <keypad_u8Stat+0x18e>
			{
				*ptr = Pattern[j][i];
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	82 0f       	add	r24, r18
    24c6:	93 1f       	adc	r25, r19
    24c8:	8d 57       	subi	r24, 0x7D	; 125
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	fc 01       	movw	r30, r24
    24ce:	20 81       	ld	r18, Z
    24d0:	8a 89       	ldd	r24, Y+18	; 0x12
    24d2:	9b 89       	ldd	r25, Y+19	; 0x13
    24d4:	fc 01       	movw	r30, r24
    24d6:	20 83       	st	Z, r18
				flag=1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	8b 83       	std	Y+3, r24	; 0x03
//				_delay_ms(20);
				while(Dio_getPinVal(Row_Pin[j])==0);
    24dc:	00 00       	nop
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	8d 56       	subi	r24, 0x6D	; 109
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	fc 01       	movw	r30, r24
    24ea:	80 81       	ld	r24, Z
    24ec:	0e 94 a2 04 	call	0x944	; 0x944 <Dio_getPinVal>
    24f0:	88 23       	and	r24, r24
    24f2:	a9 f3       	breq	.-22     	; 0x24de <keypad_u8Stat+0x7c>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 ea       	ldi	r26, 0xA0	; 160
    24fa:	b1 e4       	ldi	r27, 0x41	; 65
    24fc:	8c 83       	std	Y+4, r24	; 0x04
    24fe:	9d 83       	std	Y+5, r25	; 0x05
    2500:	ae 83       	std	Y+6, r26	; 0x06
    2502:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a e7       	ldi	r20, 0x7A	; 122
    250a:	53 e4       	ldi	r21, 0x43	; 67
    250c:	6c 81       	ldd	r22, Y+4	; 0x04
    250e:	7d 81       	ldd	r23, Y+5	; 0x05
    2510:	8e 81       	ldd	r24, Y+6	; 0x06
    2512:	9f 81       	ldd	r25, Y+7	; 0x07
    2514:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	88 87       	std	Y+8, r24	; 0x08
    251e:	99 87       	std	Y+9, r25	; 0x09
    2520:	aa 87       	std	Y+10, r26	; 0x0a
    2522:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	68 85       	ldd	r22, Y+8	; 0x08
    252e:	79 85       	ldd	r23, Y+9	; 0x09
    2530:	8a 85       	ldd	r24, Y+10	; 0x0a
    2532:	9b 85       	ldd	r25, Y+11	; 0x0b
    2534:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    2538:	88 23       	and	r24, r24
    253a:	2c f4       	brge	.+10     	; 0x2546 <keypad_u8Stat+0xe4>
		__ticks = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9d 87       	std	Y+13, r25	; 0x0d
    2542:	8c 87       	std	Y+12, r24	; 0x0c
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <keypad_u8Stat+0x162>
	else if (__tmp > 65535)
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	68 85       	ldd	r22, Y+8	; 0x08
    2550:	79 85       	ldd	r23, Y+9	; 0x09
    2552:	8a 85       	ldd	r24, Y+10	; 0x0a
    2554:	9b 85       	ldd	r25, Y+11	; 0x0b
    2556:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    255a:	18 16       	cp	r1, r24
    255c:	4c f5       	brge	.+82     	; 0x25b0 <keypad_u8Stat+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	6c 81       	ldd	r22, Y+4	; 0x04
    2568:	7d 81       	ldd	r23, Y+5	; 0x05
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    256c:	9f 81       	ldd	r25, Y+7	; 0x07
    256e:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9d 87       	std	Y+13, r25	; 0x0d
    2584:	8c 87       	std	Y+12, r24	; 0x0c
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <keypad_u8Stat+0x144>
    2588:	89 e1       	ldi	r24, 0x19	; 25
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9f 87       	std	Y+15, r25	; 0x0f
    258e:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2590:	8e 85       	ldd	r24, Y+14	; 0x0e
    2592:	9f 85       	ldd	r25, Y+15	; 0x0f
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <keypad_u8Stat+0x132>
    2598:	9f 87       	std	Y+15, r25	; 0x0f
    259a:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	8c 85       	ldd	r24, Y+12	; 0x0c
    259e:	9d 85       	ldd	r25, Y+13	; 0x0d
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9d 87       	std	Y+13, r25	; 0x0d
    25a4:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    25a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    25aa:	89 2b       	or	r24, r25
    25ac:	69 f7       	brne	.-38     	; 0x2588 <keypad_u8Stat+0x126>
    25ae:	14 c0       	rjmp	.+40     	; 0x25d8 <keypad_u8Stat+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	68 85       	ldd	r22, Y+8	; 0x08
    25b2:	79 85       	ldd	r23, Y+9	; 0x09
    25b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b8:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9d 87       	std	Y+13, r25	; 0x0d
    25c2:	8c 87       	std	Y+12, r24	; 0x0c
    25c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    25c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    25c8:	99 8b       	std	Y+17, r25	; 0x11
    25ca:	88 8b       	std	Y+16, r24	; 0x10
    25cc:	88 89       	ldd	r24, Y+16	; 0x10
    25ce:	99 89       	ldd	r25, Y+17	; 0x11
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <keypad_u8Stat+0x16e>
    25d4:	99 8b       	std	Y+17, r25	; 0x11
    25d6:	88 8b       	std	Y+16, r24	; 0x10
//				if(DIO_u8GetPinVal(Row_Pin[j]) == 0)
//				{
//					*ptr = Pattern[j][i];
//				}
				_delay_ms(20);
				Dio_setPinVal(Col_Pin[i],Status_Pin_High);
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	89 56       	subi	r24, 0x69	; 105
    25e0:	9f 4f       	sbci	r25, 0xFF	; 255
    25e2:	fc 01       	movw	r30, r24
    25e4:	80 81       	ld	r24, Z
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				return flag;
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	19 c0       	rjmp	.+50     	; 0x2622 <keypad_u8Stat+0x1c0>
	u8 i , j;
	u8 flag = 0;
	for(i = 0 ; i < 4 ; i++)
	{
		Dio_setPinVal(Col_Pin[i],Status_Pin_Low);
		for(j=0;j<4;j++)
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	8a 83       	std	Y+2, r24	; 0x02
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	84 30       	cpi	r24, 0x04	; 4
    25fa:	08 f4       	brcc	.+2      	; 0x25fe <keypad_u8Stat+0x19c>
    25fc:	4d cf       	rjmp	.-358    	; 0x2498 <keypad_u8Stat+0x36>
				_delay_ms(20);
				Dio_setPinVal(Col_Pin[i],Status_Pin_High);
				return flag;
			}
		}
		Dio_setPinVal(Col_Pin[i],Status_Pin_High);
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	89 56       	subi	r24, 0x69	; 105
    2606:	9f 4f       	sbci	r25, 0xFF	; 255
    2608:	fc 01       	movw	r30, r24
    260a:	80 81       	ld	r24, Z
    260c:	61 e0       	ldi	r22, 0x01	; 1
    260e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
  */
u8 keypad_u8Stat(u8 *ptr)
{
	u8 i , j;
	u8 flag = 0;
	for(i = 0 ; i < 4 ; i++)
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	8f 5f       	subi	r24, 0xFF	; 255
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	84 30       	cpi	r24, 0x04	; 4
    261c:	08 f4       	brcc	.+2      	; 0x2620 <keypad_u8Stat+0x1be>
    261e:	30 cf       	rjmp	.-416    	; 0x2480 <keypad_u8Stat+0x1e>
				return flag;
			}
		}
		Dio_setPinVal(Col_Pin[i],Status_Pin_High);
	}
	return flag;
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2622:	63 96       	adiw	r28, 0x13	; 19
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	08 95       	ret

00002634 <App_Init>:

/**
* @brief  : Function to Initialization All Peripherals
*/
void App_Init(void)
{
    2634:	ef 92       	push	r14
    2636:	ff 92       	push	r15
    2638:	0f 93       	push	r16
    263a:	1f 93       	push	r17
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
	UART_init(BAUD_9600);
    2644:	86 e0       	ldi	r24, 0x06	; 6
    2646:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
	LCD_init(LCD);
    264a:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <LCD>
    264e:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <LCD+0x1>
    2652:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <LCD+0x2>
    2656:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <LCD+0x3>
    265a:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <LCD+0x4>
    265e:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <LCD+0x5>
    2662:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <LCD+0x6>
    2666:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <LCD+0x7>
    266a:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <LCD+0x8>
    266e:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <LCD+0x9>
    2672:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD+0xa>
    2676:	0e 94 63 07 	call	0xec6	; 0xec6 <LCD_init>
//	LCD_writeChar(LCD,'x');
//	LCD_goTo(LCD, ROW2, 1);
//	LCD_writeChar(LCD,'z');
}
    267a:	00 00       	nop
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	1f 91       	pop	r17
    2682:	0f 91       	pop	r16
    2684:	ff 90       	pop	r15
    2686:	ef 90       	pop	r14
    2688:	08 95       	ret

0000268a <App_Loop>:
/********** SECTION : Functions Loop Definitions **********/
/**
* @brief  : Function to Looping My Program
*/
void App_Loop(void)
{
    268a:	cf 92       	push	r12
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	2e 97       	sbiw	r28, 0x0e	; 14
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
	if(UART_reciveData(&Var))
    26a8:	8f ea       	ldi	r24, 0xAF	; 175
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 b8 00 	call	0x170	; 0x170 <UART_reciveData>
    26b0:	88 23       	and	r24, r24
    26b2:	d9 f0       	breq	.+54     	; 0x26ea <App_Loop+0x60>
	{
		LCD_writeChar(LCD, Var);
    26b4:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <Var>
    26b8:	c8 2e       	mov	r12, r24
    26ba:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <LCD>
    26be:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <LCD+0x1>
    26c2:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <LCD+0x2>
    26c6:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <LCD+0x3>
    26ca:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <LCD+0x4>
    26ce:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <LCD+0x5>
    26d2:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <LCD+0x6>
    26d6:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <LCD+0x7>
    26da:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <LCD+0x8>
    26de:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <LCD+0x9>
    26e2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD+0xa>
    26e6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_writeChar>
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a8 e4       	ldi	r26, 0x48	; 72
    26f0:	b3 e4       	ldi	r27, 0x43	; 67
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	ab 83       	std	Y+3, r26	; 0x03
    26f8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a e7       	ldi	r20, 0x7A	; 122
    2700:	53 e4       	ldi	r21, 0x43	; 67
    2702:	69 81       	ldd	r22, Y+1	; 0x01
    2704:	7a 81       	ldd	r23, Y+2	; 0x02
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	8d 83       	std	Y+5, r24	; 0x05
    2714:	9e 83       	std	Y+6, r25	; 0x06
    2716:	af 83       	std	Y+7, r26	; 0x07
    2718:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	6d 81       	ldd	r22, Y+5	; 0x05
    2724:	7e 81       	ldd	r23, Y+6	; 0x06
    2726:	8f 81       	ldd	r24, Y+7	; 0x07
    2728:	98 85       	ldd	r25, Y+8	; 0x08
    272a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    272e:	88 23       	and	r24, r24
    2730:	2c f4       	brge	.+10     	; 0x273c <App_Loop+0xb2>
		__ticks = 1;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9a 87       	std	Y+10, r25	; 0x0a
    2738:	89 87       	std	Y+9, r24	; 0x09
    273a:	3f c0       	rjmp	.+126    	; 0x27ba <App_Loop+0x130>
	else if (__tmp > 65535)
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	6d 81       	ldd	r22, Y+5	; 0x05
    2746:	7e 81       	ldd	r23, Y+6	; 0x06
    2748:	8f 81       	ldd	r24, Y+7	; 0x07
    274a:	98 85       	ldd	r25, Y+8	; 0x08
    274c:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__gesf2>
    2750:	18 16       	cp	r1, r24
    2752:	4c f5       	brge	.+82     	; 0x27a6 <App_Loop+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	69 81       	ldd	r22, Y+1	; 0x01
    275e:	7a 81       	ldd	r23, Y+2	; 0x02
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9a 87       	std	Y+10, r25	; 0x0a
    277a:	89 87       	std	Y+9, r24	; 0x09
    277c:	0f c0       	rjmp	.+30     	; 0x279c <App_Loop+0x112>
    277e:	89 e1       	ldi	r24, 0x19	; 25
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9c 87       	std	Y+12, r25	; 0x0c
    2784:	8b 87       	std	Y+11, r24	; 0x0b
    2786:	8b 85       	ldd	r24, Y+11	; 0x0b
    2788:	9c 85       	ldd	r25, Y+12	; 0x0c
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <App_Loop+0x100>
    278e:	9c 87       	std	Y+12, r25	; 0x0c
    2790:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2792:	89 85       	ldd	r24, Y+9	; 0x09
    2794:	9a 85       	ldd	r25, Y+10	; 0x0a
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	9a 87       	std	Y+10, r25	; 0x0a
    279a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	89 2b       	or	r24, r25
    27a2:	69 f7       	brne	.-38     	; 0x277e <App_Loop+0xf4>
	else
	{

	}
	_delay_ms(200);
}
    27a4:	14 c0       	rjmp	.+40     	; 0x27ce <App_Loop+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a6:	6d 81       	ldd	r22, Y+5	; 0x05
    27a8:	7e 81       	ldd	r23, Y+6	; 0x06
    27aa:	8f 81       	ldd	r24, Y+7	; 0x07
    27ac:	98 85       	ldd	r25, Y+8	; 0x08
    27ae:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9a 87       	std	Y+10, r25	; 0x0a
    27b8:	89 87       	std	Y+9, r24	; 0x09
    27ba:	89 85       	ldd	r24, Y+9	; 0x09
    27bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27be:	9e 87       	std	Y+14, r25	; 0x0e
    27c0:	8d 87       	std	Y+13, r24	; 0x0d
    27c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <App_Loop+0x13c>
    27ca:	9e 87       	std	Y+14, r25	; 0x0e
    27cc:	8d 87       	std	Y+13, r24	; 0x0d
    27ce:	00 00       	nop
    27d0:	2e 96       	adiw	r28, 0x0e	; 14
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	0f 91       	pop	r16
    27e4:	ff 90       	pop	r15
    27e6:	ef 90       	pop	r14
    27e8:	cf 90       	pop	r12
    27ea:	08 95       	ret

000027ec <Motor_2_Motors_Init>:
  * @brief  : Initialization 2 Motor With Motor Driver
  * @param  : CopyMotor_1
  * @param  : CopyMotor_2
  */
void Motor_2_Motors_Init(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <Motor_2_Motors_Init+0x6>
    27f2:	00 d0       	rcall	.+0      	; 0x27f4 <Motor_2_Motors_Init+0x8>
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	9a 83       	std	Y+2, r25	; 0x02
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	7c 83       	std	Y+4, r23	; 0x04
    27fe:	6b 83       	std	Y+3, r22	; 0x03
	Dio_setPinDir(m1.IN1, Direction_Pin_Output);
    2800:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <m1>
    2804:	61 e0       	ldi	r22, 0x01	; 1
    2806:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
	Dio_setPinDir(m1.IN2, Direction_Pin_Output);
    280a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m1+0x1>
    280e:	61 e0       	ldi	r22, 0x01	; 1
    2810:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>


	Dio_setPinDir(m2.IN3, Direction_Pin_Output);
    2814:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <m2>
    2818:	61 e0       	ldi	r22, 0x01	; 1
    281a:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
	Dio_setPinDir(m2.IN4, Direction_Pin_Output);
    281e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <m2+0x1>
    2822:	61 e0       	ldi	r22, 0x01	; 1
    2824:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
}
    2828:	00 00       	nop
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	08 95       	ret

00002838 <Motor_2_Motors_Forward>:
  * @brief  : 2 Motor With Motor Driver Move Forward
  * @param  : CopyMotor_1
  * @param  : CopyMotor_2
  */
void Motor_2_Motors_Forward(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	00 d0       	rcall	.+0      	; 0x283e <Motor_2_Motors_Forward+0x6>
    283e:	00 d0       	rcall	.+0      	; 0x2840 <Motor_2_Motors_Forward+0x8>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	7c 83       	std	Y+4, r23	; 0x04
    284a:	6b 83       	std	Y+3, r22	; 0x03
	Dio_setPinVal(CopyMotor_1.IN1, Status_Pin_High);
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.IN2, Status_Pin_Low);
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>

	Dio_setPinVal(CopyMotor_2.IN3, Status_Pin_High);
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.IN4, Status_Pin_Low);
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
}
    286c:	00 00       	nop
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	08 95       	ret

0000287c <Motor_2_Motors_Reverse>:
  * @brief  : 2 Motor With Motor Driver Move Reverse
  * @param  : CopyMotor_1
  * @param  : CopyMotor_2
  */
void Motor_2_Motors_Reverse(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	00 d0       	rcall	.+0      	; 0x2882 <Motor_2_Motors_Reverse+0x6>
    2882:	00 d0       	rcall	.+0      	; 0x2884 <Motor_2_Motors_Reverse+0x8>
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	7c 83       	std	Y+4, r23	; 0x04
    288e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_setPinVal(CopyMotor_1.IN1, Status_Pin_Low);
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.IN2, Status_Pin_High);
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>


	Dio_setPinVal(CopyMotor_2.IN3, Status_Pin_Low);
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.IN4, Status_Pin_High);
    28a8:	8c 81       	ldd	r24, Y+4	; 0x04
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
}
    28b0:	00 00       	nop
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	08 95       	ret

000028c0 <Motor_2_Motors_Off>:
  * @brief  : 2 Motor With Motor Driver Move Stop
  * @param  : CopyMotor_1
  * @param  : CopyMotor_2
  */
void Motor_2_Motors_Off(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <Motor_2_Motors_Off+0x6>
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <Motor_2_Motors_Off+0x8>
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	7c 83       	std	Y+4, r23	; 0x04
    28d2:	6b 83       	std	Y+3, r22	; 0x03
	Dio_setPinVal(CopyMotor_1.IN1, Status_Pin_Low);
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	60 e0       	ldi	r22, 0x00	; 0
    28d8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.IN2, Status_Pin_Low);
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>


	Dio_setPinVal(CopyMotor_2.IN3, Status_Pin_Low);
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.IN4, Status_Pin_Low);
    28ec:	8c 81       	ldd	r24, Y+4	; 0x04
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
}
    28f4:	00 00       	nop
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	08 95       	ret

00002904 <Bcd_7segInit>:
/**
  * @brief  : Initialization 7-segment With BCD
  * @param  : Copy7seg
  */
void Bcd_7segInit(BCD Copy7seg)
{
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	00 d0       	rcall	.+0      	; 0x290a <Bcd_7segInit+0x6>
    290a:	00 d0       	rcall	.+0      	; 0x290c <Bcd_7segInit+0x8>
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	69 83       	std	Y+1, r22	; 0x01
    2912:	7a 83       	std	Y+2, r23	; 0x02
    2914:	8b 83       	std	Y+3, r24	; 0x03
    2916:	9c 83       	std	Y+4, r25	; 0x04
	Dio_setPinDir(Copy7seg.Pin_1, Direction_Pin_Output);
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	61 e0       	ldi	r22, 0x01	; 1
    291c:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_2, Direction_Pin_Output);
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	61 e0       	ldi	r22, 0x01	; 1
    2924:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_3, Direction_Pin_Output);
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	61 e0       	ldi	r22, 0x01	; 1
    292c:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_4, Direction_Pin_Output);
    2930:	8c 81       	ldd	r24, Y+4	; 0x04
    2932:	61 e0       	ldi	r22, 0x01	; 1
    2934:	0e 94 86 03 	call	0x70c	; 0x70c <Dio_setPinDir>
}
    2938:	00 00       	nop
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	08 95       	ret

00002948 <Bcd_7segWriteNum>:
  * @brief  : Write Number in 7-segment With BCD
  * @param  : Copy7segNum
  * @param  : CopyNumber
  */
void Bcd_7segWriteNum(BCD Copy7segNum , u8 CopyNumber)
{
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	00 d0       	rcall	.+0      	; 0x294e <Bcd_7segWriteNum+0x6>
    294e:	00 d0       	rcall	.+0      	; 0x2950 <Bcd_7segWriteNum+0x8>
    2950:	1f 92       	push	r1
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	69 83       	std	Y+1, r22	; 0x01
    2958:	7a 83       	std	Y+2, r23	; 0x02
    295a:	8b 83       	std	Y+3, r24	; 0x03
    295c:	9c 83       	std	Y+4, r25	; 0x04
    295e:	4d 83       	std	Y+5, r20	; 0x05
	switch (CopyNumber) {
    2960:	8d 81       	ldd	r24, Y+5	; 0x05
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	09 2e       	mov	r0, r25
    2968:	00 0c       	add	r0, r0
    296a:	aa 0b       	sbc	r26, r26
    296c:	bb 0b       	sbc	r27, r27
    296e:	8a 30       	cpi	r24, 0x0A	; 10
    2970:	91 05       	cpc	r25, r1
    2972:	a1 05       	cpc	r26, r1
    2974:	b1 05       	cpc	r27, r1
    2976:	08 f0       	brcs	.+2      	; 0x297a <Bcd_7segWriteNum+0x32>
    2978:	b9 c0       	rjmp	.+370    	; 0x2aec <Bcd_7segWriteNum+0x1a4>
    297a:	8e 53       	subi	r24, 0x3E	; 62
    297c:	9b 4e       	sbci	r25, 0xEB	; 235
    297e:	fc 01       	movw	r30, r24
    2980:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__tablejump2__>
    2984:	cc 14       	cp	r12, r12
    2986:	dd 14       	cp	r13, r13
    2988:	ee 14       	cp	r14, r14
    298a:	ff 14       	cp	r15, r15
    298c:	10 15       	cp	r17, r0
    298e:	21 15       	cp	r18, r1
    2990:	32 15       	cp	r19, r2
    2992:	43 15       	cp	r20, r3
    2994:	54 15       	cp	r21, r4
    2996:	65 15       	cp	r22, r5
		case 0:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	60 e0       	ldi	r22, 0x00	; 0
    299c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	60 e0       	ldi	r22, 0x00	; 0
    29a4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    29b0:	8c 81       	ldd	r24, Y+4	; 0x04
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    29b8:	9a c0       	rjmp	.+308    	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		case 1:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	61 e0       	ldi	r22, 0x01	; 1
    29be:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	60 e0       	ldi	r22, 0x00	; 0
    29ce:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    29d2:	8c 81       	ldd	r24, Y+4	; 0x04
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    29da:	89 c0       	rjmp	.+274    	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		case 2:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	60 e0       	ldi	r22, 0x00	; 0
    29f0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    29f4:	8c 81       	ldd	r24, Y+4	; 0x04
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    29fc:	78 c0       	rjmp	.+240    	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		case 3:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	61 e0       	ldi	r22, 0x01	; 1
    2a02:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    2a06:	8a 81       	ldd	r24, Y+2	; 0x02
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a16:	8c 81       	ldd	r24, Y+4	; 0x04
    2a18:	60 e0       	ldi	r22, 0x00	; 0
    2a1a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    2a1e:	67 c0       	rjmp	.+206    	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		case 4:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	61 e0       	ldi	r22, 0x01	; 1
    2a34:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a38:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    2a40:	56 c0       	rjmp	.+172    	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		case 5:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	61 e0       	ldi	r22, 0x01	; 1
    2a56:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    2a62:	45 c0       	rjmp	.+138    	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		case 6:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	61 e0       	ldi	r22, 0x01	; 1
    2a78:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    2a84:	34 c0       	rjmp	.+104    	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		case 7:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	61 e0       	ldi	r22, 0x01	; 1
    2a92:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	61 e0       	ldi	r22, 0x01	; 1
    2a9a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    2aa6:	23 c0       	rjmp	.+70     	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		case 8:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	60 e0       	ldi	r22, 0x00	; 0
    2ab4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    2ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    2ac8:	12 c0       	rjmp	.+36     	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		case 9:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	61 e0       	ldi	r22, 0x01	; 1
    2ace:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	60 e0       	ldi	r22, 0x00	; 0
    2ad6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    2ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae4:	61 e0       	ldi	r22, 0x01	; 1
    2ae6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
			break;
    2aea:	01 c0       	rjmp	.+2      	; 0x2aee <Bcd_7segWriteNum+0x1a6>
		default:
			break;
    2aec:	00 00       	nop
	}
}
    2aee:	00 00       	nop
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	08 95       	ret

00002b00 <Bcd_MPX_6Enable>:
  * @brief  :  Set or Clear Enable Pins & Select Type Of 6 Multiplexing 7-segment
  * @param  : Copy7segNum
  * @param  : CopyNumber
  */
void Bcd_MPX_6Enable(MPX_6_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    2b00:	0f 93       	push	r16
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	28 97       	sbiw	r28, 0x08	; 8
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	49 83       	std	Y+1, r20	; 0x01
    2b18:	5a 83       	std	Y+2, r21	; 0x02
    2b1a:	6b 83       	std	Y+3, r22	; 0x03
    2b1c:	7c 83       	std	Y+4, r23	; 0x04
    2b1e:	8d 83       	std	Y+5, r24	; 0x05
    2b20:	9e 83       	std	Y+6, r25	; 0x06
    2b22:	2f 83       	std	Y+7, r18	; 0x07
    2b24:	08 87       	std	Y+8, r16	; 0x08
	if(CopyStatus == Enable){
    2b26:	88 85       	ldd	r24, Y+8	; 0x08
    2b28:	81 30       	cpi	r24, 0x01	; 1
    2b2a:	d1 f5       	brne	.+116    	; 0x2ba0 <Bcd_MPX_6Enable+0xa0>
		switch (CopyCommonType) {
    2b2c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b2e:	88 2f       	mov	r24, r24
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	e1 f0       	breq	.+56     	; 0x2b6e <Bcd_MPX_6Enable+0x6e>
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <Bcd_MPX_6Enable+0x3c>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				break;
			default:
				break;
    2b3a:	6f c0       	rjmp	.+222    	; 0x2c1a <Bcd_MPX_6Enable+0x11a>
void Bcd_MPX_6Enable(MPX_6_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	61 e0       	ldi	r22, 0x01	; 1
    2b40:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
    2b46:	61 e0       	ldi	r22, 0x01	; 1
    2b48:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	61 e0       	ldi	r22, 0x01	; 1
    2b50:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2b54:	8c 81       	ldd	r24, Y+4	; 0x04
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	61 e0       	ldi	r22, 0x01	; 1
    2b60:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    2b64:	8e 81       	ldd	r24, Y+6	; 0x06
    2b66:	61 e0       	ldi	r22, 0x01	; 1
    2b68:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				break;
    2b6c:	56 c0       	rjmp	.+172    	; 0x2c1a <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    2b86:	8c 81       	ldd	r24, Y+4	; 0x04
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    2b96:	8e 81       	ldd	r24, Y+6	; 0x06
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				break;
    2b9e:	3d c0       	rjmp	.+122    	; 0x2c1a <Bcd_MPX_6Enable+0x11a>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    2ba0:	88 85       	ldd	r24, Y+8	; 0x08
    2ba2:	88 23       	and	r24, r24
    2ba4:	d1 f5       	brne	.+116    	; 0x2c1a <Bcd_MPX_6Enable+0x11a>
	{
		switch (CopyCommonType) {
    2ba6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ba8:	88 2f       	mov	r24, r24
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	e1 f0       	breq	.+56     	; 0x2be8 <Bcd_MPX_6Enable+0xe8>
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	09 f0       	breq	.+2      	; 0x2bb6 <Bcd_MPX_6Enable+0xb6>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				break;
			default:
				break;
    2bb4:	32 c0       	rjmp	.+100    	; 0x2c1a <Bcd_MPX_6Enable+0x11a>
	}
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    2bce:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    2bde:	8e 81       	ldd	r24, Y+6	; 0x06
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				break;
    2be6:	19 c0       	rjmp	.+50     	; 0x2c1a <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	61 e0       	ldi	r22, 0x01	; 1
    2bec:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	61 e0       	ldi	r22, 0x01	; 1
    2bf4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2c00:	8c 81       	ldd	r24, Y+4	; 0x04
    2c02:	61 e0       	ldi	r22, 0x01	; 1
    2c04:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    2c08:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0a:	61 e0       	ldi	r22, 0x01	; 1
    2c0c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    2c10:	8e 81       	ldd	r24, Y+6	; 0x06
    2c12:	61 e0       	ldi	r22, 0x01	; 1
    2c14:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_setPinVal>
				break;
    2c18:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    2c1a:	00 00       	nop
    2c1c:	28 96       	adiw	r28, 0x08	; 8
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	0f 91       	pop	r16
    2c2e:	08 95       	ret

00002c30 <main>:
 */
/********** SECTION : Includes **********/
#include "Main_Init.h"
/********** SECTION : Main Function **********/
int main (void)
{
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    2c38:	0e 94 1a 13 	call	0x2634	; 0x2634 <App_Init>
	while(1)
	{
		App_Loop();
    2c3c:	0e 94 45 13 	call	0x268a	; 0x268a <App_Loop>
    2c40:	fd cf       	rjmp	.-6      	; 0x2c3c <main+0xc>

00002c42 <__tablejump2__>:
    2c42:	ee 0f       	add	r30, r30
    2c44:	ff 1f       	adc	r31, r31
    2c46:	05 90       	lpm	r0, Z+
    2c48:	f4 91       	lpm	r31, Z
    2c4a:	e0 2d       	mov	r30, r0
    2c4c:	09 94       	ijmp

00002c4e <__cmpsf2>:
    2c4e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__fp_cmp>
    2c52:	08 f4       	brcc	.+2      	; 0x2c56 <__cmpsf2+0x8>
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	08 95       	ret

00002c58 <__divsf3>:
    2c58:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__divsf3x>
    2c5c:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_round>
    2c60:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__fp_pscB>
    2c64:	58 f0       	brcs	.+22     	; 0x2c7c <__divsf3+0x24>
    2c66:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <__fp_pscA>
    2c6a:	40 f0       	brcs	.+16     	; 0x2c7c <__divsf3+0x24>
    2c6c:	29 f4       	brne	.+10     	; 0x2c78 <__divsf3+0x20>
    2c6e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c70:	29 f0       	breq	.+10     	; 0x2c7c <__divsf3+0x24>
    2c72:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__fp_inf>
    2c76:	51 11       	cpse	r21, r1
    2c78:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__fp_szero>
    2c7c:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__fp_nan>

00002c80 <__divsf3x>:
    2c80:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__fp_split3>
    2c84:	68 f3       	brcs	.-38     	; 0x2c60 <__divsf3+0x8>

00002c86 <__divsf3_pse>:
    2c86:	99 23       	and	r25, r25
    2c88:	b1 f3       	breq	.-20     	; 0x2c76 <__divsf3+0x1e>
    2c8a:	55 23       	and	r21, r21
    2c8c:	91 f3       	breq	.-28     	; 0x2c72 <__divsf3+0x1a>
    2c8e:	95 1b       	sub	r25, r21
    2c90:	55 0b       	sbc	r21, r21
    2c92:	bb 27       	eor	r27, r27
    2c94:	aa 27       	eor	r26, r26
    2c96:	62 17       	cp	r22, r18
    2c98:	73 07       	cpc	r23, r19
    2c9a:	84 07       	cpc	r24, r20
    2c9c:	38 f0       	brcs	.+14     	; 0x2cac <__divsf3_pse+0x26>
    2c9e:	9f 5f       	subi	r25, 0xFF	; 255
    2ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca2:	22 0f       	add	r18, r18
    2ca4:	33 1f       	adc	r19, r19
    2ca6:	44 1f       	adc	r20, r20
    2ca8:	aa 1f       	adc	r26, r26
    2caa:	a9 f3       	breq	.-22     	; 0x2c96 <__divsf3_pse+0x10>
    2cac:	35 d0       	rcall	.+106    	; 0x2d18 <__divsf3_pse+0x92>
    2cae:	0e 2e       	mov	r0, r30
    2cb0:	3a f0       	brmi	.+14     	; 0x2cc0 <__divsf3_pse+0x3a>
    2cb2:	e0 e8       	ldi	r30, 0x80	; 128
    2cb4:	32 d0       	rcall	.+100    	; 0x2d1a <__divsf3_pse+0x94>
    2cb6:	91 50       	subi	r25, 0x01	; 1
    2cb8:	50 40       	sbci	r21, 0x00	; 0
    2cba:	e6 95       	lsr	r30
    2cbc:	00 1c       	adc	r0, r0
    2cbe:	ca f7       	brpl	.-14     	; 0x2cb2 <__divsf3_pse+0x2c>
    2cc0:	2b d0       	rcall	.+86     	; 0x2d18 <__divsf3_pse+0x92>
    2cc2:	fe 2f       	mov	r31, r30
    2cc4:	29 d0       	rcall	.+82     	; 0x2d18 <__divsf3_pse+0x92>
    2cc6:	66 0f       	add	r22, r22
    2cc8:	77 1f       	adc	r23, r23
    2cca:	88 1f       	adc	r24, r24
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	26 17       	cp	r18, r22
    2cd0:	37 07       	cpc	r19, r23
    2cd2:	48 07       	cpc	r20, r24
    2cd4:	ab 07       	cpc	r26, r27
    2cd6:	b0 e8       	ldi	r27, 0x80	; 128
    2cd8:	09 f0       	breq	.+2      	; 0x2cdc <__divsf3_pse+0x56>
    2cda:	bb 0b       	sbc	r27, r27
    2cdc:	80 2d       	mov	r24, r0
    2cde:	bf 01       	movw	r22, r30
    2ce0:	ff 27       	eor	r31, r31
    2ce2:	93 58       	subi	r25, 0x83	; 131
    2ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce6:	3a f0       	brmi	.+14     	; 0x2cf6 <__divsf3_pse+0x70>
    2ce8:	9e 3f       	cpi	r25, 0xFE	; 254
    2cea:	51 05       	cpc	r21, r1
    2cec:	78 f0       	brcs	.+30     	; 0x2d0c <__divsf3_pse+0x86>
    2cee:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__fp_inf>
    2cf2:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__fp_szero>
    2cf6:	5f 3f       	cpi	r21, 0xFF	; 255
    2cf8:	e4 f3       	brlt	.-8      	; 0x2cf2 <__divsf3_pse+0x6c>
    2cfa:	98 3e       	cpi	r25, 0xE8	; 232
    2cfc:	d4 f3       	brlt	.-12     	; 0x2cf2 <__divsf3_pse+0x6c>
    2cfe:	86 95       	lsr	r24
    2d00:	77 95       	ror	r23
    2d02:	67 95       	ror	r22
    2d04:	b7 95       	ror	r27
    2d06:	f7 95       	ror	r31
    2d08:	9f 5f       	subi	r25, 0xFF	; 255
    2d0a:	c9 f7       	brne	.-14     	; 0x2cfe <__divsf3_pse+0x78>
    2d0c:	88 0f       	add	r24, r24
    2d0e:	91 1d       	adc	r25, r1
    2d10:	96 95       	lsr	r25
    2d12:	87 95       	ror	r24
    2d14:	97 f9       	bld	r25, 7
    2d16:	08 95       	ret
    2d18:	e1 e0       	ldi	r30, 0x01	; 1
    2d1a:	66 0f       	add	r22, r22
    2d1c:	77 1f       	adc	r23, r23
    2d1e:	88 1f       	adc	r24, r24
    2d20:	bb 1f       	adc	r27, r27
    2d22:	62 17       	cp	r22, r18
    2d24:	73 07       	cpc	r23, r19
    2d26:	84 07       	cpc	r24, r20
    2d28:	ba 07       	cpc	r27, r26
    2d2a:	20 f0       	brcs	.+8      	; 0x2d34 <__divsf3_pse+0xae>
    2d2c:	62 1b       	sub	r22, r18
    2d2e:	73 0b       	sbc	r23, r19
    2d30:	84 0b       	sbc	r24, r20
    2d32:	ba 0b       	sbc	r27, r26
    2d34:	ee 1f       	adc	r30, r30
    2d36:	88 f7       	brcc	.-30     	; 0x2d1a <__divsf3_pse+0x94>
    2d38:	e0 95       	com	r30
    2d3a:	08 95       	ret

00002d3c <__fixunssfsi>:
    2d3c:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__fp_splitA>
    2d40:	88 f0       	brcs	.+34     	; 0x2d64 <__fixunssfsi+0x28>
    2d42:	9f 57       	subi	r25, 0x7F	; 127
    2d44:	98 f0       	brcs	.+38     	; 0x2d6c <__fixunssfsi+0x30>
    2d46:	b9 2f       	mov	r27, r25
    2d48:	99 27       	eor	r25, r25
    2d4a:	b7 51       	subi	r27, 0x17	; 23
    2d4c:	b0 f0       	brcs	.+44     	; 0x2d7a <__fixunssfsi+0x3e>
    2d4e:	e1 f0       	breq	.+56     	; 0x2d88 <__fixunssfsi+0x4c>
    2d50:	66 0f       	add	r22, r22
    2d52:	77 1f       	adc	r23, r23
    2d54:	88 1f       	adc	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	1a f0       	brmi	.+6      	; 0x2d60 <__fixunssfsi+0x24>
    2d5a:	ba 95       	dec	r27
    2d5c:	c9 f7       	brne	.-14     	; 0x2d50 <__fixunssfsi+0x14>
    2d5e:	14 c0       	rjmp	.+40     	; 0x2d88 <__fixunssfsi+0x4c>
    2d60:	b1 30       	cpi	r27, 0x01	; 1
    2d62:	91 f0       	breq	.+36     	; 0x2d88 <__fixunssfsi+0x4c>
    2d64:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__fp_zero>
    2d68:	b1 e0       	ldi	r27, 0x01	; 1
    2d6a:	08 95       	ret
    2d6c:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__fp_zero>
    2d70:	67 2f       	mov	r22, r23
    2d72:	78 2f       	mov	r23, r24
    2d74:	88 27       	eor	r24, r24
    2d76:	b8 5f       	subi	r27, 0xF8	; 248
    2d78:	39 f0       	breq	.+14     	; 0x2d88 <__fixunssfsi+0x4c>
    2d7a:	b9 3f       	cpi	r27, 0xF9	; 249
    2d7c:	cc f3       	brlt	.-14     	; 0x2d70 <__fixunssfsi+0x34>
    2d7e:	86 95       	lsr	r24
    2d80:	77 95       	ror	r23
    2d82:	67 95       	ror	r22
    2d84:	b3 95       	inc	r27
    2d86:	d9 f7       	brne	.-10     	; 0x2d7e <__fixunssfsi+0x42>
    2d88:	3e f4       	brtc	.+14     	; 0x2d98 <__fixunssfsi+0x5c>
    2d8a:	90 95       	com	r25
    2d8c:	80 95       	com	r24
    2d8e:	70 95       	com	r23
    2d90:	61 95       	neg	r22
    2d92:	7f 4f       	sbci	r23, 0xFF	; 255
    2d94:	8f 4f       	sbci	r24, 0xFF	; 255
    2d96:	9f 4f       	sbci	r25, 0xFF	; 255
    2d98:	08 95       	ret

00002d9a <__fp_cmp>:
    2d9a:	99 0f       	add	r25, r25
    2d9c:	00 08       	sbc	r0, r0
    2d9e:	55 0f       	add	r21, r21
    2da0:	aa 0b       	sbc	r26, r26
    2da2:	e0 e8       	ldi	r30, 0x80	; 128
    2da4:	fe ef       	ldi	r31, 0xFE	; 254
    2da6:	16 16       	cp	r1, r22
    2da8:	17 06       	cpc	r1, r23
    2daa:	e8 07       	cpc	r30, r24
    2dac:	f9 07       	cpc	r31, r25
    2dae:	c0 f0       	brcs	.+48     	; 0x2de0 <__fp_cmp+0x46>
    2db0:	12 16       	cp	r1, r18
    2db2:	13 06       	cpc	r1, r19
    2db4:	e4 07       	cpc	r30, r20
    2db6:	f5 07       	cpc	r31, r21
    2db8:	98 f0       	brcs	.+38     	; 0x2de0 <__fp_cmp+0x46>
    2dba:	62 1b       	sub	r22, r18
    2dbc:	73 0b       	sbc	r23, r19
    2dbe:	84 0b       	sbc	r24, r20
    2dc0:	95 0b       	sbc	r25, r21
    2dc2:	39 f4       	brne	.+14     	; 0x2dd2 <__fp_cmp+0x38>
    2dc4:	0a 26       	eor	r0, r26
    2dc6:	61 f0       	breq	.+24     	; 0x2de0 <__fp_cmp+0x46>
    2dc8:	23 2b       	or	r18, r19
    2dca:	24 2b       	or	r18, r20
    2dcc:	25 2b       	or	r18, r21
    2dce:	21 f4       	brne	.+8      	; 0x2dd8 <__fp_cmp+0x3e>
    2dd0:	08 95       	ret
    2dd2:	0a 26       	eor	r0, r26
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <__fp_cmp+0x3e>
    2dd6:	a1 40       	sbci	r26, 0x01	; 1
    2dd8:	a6 95       	lsr	r26
    2dda:	8f ef       	ldi	r24, 0xFF	; 255
    2ddc:	81 1d       	adc	r24, r1
    2dde:	81 1d       	adc	r24, r1
    2de0:	08 95       	ret

00002de2 <__fp_inf>:
    2de2:	97 f9       	bld	r25, 7
    2de4:	9f 67       	ori	r25, 0x7F	; 127
    2de6:	80 e8       	ldi	r24, 0x80	; 128
    2de8:	70 e0       	ldi	r23, 0x00	; 0
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	08 95       	ret

00002dee <__fp_nan>:
    2dee:	9f ef       	ldi	r25, 0xFF	; 255
    2df0:	80 ec       	ldi	r24, 0xC0	; 192
    2df2:	08 95       	ret

00002df4 <__fp_pscA>:
    2df4:	00 24       	eor	r0, r0
    2df6:	0a 94       	dec	r0
    2df8:	16 16       	cp	r1, r22
    2dfa:	17 06       	cpc	r1, r23
    2dfc:	18 06       	cpc	r1, r24
    2dfe:	09 06       	cpc	r0, r25
    2e00:	08 95       	ret

00002e02 <__fp_pscB>:
    2e02:	00 24       	eor	r0, r0
    2e04:	0a 94       	dec	r0
    2e06:	12 16       	cp	r1, r18
    2e08:	13 06       	cpc	r1, r19
    2e0a:	14 06       	cpc	r1, r20
    2e0c:	05 06       	cpc	r0, r21
    2e0e:	08 95       	ret

00002e10 <__fp_round>:
    2e10:	09 2e       	mov	r0, r25
    2e12:	03 94       	inc	r0
    2e14:	00 0c       	add	r0, r0
    2e16:	11 f4       	brne	.+4      	; 0x2e1c <__fp_round+0xc>
    2e18:	88 23       	and	r24, r24
    2e1a:	52 f0       	brmi	.+20     	; 0x2e30 <__fp_round+0x20>
    2e1c:	bb 0f       	add	r27, r27
    2e1e:	40 f4       	brcc	.+16     	; 0x2e30 <__fp_round+0x20>
    2e20:	bf 2b       	or	r27, r31
    2e22:	11 f4       	brne	.+4      	; 0x2e28 <__fp_round+0x18>
    2e24:	60 ff       	sbrs	r22, 0
    2e26:	04 c0       	rjmp	.+8      	; 0x2e30 <__fp_round+0x20>
    2e28:	6f 5f       	subi	r22, 0xFF	; 255
    2e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e30:	08 95       	ret

00002e32 <__fp_split3>:
    2e32:	57 fd       	sbrc	r21, 7
    2e34:	90 58       	subi	r25, 0x80	; 128
    2e36:	44 0f       	add	r20, r20
    2e38:	55 1f       	adc	r21, r21
    2e3a:	59 f0       	breq	.+22     	; 0x2e52 <__fp_splitA+0x10>
    2e3c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e3e:	71 f0       	breq	.+28     	; 0x2e5c <__fp_splitA+0x1a>
    2e40:	47 95       	ror	r20

00002e42 <__fp_splitA>:
    2e42:	88 0f       	add	r24, r24
    2e44:	97 fb       	bst	r25, 7
    2e46:	99 1f       	adc	r25, r25
    2e48:	61 f0       	breq	.+24     	; 0x2e62 <__fp_splitA+0x20>
    2e4a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e4c:	79 f0       	breq	.+30     	; 0x2e6c <__fp_splitA+0x2a>
    2e4e:	87 95       	ror	r24
    2e50:	08 95       	ret
    2e52:	12 16       	cp	r1, r18
    2e54:	13 06       	cpc	r1, r19
    2e56:	14 06       	cpc	r1, r20
    2e58:	55 1f       	adc	r21, r21
    2e5a:	f2 cf       	rjmp	.-28     	; 0x2e40 <__fp_split3+0xe>
    2e5c:	46 95       	lsr	r20
    2e5e:	f1 df       	rcall	.-30     	; 0x2e42 <__fp_splitA>
    2e60:	08 c0       	rjmp	.+16     	; 0x2e72 <__fp_splitA+0x30>
    2e62:	16 16       	cp	r1, r22
    2e64:	17 06       	cpc	r1, r23
    2e66:	18 06       	cpc	r1, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	f1 cf       	rjmp	.-30     	; 0x2e4e <__fp_splitA+0xc>
    2e6c:	86 95       	lsr	r24
    2e6e:	71 05       	cpc	r23, r1
    2e70:	61 05       	cpc	r22, r1
    2e72:	08 94       	sec
    2e74:	08 95       	ret

00002e76 <__fp_zero>:
    2e76:	e8 94       	clt

00002e78 <__fp_szero>:
    2e78:	bb 27       	eor	r27, r27
    2e7a:	66 27       	eor	r22, r22
    2e7c:	77 27       	eor	r23, r23
    2e7e:	cb 01       	movw	r24, r22
    2e80:	97 f9       	bld	r25, 7
    2e82:	08 95       	ret

00002e84 <__gesf2>:
    2e84:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__fp_cmp>
    2e88:	08 f4       	brcc	.+2      	; 0x2e8c <__gesf2+0x8>
    2e8a:	8f ef       	ldi	r24, 0xFF	; 255
    2e8c:	08 95       	ret

00002e8e <__mulsf3>:
    2e8e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__mulsf3x>
    2e92:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_round>
    2e96:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <__fp_pscA>
    2e9a:	38 f0       	brcs	.+14     	; 0x2eaa <__mulsf3+0x1c>
    2e9c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__fp_pscB>
    2ea0:	20 f0       	brcs	.+8      	; 0x2eaa <__mulsf3+0x1c>
    2ea2:	95 23       	and	r25, r21
    2ea4:	11 f0       	breq	.+4      	; 0x2eaa <__mulsf3+0x1c>
    2ea6:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__fp_inf>
    2eaa:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__fp_nan>
    2eae:	11 24       	eor	r1, r1
    2eb0:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__fp_szero>

00002eb4 <__mulsf3x>:
    2eb4:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__fp_split3>
    2eb8:	70 f3       	brcs	.-36     	; 0x2e96 <__mulsf3+0x8>

00002eba <__mulsf3_pse>:
    2eba:	95 9f       	mul	r25, r21
    2ebc:	c1 f3       	breq	.-16     	; 0x2eae <__mulsf3+0x20>
    2ebe:	95 0f       	add	r25, r21
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	55 1f       	adc	r21, r21
    2ec4:	62 9f       	mul	r22, r18
    2ec6:	f0 01       	movw	r30, r0
    2ec8:	72 9f       	mul	r23, r18
    2eca:	bb 27       	eor	r27, r27
    2ecc:	f0 0d       	add	r31, r0
    2ece:	b1 1d       	adc	r27, r1
    2ed0:	63 9f       	mul	r22, r19
    2ed2:	aa 27       	eor	r26, r26
    2ed4:	f0 0d       	add	r31, r0
    2ed6:	b1 1d       	adc	r27, r1
    2ed8:	aa 1f       	adc	r26, r26
    2eda:	64 9f       	mul	r22, r20
    2edc:	66 27       	eor	r22, r22
    2ede:	b0 0d       	add	r27, r0
    2ee0:	a1 1d       	adc	r26, r1
    2ee2:	66 1f       	adc	r22, r22
    2ee4:	82 9f       	mul	r24, r18
    2ee6:	22 27       	eor	r18, r18
    2ee8:	b0 0d       	add	r27, r0
    2eea:	a1 1d       	adc	r26, r1
    2eec:	62 1f       	adc	r22, r18
    2eee:	73 9f       	mul	r23, r19
    2ef0:	b0 0d       	add	r27, r0
    2ef2:	a1 1d       	adc	r26, r1
    2ef4:	62 1f       	adc	r22, r18
    2ef6:	83 9f       	mul	r24, r19
    2ef8:	a0 0d       	add	r26, r0
    2efa:	61 1d       	adc	r22, r1
    2efc:	22 1f       	adc	r18, r18
    2efe:	74 9f       	mul	r23, r20
    2f00:	33 27       	eor	r19, r19
    2f02:	a0 0d       	add	r26, r0
    2f04:	61 1d       	adc	r22, r1
    2f06:	23 1f       	adc	r18, r19
    2f08:	84 9f       	mul	r24, r20
    2f0a:	60 0d       	add	r22, r0
    2f0c:	21 1d       	adc	r18, r1
    2f0e:	82 2f       	mov	r24, r18
    2f10:	76 2f       	mov	r23, r22
    2f12:	6a 2f       	mov	r22, r26
    2f14:	11 24       	eor	r1, r1
    2f16:	9f 57       	subi	r25, 0x7F	; 127
    2f18:	50 40       	sbci	r21, 0x00	; 0
    2f1a:	9a f0       	brmi	.+38     	; 0x2f42 <__mulsf3_pse+0x88>
    2f1c:	f1 f0       	breq	.+60     	; 0x2f5a <__mulsf3_pse+0xa0>
    2f1e:	88 23       	and	r24, r24
    2f20:	4a f0       	brmi	.+18     	; 0x2f34 <__mulsf3_pse+0x7a>
    2f22:	ee 0f       	add	r30, r30
    2f24:	ff 1f       	adc	r31, r31
    2f26:	bb 1f       	adc	r27, r27
    2f28:	66 1f       	adc	r22, r22
    2f2a:	77 1f       	adc	r23, r23
    2f2c:	88 1f       	adc	r24, r24
    2f2e:	91 50       	subi	r25, 0x01	; 1
    2f30:	50 40       	sbci	r21, 0x00	; 0
    2f32:	a9 f7       	brne	.-22     	; 0x2f1e <__mulsf3_pse+0x64>
    2f34:	9e 3f       	cpi	r25, 0xFE	; 254
    2f36:	51 05       	cpc	r21, r1
    2f38:	80 f0       	brcs	.+32     	; 0x2f5a <__mulsf3_pse+0xa0>
    2f3a:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__fp_inf>
    2f3e:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__fp_szero>
    2f42:	5f 3f       	cpi	r21, 0xFF	; 255
    2f44:	e4 f3       	brlt	.-8      	; 0x2f3e <__mulsf3_pse+0x84>
    2f46:	98 3e       	cpi	r25, 0xE8	; 232
    2f48:	d4 f3       	brlt	.-12     	; 0x2f3e <__mulsf3_pse+0x84>
    2f4a:	86 95       	lsr	r24
    2f4c:	77 95       	ror	r23
    2f4e:	67 95       	ror	r22
    2f50:	b7 95       	ror	r27
    2f52:	f7 95       	ror	r31
    2f54:	e7 95       	ror	r30
    2f56:	9f 5f       	subi	r25, 0xFF	; 255
    2f58:	c1 f7       	brne	.-16     	; 0x2f4a <__mulsf3_pse+0x90>
    2f5a:	fe 2b       	or	r31, r30
    2f5c:	88 0f       	add	r24, r24
    2f5e:	91 1d       	adc	r25, r1
    2f60:	96 95       	lsr	r25
    2f62:	87 95       	ror	r24
    2f64:	97 f9       	bld	r25, 7
    2f66:	08 95       	ret

00002f68 <memset>:
    2f68:	dc 01       	movw	r26, r24
    2f6a:	01 c0       	rjmp	.+2      	; 0x2f6e <memset+0x6>
    2f6c:	6d 93       	st	X+, r22
    2f6e:	41 50       	subi	r20, 0x01	; 1
    2f70:	50 40       	sbci	r21, 0x00	; 0
    2f72:	e0 f7       	brcc	.-8      	; 0x2f6c <memset+0x4>
    2f74:	08 95       	ret

00002f76 <sprintf>:
    2f76:	ae e0       	ldi	r26, 0x0E	; 14
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	e1 ec       	ldi	r30, 0xC1	; 193
    2f7c:	f7 e1       	ldi	r31, 0x17	; 23
    2f7e:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__+0x1c>
    2f82:	0d 89       	ldd	r16, Y+21	; 0x15
    2f84:	1e 89       	ldd	r17, Y+22	; 0x16
    2f86:	86 e0       	ldi	r24, 0x06	; 6
    2f88:	8c 83       	std	Y+4, r24	; 0x04
    2f8a:	1a 83       	std	Y+2, r17	; 0x02
    2f8c:	09 83       	std	Y+1, r16	; 0x01
    2f8e:	8f ef       	ldi	r24, 0xFF	; 255
    2f90:	9f e7       	ldi	r25, 0x7F	; 127
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	ae 01       	movw	r20, r28
    2f98:	47 5e       	subi	r20, 0xE7	; 231
    2f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f9c:	6f 89       	ldd	r22, Y+23	; 0x17
    2f9e:	78 8d       	ldd	r23, Y+24	; 0x18
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	01 96       	adiw	r24, 0x01	; 1
    2fa4:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <vfprintf>
    2fa8:	2f 81       	ldd	r18, Y+7	; 0x07
    2faa:	38 85       	ldd	r19, Y+8	; 0x08
    2fac:	02 0f       	add	r16, r18
    2fae:	13 1f       	adc	r17, r19
    2fb0:	f8 01       	movw	r30, r16
    2fb2:	10 82       	st	Z, r1
    2fb4:	2e 96       	adiw	r28, 0x0e	; 14
    2fb6:	e4 e0       	ldi	r30, 0x04	; 4
    2fb8:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__+0x1c>

00002fbc <vfprintf>:
    2fbc:	ab e0       	ldi	r26, 0x0B	; 11
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e4 ee       	ldi	r30, 0xE4	; 228
    2fc2:	f7 e1       	ldi	r31, 0x17	; 23
    2fc4:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__prologue_saves__>
    2fc8:	7c 01       	movw	r14, r24
    2fca:	3b 01       	movw	r6, r22
    2fcc:	8a 01       	movw	r16, r20
    2fce:	fc 01       	movw	r30, r24
    2fd0:	17 82       	std	Z+7, r1	; 0x07
    2fd2:	16 82       	std	Z+6, r1	; 0x06
    2fd4:	83 81       	ldd	r24, Z+3	; 0x03
    2fd6:	81 ff       	sbrs	r24, 1
    2fd8:	c8 c1       	rjmp	.+912    	; 0x336a <vfprintf+0x3ae>
    2fda:	ce 01       	movw	r24, r28
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	5c 01       	movw	r10, r24
    2fe0:	f7 01       	movw	r30, r14
    2fe2:	93 81       	ldd	r25, Z+3	; 0x03
    2fe4:	f3 01       	movw	r30, r6
    2fe6:	93 fd       	sbrc	r25, 3
    2fe8:	85 91       	lpm	r24, Z+
    2fea:	93 ff       	sbrs	r25, 3
    2fec:	81 91       	ld	r24, Z+
    2fee:	3f 01       	movw	r6, r30
    2ff0:	88 23       	and	r24, r24
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <vfprintf+0x3a>
    2ff4:	53 c1       	rjmp	.+678    	; 0x329c <vfprintf+0x2e0>
    2ff6:	85 32       	cpi	r24, 0x25	; 37
    2ff8:	39 f4       	brne	.+14     	; 0x3008 <vfprintf+0x4c>
    2ffa:	93 fd       	sbrc	r25, 3
    2ffc:	85 91       	lpm	r24, Z+
    2ffe:	93 ff       	sbrs	r25, 3
    3000:	81 91       	ld	r24, Z+
    3002:	3f 01       	movw	r6, r30
    3004:	85 32       	cpi	r24, 0x25	; 37
    3006:	29 f4       	brne	.+10     	; 0x3012 <vfprintf+0x56>
    3008:	b7 01       	movw	r22, r14
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	0e 94 ce 19 	call	0x339c	; 0x339c <fputc>
    3010:	e7 cf       	rjmp	.-50     	; 0x2fe0 <vfprintf+0x24>
    3012:	91 2c       	mov	r9, r1
    3014:	21 2c       	mov	r2, r1
    3016:	31 2c       	mov	r3, r1
    3018:	ff e1       	ldi	r31, 0x1F	; 31
    301a:	f3 15       	cp	r31, r3
    301c:	38 f0       	brcs	.+14     	; 0x302c <vfprintf+0x70>
    301e:	8b 32       	cpi	r24, 0x2B	; 43
    3020:	11 f1       	breq	.+68     	; 0x3066 <vfprintf+0xaa>
    3022:	90 f4       	brcc	.+36     	; 0x3048 <vfprintf+0x8c>
    3024:	80 32       	cpi	r24, 0x20	; 32
    3026:	09 f1       	breq	.+66     	; 0x306a <vfprintf+0xae>
    3028:	83 32       	cpi	r24, 0x23	; 35
    302a:	29 f1       	breq	.+74     	; 0x3076 <vfprintf+0xba>
    302c:	37 fc       	sbrc	r3, 7
    302e:	3c c0       	rjmp	.+120    	; 0x30a8 <vfprintf+0xec>
    3030:	20 ed       	ldi	r18, 0xD0	; 208
    3032:	28 0f       	add	r18, r24
    3034:	2a 30       	cpi	r18, 0x0A	; 10
    3036:	50 f5       	brcc	.+84     	; 0x308c <vfprintf+0xd0>
    3038:	36 fe       	sbrs	r3, 6
    303a:	20 c0       	rjmp	.+64     	; 0x307c <vfprintf+0xc0>
    303c:	8a e0       	ldi	r24, 0x0A	; 10
    303e:	98 9e       	mul	r9, r24
    3040:	20 0d       	add	r18, r0
    3042:	11 24       	eor	r1, r1
    3044:	92 2e       	mov	r9, r18
    3046:	06 c0       	rjmp	.+12     	; 0x3054 <vfprintf+0x98>
    3048:	8d 32       	cpi	r24, 0x2D	; 45
    304a:	91 f0       	breq	.+36     	; 0x3070 <vfprintf+0xb4>
    304c:	80 33       	cpi	r24, 0x30	; 48
    304e:	71 f7       	brne	.-36     	; 0x302c <vfprintf+0x70>
    3050:	68 94       	set
    3052:	30 f8       	bld	r3, 0
    3054:	f3 01       	movw	r30, r6
    3056:	93 fd       	sbrc	r25, 3
    3058:	85 91       	lpm	r24, Z+
    305a:	93 ff       	sbrs	r25, 3
    305c:	81 91       	ld	r24, Z+
    305e:	3f 01       	movw	r6, r30
    3060:	81 11       	cpse	r24, r1
    3062:	da cf       	rjmp	.-76     	; 0x3018 <vfprintf+0x5c>
    3064:	21 c0       	rjmp	.+66     	; 0x30a8 <vfprintf+0xec>
    3066:	68 94       	set
    3068:	31 f8       	bld	r3, 1
    306a:	68 94       	set
    306c:	32 f8       	bld	r3, 2
    306e:	f2 cf       	rjmp	.-28     	; 0x3054 <vfprintf+0x98>
    3070:	68 94       	set
    3072:	33 f8       	bld	r3, 3
    3074:	ef cf       	rjmp	.-34     	; 0x3054 <vfprintf+0x98>
    3076:	68 94       	set
    3078:	34 f8       	bld	r3, 4
    307a:	ec cf       	rjmp	.-40     	; 0x3054 <vfprintf+0x98>
    307c:	ea e0       	ldi	r30, 0x0A	; 10
    307e:	2e 9e       	mul	r2, r30
    3080:	20 0d       	add	r18, r0
    3082:	11 24       	eor	r1, r1
    3084:	22 2e       	mov	r2, r18
    3086:	68 94       	set
    3088:	35 f8       	bld	r3, 5
    308a:	e4 cf       	rjmp	.-56     	; 0x3054 <vfprintf+0x98>
    308c:	8e 32       	cpi	r24, 0x2E	; 46
    308e:	29 f4       	brne	.+10     	; 0x309a <vfprintf+0xde>
    3090:	36 fc       	sbrc	r3, 6
    3092:	04 c1       	rjmp	.+520    	; 0x329c <vfprintf+0x2e0>
    3094:	68 94       	set
    3096:	36 f8       	bld	r3, 6
    3098:	dd cf       	rjmp	.-70     	; 0x3054 <vfprintf+0x98>
    309a:	8c 36       	cpi	r24, 0x6C	; 108
    309c:	19 f4       	brne	.+6      	; 0x30a4 <vfprintf+0xe8>
    309e:	68 94       	set
    30a0:	37 f8       	bld	r3, 7
    30a2:	d8 cf       	rjmp	.-80     	; 0x3054 <vfprintf+0x98>
    30a4:	88 36       	cpi	r24, 0x68	; 104
    30a6:	b1 f2       	breq	.-84     	; 0x3054 <vfprintf+0x98>
    30a8:	98 2f       	mov	r25, r24
    30aa:	9f 7d       	andi	r25, 0xDF	; 223
    30ac:	95 54       	subi	r25, 0x45	; 69
    30ae:	93 30       	cpi	r25, 0x03	; 3
    30b0:	e0 f0       	brcs	.+56     	; 0x30ea <vfprintf+0x12e>
    30b2:	83 36       	cpi	r24, 0x63	; 99
    30b4:	a1 f1       	breq	.+104    	; 0x311e <vfprintf+0x162>
    30b6:	83 37       	cpi	r24, 0x73	; 115
    30b8:	c1 f1       	breq	.+112    	; 0x312a <vfprintf+0x16e>
    30ba:	83 35       	cpi	r24, 0x53	; 83
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <vfprintf+0x104>
    30be:	63 c0       	rjmp	.+198    	; 0x3186 <vfprintf+0x1ca>
    30c0:	28 01       	movw	r4, r16
    30c2:	f2 e0       	ldi	r31, 0x02	; 2
    30c4:	4f 0e       	add	r4, r31
    30c6:	51 1c       	adc	r5, r1
    30c8:	f8 01       	movw	r30, r16
    30ca:	c0 80       	ld	r12, Z
    30cc:	d1 80       	ldd	r13, Z+1	; 0x01
    30ce:	69 2d       	mov	r22, r9
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	36 fc       	sbrc	r3, 6
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <vfprintf+0x11e>
    30d6:	6f ef       	ldi	r22, 0xFF	; 255
    30d8:	7f ef       	ldi	r23, 0xFF	; 255
    30da:	c6 01       	movw	r24, r12
    30dc:	0e 94 b8 19 	call	0x3370	; 0x3370 <strnlen_P>
    30e0:	4c 01       	movw	r8, r24
    30e2:	68 94       	set
    30e4:	37 f8       	bld	r3, 7
    30e6:	82 01       	movw	r16, r4
    30e8:	0a c0       	rjmp	.+20     	; 0x30fe <vfprintf+0x142>
    30ea:	0c 5f       	subi	r16, 0xFC	; 252
    30ec:	1f 4f       	sbci	r17, 0xFF	; 255
    30ee:	ff e3       	ldi	r31, 0x3F	; 63
    30f0:	f9 83       	std	Y+1, r31	; 0x01
    30f2:	88 24       	eor	r8, r8
    30f4:	83 94       	inc	r8
    30f6:	91 2c       	mov	r9, r1
    30f8:	65 01       	movw	r12, r10
    30fa:	e8 94       	clt
    30fc:	37 f8       	bld	r3, 7
    30fe:	33 fe       	sbrs	r3, 3
    3100:	2d c0       	rjmp	.+90     	; 0x315c <vfprintf+0x1a0>
    3102:	52 2c       	mov	r5, r2
    3104:	81 14       	cp	r8, r1
    3106:	91 04       	cpc	r9, r1
    3108:	71 f5       	brne	.+92     	; 0x3166 <vfprintf+0x1aa>
    310a:	55 20       	and	r5, r5
    310c:	09 f4       	brne	.+2      	; 0x3110 <vfprintf+0x154>
    310e:	68 cf       	rjmp	.-304    	; 0x2fe0 <vfprintf+0x24>
    3110:	b7 01       	movw	r22, r14
    3112:	80 e2       	ldi	r24, 0x20	; 32
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 ce 19 	call	0x339c	; 0x339c <fputc>
    311a:	5a 94       	dec	r5
    311c:	f6 cf       	rjmp	.-20     	; 0x310a <vfprintf+0x14e>
    311e:	f8 01       	movw	r30, r16
    3120:	80 81       	ld	r24, Z
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	0e 5f       	subi	r16, 0xFE	; 254
    3126:	1f 4f       	sbci	r17, 0xFF	; 255
    3128:	e4 cf       	rjmp	.-56     	; 0x30f2 <vfprintf+0x136>
    312a:	28 01       	movw	r4, r16
    312c:	f2 e0       	ldi	r31, 0x02	; 2
    312e:	4f 0e       	add	r4, r31
    3130:	51 1c       	adc	r5, r1
    3132:	f8 01       	movw	r30, r16
    3134:	c0 80       	ld	r12, Z
    3136:	d1 80       	ldd	r13, Z+1	; 0x01
    3138:	69 2d       	mov	r22, r9
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	36 fc       	sbrc	r3, 6
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <vfprintf+0x188>
    3140:	6f ef       	ldi	r22, 0xFF	; 255
    3142:	7f ef       	ldi	r23, 0xFF	; 255
    3144:	c6 01       	movw	r24, r12
    3146:	0e 94 c3 19 	call	0x3386	; 0x3386 <strnlen>
    314a:	4c 01       	movw	r8, r24
    314c:	82 01       	movw	r16, r4
    314e:	d5 cf       	rjmp	.-86     	; 0x30fa <vfprintf+0x13e>
    3150:	b7 01       	movw	r22, r14
    3152:	80 e2       	ldi	r24, 0x20	; 32
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 ce 19 	call	0x339c	; 0x339c <fputc>
    315a:	2a 94       	dec	r2
    315c:	28 14       	cp	r2, r8
    315e:	19 04       	cpc	r1, r9
    3160:	09 f0       	breq	.+2      	; 0x3164 <vfprintf+0x1a8>
    3162:	b0 f7       	brcc	.-20     	; 0x3150 <vfprintf+0x194>
    3164:	ce cf       	rjmp	.-100    	; 0x3102 <vfprintf+0x146>
    3166:	f6 01       	movw	r30, r12
    3168:	37 fc       	sbrc	r3, 7
    316a:	85 91       	lpm	r24, Z+
    316c:	37 fe       	sbrs	r3, 7
    316e:	81 91       	ld	r24, Z+
    3170:	6f 01       	movw	r12, r30
    3172:	b7 01       	movw	r22, r14
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 ce 19 	call	0x339c	; 0x339c <fputc>
    317a:	51 10       	cpse	r5, r1
    317c:	5a 94       	dec	r5
    317e:	f1 e0       	ldi	r31, 0x01	; 1
    3180:	8f 1a       	sub	r8, r31
    3182:	91 08       	sbc	r9, r1
    3184:	bf cf       	rjmp	.-130    	; 0x3104 <vfprintf+0x148>
    3186:	84 36       	cpi	r24, 0x64	; 100
    3188:	19 f0       	breq	.+6      	; 0x3190 <vfprintf+0x1d4>
    318a:	89 36       	cpi	r24, 0x69	; 105
    318c:	09 f0       	breq	.+2      	; 0x3190 <vfprintf+0x1d4>
    318e:	77 c0       	rjmp	.+238    	; 0x327e <vfprintf+0x2c2>
    3190:	f8 01       	movw	r30, r16
    3192:	37 fe       	sbrs	r3, 7
    3194:	6b c0       	rjmp	.+214    	; 0x326c <vfprintf+0x2b0>
    3196:	60 81       	ld	r22, Z
    3198:	71 81       	ldd	r23, Z+1	; 0x01
    319a:	82 81       	ldd	r24, Z+2	; 0x02
    319c:	93 81       	ldd	r25, Z+3	; 0x03
    319e:	0c 5f       	subi	r16, 0xFC	; 252
    31a0:	1f 4f       	sbci	r17, 0xFF	; 255
    31a2:	f3 2d       	mov	r31, r3
    31a4:	ff 76       	andi	r31, 0x6F	; 111
    31a6:	3f 2e       	mov	r3, r31
    31a8:	97 ff       	sbrs	r25, 7
    31aa:	09 c0       	rjmp	.+18     	; 0x31be <vfprintf+0x202>
    31ac:	90 95       	com	r25
    31ae:	80 95       	com	r24
    31b0:	70 95       	com	r23
    31b2:	61 95       	neg	r22
    31b4:	7f 4f       	sbci	r23, 0xFF	; 255
    31b6:	8f 4f       	sbci	r24, 0xFF	; 255
    31b8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ba:	68 94       	set
    31bc:	37 f8       	bld	r3, 7
    31be:	2a e0       	ldi	r18, 0x0A	; 10
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	a5 01       	movw	r20, r10
    31c4:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__ultoa_invert>
    31c8:	c8 2e       	mov	r12, r24
    31ca:	ca 18       	sub	r12, r10
    31cc:	8c 2c       	mov	r8, r12
    31ce:	43 2c       	mov	r4, r3
    31d0:	36 fe       	sbrs	r3, 6
    31d2:	0c c0       	rjmp	.+24     	; 0x31ec <vfprintf+0x230>
    31d4:	e8 94       	clt
    31d6:	40 f8       	bld	r4, 0
    31d8:	c9 14       	cp	r12, r9
    31da:	40 f4       	brcc	.+16     	; 0x31ec <vfprintf+0x230>
    31dc:	34 fe       	sbrs	r3, 4
    31de:	05 c0       	rjmp	.+10     	; 0x31ea <vfprintf+0x22e>
    31e0:	32 fc       	sbrc	r3, 2
    31e2:	03 c0       	rjmp	.+6      	; 0x31ea <vfprintf+0x22e>
    31e4:	f3 2d       	mov	r31, r3
    31e6:	fe 7e       	andi	r31, 0xEE	; 238
    31e8:	4f 2e       	mov	r4, r31
    31ea:	89 2c       	mov	r8, r9
    31ec:	44 fe       	sbrs	r4, 4
    31ee:	95 c0       	rjmp	.+298    	; 0x331a <vfprintf+0x35e>
    31f0:	fe 01       	movw	r30, r28
    31f2:	ec 0d       	add	r30, r12
    31f4:	f1 1d       	adc	r31, r1
    31f6:	80 81       	ld	r24, Z
    31f8:	80 33       	cpi	r24, 0x30	; 48
    31fa:	09 f0       	breq	.+2      	; 0x31fe <vfprintf+0x242>
    31fc:	87 c0       	rjmp	.+270    	; 0x330c <vfprintf+0x350>
    31fe:	24 2d       	mov	r18, r4
    3200:	29 7e       	andi	r18, 0xE9	; 233
    3202:	42 2e       	mov	r4, r18
    3204:	84 2d       	mov	r24, r4
    3206:	88 70       	andi	r24, 0x08	; 8
    3208:	58 2e       	mov	r5, r24
    320a:	43 fc       	sbrc	r4, 3
    320c:	95 c0       	rjmp	.+298    	; 0x3338 <vfprintf+0x37c>
    320e:	40 fe       	sbrs	r4, 0
    3210:	8f c0       	rjmp	.+286    	; 0x3330 <vfprintf+0x374>
    3212:	9c 2c       	mov	r9, r12
    3214:	82 14       	cp	r8, r2
    3216:	18 f4       	brcc	.+6      	; 0x321e <vfprintf+0x262>
    3218:	2c 0c       	add	r2, r12
    321a:	92 2c       	mov	r9, r2
    321c:	98 18       	sub	r9, r8
    321e:	44 fe       	sbrs	r4, 4
    3220:	91 c0       	rjmp	.+290    	; 0x3344 <vfprintf+0x388>
    3222:	b7 01       	movw	r22, r14
    3224:	80 e3       	ldi	r24, 0x30	; 48
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 ce 19 	call	0x339c	; 0x339c <fputc>
    322c:	42 fe       	sbrs	r4, 2
    322e:	09 c0       	rjmp	.+18     	; 0x3242 <vfprintf+0x286>
    3230:	88 e7       	ldi	r24, 0x78	; 120
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	41 fe       	sbrs	r4, 1
    3236:	02 c0       	rjmp	.+4      	; 0x323c <vfprintf+0x280>
    3238:	88 e5       	ldi	r24, 0x58	; 88
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	b7 01       	movw	r22, r14
    323e:	0e 94 ce 19 	call	0x339c	; 0x339c <fputc>
    3242:	c9 14       	cp	r12, r9
    3244:	08 f4       	brcc	.+2      	; 0x3248 <vfprintf+0x28c>
    3246:	8a c0       	rjmp	.+276    	; 0x335c <vfprintf+0x3a0>
    3248:	ca 94       	dec	r12
    324a:	d1 2c       	mov	r13, r1
    324c:	9f ef       	ldi	r25, 0xFF	; 255
    324e:	c9 1a       	sub	r12, r25
    3250:	d9 0a       	sbc	r13, r25
    3252:	ca 0c       	add	r12, r10
    3254:	db 1c       	adc	r13, r11
    3256:	f6 01       	movw	r30, r12
    3258:	82 91       	ld	r24, -Z
    325a:	6f 01       	movw	r12, r30
    325c:	b7 01       	movw	r22, r14
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 ce 19 	call	0x339c	; 0x339c <fputc>
    3264:	ac 14       	cp	r10, r12
    3266:	bd 04       	cpc	r11, r13
    3268:	b1 f7       	brne	.-20     	; 0x3256 <vfprintf+0x29a>
    326a:	4f cf       	rjmp	.-354    	; 0x310a <vfprintf+0x14e>
    326c:	60 81       	ld	r22, Z
    326e:	71 81       	ldd	r23, Z+1	; 0x01
    3270:	07 2e       	mov	r0, r23
    3272:	00 0c       	add	r0, r0
    3274:	88 0b       	sbc	r24, r24
    3276:	99 0b       	sbc	r25, r25
    3278:	0e 5f       	subi	r16, 0xFE	; 254
    327a:	1f 4f       	sbci	r17, 0xFF	; 255
    327c:	92 cf       	rjmp	.-220    	; 0x31a2 <vfprintf+0x1e6>
    327e:	d3 2c       	mov	r13, r3
    3280:	e8 94       	clt
    3282:	d4 f8       	bld	r13, 4
    3284:	2a e0       	ldi	r18, 0x0A	; 10
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	85 37       	cpi	r24, 0x75	; 117
    328a:	39 f1       	breq	.+78     	; 0x32da <vfprintf+0x31e>
    328c:	23 2d       	mov	r18, r3
    328e:	29 7f       	andi	r18, 0xF9	; 249
    3290:	d2 2e       	mov	r13, r18
    3292:	8f 36       	cpi	r24, 0x6F	; 111
    3294:	01 f1       	breq	.+64     	; 0x32d6 <vfprintf+0x31a>
    3296:	48 f4       	brcc	.+18     	; 0x32aa <vfprintf+0x2ee>
    3298:	88 35       	cpi	r24, 0x58	; 88
    329a:	a9 f0       	breq	.+42     	; 0x32c6 <vfprintf+0x30a>
    329c:	f7 01       	movw	r30, r14
    329e:	86 81       	ldd	r24, Z+6	; 0x06
    32a0:	97 81       	ldd	r25, Z+7	; 0x07
    32a2:	2b 96       	adiw	r28, 0x0b	; 11
    32a4:	e2 e1       	ldi	r30, 0x12	; 18
    32a6:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__epilogue_restores__>
    32aa:	80 37       	cpi	r24, 0x70	; 112
    32ac:	49 f0       	breq	.+18     	; 0x32c0 <vfprintf+0x304>
    32ae:	88 37       	cpi	r24, 0x78	; 120
    32b0:	a9 f7       	brne	.-22     	; 0x329c <vfprintf+0x2e0>
    32b2:	d4 fe       	sbrs	r13, 4
    32b4:	02 c0       	rjmp	.+4      	; 0x32ba <vfprintf+0x2fe>
    32b6:	68 94       	set
    32b8:	d2 f8       	bld	r13, 2
    32ba:	20 e1       	ldi	r18, 0x10	; 16
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	0d c0       	rjmp	.+26     	; 0x32da <vfprintf+0x31e>
    32c0:	68 94       	set
    32c2:	d4 f8       	bld	r13, 4
    32c4:	f6 cf       	rjmp	.-20     	; 0x32b2 <vfprintf+0x2f6>
    32c6:	34 fe       	sbrs	r3, 4
    32c8:	03 c0       	rjmp	.+6      	; 0x32d0 <vfprintf+0x314>
    32ca:	82 2f       	mov	r24, r18
    32cc:	86 60       	ori	r24, 0x06	; 6
    32ce:	d8 2e       	mov	r13, r24
    32d0:	20 e1       	ldi	r18, 0x10	; 16
    32d2:	32 e0       	ldi	r19, 0x02	; 2
    32d4:	02 c0       	rjmp	.+4      	; 0x32da <vfprintf+0x31e>
    32d6:	28 e0       	ldi	r18, 0x08	; 8
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	f8 01       	movw	r30, r16
    32dc:	d7 fe       	sbrs	r13, 7
    32de:	0f c0       	rjmp	.+30     	; 0x32fe <vfprintf+0x342>
    32e0:	60 81       	ld	r22, Z
    32e2:	71 81       	ldd	r23, Z+1	; 0x01
    32e4:	82 81       	ldd	r24, Z+2	; 0x02
    32e6:	93 81       	ldd	r25, Z+3	; 0x03
    32e8:	0c 5f       	subi	r16, 0xFC	; 252
    32ea:	1f 4f       	sbci	r17, 0xFF	; 255
    32ec:	a5 01       	movw	r20, r10
    32ee:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__ultoa_invert>
    32f2:	c8 2e       	mov	r12, r24
    32f4:	ca 18       	sub	r12, r10
    32f6:	3d 2c       	mov	r3, r13
    32f8:	e8 94       	clt
    32fa:	37 f8       	bld	r3, 7
    32fc:	67 cf       	rjmp	.-306    	; 0x31cc <vfprintf+0x210>
    32fe:	60 81       	ld	r22, Z
    3300:	71 81       	ldd	r23, Z+1	; 0x01
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	0e 5f       	subi	r16, 0xFE	; 254
    3308:	1f 4f       	sbci	r17, 0xFF	; 255
    330a:	f0 cf       	rjmp	.-32     	; 0x32ec <vfprintf+0x330>
    330c:	42 fc       	sbrc	r4, 2
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <vfprintf+0x358>
    3310:	83 94       	inc	r8
    3312:	78 cf       	rjmp	.-272    	; 0x3204 <vfprintf+0x248>
    3314:	83 94       	inc	r8
    3316:	83 94       	inc	r8
    3318:	75 cf       	rjmp	.-278    	; 0x3204 <vfprintf+0x248>
    331a:	84 2d       	mov	r24, r4
    331c:	86 78       	andi	r24, 0x86	; 134
    331e:	09 f4       	brne	.+2      	; 0x3322 <vfprintf+0x366>
    3320:	71 cf       	rjmp	.-286    	; 0x3204 <vfprintf+0x248>
    3322:	f6 cf       	rjmp	.-20     	; 0x3310 <vfprintf+0x354>
    3324:	b7 01       	movw	r22, r14
    3326:	80 e2       	ldi	r24, 0x20	; 32
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 ce 19 	call	0x339c	; 0x339c <fputc>
    332e:	83 94       	inc	r8
    3330:	82 14       	cp	r8, r2
    3332:	c0 f3       	brcs	.-16     	; 0x3324 <vfprintf+0x368>
    3334:	51 2c       	mov	r5, r1
    3336:	73 cf       	rjmp	.-282    	; 0x321e <vfprintf+0x262>
    3338:	52 2c       	mov	r5, r2
    333a:	58 18       	sub	r5, r8
    333c:	82 14       	cp	r8, r2
    333e:	08 f4       	brcc	.+2      	; 0x3342 <vfprintf+0x386>
    3340:	6e cf       	rjmp	.-292    	; 0x321e <vfprintf+0x262>
    3342:	f8 cf       	rjmp	.-16     	; 0x3334 <vfprintf+0x378>
    3344:	84 2d       	mov	r24, r4
    3346:	86 78       	andi	r24, 0x86	; 134
    3348:	09 f4       	brne	.+2      	; 0x334c <vfprintf+0x390>
    334a:	7b cf       	rjmp	.-266    	; 0x3242 <vfprintf+0x286>
    334c:	8b e2       	ldi	r24, 0x2B	; 43
    334e:	41 fe       	sbrs	r4, 1
    3350:	80 e2       	ldi	r24, 0x20	; 32
    3352:	47 fc       	sbrc	r4, 7
    3354:	8d e2       	ldi	r24, 0x2D	; 45
    3356:	b7 01       	movw	r22, r14
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	71 cf       	rjmp	.-286    	; 0x323e <vfprintf+0x282>
    335c:	b7 01       	movw	r22, r14
    335e:	80 e3       	ldi	r24, 0x30	; 48
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	0e 94 ce 19 	call	0x339c	; 0x339c <fputc>
    3366:	9a 94       	dec	r9
    3368:	6c cf       	rjmp	.-296    	; 0x3242 <vfprintf+0x286>
    336a:	8f ef       	ldi	r24, 0xFF	; 255
    336c:	9f ef       	ldi	r25, 0xFF	; 255
    336e:	99 cf       	rjmp	.-206    	; 0x32a2 <vfprintf+0x2e6>

00003370 <strnlen_P>:
    3370:	fc 01       	movw	r30, r24
    3372:	05 90       	lpm	r0, Z+
    3374:	61 50       	subi	r22, 0x01	; 1
    3376:	70 40       	sbci	r23, 0x00	; 0
    3378:	01 10       	cpse	r0, r1
    337a:	d8 f7       	brcc	.-10     	; 0x3372 <strnlen_P+0x2>
    337c:	80 95       	com	r24
    337e:	90 95       	com	r25
    3380:	8e 0f       	add	r24, r30
    3382:	9f 1f       	adc	r25, r31
    3384:	08 95       	ret

00003386 <strnlen>:
    3386:	fc 01       	movw	r30, r24
    3388:	61 50       	subi	r22, 0x01	; 1
    338a:	70 40       	sbci	r23, 0x00	; 0
    338c:	01 90       	ld	r0, Z+
    338e:	01 10       	cpse	r0, r1
    3390:	d8 f7       	brcc	.-10     	; 0x3388 <strnlen+0x2>
    3392:	80 95       	com	r24
    3394:	90 95       	com	r25
    3396:	8e 0f       	add	r24, r30
    3398:	9f 1f       	adc	r25, r31
    339a:	08 95       	ret

0000339c <fputc>:
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	18 2f       	mov	r17, r24
    33a6:	09 2f       	mov	r16, r25
    33a8:	eb 01       	movw	r28, r22
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	81 fd       	sbrc	r24, 1
    33ae:	09 c0       	rjmp	.+18     	; 0x33c2 <fputc+0x26>
    33b0:	1f ef       	ldi	r17, 0xFF	; 255
    33b2:	0f ef       	ldi	r16, 0xFF	; 255
    33b4:	81 2f       	mov	r24, r17
    33b6:	90 2f       	mov	r25, r16
    33b8:	df 91       	pop	r29
    33ba:	cf 91       	pop	r28
    33bc:	1f 91       	pop	r17
    33be:	0f 91       	pop	r16
    33c0:	08 95       	ret
    33c2:	82 ff       	sbrs	r24, 2
    33c4:	14 c0       	rjmp	.+40     	; 0x33ee <fputc+0x52>
    33c6:	2e 81       	ldd	r18, Y+6	; 0x06
    33c8:	3f 81       	ldd	r19, Y+7	; 0x07
    33ca:	8c 81       	ldd	r24, Y+4	; 0x04
    33cc:	9d 81       	ldd	r25, Y+5	; 0x05
    33ce:	28 17       	cp	r18, r24
    33d0:	39 07       	cpc	r19, r25
    33d2:	3c f4       	brge	.+14     	; 0x33e2 <fputc+0x46>
    33d4:	e8 81       	ld	r30, Y
    33d6:	f9 81       	ldd	r31, Y+1	; 0x01
    33d8:	cf 01       	movw	r24, r30
    33da:	01 96       	adiw	r24, 0x01	; 1
    33dc:	99 83       	std	Y+1, r25	; 0x01
    33de:	88 83       	st	Y, r24
    33e0:	10 83       	st	Z, r17
    33e2:	8e 81       	ldd	r24, Y+6	; 0x06
    33e4:	9f 81       	ldd	r25, Y+7	; 0x07
    33e6:	01 96       	adiw	r24, 0x01	; 1
    33e8:	9f 83       	std	Y+7, r25	; 0x07
    33ea:	8e 83       	std	Y+6, r24	; 0x06
    33ec:	e3 cf       	rjmp	.-58     	; 0x33b4 <fputc+0x18>
    33ee:	e8 85       	ldd	r30, Y+8	; 0x08
    33f0:	f9 85       	ldd	r31, Y+9	; 0x09
    33f2:	81 2f       	mov	r24, r17
    33f4:	09 95       	icall
    33f6:	89 2b       	or	r24, r25
    33f8:	a1 f3       	breq	.-24     	; 0x33e2 <fputc+0x46>
    33fa:	da cf       	rjmp	.-76     	; 0x33b0 <fputc+0x14>

000033fc <__ultoa_invert>:
    33fc:	fa 01       	movw	r30, r20
    33fe:	aa 27       	eor	r26, r26
    3400:	28 30       	cpi	r18, 0x08	; 8
    3402:	51 f1       	breq	.+84     	; 0x3458 <__ultoa_invert+0x5c>
    3404:	20 31       	cpi	r18, 0x10	; 16
    3406:	81 f1       	breq	.+96     	; 0x3468 <__ultoa_invert+0x6c>
    3408:	e8 94       	clt
    340a:	6f 93       	push	r22
    340c:	6e 7f       	andi	r22, 0xFE	; 254
    340e:	6e 5f       	subi	r22, 0xFE	; 254
    3410:	7f 4f       	sbci	r23, 0xFF	; 255
    3412:	8f 4f       	sbci	r24, 0xFF	; 255
    3414:	9f 4f       	sbci	r25, 0xFF	; 255
    3416:	af 4f       	sbci	r26, 0xFF	; 255
    3418:	b1 e0       	ldi	r27, 0x01	; 1
    341a:	3e d0       	rcall	.+124    	; 0x3498 <__ultoa_invert+0x9c>
    341c:	b4 e0       	ldi	r27, 0x04	; 4
    341e:	3c d0       	rcall	.+120    	; 0x3498 <__ultoa_invert+0x9c>
    3420:	67 0f       	add	r22, r23
    3422:	78 1f       	adc	r23, r24
    3424:	89 1f       	adc	r24, r25
    3426:	9a 1f       	adc	r25, r26
    3428:	a1 1d       	adc	r26, r1
    342a:	68 0f       	add	r22, r24
    342c:	79 1f       	adc	r23, r25
    342e:	8a 1f       	adc	r24, r26
    3430:	91 1d       	adc	r25, r1
    3432:	a1 1d       	adc	r26, r1
    3434:	6a 0f       	add	r22, r26
    3436:	71 1d       	adc	r23, r1
    3438:	81 1d       	adc	r24, r1
    343a:	91 1d       	adc	r25, r1
    343c:	a1 1d       	adc	r26, r1
    343e:	20 d0       	rcall	.+64     	; 0x3480 <__ultoa_invert+0x84>
    3440:	09 f4       	brne	.+2      	; 0x3444 <__ultoa_invert+0x48>
    3442:	68 94       	set
    3444:	3f 91       	pop	r19
    3446:	2a e0       	ldi	r18, 0x0A	; 10
    3448:	26 9f       	mul	r18, r22
    344a:	11 24       	eor	r1, r1
    344c:	30 19       	sub	r19, r0
    344e:	30 5d       	subi	r19, 0xD0	; 208
    3450:	31 93       	st	Z+, r19
    3452:	de f6       	brtc	.-74     	; 0x340a <__ultoa_invert+0xe>
    3454:	cf 01       	movw	r24, r30
    3456:	08 95       	ret
    3458:	46 2f       	mov	r20, r22
    345a:	47 70       	andi	r20, 0x07	; 7
    345c:	40 5d       	subi	r20, 0xD0	; 208
    345e:	41 93       	st	Z+, r20
    3460:	b3 e0       	ldi	r27, 0x03	; 3
    3462:	0f d0       	rcall	.+30     	; 0x3482 <__ultoa_invert+0x86>
    3464:	c9 f7       	brne	.-14     	; 0x3458 <__ultoa_invert+0x5c>
    3466:	f6 cf       	rjmp	.-20     	; 0x3454 <__ultoa_invert+0x58>
    3468:	46 2f       	mov	r20, r22
    346a:	4f 70       	andi	r20, 0x0F	; 15
    346c:	40 5d       	subi	r20, 0xD0	; 208
    346e:	4a 33       	cpi	r20, 0x3A	; 58
    3470:	18 f0       	brcs	.+6      	; 0x3478 <__ultoa_invert+0x7c>
    3472:	49 5d       	subi	r20, 0xD9	; 217
    3474:	31 fd       	sbrc	r19, 1
    3476:	40 52       	subi	r20, 0x20	; 32
    3478:	41 93       	st	Z+, r20
    347a:	02 d0       	rcall	.+4      	; 0x3480 <__ultoa_invert+0x84>
    347c:	a9 f7       	brne	.-22     	; 0x3468 <__ultoa_invert+0x6c>
    347e:	ea cf       	rjmp	.-44     	; 0x3454 <__ultoa_invert+0x58>
    3480:	b4 e0       	ldi	r27, 0x04	; 4
    3482:	a6 95       	lsr	r26
    3484:	97 95       	ror	r25
    3486:	87 95       	ror	r24
    3488:	77 95       	ror	r23
    348a:	67 95       	ror	r22
    348c:	ba 95       	dec	r27
    348e:	c9 f7       	brne	.-14     	; 0x3482 <__ultoa_invert+0x86>
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	61 05       	cpc	r22, r1
    3494:	71 05       	cpc	r23, r1
    3496:	08 95       	ret
    3498:	9b 01       	movw	r18, r22
    349a:	ac 01       	movw	r20, r24
    349c:	0a 2e       	mov	r0, r26
    349e:	06 94       	lsr	r0
    34a0:	57 95       	ror	r21
    34a2:	47 95       	ror	r20
    34a4:	37 95       	ror	r19
    34a6:	27 95       	ror	r18
    34a8:	ba 95       	dec	r27
    34aa:	c9 f7       	brne	.-14     	; 0x349e <__ultoa_invert+0xa2>
    34ac:	62 0f       	add	r22, r18
    34ae:	73 1f       	adc	r23, r19
    34b0:	84 1f       	adc	r24, r20
    34b2:	95 1f       	adc	r25, r21
    34b4:	a0 1d       	adc	r26, r0
    34b6:	08 95       	ret

000034b8 <__prologue_saves__>:
    34b8:	2f 92       	push	r2
    34ba:	3f 92       	push	r3
    34bc:	4f 92       	push	r4
    34be:	5f 92       	push	r5
    34c0:	6f 92       	push	r6
    34c2:	7f 92       	push	r7
    34c4:	8f 92       	push	r8
    34c6:	9f 92       	push	r9
    34c8:	af 92       	push	r10
    34ca:	bf 92       	push	r11
    34cc:	cf 92       	push	r12
    34ce:	df 92       	push	r13
    34d0:	ef 92       	push	r14
    34d2:	ff 92       	push	r15
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	ca 1b       	sub	r28, r26
    34e2:	db 0b       	sbc	r29, r27
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	09 94       	ijmp

000034f0 <__epilogue_restores__>:
    34f0:	2a 88       	ldd	r2, Y+18	; 0x12
    34f2:	39 88       	ldd	r3, Y+17	; 0x11
    34f4:	48 88       	ldd	r4, Y+16	; 0x10
    34f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    34f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    34fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    34fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    34fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3500:	aa 84       	ldd	r10, Y+10	; 0x0a
    3502:	b9 84       	ldd	r11, Y+9	; 0x09
    3504:	c8 84       	ldd	r12, Y+8	; 0x08
    3506:	df 80       	ldd	r13, Y+7	; 0x07
    3508:	ee 80       	ldd	r14, Y+6	; 0x06
    350a:	fd 80       	ldd	r15, Y+5	; 0x05
    350c:	0c 81       	ldd	r16, Y+4	; 0x04
    350e:	1b 81       	ldd	r17, Y+3	; 0x03
    3510:	aa 81       	ldd	r26, Y+2	; 0x02
    3512:	b9 81       	ldd	r27, Y+1	; 0x01
    3514:	ce 0f       	add	r28, r30
    3516:	d1 1d       	adc	r29, r1
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	f8 94       	cli
    351c:	de bf       	out	0x3e, r29	; 62
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	cd bf       	out	0x3d, r28	; 61
    3522:	ed 01       	movw	r28, r26
    3524:	08 95       	ret

00003526 <_exit>:
    3526:	f8 94       	cli

00003528 <__stop_program>:
    3528:	ff cf       	rjmp	.-2      	; 0x3528 <__stop_program>
