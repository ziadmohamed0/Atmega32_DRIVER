
Driver_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00002ae8  00002b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000ac  008000ac  00002bc8  2**0
                  ALLOC
  3 .stab         00005a24  00000000  00000000  00002bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003921  00000000  00000000  000085ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000bf0d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000bf20  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  0000bf5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  0000c48a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000c971  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  0000c98b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	1e 0e       	add	r1, r30
      56:	2f 0e       	add	r2, r31
      58:	40 0e       	add	r4, r16
      5a:	51 0e       	add	r5, r17
      5c:	62 0e       	add	r6, r18
      5e:	73 0e       	add	r7, r19
      60:	84 0e       	add	r8, r20
      62:	95 0e       	add	r9, r21
      64:	a6 0e       	add	r10, r22
      66:	b7 0e       	add	r11, r23

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	10 e0       	ldi	r17, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e8 ee       	ldi	r30, 0xE8	; 232
      7c:	fa e2       	ldi	r31, 0x2A	; 42
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3a       	cpi	r26, 0xAC	; 172
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	20 e0       	ldi	r18, 0x00	; 0
      8c:	ac ea       	ldi	r26, 0xAC	; 172
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3a       	cpi	r26, 0xAD	; 173
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <main>
      9e:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Dio_setPinDir>:
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <Dio_setPinDir+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
      b2:	6a 83       	std	Y+2, r22	; 0x02
      b4:	8a 81       	ldd	r24, Y+2	; 0x02
      b6:	88 2f       	mov	r24, r24
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	00 97       	sbiw	r24, 0x00	; 0
      bc:	89 f1       	breq	.+98     	; 0x120 <Dio_setPinDir+0x7a>
      be:	01 97       	sbiw	r24, 0x01	; 1
      c0:	09 f0       	breq	.+2      	; 0xc4 <Dio_setPinDir+0x1e>
      c2:	5d c0       	rjmp	.+186    	; 0x17e <Dio_setPinDir+0xd8>
      c4:	89 81       	ldd	r24, Y+1	; 0x01
      c6:	86 95       	lsr	r24
      c8:	86 95       	lsr	r24
      ca:	86 95       	lsr	r24
      cc:	88 2f       	mov	r24, r24
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	88 0f       	add	r24, r24
      d2:	99 1f       	adc	r25, r25
      d4:	80 5a       	subi	r24, 0xA0	; 160
      d6:	9f 4f       	sbci	r25, 0xFF	; 255
      d8:	fc 01       	movw	r30, r24
      da:	80 81       	ld	r24, Z
      dc:	91 81       	ldd	r25, Z+1	; 0x01
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	26 95       	lsr	r18
      e2:	26 95       	lsr	r18
      e4:	26 95       	lsr	r18
      e6:	22 2f       	mov	r18, r18
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	20 5a       	subi	r18, 0xA0	; 160
      f0:	3f 4f       	sbci	r19, 0xFF	; 255
      f2:	f9 01       	movw	r30, r18
      f4:	20 81       	ld	r18, Z
      f6:	31 81       	ldd	r19, Z+1	; 0x01
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	62 2f       	mov	r22, r18
      fe:	29 81       	ldd	r18, Y+1	; 0x01
     100:	22 2f       	mov	r18, r18
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	a9 01       	movw	r20, r18
     106:	47 70       	andi	r20, 0x07	; 7
     108:	55 27       	eor	r21, r21
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	02 c0       	rjmp	.+4      	; 0x114 <Dio_setPinDir+0x6e>
     110:	22 0f       	add	r18, r18
     112:	33 1f       	adc	r19, r19
     114:	4a 95       	dec	r20
     116:	e2 f7       	brpl	.-8      	; 0x110 <Dio_setPinDir+0x6a>
     118:	26 2b       	or	r18, r22
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
     11e:	2f c0       	rjmp	.+94     	; 0x17e <Dio_setPinDir+0xd8>
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	86 95       	lsr	r24
     124:	86 95       	lsr	r24
     126:	86 95       	lsr	r24
     128:	88 2f       	mov	r24, r24
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	88 0f       	add	r24, r24
     12e:	99 1f       	adc	r25, r25
     130:	80 5a       	subi	r24, 0xA0	; 160
     132:	9f 4f       	sbci	r25, 0xFF	; 255
     134:	fc 01       	movw	r30, r24
     136:	80 81       	ld	r24, Z
     138:	91 81       	ldd	r25, Z+1	; 0x01
     13a:	29 81       	ldd	r18, Y+1	; 0x01
     13c:	26 95       	lsr	r18
     13e:	26 95       	lsr	r18
     140:	26 95       	lsr	r18
     142:	22 2f       	mov	r18, r18
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	22 0f       	add	r18, r18
     148:	33 1f       	adc	r19, r19
     14a:	20 5a       	subi	r18, 0xA0	; 160
     14c:	3f 4f       	sbci	r19, 0xFF	; 255
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	31 81       	ldd	r19, Z+1	; 0x01
     154:	f9 01       	movw	r30, r18
     156:	20 81       	ld	r18, Z
     158:	62 2f       	mov	r22, r18
     15a:	29 81       	ldd	r18, Y+1	; 0x01
     15c:	22 2f       	mov	r18, r18
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	a9 01       	movw	r20, r18
     162:	47 70       	andi	r20, 0x07	; 7
     164:	55 27       	eor	r21, r21
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <Dio_setPinDir+0xca>
     16c:	22 0f       	add	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	4a 95       	dec	r20
     172:	e2 f7       	brpl	.-8      	; 0x16c <Dio_setPinDir+0xc6>
     174:	20 95       	com	r18
     176:	26 23       	and	r18, r22
     178:	fc 01       	movw	r30, r24
     17a:	20 83       	st	Z, r18
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <Dio_setPinVal>:
			break;
	}
}

void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	00 d0       	rcall	.+0      	; 0x190 <Dio_setPinVal+0x6>
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyPinVal)
     198:	8a 81       	ldd	r24, Y+2	; 0x02
     19a:	88 2f       	mov	r24, r24
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	91 05       	cpc	r25, r1
     1a2:	39 f0       	breq	.+14     	; 0x1b2 <Dio_setPinVal+0x28>
     1a4:	82 30       	cpi	r24, 0x02	; 2
     1a6:	91 05       	cpc	r25, r1
     1a8:	09 f4       	brne	.+2      	; 0x1ac <Dio_setPinVal+0x22>
     1aa:	60 c0       	rjmp	.+192    	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
     1ac:	89 2b       	or	r24, r25
     1ae:	79 f1       	breq	.+94     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
			break;

		default :
			break;
     1b0:	8b c0       	rjmp	.+278    	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
	switch (CopyPinVal)
	{
		case Status_Pin_High:
				SET_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	86 95       	lsr	r24
     1b6:	86 95       	lsr	r24
     1b8:	86 95       	lsr	r24
     1ba:	88 2f       	mov	r24, r24
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	88 59       	subi	r24, 0x98	; 152
     1c4:	9f 4f       	sbci	r25, 0xFF	; 255
     1c6:	fc 01       	movw	r30, r24
     1c8:	80 81       	ld	r24, Z
     1ca:	91 81       	ldd	r25, Z+1	; 0x01
     1cc:	29 81       	ldd	r18, Y+1	; 0x01
     1ce:	26 95       	lsr	r18
     1d0:	26 95       	lsr	r18
     1d2:	26 95       	lsr	r18
     1d4:	22 2f       	mov	r18, r18
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	22 0f       	add	r18, r18
     1da:	33 1f       	adc	r19, r19
     1dc:	28 59       	subi	r18, 0x98	; 152
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
     1e0:	f9 01       	movw	r30, r18
     1e2:	20 81       	ld	r18, Z
     1e4:	31 81       	ldd	r19, Z+1	; 0x01
     1e6:	f9 01       	movw	r30, r18
     1e8:	20 81       	ld	r18, Z
     1ea:	62 2f       	mov	r22, r18
     1ec:	29 81       	ldd	r18, Y+1	; 0x01
     1ee:	22 2f       	mov	r18, r18
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	a9 01       	movw	r20, r18
     1f4:	47 70       	andi	r20, 0x07	; 7
     1f6:	55 27       	eor	r21, r21
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     1fe:	22 0f       	add	r18, r18
     200:	33 1f       	adc	r19, r19
     202:	4a 95       	dec	r20
     204:	e2 f7       	brpl	.-8      	; 0x1fe <Dio_setPinVal+0x74>
     206:	26 2b       	or	r18, r22
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18
			break;
     20c:	5d c0       	rjmp	.+186    	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>

		case Status_Pin_Low:
				CLR_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	86 95       	lsr	r24
     212:	86 95       	lsr	r24
     214:	86 95       	lsr	r24
     216:	88 2f       	mov	r24, r24
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	88 59       	subi	r24, 0x98	; 152
     220:	9f 4f       	sbci	r25, 0xFF	; 255
     222:	fc 01       	movw	r30, r24
     224:	80 81       	ld	r24, Z
     226:	91 81       	ldd	r25, Z+1	; 0x01
     228:	29 81       	ldd	r18, Y+1	; 0x01
     22a:	26 95       	lsr	r18
     22c:	26 95       	lsr	r18
     22e:	26 95       	lsr	r18
     230:	22 2f       	mov	r18, r18
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	22 0f       	add	r18, r18
     236:	33 1f       	adc	r19, r19
     238:	28 59       	subi	r18, 0x98	; 152
     23a:	3f 4f       	sbci	r19, 0xFF	; 255
     23c:	f9 01       	movw	r30, r18
     23e:	20 81       	ld	r18, Z
     240:	31 81       	ldd	r19, Z+1	; 0x01
     242:	f9 01       	movw	r30, r18
     244:	20 81       	ld	r18, Z
     246:	62 2f       	mov	r22, r18
     248:	29 81       	ldd	r18, Y+1	; 0x01
     24a:	22 2f       	mov	r18, r18
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	a9 01       	movw	r20, r18
     250:	47 70       	andi	r20, 0x07	; 7
     252:	55 27       	eor	r21, r21
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	02 c0       	rjmp	.+4      	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	4a 95       	dec	r20
     260:	e2 f7       	brpl	.-8      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
     262:	20 95       	com	r18
     264:	26 23       	and	r18, r22
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
			break;
     26a:	2e c0       	rjmp	.+92     	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>

		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	86 95       	lsr	r24
     270:	86 95       	lsr	r24
     272:	86 95       	lsr	r24
     274:	88 2f       	mov	r24, r24
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	88 59       	subi	r24, 0x98	; 152
     27e:	9f 4f       	sbci	r25, 0xFF	; 255
     280:	fc 01       	movw	r30, r24
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	29 81       	ldd	r18, Y+1	; 0x01
     288:	26 95       	lsr	r18
     28a:	26 95       	lsr	r18
     28c:	26 95       	lsr	r18
     28e:	22 2f       	mov	r18, r18
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	22 0f       	add	r18, r18
     294:	33 1f       	adc	r19, r19
     296:	28 59       	subi	r18, 0x98	; 152
     298:	3f 4f       	sbci	r19, 0xFF	; 255
     29a:	f9 01       	movw	r30, r18
     29c:	20 81       	ld	r18, Z
     29e:	31 81       	ldd	r19, Z+1	; 0x01
     2a0:	f9 01       	movw	r30, r18
     2a2:	20 81       	ld	r18, Z
     2a4:	62 2f       	mov	r22, r18
     2a6:	29 81       	ldd	r18, Y+1	; 0x01
     2a8:	22 2f       	mov	r18, r18
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	a9 01       	movw	r20, r18
     2ae:	47 70       	andi	r20, 0x07	; 7
     2b0:	55 27       	eor	r21, r21
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
     2b8:	22 0f       	add	r18, r18
     2ba:	33 1f       	adc	r19, r19
     2bc:	4a 95       	dec	r20
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
     2c0:	26 27       	eor	r18, r22
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
			break;
     2c6:	00 00       	nop

		default :
			break;
	}
}
     2c8:	00 00       	nop
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <Dio_getPinVal>:

Std_Return Dio_getPinVal(u8 CopyPinNum)
{
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	00 d0       	rcall	.+0      	; 0x2da <Dio_getPinVal+0x6>
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     2e0:	19 82       	std	Y+1, r1	; 0x01
	Ret = GET_BIT(*Arr_Pin[CopyPinNum / 8 ],CopyPinNum % 8 );
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	86 95       	lsr	r24
     2e6:	86 95       	lsr	r24
     2e8:	86 95       	lsr	r24
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	80 59       	subi	r24, 0x90	; 144
     2f4:	9f 4f       	sbci	r25, 0xFF	; 255
     2f6:	fc 01       	movw	r30, r24
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	fc 01       	movw	r30, r24
     2fe:	80 81       	ld	r24, Z
     300:	88 2f       	mov	r24, r24
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2a 81       	ldd	r18, Y+2	; 0x02
     306:	22 2f       	mov	r18, r18
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	27 70       	andi	r18, 0x07	; 7
     30c:	33 27       	eor	r19, r19
     30e:	02 c0       	rjmp	.+4      	; 0x314 <Dio_getPinVal+0x40>
     310:	95 95       	asr	r25
     312:	87 95       	ror	r24
     314:	2a 95       	dec	r18
     316:	e2 f7       	brpl	.-8      	; 0x310 <Dio_getPinVal+0x3c>
     318:	81 70       	andi	r24, 0x01	; 1
     31a:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     31c:	89 81       	ldd	r24, Y+1	; 0x01
}
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <DIO_vidSetPinSDir>:

void DIO_vidSetPinSDir(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Dir)
{
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	00 d0       	rcall	.+0      	; 0x32e <DIO_vidSetPinSDir+0x6>
     32e:	00 d0       	rcall	.+0      	; 0x330 <DIO_vidSetPinSDir+0x8>
     330:	1f 92       	push	r1
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	9b 83       	std	Y+3, r25	; 0x03
     338:	8a 83       	std	Y+2, r24	; 0x02
     33a:	6c 83       	std	Y+4, r22	; 0x04
     33c:	4d 83       	std	Y+5, r20	; 0x05
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     33e:	19 82       	std	Y+1, r1	; 0x01
     340:	99 c0       	rjmp	.+306    	; 0x474 <__stack+0x15>
		switch (Copyu8Dir){
     342:	8d 81       	ldd	r24, Y+5	; 0x05
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	00 97       	sbiw	r24, 0x00	; 0
     34a:	21 f0       	breq	.+8      	; 0x354 <DIO_vidSetPinSDir+0x2c>
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	09 f4       	brne	.+2      	; 0x352 <DIO_vidSetPinSDir+0x2a>
     350:	48 c0       	rjmp	.+144    	; 0x3e2 <DIO_vidSetPinSDir+0xba>
     352:	8d c0       	rjmp	.+282    	; 0x46e <__stack+0xf>
		case Direction_Pin_Input  :CLR_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	88 2f       	mov	r24, r24
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	2a 81       	ldd	r18, Y+2	; 0x02
     35c:	3b 81       	ldd	r19, Y+3	; 0x03
     35e:	82 0f       	add	r24, r18
     360:	93 1f       	adc	r25, r19
     362:	fc 01       	movw	r30, r24
     364:	80 81       	ld	r24, Z
     366:	86 95       	lsr	r24
     368:	86 95       	lsr	r24
     36a:	86 95       	lsr	r24
     36c:	88 2f       	mov	r24, r24
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	80 5a       	subi	r24, 0xA0	; 160
     376:	9f 4f       	sbci	r25, 0xFF	; 255
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	91 81       	ldd	r25, Z+1	; 0x01
     37e:	29 81       	ldd	r18, Y+1	; 0x01
     380:	22 2f       	mov	r18, r18
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	4a 81       	ldd	r20, Y+2	; 0x02
     386:	5b 81       	ldd	r21, Y+3	; 0x03
     388:	24 0f       	add	r18, r20
     38a:	35 1f       	adc	r19, r21
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	26 95       	lsr	r18
     392:	26 95       	lsr	r18
     394:	26 95       	lsr	r18
     396:	22 2f       	mov	r18, r18
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	22 0f       	add	r18, r18
     39c:	33 1f       	adc	r19, r19
     39e:	20 5a       	subi	r18, 0xA0	; 160
     3a0:	3f 4f       	sbci	r19, 0xFF	; 255
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	31 81       	ldd	r19, Z+1	; 0x01
     3a8:	f9 01       	movw	r30, r18
     3aa:	20 81       	ld	r18, Z
     3ac:	62 2f       	mov	r22, r18
     3ae:	29 81       	ldd	r18, Y+1	; 0x01
     3b0:	22 2f       	mov	r18, r18
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	4a 81       	ldd	r20, Y+2	; 0x02
     3b6:	5b 81       	ldd	r21, Y+3	; 0x03
     3b8:	24 0f       	add	r18, r20
     3ba:	35 1f       	adc	r19, r21
     3bc:	f9 01       	movw	r30, r18
     3be:	20 81       	ld	r18, Z
     3c0:	22 2f       	mov	r18, r18
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	a9 01       	movw	r20, r18
     3c6:	47 70       	andi	r20, 0x07	; 7
     3c8:	55 27       	eor	r21, r21
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_vidSetPinSDir+0xac>
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	4a 95       	dec	r20
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_vidSetPinSDir+0xa8>
     3d8:	20 95       	com	r18
     3da:	26 23       	and	r18, r22
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
     3e0:	46 c0       	rjmp	.+140    	; 0x46e <__stack+0xf>
		case Direction_Pin_Output :SET_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	88 2f       	mov	r24, r24
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ea:	3b 81       	ldd	r19, Y+3	; 0x03
     3ec:	82 0f       	add	r24, r18
     3ee:	93 1f       	adc	r25, r19
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	86 95       	lsr	r24
     3f6:	86 95       	lsr	r24
     3f8:	86 95       	lsr	r24
     3fa:	88 2f       	mov	r24, r24
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	80 5a       	subi	r24, 0xA0	; 160
     404:	9f 4f       	sbci	r25, 0xFF	; 255
     406:	fc 01       	movw	r30, r24
     408:	80 81       	ld	r24, Z
     40a:	91 81       	ldd	r25, Z+1	; 0x01
     40c:	29 81       	ldd	r18, Y+1	; 0x01
     40e:	22 2f       	mov	r18, r18
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	4a 81       	ldd	r20, Y+2	; 0x02
     414:	5b 81       	ldd	r21, Y+3	; 0x03
     416:	24 0f       	add	r18, r20
     418:	35 1f       	adc	r19, r21
     41a:	f9 01       	movw	r30, r18
     41c:	20 81       	ld	r18, Z
     41e:	26 95       	lsr	r18
     420:	26 95       	lsr	r18
     422:	26 95       	lsr	r18
     424:	22 2f       	mov	r18, r18
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	22 0f       	add	r18, r18
     42a:	33 1f       	adc	r19, r19
     42c:	20 5a       	subi	r18, 0xA0	; 160
     42e:	3f 4f       	sbci	r19, 0xFF	; 255
     430:	f9 01       	movw	r30, r18
     432:	20 81       	ld	r18, Z
     434:	31 81       	ldd	r19, Z+1	; 0x01
     436:	f9 01       	movw	r30, r18
     438:	20 81       	ld	r18, Z
     43a:	62 2f       	mov	r22, r18
     43c:	29 81       	ldd	r18, Y+1	; 0x01
     43e:	22 2f       	mov	r18, r18
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	4a 81       	ldd	r20, Y+2	; 0x02
     444:	5b 81       	ldd	r21, Y+3	; 0x03
     446:	24 0f       	add	r18, r20
     448:	35 1f       	adc	r19, r21
     44a:	f9 01       	movw	r30, r18
     44c:	20 81       	ld	r18, Z
     44e:	22 2f       	mov	r18, r18
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	a9 01       	movw	r20, r18
     454:	47 70       	andi	r20, 0x07	; 7
     456:	55 27       	eor	r21, r21
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__stack+0x3>
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	4a 95       	dec	r20
     464:	e2 f7       	brpl	.-8      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
     466:	26 2b       	or	r18, r22
     468:	fc 01       	movw	r30, r24
     46a:	20 83       	st	Z, r18
     46c:	00 00       	nop
}

void DIO_vidSetPinSDir(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Dir)
{
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	8f 5f       	subi	r24, 0xFF	; 255
     472:	89 83       	std	Y+1, r24	; 0x01
     474:	99 81       	ldd	r25, Y+1	; 0x01
     476:	8c 81       	ldd	r24, Y+4	; 0x04
     478:	98 17       	cp	r25, r24
     47a:	08 f4       	brcc	.+2      	; 0x47e <__stack+0x1f>
     47c:	62 cf       	rjmp	.-316    	; 0x342 <DIO_vidSetPinSDir+0x1a>
		switch (Copyu8Dir){
		case Direction_Pin_Input  :CLR_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
		case Direction_Pin_Output :SET_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
		}
	}
}
     47e:	00 00       	nop
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <DIO_vidSetPinSVal>:
void DIO_vidSetPinSVal(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Val)
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	00 d0       	rcall	.+0      	; 0x496 <DIO_vidSetPinSVal+0x6>
     496:	00 d0       	rcall	.+0      	; 0x498 <DIO_vidSetPinSVal+0x8>
     498:	1f 92       	push	r1
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	9b 83       	std	Y+3, r25	; 0x03
     4a0:	8a 83       	std	Y+2, r24	; 0x02
     4a2:	6c 83       	std	Y+4, r22	; 0x04
     4a4:	4d 83       	std	Y+5, r20	; 0x05
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     4a6:	19 82       	std	Y+1, r1	; 0x01
     4a8:	99 c0       	rjmp	.+306    	; 0x5dc <DIO_vidSetPinSVal+0x14c>
		switch (Copyu8Val){
     4aa:	8d 81       	ldd	r24, Y+5	; 0x05
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	00 97       	sbiw	r24, 0x00	; 0
     4b2:	21 f0       	breq	.+8      	; 0x4bc <DIO_vidSetPinSVal+0x2c>
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	09 f4       	brne	.+2      	; 0x4ba <DIO_vidSetPinSVal+0x2a>
     4b8:	48 c0       	rjmp	.+144    	; 0x54a <DIO_vidSetPinSVal+0xba>
     4ba:	8d c0       	rjmp	.+282    	; 0x5d6 <DIO_vidSetPinSVal+0x146>
		case Status_Pin_Low  :CLR_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	88 2f       	mov	r24, r24
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	2a 81       	ldd	r18, Y+2	; 0x02
     4c4:	3b 81       	ldd	r19, Y+3	; 0x03
     4c6:	82 0f       	add	r24, r18
     4c8:	93 1f       	adc	r25, r19
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	86 95       	lsr	r24
     4d0:	86 95       	lsr	r24
     4d2:	86 95       	lsr	r24
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	88 59       	subi	r24, 0x98	; 152
     4de:	9f 4f       	sbci	r25, 0xFF	; 255
     4e0:	fc 01       	movw	r30, r24
     4e2:	80 81       	ld	r24, Z
     4e4:	91 81       	ldd	r25, Z+1	; 0x01
     4e6:	29 81       	ldd	r18, Y+1	; 0x01
     4e8:	22 2f       	mov	r18, r18
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	4a 81       	ldd	r20, Y+2	; 0x02
     4ee:	5b 81       	ldd	r21, Y+3	; 0x03
     4f0:	24 0f       	add	r18, r20
     4f2:	35 1f       	adc	r19, r21
     4f4:	f9 01       	movw	r30, r18
     4f6:	20 81       	ld	r18, Z
     4f8:	26 95       	lsr	r18
     4fa:	26 95       	lsr	r18
     4fc:	26 95       	lsr	r18
     4fe:	22 2f       	mov	r18, r18
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	28 59       	subi	r18, 0x98	; 152
     508:	3f 4f       	sbci	r19, 0xFF	; 255
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	31 81       	ldd	r19, Z+1	; 0x01
     510:	f9 01       	movw	r30, r18
     512:	20 81       	ld	r18, Z
     514:	62 2f       	mov	r22, r18
     516:	29 81       	ldd	r18, Y+1	; 0x01
     518:	22 2f       	mov	r18, r18
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	4a 81       	ldd	r20, Y+2	; 0x02
     51e:	5b 81       	ldd	r21, Y+3	; 0x03
     520:	24 0f       	add	r18, r20
     522:	35 1f       	adc	r19, r21
     524:	f9 01       	movw	r30, r18
     526:	20 81       	ld	r18, Z
     528:	22 2f       	mov	r18, r18
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	a9 01       	movw	r20, r18
     52e:	47 70       	andi	r20, 0x07	; 7
     530:	55 27       	eor	r21, r21
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_vidSetPinSVal+0xac>
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	4a 95       	dec	r20
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_vidSetPinSVal+0xa8>
     540:	20 95       	com	r18
     542:	26 23       	and	r18, r22
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
     548:	46 c0       	rjmp	.+140    	; 0x5d6 <DIO_vidSetPinSVal+0x146>
		case Status_Pin_High :SET_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	88 2f       	mov	r24, r24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	2a 81       	ldd	r18, Y+2	; 0x02
     552:	3b 81       	ldd	r19, Y+3	; 0x03
     554:	82 0f       	add	r24, r18
     556:	93 1f       	adc	r25, r19
     558:	fc 01       	movw	r30, r24
     55a:	80 81       	ld	r24, Z
     55c:	86 95       	lsr	r24
     55e:	86 95       	lsr	r24
     560:	86 95       	lsr	r24
     562:	88 2f       	mov	r24, r24
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	88 59       	subi	r24, 0x98	; 152
     56c:	9f 4f       	sbci	r25, 0xFF	; 255
     56e:	fc 01       	movw	r30, r24
     570:	80 81       	ld	r24, Z
     572:	91 81       	ldd	r25, Z+1	; 0x01
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	22 2f       	mov	r18, r18
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	4a 81       	ldd	r20, Y+2	; 0x02
     57c:	5b 81       	ldd	r21, Y+3	; 0x03
     57e:	24 0f       	add	r18, r20
     580:	35 1f       	adc	r19, r21
     582:	f9 01       	movw	r30, r18
     584:	20 81       	ld	r18, Z
     586:	26 95       	lsr	r18
     588:	26 95       	lsr	r18
     58a:	26 95       	lsr	r18
     58c:	22 2f       	mov	r18, r18
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	22 0f       	add	r18, r18
     592:	33 1f       	adc	r19, r19
     594:	28 59       	subi	r18, 0x98	; 152
     596:	3f 4f       	sbci	r19, 0xFF	; 255
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	31 81       	ldd	r19, Z+1	; 0x01
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	62 2f       	mov	r22, r18
     5a4:	29 81       	ldd	r18, Y+1	; 0x01
     5a6:	22 2f       	mov	r18, r18
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	4a 81       	ldd	r20, Y+2	; 0x02
     5ac:	5b 81       	ldd	r21, Y+3	; 0x03
     5ae:	24 0f       	add	r18, r20
     5b0:	35 1f       	adc	r19, r21
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	22 2f       	mov	r18, r18
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	a9 01       	movw	r20, r18
     5bc:	47 70       	andi	r20, 0x07	; 7
     5be:	55 27       	eor	r21, r21
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_vidSetPinSVal+0x13a>
     5c6:	22 0f       	add	r18, r18
     5c8:	33 1f       	adc	r19, r19
     5ca:	4a 95       	dec	r20
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_vidSetPinSVal+0x136>
     5ce:	26 2b       	or	r18, r22
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
     5d4:	00 00       	nop
	}
}
void DIO_vidSetPinSVal(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Val)
{
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	8f 5f       	subi	r24, 0xFF	; 255
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	99 81       	ldd	r25, Y+1	; 0x01
     5de:	8c 81       	ldd	r24, Y+4	; 0x04
     5e0:	98 17       	cp	r25, r24
     5e2:	08 f4       	brcc	.+2      	; 0x5e6 <DIO_vidSetPinSVal+0x156>
     5e4:	62 cf       	rjmp	.-316    	; 0x4aa <DIO_vidSetPinSVal+0x1a>
		switch (Copyu8Val){
		case Status_Pin_Low  :CLR_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
		case Status_Pin_High :SET_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
		}
	}
}
     5e6:	00 00       	nop
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <Dio_setPortDir>:


/* -------------------- Section : Ports Functions Definaions -------------------- */
void Dio_setPortDir(u8 CopyPortNum,u8 CopyPinDir)
{
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <Dio_setPortDir+0x6>
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_DDr[CopyPortNum] = CopyPinDir;
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	88 2f       	mov	r24, r24
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	80 5a       	subi	r24, 0xA0	; 160
     612:	9f 4f       	sbci	r25, 0xFF	; 255
     614:	fc 01       	movw	r30, r24
     616:	80 81       	ld	r24, Z
     618:	91 81       	ldd	r25, Z+1	; 0x01
     61a:	2a 81       	ldd	r18, Y+2	; 0x02
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
}
     620:	00 00       	nop
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <Dio_setPortVal>:

void Dio_setPortVal(u8 CopyPortNum,u8 CopyPinVal)
{
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	00 d0       	rcall	.+0      	; 0x632 <Dio_setPortVal+0x6>
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_Port[CopyPortNum] = CopyPinVal;
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	88 2f       	mov	r24, r24
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	88 59       	subi	r24, 0x98	; 152
     646:	9f 4f       	sbci	r25, 0xFF	; 255
     648:	fc 01       	movw	r30, r24
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	2a 81       	ldd	r18, Y+2	; 0x02
     650:	fc 01       	movw	r30, r24
     652:	20 83       	st	Z, r18
}
     654:	00 00       	nop
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <Dio_getPortVal>:
Std_Return Dio_getPortVal(u8 CopyPortNum)
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	00 d0       	rcall	.+0      	; 0x666 <Dio_getPortVal+0x6>
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     66c:	19 82       	std	Y+1, r1	; 0x01
	Ret = *Arr_Pin[CopyPortNum];
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	80 59       	subi	r24, 0x90	; 144
     67a:	9f 4f       	sbci	r25, 0xFF	; 255
     67c:	fc 01       	movw	r30, r24
     67e:	80 81       	ld	r24, Z
     680:	91 81       	ldd	r25, Z+1	; 0x01
     682:	fc 01       	movw	r30, r24
     684:	80 81       	ld	r24, Z
     686:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     688:	89 81       	ldd	r24, Y+1	; 0x01
}
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <UltraSonic_Init>:
/********** SECTION : Includes **********/
#include "UltraSonic_Init.h"

/********** SECTION : Functions Definitions **********/
void UltraSonic_Init(UltraSonic CopyUltraSonic)
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	00 d0       	rcall	.+0      	; 0x69a <UltraSonic_Init+0x6>
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	9a 83       	std	Y+2, r25	; 0x02
     6a0:	89 83       	std	Y+1, r24	; 0x01
	Dio_setPinDir(CopyUltraSonic.Triger,Direction_Pin_Output);
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(CopyUltraSonic.Echo,Direction_Pin_Input);
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
}
     6b2:	00 00       	nop
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <UltraSonic_ReadDistance>:
void UltraSonic_ReadDistance(UltraSonic CopyUltraSonic , u8 CopyDistance)
{
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	6f 97       	sbiw	r28, 0x1f	; 31
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	9e 8f       	std	Y+30, r25	; 0x1e
     6d4:	8d 8f       	std	Y+29, r24	; 0x1d
     6d6:	6f 8f       	std	Y+31, r22	; 0x1f
	Dio_setPinVal(CopyUltraSonic.Triger,Status_Pin_Low);
     6d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	b0 e4       	ldi	r27, 0x40	; 64
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	ab 83       	std	Y+3, r26	; 0x03
     6ee:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	4a e7       	ldi	r20, 0x7A	; 122
     6f6:	53 e4       	ldi	r21, 0x43	; 67
     6f8:	69 81       	ldd	r22, Y+1	; 0x01
     6fa:	7a 81       	ldd	r23, Y+2	; 0x02
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	9c 81       	ldd	r25, Y+4	; 0x04
     700:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     704:	dc 01       	movw	r26, r24
     706:	cb 01       	movw	r24, r22
     708:	8b 8b       	std	Y+19, r24	; 0x13
     70a:	9c 8b       	std	Y+20, r25	; 0x14
     70c:	ad 8b       	std	Y+21, r26	; 0x15
     70e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	5f e3       	ldi	r21, 0x3F	; 63
     718:	6b 89       	ldd	r22, Y+19	; 0x13
     71a:	7c 89       	ldd	r23, Y+20	; 0x14
     71c:	8d 89       	ldd	r24, Y+21	; 0x15
     71e:	9e 89       	ldd	r25, Y+22	; 0x16
     720:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
     724:	88 23       	and	r24, r24
     726:	2c f4       	brge	.+10     	; 0x732 <UltraSonic_ReadDistance+0x74>
		__ticks = 1;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	98 8f       	std	Y+24, r25	; 0x18
     72e:	8f 8b       	std	Y+23, r24	; 0x17
     730:	3f c0       	rjmp	.+126    	; 0x7b0 <UltraSonic_ReadDistance+0xf2>
	else if (__tmp > 65535)
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	3f ef       	ldi	r19, 0xFF	; 255
     736:	4f e7       	ldi	r20, 0x7F	; 127
     738:	57 e4       	ldi	r21, 0x47	; 71
     73a:	6b 89       	ldd	r22, Y+19	; 0x13
     73c:	7c 89       	ldd	r23, Y+20	; 0x14
     73e:	8d 89       	ldd	r24, Y+21	; 0x15
     740:	9e 89       	ldd	r25, Y+22	; 0x16
     742:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
     746:	18 16       	cp	r1, r24
     748:	4c f5       	brge	.+82     	; 0x79c <UltraSonic_ReadDistance+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	40 e2       	ldi	r20, 0x20	; 32
     750:	51 e4       	ldi	r21, 0x41	; 65
     752:	69 81       	ldd	r22, Y+1	; 0x01
     754:	7a 81       	ldd	r23, Y+2	; 0x02
     756:	8b 81       	ldd	r24, Y+3	; 0x03
     758:	9c 81       	ldd	r25, Y+4	; 0x04
     75a:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     75e:	dc 01       	movw	r26, r24
     760:	cb 01       	movw	r24, r22
     762:	bc 01       	movw	r22, r24
     764:	cd 01       	movw	r24, r26
     766:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	98 8f       	std	Y+24, r25	; 0x18
     770:	8f 8b       	std	Y+23, r24	; 0x17
     772:	0f c0       	rjmp	.+30     	; 0x792 <UltraSonic_ReadDistance+0xd4>
     774:	89 e1       	ldi	r24, 0x19	; 25
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	9a 8f       	std	Y+26, r25	; 0x1a
     77a:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     77c:	89 8d       	ldd	r24, Y+25	; 0x19
     77e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <UltraSonic_ReadDistance+0xc2>
     784:	9a 8f       	std	Y+26, r25	; 0x1a
     786:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     788:	8f 89       	ldd	r24, Y+23	; 0x17
     78a:	98 8d       	ldd	r25, Y+24	; 0x18
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	98 8f       	std	Y+24, r25	; 0x18
     790:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     792:	8f 89       	ldd	r24, Y+23	; 0x17
     794:	98 8d       	ldd	r25, Y+24	; 0x18
     796:	89 2b       	or	r24, r25
     798:	69 f7       	brne	.-38     	; 0x774 <UltraSonic_ReadDistance+0xb6>
     79a:	14 c0       	rjmp	.+40     	; 0x7c4 <UltraSonic_ReadDistance+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     79c:	6b 89       	ldd	r22, Y+19	; 0x13
     79e:	7c 89       	ldd	r23, Y+20	; 0x14
     7a0:	8d 89       	ldd	r24, Y+21	; 0x15
     7a2:	9e 89       	ldd	r25, Y+22	; 0x16
     7a4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	98 8f       	std	Y+24, r25	; 0x18
     7ae:	8f 8b       	std	Y+23, r24	; 0x17
     7b0:	8f 89       	ldd	r24, Y+23	; 0x17
     7b2:	98 8d       	ldd	r25, Y+24	; 0x18
     7b4:	9c 8f       	std	Y+28, r25	; 0x1c
     7b6:	8b 8f       	std	Y+27, r24	; 0x1b
     7b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <UltraSonic_ReadDistance+0xfe>
     7c0:	9c 8f       	std	Y+28, r25	; 0x1c
     7c2:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(2);
	Dio_setPinVal(CopyUltraSonic.Triger,Status_Pin_High);
     7c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	a0 e2       	ldi	r26, 0x20	; 32
     7d2:	b1 e4       	ldi	r27, 0x41	; 65
     7d4:	8d 83       	std	Y+5, r24	; 0x05
     7d6:	9e 83       	std	Y+6, r25	; 0x06
     7d8:	af 83       	std	Y+7, r26	; 0x07
     7da:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	4a e7       	ldi	r20, 0x7A	; 122
     7e2:	53 e4       	ldi	r21, 0x43	; 67
     7e4:	6d 81       	ldd	r22, Y+5	; 0x05
     7e6:	7e 81       	ldd	r23, Y+6	; 0x06
     7e8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ea:	98 85       	ldd	r25, Y+8	; 0x08
     7ec:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	89 87       	std	Y+9, r24	; 0x09
     7f6:	9a 87       	std	Y+10, r25	; 0x0a
     7f8:	ab 87       	std	Y+11, r26	; 0x0b
     7fa:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e8       	ldi	r20, 0x80	; 128
     802:	5f e3       	ldi	r21, 0x3F	; 63
     804:	69 85       	ldd	r22, Y+9	; 0x09
     806:	7a 85       	ldd	r23, Y+10	; 0x0a
     808:	8b 85       	ldd	r24, Y+11	; 0x0b
     80a:	9c 85       	ldd	r25, Y+12	; 0x0c
     80c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
     810:	88 23       	and	r24, r24
     812:	2c f4       	brge	.+10     	; 0x81e <UltraSonic_ReadDistance+0x160>
		__ticks = 1;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	9e 87       	std	Y+14, r25	; 0x0e
     81a:	8d 87       	std	Y+13, r24	; 0x0d
     81c:	3f c0       	rjmp	.+126    	; 0x89c <UltraSonic_ReadDistance+0x1de>
	else if (__tmp > 65535)
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	3f ef       	ldi	r19, 0xFF	; 255
     822:	4f e7       	ldi	r20, 0x7F	; 127
     824:	57 e4       	ldi	r21, 0x47	; 71
     826:	69 85       	ldd	r22, Y+9	; 0x09
     828:	7a 85       	ldd	r23, Y+10	; 0x0a
     82a:	8b 85       	ldd	r24, Y+11	; 0x0b
     82c:	9c 85       	ldd	r25, Y+12	; 0x0c
     82e:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
     832:	18 16       	cp	r1, r24
     834:	4c f5       	brge	.+82     	; 0x888 <UltraSonic_ReadDistance+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e2       	ldi	r20, 0x20	; 32
     83c:	51 e4       	ldi	r21, 0x41	; 65
     83e:	6d 81       	ldd	r22, Y+5	; 0x05
     840:	7e 81       	ldd	r23, Y+6	; 0x06
     842:	8f 81       	ldd	r24, Y+7	; 0x07
     844:	98 85       	ldd	r25, Y+8	; 0x08
     846:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	9e 87       	std	Y+14, r25	; 0x0e
     85c:	8d 87       	std	Y+13, r24	; 0x0d
     85e:	0f c0       	rjmp	.+30     	; 0x87e <UltraSonic_ReadDistance+0x1c0>
     860:	89 e1       	ldi	r24, 0x19	; 25
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	98 8b       	std	Y+16, r25	; 0x10
     866:	8f 87       	std	Y+15, r24	; 0x0f
     868:	8f 85       	ldd	r24, Y+15	; 0x0f
     86a:	98 89       	ldd	r25, Y+16	; 0x10
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <UltraSonic_ReadDistance+0x1ae>
     870:	98 8b       	std	Y+16, r25	; 0x10
     872:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     874:	8d 85       	ldd	r24, Y+13	; 0x0d
     876:	9e 85       	ldd	r25, Y+14	; 0x0e
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	9e 87       	std	Y+14, r25	; 0x0e
     87c:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     87e:	8d 85       	ldd	r24, Y+13	; 0x0d
     880:	9e 85       	ldd	r25, Y+14	; 0x0e
     882:	89 2b       	or	r24, r25
     884:	69 f7       	brne	.-38     	; 0x860 <UltraSonic_ReadDistance+0x1a2>
     886:	14 c0       	rjmp	.+40     	; 0x8b0 <UltraSonic_ReadDistance+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     888:	69 85       	ldd	r22, Y+9	; 0x09
     88a:	7a 85       	ldd	r23, Y+10	; 0x0a
     88c:	8b 85       	ldd	r24, Y+11	; 0x0b
     88e:	9c 85       	ldd	r25, Y+12	; 0x0c
     890:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	9e 87       	std	Y+14, r25	; 0x0e
     89a:	8d 87       	std	Y+13, r24	; 0x0d
     89c:	8d 85       	ldd	r24, Y+13	; 0x0d
     89e:	9e 85       	ldd	r25, Y+14	; 0x0e
     8a0:	9a 8b       	std	Y+18, r25	; 0x12
     8a2:	89 8b       	std	Y+17, r24	; 0x11
     8a4:	89 89       	ldd	r24, Y+17	; 0x11
     8a6:	9a 89       	ldd	r25, Y+18	; 0x12
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <UltraSonic_ReadDistance+0x1ea>
     8ac:	9a 8b       	std	Y+18, r25	; 0x12
     8ae:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(10);
	Dio_setPinVal(CopyUltraSonic.Triger,Status_Pin_Low);
     8b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>

//	Dio_setPinVal(CopyUltraSonic.Echo, Status_Pin_High);


}
     8b8:	00 00       	nop
     8ba:	6f 96       	adiw	r28, 0x1f	; 31
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <LCD_4_INIT>:

/********** SECTION : Functions Definitions 4 Bit Mode **********/
#elif _LCD_Mood == _LCD_4_Bit_Mood

void LCD_4_INIT(LCD_4_MODE CopyLCD)
{
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	c3 54       	subi	r28, 0x43	; 67
     8d6:	d1 09       	sbc	r29, r1
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	4e af       	std	Y+62, r20	; 0x3e
     8e4:	5f af       	std	Y+63, r21	; 0x3f
     8e6:	9e 01       	movw	r18, r28
     8e8:	20 5c       	subi	r18, 0xC0	; 192
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	f9 01       	movw	r30, r18
     8ee:	60 83       	st	Z, r22
     8f0:	9e 01       	movw	r18, r28
     8f2:	2f 5b       	subi	r18, 0xBF	; 191
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	f9 01       	movw	r30, r18
     8f8:	70 83       	st	Z, r23
     8fa:	9e 01       	movw	r18, r28
     8fc:	2e 5b       	subi	r18, 0xBE	; 190
     8fe:	3f 4f       	sbci	r19, 0xFF	; 255
     900:	f9 01       	movw	r30, r18
     902:	80 83       	st	Z, r24
     904:	9e 01       	movw	r18, r28
     906:	2d 5b       	subi	r18, 0xBD	; 189
     908:	3f 4f       	sbci	r19, 0xFF	; 255
     90a:	f9 01       	movw	r30, r18
     90c:	90 83       	st	Z, r25
	u8 Counter = Initial_Counter;
     90e:	19 82       	std	Y+1, r1	; 0x01

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
     910:	8f ad       	ldd	r24, Y+63	; 0x3f
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);
     918:	8e ad       	ldd	r24, Y+62	; 0x3e
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     920:	19 82       	std	Y+1, r1	; 0x01
     922:	10 c0       	rjmp	.+32     	; 0x944 <LCD_4_INIT+0x78>
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	88 2f       	mov	r24, r24
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	9e 01       	movw	r18, r28
     92c:	20 5c       	subi	r18, 0xC0	; 192
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	82 0f       	add	r24, r18
     932:	93 1f       	adc	r25, r19
     934:	fc 01       	movw	r30, r24
     936:	80 81       	ld	r24, Z
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	u8 Counter = Initial_Counter;

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	89 83       	std	Y+1, r24	; 0x01
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	68 f3       	brcs	.-38     	; 0x924 <LCD_4_INIT+0x58>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 ea       	ldi	r26, 0xA0	; 160
     950:	b1 e4       	ldi	r27, 0x41	; 65
     952:	8a 83       	std	Y+2, r24	; 0x02
     954:	9b 83       	std	Y+3, r25	; 0x03
     956:	ac 83       	std	Y+4, r26	; 0x04
     958:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	4a e7       	ldi	r20, 0x7A	; 122
     960:	53 e4       	ldi	r21, 0x43	; 67
     962:	6a 81       	ldd	r22, Y+2	; 0x02
     964:	7b 81       	ldd	r23, Y+3	; 0x03
     966:	8c 81       	ldd	r24, Y+4	; 0x04
     968:	9d 81       	ldd	r25, Y+5	; 0x05
     96a:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     96e:	dc 01       	movw	r26, r24
     970:	cb 01       	movw	r24, r22
     972:	8c ab       	std	Y+52, r24	; 0x34
     974:	9d ab       	std	Y+53, r25	; 0x35
     976:	ae ab       	std	Y+54, r26	; 0x36
     978:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e8       	ldi	r20, 0x80	; 128
     980:	5f e3       	ldi	r21, 0x3F	; 63
     982:	6c a9       	ldd	r22, Y+52	; 0x34
     984:	7d a9       	ldd	r23, Y+53	; 0x35
     986:	8e a9       	ldd	r24, Y+54	; 0x36
     988:	9f a9       	ldd	r25, Y+55	; 0x37
     98a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
     98e:	88 23       	and	r24, r24
     990:	2c f4       	brge	.+10     	; 0x99c <LCD_4_INIT+0xd0>
		__ticks = 1;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	99 af       	std	Y+57, r25	; 0x39
     998:	88 af       	std	Y+56, r24	; 0x38
     99a:	3f c0       	rjmp	.+126    	; 0xa1a <LCD_4_INIT+0x14e>
	else if (__tmp > 65535)
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	3f ef       	ldi	r19, 0xFF	; 255
     9a0:	4f e7       	ldi	r20, 0x7F	; 127
     9a2:	57 e4       	ldi	r21, 0x47	; 71
     9a4:	6c a9       	ldd	r22, Y+52	; 0x34
     9a6:	7d a9       	ldd	r23, Y+53	; 0x35
     9a8:	8e a9       	ldd	r24, Y+54	; 0x36
     9aa:	9f a9       	ldd	r25, Y+55	; 0x37
     9ac:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
     9b0:	18 16       	cp	r1, r24
     9b2:	4c f5       	brge	.+82     	; 0xa06 <LCD_4_INIT+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 e2       	ldi	r20, 0x20	; 32
     9ba:	51 e4       	ldi	r21, 0x41	; 65
     9bc:	6a 81       	ldd	r22, Y+2	; 0x02
     9be:	7b 81       	ldd	r23, Y+3	; 0x03
     9c0:	8c 81       	ldd	r24, Y+4	; 0x04
     9c2:	9d 81       	ldd	r25, Y+5	; 0x05
     9c4:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	bc 01       	movw	r22, r24
     9ce:	cd 01       	movw	r24, r26
     9d0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	99 af       	std	Y+57, r25	; 0x39
     9da:	88 af       	std	Y+56, r24	; 0x38
     9dc:	0f c0       	rjmp	.+30     	; 0x9fc <LCD_4_INIT+0x130>
     9de:	89 e1       	ldi	r24, 0x19	; 25
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	9b af       	std	Y+59, r25	; 0x3b
     9e4:	8a af       	std	Y+58, r24	; 0x3a
     9e6:	8a ad       	ldd	r24, Y+58	; 0x3a
     9e8:	9b ad       	ldd	r25, Y+59	; 0x3b
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <LCD_4_INIT+0x11e>
     9ee:	9b af       	std	Y+59, r25	; 0x3b
     9f0:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9f2:	88 ad       	ldd	r24, Y+56	; 0x38
     9f4:	99 ad       	ldd	r25, Y+57	; 0x39
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	99 af       	std	Y+57, r25	; 0x39
     9fa:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9fc:	88 ad       	ldd	r24, Y+56	; 0x38
     9fe:	99 ad       	ldd	r25, Y+57	; 0x39
     a00:	89 2b       	or	r24, r25
     a02:	69 f7       	brne	.-38     	; 0x9de <LCD_4_INIT+0x112>
     a04:	14 c0       	rjmp	.+40     	; 0xa2e <LCD_4_INIT+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a06:	6c a9       	ldd	r22, Y+52	; 0x34
     a08:	7d a9       	ldd	r23, Y+53	; 0x35
     a0a:	8e a9       	ldd	r24, Y+54	; 0x36
     a0c:	9f a9       	ldd	r25, Y+55	; 0x37
     a0e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     a12:	dc 01       	movw	r26, r24
     a14:	cb 01       	movw	r24, r22
     a16:	99 af       	std	Y+57, r25	; 0x39
     a18:	88 af       	std	Y+56, r24	; 0x38
     a1a:	88 ad       	ldd	r24, Y+56	; 0x38
     a1c:	99 ad       	ldd	r25, Y+57	; 0x39
     a1e:	9d af       	std	Y+61, r25	; 0x3d
     a20:	8c af       	std	Y+60, r24	; 0x3c
     a22:	8c ad       	ldd	r24, Y+60	; 0x3c
     a24:	9d ad       	ldd	r25, Y+61	; 0x3d
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <LCD_4_INIT+0x15a>
     a2a:	9d af       	std	Y+61, r25	; 0x3d
     a2c:	8c af       	std	Y+60, r24	; 0x3c
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
	}
	_delay_ms(20);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     a2e:	28 e3       	ldi	r18, 0x38	; 56
     a30:	4e ad       	ldd	r20, Y+62	; 0x3e
     a32:	5f ad       	ldd	r21, Y+63	; 0x3f
     a34:	ce 01       	movw	r24, r28
     a36:	80 5c       	subi	r24, 0xC0	; 192
     a38:	9f 4f       	sbci	r25, 0xFF	; 255
     a3a:	fc 01       	movw	r30, r24
     a3c:	60 81       	ld	r22, Z
     a3e:	ce 01       	movw	r24, r28
     a40:	8f 5b       	subi	r24, 0xBF	; 191
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	fc 01       	movw	r30, r24
     a46:	70 81       	ld	r23, Z
     a48:	ce 01       	movw	r24, r28
     a4a:	8e 5b       	subi	r24, 0xBE	; 190
     a4c:	9f 4f       	sbci	r25, 0xFF	; 255
     a4e:	fc 01       	movw	r30, r24
     a50:	80 81       	ld	r24, Z
     a52:	fe 01       	movw	r30, r28
     a54:	ed 5b       	subi	r30, 0xBD	; 189
     a56:	ff 4f       	sbci	r31, 0xFF	; 255
     a58:	90 81       	ld	r25, Z
     a5a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a0 ea       	ldi	r26, 0xA0	; 160
     a64:	b0 e4       	ldi	r27, 0x40	; 64
     a66:	8e 83       	std	Y+6, r24	; 0x06
     a68:	9f 83       	std	Y+7, r25	; 0x07
     a6a:	a8 87       	std	Y+8, r26	; 0x08
     a6c:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	4a e7       	ldi	r20, 0x7A	; 122
     a74:	53 e4       	ldi	r21, 0x43	; 67
     a76:	6e 81       	ldd	r22, Y+6	; 0x06
     a78:	7f 81       	ldd	r23, Y+7	; 0x07
     a7a:	88 85       	ldd	r24, Y+8	; 0x08
     a7c:	99 85       	ldd	r25, Y+9	; 0x09
     a7e:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	8a a7       	std	Y+42, r24	; 0x2a
     a88:	9b a7       	std	Y+43, r25	; 0x2b
     a8a:	ac a7       	std	Y+44, r26	; 0x2c
     a8c:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e8       	ldi	r20, 0x80	; 128
     a94:	5f e3       	ldi	r21, 0x3F	; 63
     a96:	6a a5       	ldd	r22, Y+42	; 0x2a
     a98:	7b a5       	ldd	r23, Y+43	; 0x2b
     a9a:	8c a5       	ldd	r24, Y+44	; 0x2c
     a9c:	9d a5       	ldd	r25, Y+45	; 0x2d
     a9e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
     aa2:	88 23       	and	r24, r24
     aa4:	2c f4       	brge	.+10     	; 0xab0 <LCD_4_INIT+0x1e4>
		__ticks = 1;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	9f a7       	std	Y+47, r25	; 0x2f
     aac:	8e a7       	std	Y+46, r24	; 0x2e
     aae:	3f c0       	rjmp	.+126    	; 0xb2e <LCD_4_INIT+0x262>
	else if (__tmp > 65535)
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f e7       	ldi	r20, 0x7F	; 127
     ab6:	57 e4       	ldi	r21, 0x47	; 71
     ab8:	6a a5       	ldd	r22, Y+42	; 0x2a
     aba:	7b a5       	ldd	r23, Y+43	; 0x2b
     abc:	8c a5       	ldd	r24, Y+44	; 0x2c
     abe:	9d a5       	ldd	r25, Y+45	; 0x2d
     ac0:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
     ac4:	18 16       	cp	r1, r24
     ac6:	4c f5       	brge	.+82     	; 0xb1a <LCD_4_INIT+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e2       	ldi	r20, 0x20	; 32
     ace:	51 e4       	ldi	r21, 0x41	; 65
     ad0:	6e 81       	ldd	r22, Y+6	; 0x06
     ad2:	7f 81       	ldd	r23, Y+7	; 0x07
     ad4:	88 85       	ldd	r24, Y+8	; 0x08
     ad6:	99 85       	ldd	r25, Y+9	; 0x09
     ad8:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	bc 01       	movw	r22, r24
     ae2:	cd 01       	movw	r24, r26
     ae4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     ae8:	dc 01       	movw	r26, r24
     aea:	cb 01       	movw	r24, r22
     aec:	9f a7       	std	Y+47, r25	; 0x2f
     aee:	8e a7       	std	Y+46, r24	; 0x2e
     af0:	0f c0       	rjmp	.+30     	; 0xb10 <LCD_4_INIT+0x244>
     af2:	89 e1       	ldi	r24, 0x19	; 25
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	99 ab       	std	Y+49, r25	; 0x31
     af8:	88 ab       	std	Y+48, r24	; 0x30
     afa:	88 a9       	ldd	r24, Y+48	; 0x30
     afc:	99 a9       	ldd	r25, Y+49	; 0x31
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <LCD_4_INIT+0x232>
     b02:	99 ab       	std	Y+49, r25	; 0x31
     b04:	88 ab       	std	Y+48, r24	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b06:	8e a5       	ldd	r24, Y+46	; 0x2e
     b08:	9f a5       	ldd	r25, Y+47	; 0x2f
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	9f a7       	std	Y+47, r25	; 0x2f
     b0e:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b10:	8e a5       	ldd	r24, Y+46	; 0x2e
     b12:	9f a5       	ldd	r25, Y+47	; 0x2f
     b14:	89 2b       	or	r24, r25
     b16:	69 f7       	brne	.-38     	; 0xaf2 <LCD_4_INIT+0x226>
     b18:	14 c0       	rjmp	.+40     	; 0xb42 <LCD_4_INIT+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b1a:	6a a5       	ldd	r22, Y+42	; 0x2a
     b1c:	7b a5       	ldd	r23, Y+43	; 0x2b
     b1e:	8c a5       	ldd	r24, Y+44	; 0x2c
     b20:	9d a5       	ldd	r25, Y+45	; 0x2d
     b22:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	9f a7       	std	Y+47, r25	; 0x2f
     b2c:	8e a7       	std	Y+46, r24	; 0x2e
     b2e:	8e a5       	ldd	r24, Y+46	; 0x2e
     b30:	9f a5       	ldd	r25, Y+47	; 0x2f
     b32:	9b ab       	std	Y+51, r25	; 0x33
     b34:	8a ab       	std	Y+50, r24	; 0x32
     b36:	8a a9       	ldd	r24, Y+50	; 0x32
     b38:	9b a9       	ldd	r25, Y+51	; 0x33
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <LCD_4_INIT+0x26e>
     b3e:	9b ab       	std	Y+51, r25	; 0x33
     b40:	8a ab       	std	Y+50, r24	; 0x32
	_delay_ms(5);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     b42:	28 e3       	ldi	r18, 0x38	; 56
     b44:	4e ad       	ldd	r20, Y+62	; 0x3e
     b46:	5f ad       	ldd	r21, Y+63	; 0x3f
     b48:	ce 01       	movw	r24, r28
     b4a:	80 5c       	subi	r24, 0xC0	; 192
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	fc 01       	movw	r30, r24
     b50:	60 81       	ld	r22, Z
     b52:	ce 01       	movw	r24, r28
     b54:	8f 5b       	subi	r24, 0xBF	; 191
     b56:	9f 4f       	sbci	r25, 0xFF	; 255
     b58:	fc 01       	movw	r30, r24
     b5a:	70 81       	ld	r23, Z
     b5c:	ce 01       	movw	r24, r28
     b5e:	8e 5b       	subi	r24, 0xBE	; 190
     b60:	9f 4f       	sbci	r25, 0xFF	; 255
     b62:	fc 01       	movw	r30, r24
     b64:	80 81       	ld	r24, Z
     b66:	fe 01       	movw	r30, r28
     b68:	ed 5b       	subi	r30, 0xBD	; 189
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	90 81       	ld	r25, Z
     b6e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a6 e1       	ldi	r26, 0x16	; 22
     b78:	b3 e4       	ldi	r27, 0x43	; 67
     b7a:	8a 87       	std	Y+10, r24	; 0x0a
     b7c:	9b 87       	std	Y+11, r25	; 0x0b
     b7e:	ac 87       	std	Y+12, r26	; 0x0c
     b80:	bd 87       	std	Y+13, r27	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     b82:	2b ea       	ldi	r18, 0xAB	; 171
     b84:	3a ea       	ldi	r19, 0xAA	; 170
     b86:	4a ea       	ldi	r20, 0xAA	; 170
     b88:	5e e3       	ldi	r21, 0x3E	; 62
     b8a:	6a 85       	ldd	r22, Y+10	; 0x0a
     b8c:	7b 85       	ldd	r23, Y+11	; 0x0b
     b8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b90:	9d 85       	ldd	r25, Y+13	; 0x0d
     b92:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8e 87       	std	Y+14, r24	; 0x0e
     b9c:	9f 87       	std	Y+15, r25	; 0x0f
     b9e:	a8 8b       	std	Y+16, r26	; 0x10
     ba0:	b9 8b       	std	Y+17, r27	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5e e3       	ldi	r21, 0x3E	; 62
     baa:	6a 85       	ldd	r22, Y+10	; 0x0a
     bac:	7b 85       	ldd	r23, Y+11	; 0x0b
     bae:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
     bb2:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	8a 8b       	std	Y+18, r24	; 0x12
     bbc:	9b 8b       	std	Y+19, r25	; 0x13
     bbe:	ac 8b       	std	Y+20, r26	; 0x14
     bc0:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	5f e3       	ldi	r21, 0x3F	; 63
     bca:	6e 85       	ldd	r22, Y+14	; 0x0e
     bcc:	7f 85       	ldd	r23, Y+15	; 0x0f
     bce:	88 89       	ldd	r24, Y+16	; 0x10
     bd0:	99 89       	ldd	r25, Y+17	; 0x11
     bd2:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
     bd6:	88 23       	and	r24, r24
     bd8:	1c f4       	brge	.+6      	; 0xbe0 <LCD_4_INIT+0x314>
		__ticks = 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	8e 8b       	std	Y+22, r24	; 0x16
     bde:	b2 c0       	rjmp	.+356    	; 0xd44 <LCD_4_INIT+0x478>
	else if (__tmp2 > 65535)
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	4f e7       	ldi	r20, 0x7F	; 127
     be6:	57 e4       	ldi	r21, 0x47	; 71
     be8:	6a 89       	ldd	r22, Y+18	; 0x12
     bea:	7b 89       	ldd	r23, Y+19	; 0x13
     bec:	8c 89       	ldd	r24, Y+20	; 0x14
     bee:	9d 89       	ldd	r25, Y+21	; 0x15
     bf0:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <LCD_4_INIT+0x32e>
     bf8:	7b c0       	rjmp	.+246    	; 0xcf0 <LCD_4_INIT+0x424>
	{
		_delay_ms(__us / 1000.0);
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	4a e7       	ldi	r20, 0x7A	; 122
     c00:	54 e4       	ldi	r21, 0x44	; 68
     c02:	6a 85       	ldd	r22, Y+10	; 0x0a
     c04:	7b 85       	ldd	r23, Y+11	; 0x0b
     c06:	8c 85       	ldd	r24, Y+12	; 0x0c
     c08:	9d 85       	ldd	r25, Y+13	; 0x0d
     c0a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	8f 8b       	std	Y+23, r24	; 0x17
     c14:	98 8f       	std	Y+24, r25	; 0x18
     c16:	a9 8f       	std	Y+25, r26	; 0x19
     c18:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	4a e7       	ldi	r20, 0x7A	; 122
     c20:	53 e4       	ldi	r21, 0x43	; 67
     c22:	6f 89       	ldd	r22, Y+23	; 0x17
     c24:	78 8d       	ldd	r23, Y+24	; 0x18
     c26:	89 8d       	ldd	r24, Y+25	; 0x19
     c28:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c2a:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	8b 8f       	std	Y+27, r24	; 0x1b
     c34:	9c 8f       	std	Y+28, r25	; 0x1c
     c36:	ad 8f       	std	Y+29, r26	; 0x1d
     c38:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e8       	ldi	r20, 0x80	; 128
     c40:	5f e3       	ldi	r21, 0x3F	; 63
     c42:	6b 8d       	ldd	r22, Y+27	; 0x1b
     c44:	7c 8d       	ldd	r23, Y+28	; 0x1c
     c46:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c48:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c4a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
     c4e:	88 23       	and	r24, r24
     c50:	2c f4       	brge	.+10     	; 0xc5c <LCD_4_INIT+0x390>
		__ticks = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	98 a3       	std	Y+32, r25	; 0x20
     c58:	8f 8f       	std	Y+31, r24	; 0x1f
     c5a:	3f c0       	rjmp	.+126    	; 0xcda <LCD_4_INIT+0x40e>
	else if (__tmp > 65535)
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	4f e7       	ldi	r20, 0x7F	; 127
     c62:	57 e4       	ldi	r21, 0x47	; 71
     c64:	6b 8d       	ldd	r22, Y+27	; 0x1b
     c66:	7c 8d       	ldd	r23, Y+28	; 0x1c
     c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c6c:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
     c70:	18 16       	cp	r1, r24
     c72:	4c f5       	brge	.+82     	; 0xcc6 <LCD_4_INIT+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e2       	ldi	r20, 0x20	; 32
     c7a:	51 e4       	ldi	r21, 0x41	; 65
     c7c:	6f 89       	ldd	r22, Y+23	; 0x17
     c7e:	78 8d       	ldd	r23, Y+24	; 0x18
     c80:	89 8d       	ldd	r24, Y+25	; 0x19
     c82:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c84:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	bc 01       	movw	r22, r24
     c8e:	cd 01       	movw	r24, r26
     c90:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	98 a3       	std	Y+32, r25	; 0x20
     c9a:	8f 8f       	std	Y+31, r24	; 0x1f
     c9c:	0f c0       	rjmp	.+30     	; 0xcbc <LCD_4_INIT+0x3f0>
     c9e:	89 e1       	ldi	r24, 0x19	; 25
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9a a3       	std	Y+34, r25	; 0x22
     ca4:	89 a3       	std	Y+33, r24	; 0x21
     ca6:	89 a1       	ldd	r24, Y+33	; 0x21
     ca8:	9a a1       	ldd	r25, Y+34	; 0x22
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <LCD_4_INIT+0x3de>
     cae:	9a a3       	std	Y+34, r25	; 0x22
     cb0:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cb4:	98 a1       	ldd	r25, Y+32	; 0x20
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	98 a3       	std	Y+32, r25	; 0x20
     cba:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cbe:	98 a1       	ldd	r25, Y+32	; 0x20
     cc0:	89 2b       	or	r24, r25
     cc2:	69 f7       	brne	.-38     	; 0xc9e <LCD_4_INIT+0x3d2>
     cc4:	3f c0       	rjmp	.+126    	; 0xd44 <LCD_4_INIT+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc6:	6b 8d       	ldd	r22, Y+27	; 0x1b
     cc8:	7c 8d       	ldd	r23, Y+28	; 0x1c
     cca:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ccc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cce:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	98 a3       	std	Y+32, r25	; 0x20
     cd8:	8f 8f       	std	Y+31, r24	; 0x1f
     cda:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cdc:	98 a1       	ldd	r25, Y+32	; 0x20
     cde:	9c a3       	std	Y+36, r25	; 0x24
     ce0:	8b a3       	std	Y+35, r24	; 0x23
     ce2:	8b a1       	ldd	r24, Y+35	; 0x23
     ce4:	9c a1       	ldd	r25, Y+36	; 0x24
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <LCD_4_INIT+0x41a>
     cea:	9c a3       	std	Y+36, r25	; 0x24
     cec:	8b a3       	std	Y+35, r24	; 0x23
     cee:	2a c0       	rjmp	.+84     	; 0xd44 <LCD_4_INIT+0x478>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	53 e4       	ldi	r21, 0x43	; 67
     cf8:	6e 85       	ldd	r22, Y+14	; 0x0e
     cfa:	7f 85       	ldd	r23, Y+15	; 0x0f
     cfc:	88 89       	ldd	r24, Y+16	; 0x10
     cfe:	99 89       	ldd	r25, Y+17	; 0x11
     d00:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
     d04:	18 16       	cp	r1, r24
     d06:	ac f4       	brge	.+42     	; 0xd32 <LCD_4_INIT+0x466>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     d08:	6a 89       	ldd	r22, Y+18	; 0x12
     d0a:	7b 89       	ldd	r23, Y+19	; 0x13
     d0c:	8c 89       	ldd	r24, Y+20	; 0x14
     d0e:	9d 89       	ldd	r25, Y+21	; 0x15
     d10:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	9e a3       	std	Y+38, r25	; 0x26
     d1a:	8d a3       	std	Y+37, r24	; 0x25
     d1c:	8d a1       	ldd	r24, Y+37	; 0x25
     d1e:	9e a1       	ldd	r25, Y+38	; 0x26
     d20:	98 a7       	std	Y+40, r25	; 0x28
     d22:	8f a3       	std	Y+39, r24	; 0x27
     d24:	8f a1       	ldd	r24, Y+39	; 0x27
     d26:	98 a5       	ldd	r25, Y+40	; 0x28
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <LCD_4_INIT+0x45c>
     d2c:	98 a7       	std	Y+40, r25	; 0x28
     d2e:	8f a3       	std	Y+39, r24	; 0x27
     d30:	0f c0       	rjmp	.+30     	; 0xd50 <LCD_4_INIT+0x484>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d32:	6e 85       	ldd	r22, Y+14	; 0x0e
     d34:	7f 85       	ldd	r23, Y+15	; 0x0f
     d36:	88 89       	ldd	r24, Y+16	; 0x10
     d38:	99 89       	ldd	r25, Y+17	; 0x11
     d3a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8e 8b       	std	Y+22, r24	; 0x16
     d44:	8e 89       	ldd	r24, Y+22	; 0x16
     d46:	89 a7       	std	Y+41, r24	; 0x29
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d48:	89 a5       	ldd	r24, Y+41	; 0x29
     d4a:	8a 95       	dec	r24
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <LCD_4_INIT+0x47e>
     d4e:	89 a7       	std	Y+41, r24	; 0x29
	_delay_us(150);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     d50:	28 e3       	ldi	r18, 0x38	; 56
     d52:	4e ad       	ldd	r20, Y+62	; 0x3e
     d54:	5f ad       	ldd	r21, Y+63	; 0x3f
     d56:	ce 01       	movw	r24, r28
     d58:	80 5c       	subi	r24, 0xC0	; 192
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	fc 01       	movw	r30, r24
     d5e:	60 81       	ld	r22, Z
     d60:	ce 01       	movw	r24, r28
     d62:	8f 5b       	subi	r24, 0xBF	; 191
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	fc 01       	movw	r30, r24
     d68:	70 81       	ld	r23, Z
     d6a:	ce 01       	movw	r24, r28
     d6c:	8e 5b       	subi	r24, 0xBE	; 190
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	fc 01       	movw	r30, r24
     d72:	80 81       	ld	r24, Z
     d74:	fe 01       	movw	r30, r28
     d76:	ed 5b       	subi	r30, 0xBD	; 189
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	90 81       	ld	r25, Z
     d7c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Clear_Dis);
     d80:	21 e0       	ldi	r18, 0x01	; 1
     d82:	4e ad       	ldd	r20, Y+62	; 0x3e
     d84:	5f ad       	ldd	r21, Y+63	; 0x3f
     d86:	ce 01       	movw	r24, r28
     d88:	80 5c       	subi	r24, 0xC0	; 192
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	fc 01       	movw	r30, r24
     d8e:	60 81       	ld	r22, Z
     d90:	ce 01       	movw	r24, r28
     d92:	8f 5b       	subi	r24, 0xBF	; 191
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	fc 01       	movw	r30, r24
     d98:	70 81       	ld	r23, Z
     d9a:	ce 01       	movw	r24, r28
     d9c:	8e 5b       	subi	r24, 0xBE	; 190
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	fc 01       	movw	r30, r24
     da2:	80 81       	ld	r24, Z
     da4:	fe 01       	movw	r30, r28
     da6:	ed 5b       	subi	r30, 0xBD	; 189
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	90 81       	ld	r25, Z
     dac:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Return_Home);
     db0:	22 e0       	ldi	r18, 0x02	; 2
     db2:	4e ad       	ldd	r20, Y+62	; 0x3e
     db4:	5f ad       	ldd	r21, Y+63	; 0x3f
     db6:	ce 01       	movw	r24, r28
     db8:	80 5c       	subi	r24, 0xC0	; 192
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	fc 01       	movw	r30, r24
     dbe:	60 81       	ld	r22, Z
     dc0:	ce 01       	movw	r24, r28
     dc2:	8f 5b       	subi	r24, 0xBF	; 191
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	fc 01       	movw	r30, r24
     dc8:	70 81       	ld	r23, Z
     dca:	ce 01       	movw	r24, r28
     dcc:	8e 5b       	subi	r24, 0xBE	; 190
     dce:	9f 4f       	sbci	r25, 0xFF	; 255
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	fe 01       	movw	r30, r28
     dd6:	ed 5b       	subi	r30, 0xBD	; 189
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	90 81       	ld	r25, Z
     ddc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Entery_INC);
     de0:	26 e0       	ldi	r18, 0x06	; 6
     de2:	4e ad       	ldd	r20, Y+62	; 0x3e
     de4:	5f ad       	ldd	r21, Y+63	; 0x3f
     de6:	ce 01       	movw	r24, r28
     de8:	80 5c       	subi	r24, 0xC0	; 192
     dea:	9f 4f       	sbci	r25, 0xFF	; 255
     dec:	fc 01       	movw	r30, r24
     dee:	60 81       	ld	r22, Z
     df0:	ce 01       	movw	r24, r28
     df2:	8f 5b       	subi	r24, 0xBF	; 191
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	fc 01       	movw	r30, r24
     df8:	70 81       	ld	r23, Z
     dfa:	ce 01       	movw	r24, r28
     dfc:	8e 5b       	subi	r24, 0xBE	; 190
     dfe:	9f 4f       	sbci	r25, 0xFF	; 255
     e00:	fc 01       	movw	r30, r24
     e02:	80 81       	ld	r24, Z
     e04:	fe 01       	movw	r30, r28
     e06:	ed 5b       	subi	r30, 0xBD	; 189
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	90 81       	ld	r25, Z
     e0c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Dis_ON);
     e10:	2c e0       	ldi	r18, 0x0C	; 12
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	ce 01       	movw	r24, r28
     e18:	80 5c       	subi	r24, 0xC0	; 192
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	fc 01       	movw	r30, r24
     e1e:	60 81       	ld	r22, Z
     e20:	ce 01       	movw	r24, r28
     e22:	8f 5b       	subi	r24, 0xBF	; 191
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	fc 01       	movw	r30, r24
     e28:	70 81       	ld	r23, Z
     e2a:	ce 01       	movw	r24, r28
     e2c:	8e 5b       	subi	r24, 0xBE	; 190
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	fc 01       	movw	r30, r24
     e32:	80 81       	ld	r24, Z
     e34:	fe 01       	movw	r30, r28
     e36:	ed 5b       	subi	r30, 0xBD	; 189
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	90 81       	ld	r25, Z
     e3c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_4_Bit_Mode);
     e40:	28 e2       	ldi	r18, 0x28	; 40
     e42:	4e ad       	ldd	r20, Y+62	; 0x3e
     e44:	5f ad       	ldd	r21, Y+63	; 0x3f
     e46:	ce 01       	movw	r24, r28
     e48:	80 5c       	subi	r24, 0xC0	; 192
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	fc 01       	movw	r30, r24
     e4e:	60 81       	ld	r22, Z
     e50:	ce 01       	movw	r24, r28
     e52:	8f 5b       	subi	r24, 0xBF	; 191
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	fc 01       	movw	r30, r24
     e58:	70 81       	ld	r23, Z
     e5a:	ce 01       	movw	r24, r28
     e5c:	8e 5b       	subi	r24, 0xBE	; 190
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	fc 01       	movw	r30, r24
     e62:	80 81       	ld	r24, Z
     e64:	fe 01       	movw	r30, r28
     e66:	ed 5b       	subi	r30, 0xBD	; 189
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	90 81       	ld	r25, Z
     e6c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, 0x80);
     e70:	20 e8       	ldi	r18, 0x80	; 128
     e72:	4e ad       	ldd	r20, Y+62	; 0x3e
     e74:	5f ad       	ldd	r21, Y+63	; 0x3f
     e76:	ce 01       	movw	r24, r28
     e78:	80 5c       	subi	r24, 0xC0	; 192
     e7a:	9f 4f       	sbci	r25, 0xFF	; 255
     e7c:	fc 01       	movw	r30, r24
     e7e:	60 81       	ld	r22, Z
     e80:	ce 01       	movw	r24, r28
     e82:	8f 5b       	subi	r24, 0xBF	; 191
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	fc 01       	movw	r30, r24
     e88:	70 81       	ld	r23, Z
     e8a:	ce 01       	movw	r24, r28
     e8c:	8e 5b       	subi	r24, 0xBE	; 190
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	fc 01       	movw	r30, r24
     e92:	80 81       	ld	r24, Z
     e94:	fe 01       	movw	r30, r28
     e96:	ed 5b       	subi	r30, 0xBD	; 189
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	90 81       	ld	r25, Z
     e9c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
}
     ea0:	00 00       	nop
     ea2:	cd 5b       	subi	r28, 0xBD	; 189
     ea4:	df 4f       	sbci	r29, 0xFF	; 255
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <LCD_4_CMD_Write>:

void LCD_4_CMD_Write(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	27 97       	sbiw	r28, 0x07	; 7
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	49 83       	std	Y+1, r20	; 0x01
     ecc:	5a 83       	std	Y+2, r21	; 0x02
     ece:	6b 83       	std	Y+3, r22	; 0x03
     ed0:	7c 83       	std	Y+4, r23	; 0x04
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	9e 83       	std	Y+6, r25	; 0x06
     ed6:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_Low);
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyCMD >> 4);
     ee0:	8f 81       	ldd	r24, Y+7	; 0x07
     ee2:	82 95       	swap	r24
     ee4:	8f 70       	andi	r24, 0x0F	; 15
     ee6:	28 2f       	mov	r18, r24
     ee8:	49 81       	ldd	r20, Y+1	; 0x01
     eea:	5a 81       	ldd	r21, Y+2	; 0x02
     eec:	6b 81       	ldd	r22, Y+3	; 0x03
     eee:	7c 81       	ldd	r23, Y+4	; 0x04
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
     ef8:	49 81       	ldd	r20, Y+1	; 0x01
     efa:	5a 81       	ldd	r21, Y+2	; 0x02
     efc:	6b 81       	ldd	r22, Y+3	; 0x03
     efe:	7c 81       	ldd	r23, Y+4	; 0x04
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyCMD);
     f08:	2f 81       	ldd	r18, Y+7	; 0x07
     f0a:	49 81       	ldd	r20, Y+1	; 0x01
     f0c:	5a 81       	ldd	r21, Y+2	; 0x02
     f0e:	6b 81       	ldd	r22, Y+3	; 0x03
     f10:	7c 81       	ldd	r23, Y+4	; 0x04
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
     f1a:	49 81       	ldd	r20, Y+1	; 0x01
     f1c:	5a 81       	ldd	r21, Y+2	; 0x02
     f1e:	6b 81       	ldd	r22, Y+3	; 0x03
     f20:	7c 81       	ldd	r23, Y+4	; 0x04
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_4_SendEnable_Signal>
}
     f2a:	00 00       	nop
     f2c:	27 96       	adiw	r28, 0x07	; 7
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <LCD_4_Char_Write>:

void LCD_4_Char_Write(LCD_4_MODE CopyLCD , u8 CopyChar)
{
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	27 97       	sbiw	r28, 0x07	; 7
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	49 83       	std	Y+1, r20	; 0x01
     f54:	5a 83       	std	Y+2, r21	; 0x02
     f56:	6b 83       	std	Y+3, r22	; 0x03
     f58:	7c 83       	std	Y+4, r23	; 0x04
     f5a:	8d 83       	std	Y+5, r24	; 0x05
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_High);
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyChar >> 4);
     f68:	8f 81       	ldd	r24, Y+7	; 0x07
     f6a:	82 95       	swap	r24
     f6c:	8f 70       	andi	r24, 0x0F	; 15
     f6e:	28 2f       	mov	r18, r24
     f70:	49 81       	ldd	r20, Y+1	; 0x01
     f72:	5a 81       	ldd	r21, Y+2	; 0x02
     f74:	6b 81       	ldd	r22, Y+3	; 0x03
     f76:	7c 81       	ldd	r23, Y+4	; 0x04
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
     f80:	49 81       	ldd	r20, Y+1	; 0x01
     f82:	5a 81       	ldd	r21, Y+2	; 0x02
     f84:	6b 81       	ldd	r22, Y+3	; 0x03
     f86:	7c 81       	ldd	r23, Y+4	; 0x04
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyChar);
     f90:	2f 81       	ldd	r18, Y+7	; 0x07
     f92:	49 81       	ldd	r20, Y+1	; 0x01
     f94:	5a 81       	ldd	r21, Y+2	; 0x02
     f96:	6b 81       	ldd	r22, Y+3	; 0x03
     f98:	7c 81       	ldd	r23, Y+4	; 0x04
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
     fa2:	49 81       	ldd	r20, Y+1	; 0x01
     fa4:	5a 81       	ldd	r21, Y+2	; 0x02
     fa6:	6b 81       	ldd	r22, Y+3	; 0x03
     fa8:	7c 81       	ldd	r23, Y+4	; 0x04
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_4_SendEnable_Signal>
}
     fb2:	00 00       	nop
     fb4:	27 96       	adiw	r28, 0x07	; 7
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <LCD_4_Char_Postion>:

void LCD_4_Char_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 CopyChar)
{
     fc6:	ef 92       	push	r14
     fc8:	0f 93       	push	r16
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	29 97       	sbiw	r28, 0x09	; 9
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	49 83       	std	Y+1, r20	; 0x01
     fe0:	5a 83       	std	Y+2, r21	; 0x02
     fe2:	6b 83       	std	Y+3, r22	; 0x03
     fe4:	7c 83       	std	Y+4, r23	; 0x04
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	2f 83       	std	Y+7, r18	; 0x07
     fec:	08 87       	std	Y+8, r16	; 0x08
     fee:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
     ff0:	08 85       	ldd	r16, Y+8	; 0x08
     ff2:	2f 81       	ldd	r18, Y+7	; 0x07
     ff4:	49 81       	ldd	r20, Y+1	; 0x01
     ff6:	5a 81       	ldd	r21, Y+2	; 0x02
     ff8:	6b 81       	ldd	r22, Y+3	; 0x03
     ffa:	7c 81       	ldd	r23, Y+4	; 0x04
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <LCD_4_SetCursor_Position>
	LCD_4_Char_Write(CopyLCD , CopyChar);
    1004:	29 85       	ldd	r18, Y+9	; 0x09
    1006:	49 81       	ldd	r20, Y+1	; 0x01
    1008:	5a 81       	ldd	r21, Y+2	; 0x02
    100a:	6b 81       	ldd	r22, Y+3	; 0x03
    100c:	7c 81       	ldd	r23, Y+4	; 0x04
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LCD_4_Char_Write>
}
    1016:	00 00       	nop
    1018:	29 96       	adiw	r28, 0x09	; 9
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	0f 91       	pop	r16
    102a:	ef 90       	pop	r14
    102c:	08 95       	ret

0000102e <LCD_4_Str_Write>:

void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	28 97       	sbiw	r28, 0x08	; 8
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	49 83       	std	Y+1, r20	; 0x01
    1044:	5a 83       	std	Y+2, r21	; 0x02
    1046:	6b 83       	std	Y+3, r22	; 0x03
    1048:	7c 83       	std	Y+4, r23	; 0x04
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	38 87       	std	Y+8, r19	; 0x08
    1050:	2f 83       	std	Y+7, r18	; 0x07
	while(*CopySTR)
    1052:	12 c0       	rjmp	.+36     	; 0x1078 <LCD_4_Str_Write+0x4a>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
    1054:	8f 81       	ldd	r24, Y+7	; 0x07
    1056:	98 85       	ldd	r25, Y+8	; 0x08
    1058:	9c 01       	movw	r18, r24
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	38 87       	std	Y+8, r19	; 0x08
    1060:	2f 83       	std	Y+7, r18	; 0x07
    1062:	fc 01       	movw	r30, r24
    1064:	80 81       	ld	r24, Z
    1066:	28 2f       	mov	r18, r24
    1068:	49 81       	ldd	r20, Y+1	; 0x01
    106a:	5a 81       	ldd	r21, Y+2	; 0x02
    106c:	6b 81       	ldd	r22, Y+3	; 0x03
    106e:	7c 81       	ldd	r23, Y+4	; 0x04
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LCD_4_Char_Write>
	LCD_4_Char_Write(CopyLCD , CopyChar);
}

void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
	while(*CopySTR)
    1078:	8f 81       	ldd	r24, Y+7	; 0x07
    107a:	98 85       	ldd	r25, Y+8	; 0x08
    107c:	fc 01       	movw	r30, r24
    107e:	80 81       	ld	r24, Z
    1080:	88 23       	and	r24, r24
    1082:	41 f7       	brne	.-48     	; 0x1054 <LCD_4_Str_Write+0x26>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
    1084:	00 00       	nop
    1086:	28 96       	adiw	r28, 0x08	; 8
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <LCD_4_STR_Postion>:

void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	2a 97       	sbiw	r28, 0x0a	; 10
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	49 83       	std	Y+1, r20	; 0x01
    10b4:	5a 83       	std	Y+2, r21	; 0x02
    10b6:	6b 83       	std	Y+3, r22	; 0x03
    10b8:	7c 83       	std	Y+4, r23	; 0x04
    10ba:	8d 83       	std	Y+5, r24	; 0x05
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	2f 83       	std	Y+7, r18	; 0x07
    10c0:	08 87       	std	Y+8, r16	; 0x08
    10c2:	fa 86       	std	Y+10, r15	; 0x0a
    10c4:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
    10c6:	08 85       	ldd	r16, Y+8	; 0x08
    10c8:	2f 81       	ldd	r18, Y+7	; 0x07
    10ca:	49 81       	ldd	r20, Y+1	; 0x01
    10cc:	5a 81       	ldd	r21, Y+2	; 0x02
    10ce:	6b 81       	ldd	r22, Y+3	; 0x03
    10d0:	7c 81       	ldd	r23, Y+4	; 0x04
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <LCD_4_SetCursor_Position>
	while(*CopySTR)
    10da:	12 c0       	rjmp	.+36     	; 0x1100 <LCD_4_STR_Postion+0x68>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	9c 01       	movw	r18, r24
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	3a 87       	std	Y+10, r19	; 0x0a
    10e8:	29 87       	std	Y+9, r18	; 0x09
    10ea:	fc 01       	movw	r30, r24
    10ec:	80 81       	ld	r24, Z
    10ee:	28 2f       	mov	r18, r24
    10f0:	49 81       	ldd	r20, Y+1	; 0x01
    10f2:	5a 81       	ldd	r21, Y+2	; 0x02
    10f4:	6b 81       	ldd	r22, Y+3	; 0x03
    10f6:	7c 81       	ldd	r23, Y+4	; 0x04
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LCD_4_Char_Write>
}

void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
	while(*CopySTR)
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	fc 01       	movw	r30, r24
    1106:	80 81       	ld	r24, Z
    1108:	88 23       	and	r24, r24
    110a:	41 f7       	brne	.-48     	; 0x10dc <LCD_4_STR_Postion+0x44>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
    110c:	00 00       	nop
    110e:	2a 96       	adiw	r28, 0x0a	; 10
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	08 95       	ret

00001126 <Convert_u8_to_String>:
/************************************************************************************************************************/

/********** SECTION : Functions Declarations Convert **********/

void Convert_u8_to_String(u8 CopyValueu8 , u8 *CopySTR)
{
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	00 d0       	rcall	.+0      	; 0x112c <Convert_u8_to_String+0x6>
    112c:	1f 92       	push	r1
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	7b 83       	std	Y+3, r23	; 0x03
    1136:	6a 83       	std	Y+2, r22	; 0x02
	memset(CopySTR , '\0' , 4);
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	44 e0       	ldi	r20, 0x04	; 4
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	0e 94 81 12 	call	0x2502	; 0x2502 <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	29 2f       	mov	r18, r25
    1150:	2f 93       	push	r18
    1152:	8f 93       	push	r24
    1154:	88 ea       	ldi	r24, 0xA8	; 168
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	89 2f       	mov	r24, r25
    115a:	8f 93       	push	r24
    115c:	88 ea       	ldi	r24, 0xA8	; 168
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	8f 93       	push	r24
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	8f 93       	push	r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	8f 93       	push	r24
    116a:	0e 94 88 12 	call	0x2510	; 0x2510 <sprintf>
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
}
    117a:	00 00       	nop
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <Convert_u16_to_String>:
void Convert_u16_to_String(u16 CopyValueu8 , u8 *CopySTR)
{
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	00 d0       	rcall	.+0      	; 0x118e <Convert_u16_to_String+0x6>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <Convert_u16_to_String+0x8>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	7c 83       	std	Y+4, r23	; 0x04
    119a:	6b 83       	std	Y+3, r22	; 0x03
	memset(CopySTR , '\0' , 6);
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	46 e0       	ldi	r20, 0x06	; 6
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	0e 94 81 12 	call	0x2502	; 0x2502 <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	8f 93       	push	r24
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	8f 93       	push	r24
    11b4:	88 ea       	ldi	r24, 0xA8	; 168
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	89 2f       	mov	r24, r25
    11ba:	8f 93       	push	r24
    11bc:	88 ea       	ldi	r24, 0xA8	; 168
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	8f 93       	push	r24
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	8f 93       	push	r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	8f 93       	push	r24
    11ca:	0e 94 88 12 	call	0x2510	; 0x2510 <sprintf>
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
}
    11da:	00 00       	nop
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <Convert_u32_to_String>:
void Convert_u32_to_String(u32 CopyValueu8 , u8 *CopySTR)
{
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <Convert_u32_to_String+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <Convert_u32_to_String+0x8>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <Convert_u32_to_String+0xa>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	69 83       	std	Y+1, r22	; 0x01
    11fa:	7a 83       	std	Y+2, r23	; 0x02
    11fc:	8b 83       	std	Y+3, r24	; 0x03
    11fe:	9c 83       	std	Y+4, r25	; 0x04
    1200:	5e 83       	std	Y+6, r21	; 0x06
    1202:	4d 83       	std	Y+5, r20	; 0x05
	memset(CopySTR , '\0' , 11);
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	4b e0       	ldi	r20, 0x0B	; 11
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	0e 94 81 12 	call	0x2502	; 0x2502 <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	8f 93       	push	r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	8f 93       	push	r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	8f 93       	push	r24
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	8f 93       	push	r24
    1224:	88 ea       	ldi	r24, 0xA8	; 168
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	89 2f       	mov	r24, r25
    122a:	8f 93       	push	r24
    122c:	88 ea       	ldi	r24, 0xA8	; 168
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	8f 93       	push	r24
    1232:	8e 81       	ldd	r24, Y+6	; 0x06
    1234:	8f 93       	push	r24
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	8f 93       	push	r24
    123a:	0e 94 88 12 	call	0x2510	; 0x2510 <sprintf>
    123e:	8d b7       	in	r24, 0x3d	; 61
    1240:	9e b7       	in	r25, 0x3e	; 62
    1242:	08 96       	adiw	r24, 0x08	; 8
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
}
    124e:	00 00       	nop
    1250:	26 96       	adiw	r28, 0x06	; 6
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <LCD_4_GetData>:

/********** SECTION : Static Functions **********/
#if _LCD_Mood ==  _LCD_4_Bit_Mood

static void LCD_4_GetData(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	27 97       	sbiw	r28, 0x07	; 7
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	49 83       	std	Y+1, r20	; 0x01
    1278:	5a 83       	std	Y+2, r21	; 0x02
    127a:	6b 83       	std	Y+3, r22	; 0x03
    127c:	7c 83       	std	Y+4, r23	; 0x04
    127e:	8d 83       	std	Y+5, r24	; 0x05
    1280:	9e 83       	std	Y+6, r25	; 0x06
    1282:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.Port[0] , (CopyCMD >> 0) & (u8)0x01);
    1284:	8f 81       	ldd	r24, Y+7	; 0x07
    1286:	98 2f       	mov	r25, r24
    1288:	91 70       	andi	r25, 0x01	; 1
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	69 2f       	mov	r22, r25
    128e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[1] , (CopyCMD >> 1) & (u8)0x01);
    1292:	8f 81       	ldd	r24, Y+7	; 0x07
    1294:	86 95       	lsr	r24
    1296:	98 2f       	mov	r25, r24
    1298:	91 70       	andi	r25, 0x01	; 1
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	69 2f       	mov	r22, r25
    129e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[2] , (CopyCMD >> 2) & (u8)0x01);
    12a2:	8f 81       	ldd	r24, Y+7	; 0x07
    12a4:	86 95       	lsr	r24
    12a6:	86 95       	lsr	r24
    12a8:	98 2f       	mov	r25, r24
    12aa:	91 70       	andi	r25, 0x01	; 1
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	69 2f       	mov	r22, r25
    12b0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[3] , (CopyCMD >> 3) & (u8)0x01);
    12b4:	8f 81       	ldd	r24, Y+7	; 0x07
    12b6:	86 95       	lsr	r24
    12b8:	86 95       	lsr	r24
    12ba:	86 95       	lsr	r24
    12bc:	98 2f       	mov	r25, r24
    12be:	91 70       	andi	r25, 0x01	; 1
    12c0:	8e 81       	ldd	r24, Y+6	; 0x06
    12c2:	69 2f       	mov	r22, r25
    12c4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
}
    12c8:	00 00       	nop
    12ca:	27 96       	adiw	r28, 0x07	; 7
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <LCD_4_SendEnable_Signal>:

static void LCD_4_SendEnable_Signal(LCD_4_MODE CopyLCD)
{
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	a6 97       	sbiw	r28, 0x26	; 38
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	49 a3       	std	Y+33, r20	; 0x21
    12f2:	5a a3       	std	Y+34, r21	; 0x22
    12f4:	6b a3       	std	Y+35, r22	; 0x23
    12f6:	7c a3       	std	Y+36, r23	; 0x24
    12f8:	8d a3       	std	Y+37, r24	; 0x25
    12fa:	9e a3       	std	Y+38, r25	; 0x26
	Dio_setPinVal(CopyLCD.E,Status_Pin_High);
    12fc:	8a a1       	ldd	r24, Y+34	; 0x22
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a0 ea       	ldi	r26, 0xA0	; 160
    130a:	b0 e4       	ldi	r27, 0x40	; 64
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	ab 83       	std	Y+3, r26	; 0x03
    1312:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1314:	2b ea       	ldi	r18, 0xAB	; 171
    1316:	3a ea       	ldi	r19, 0xAA	; 170
    1318:	4a ea       	ldi	r20, 0xAA	; 170
    131a:	5e e3       	ldi	r21, 0x3E	; 62
    131c:	69 81       	ldd	r22, Y+1	; 0x01
    131e:	7a 81       	ldd	r23, Y+2	; 0x02
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	af 83       	std	Y+7, r26	; 0x07
    1332:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e8       	ldi	r20, 0x80	; 128
    133a:	5e e3       	ldi	r21, 0x3E	; 62
    133c:	69 81       	ldd	r22, Y+1	; 0x01
    133e:	7a 81       	ldd	r23, Y+2	; 0x02
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	89 87       	std	Y+9, r24	; 0x09
    134e:	9a 87       	std	Y+10, r25	; 0x0a
    1350:	ab 87       	std	Y+11, r26	; 0x0b
    1352:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	6d 81       	ldd	r22, Y+5	; 0x05
    135e:	7e 81       	ldd	r23, Y+6	; 0x06
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	98 85       	ldd	r25, Y+8	; 0x08
    1364:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
    1368:	88 23       	and	r24, r24
    136a:	1c f4       	brge	.+6      	; 0x1372 <LCD_4_SendEnable_Signal+0x96>
		__ticks = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	8d 87       	std	Y+13, r24	; 0x0d
    1370:	b2 c0       	rjmp	.+356    	; 0x14d6 <LCD_4_SendEnable_Signal+0x1fa>
	else if (__tmp2 > 65535)
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	3f ef       	ldi	r19, 0xFF	; 255
    1376:	4f e7       	ldi	r20, 0x7F	; 127
    1378:	57 e4       	ldi	r21, 0x47	; 71
    137a:	69 85       	ldd	r22, Y+9	; 0x09
    137c:	7a 85       	ldd	r23, Y+10	; 0x0a
    137e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1380:	9c 85       	ldd	r25, Y+12	; 0x0c
    1382:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
    1386:	18 16       	cp	r1, r24
    1388:	0c f0       	brlt	.+2      	; 0x138c <LCD_4_SendEnable_Signal+0xb0>
    138a:	7b c0       	rjmp	.+246    	; 0x1482 <LCD_4_SendEnable_Signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	4a e7       	ldi	r20, 0x7A	; 122
    1392:	54 e4       	ldi	r21, 0x44	; 68
    1394:	69 81       	ldd	r22, Y+1	; 0x01
    1396:	7a 81       	ldd	r23, Y+2	; 0x02
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	8e 87       	std	Y+14, r24	; 0x0e
    13a6:	9f 87       	std	Y+15, r25	; 0x0f
    13a8:	a8 8b       	std	Y+16, r26	; 0x10
    13aa:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	4a e7       	ldi	r20, 0x7A	; 122
    13b2:	53 e4       	ldi	r21, 0x43	; 67
    13b4:	6e 85       	ldd	r22, Y+14	; 0x0e
    13b6:	7f 85       	ldd	r23, Y+15	; 0x0f
    13b8:	88 89       	ldd	r24, Y+16	; 0x10
    13ba:	99 89       	ldd	r25, Y+17	; 0x11
    13bc:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8a 8b       	std	Y+18, r24	; 0x12
    13c6:	9b 8b       	std	Y+19, r25	; 0x13
    13c8:	ac 8b       	std	Y+20, r26	; 0x14
    13ca:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e8       	ldi	r20, 0x80	; 128
    13d2:	5f e3       	ldi	r21, 0x3F	; 63
    13d4:	6a 89       	ldd	r22, Y+18	; 0x12
    13d6:	7b 89       	ldd	r23, Y+19	; 0x13
    13d8:	8c 89       	ldd	r24, Y+20	; 0x14
    13da:	9d 89       	ldd	r25, Y+21	; 0x15
    13dc:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
    13e0:	88 23       	and	r24, r24
    13e2:	2c f4       	brge	.+10     	; 0x13ee <LCD_4_SendEnable_Signal+0x112>
		__ticks = 1;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	9f 8b       	std	Y+23, r25	; 0x17
    13ea:	8e 8b       	std	Y+22, r24	; 0x16
    13ec:	3f c0       	rjmp	.+126    	; 0x146c <LCD_4_SendEnable_Signal+0x190>
	else if (__tmp > 65535)
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	3f ef       	ldi	r19, 0xFF	; 255
    13f2:	4f e7       	ldi	r20, 0x7F	; 127
    13f4:	57 e4       	ldi	r21, 0x47	; 71
    13f6:	6a 89       	ldd	r22, Y+18	; 0x12
    13f8:	7b 89       	ldd	r23, Y+19	; 0x13
    13fa:	8c 89       	ldd	r24, Y+20	; 0x14
    13fc:	9d 89       	ldd	r25, Y+21	; 0x15
    13fe:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
    1402:	18 16       	cp	r1, r24
    1404:	4c f5       	brge	.+82     	; 0x1458 <LCD_4_SendEnable_Signal+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e2       	ldi	r20, 0x20	; 32
    140c:	51 e4       	ldi	r21, 0x41	; 65
    140e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1410:	7f 85       	ldd	r23, Y+15	; 0x0f
    1412:	88 89       	ldd	r24, Y+16	; 0x10
    1414:	99 89       	ldd	r25, Y+17	; 0x11
    1416:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9f 8b       	std	Y+23, r25	; 0x17
    142c:	8e 8b       	std	Y+22, r24	; 0x16
    142e:	0f c0       	rjmp	.+30     	; 0x144e <LCD_4_SendEnable_Signal+0x172>
    1430:	89 e1       	ldi	r24, 0x19	; 25
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	99 8f       	std	Y+25, r25	; 0x19
    1436:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1438:	88 8d       	ldd	r24, Y+24	; 0x18
    143a:	99 8d       	ldd	r25, Y+25	; 0x19
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <LCD_4_SendEnable_Signal+0x160>
    1440:	99 8f       	std	Y+25, r25	; 0x19
    1442:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1444:	8e 89       	ldd	r24, Y+22	; 0x16
    1446:	9f 89       	ldd	r25, Y+23	; 0x17
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	9f 8b       	std	Y+23, r25	; 0x17
    144c:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	8e 89       	ldd	r24, Y+22	; 0x16
    1450:	9f 89       	ldd	r25, Y+23	; 0x17
    1452:	89 2b       	or	r24, r25
    1454:	69 f7       	brne	.-38     	; 0x1430 <LCD_4_SendEnable_Signal+0x154>
    1456:	3f c0       	rjmp	.+126    	; 0x14d6 <LCD_4_SendEnable_Signal+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	6a 89       	ldd	r22, Y+18	; 0x12
    145a:	7b 89       	ldd	r23, Y+19	; 0x13
    145c:	8c 89       	ldd	r24, Y+20	; 0x14
    145e:	9d 89       	ldd	r25, Y+21	; 0x15
    1460:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9f 8b       	std	Y+23, r25	; 0x17
    146a:	8e 8b       	std	Y+22, r24	; 0x16
    146c:	8e 89       	ldd	r24, Y+22	; 0x16
    146e:	9f 89       	ldd	r25, Y+23	; 0x17
    1470:	9b 8f       	std	Y+27, r25	; 0x1b
    1472:	8a 8f       	std	Y+26, r24	; 0x1a
    1474:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1476:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LCD_4_SendEnable_Signal+0x19c>
    147c:	9b 8f       	std	Y+27, r25	; 0x1b
    147e:	8a 8f       	std	Y+26, r24	; 0x1a
    1480:	2a c0       	rjmp	.+84     	; 0x14d6 <LCD_4_SendEnable_Signal+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	4f e7       	ldi	r20, 0x7F	; 127
    1488:	53 e4       	ldi	r21, 0x43	; 67
    148a:	6d 81       	ldd	r22, Y+5	; 0x05
    148c:	7e 81       	ldd	r23, Y+6	; 0x06
    148e:	8f 81       	ldd	r24, Y+7	; 0x07
    1490:	98 85       	ldd	r25, Y+8	; 0x08
    1492:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
    1496:	18 16       	cp	r1, r24
    1498:	ac f4       	brge	.+42     	; 0x14c4 <LCD_4_SendEnable_Signal+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    149a:	69 85       	ldd	r22, Y+9	; 0x09
    149c:	7a 85       	ldd	r23, Y+10	; 0x0a
    149e:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9d 8f       	std	Y+29, r25	; 0x1d
    14ac:	8c 8f       	std	Y+28, r24	; 0x1c
    14ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14b0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14b2:	9f 8f       	std	Y+31, r25	; 0x1f
    14b4:	8e 8f       	std	Y+30, r24	; 0x1e
    14b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <LCD_4_SendEnable_Signal+0x1de>
    14be:	9f 8f       	std	Y+31, r25	; 0x1f
    14c0:	8e 8f       	std	Y+30, r24	; 0x1e
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <LCD_4_SendEnable_Signal+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14c4:	6d 81       	ldd	r22, Y+5	; 0x05
    14c6:	7e 81       	ldd	r23, Y+6	; 0x06
    14c8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ca:	98 85       	ldd	r25, Y+8	; 0x08
    14cc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8d 87       	std	Y+13, r24	; 0x0d
    14d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d8:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14da:	88 a1       	ldd	r24, Y+32	; 0x20
    14dc:	8a 95       	dec	r24
    14de:	f1 f7       	brne	.-4      	; 0x14dc <LCD_4_SendEnable_Signal+0x200>
    14e0:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(5);
	Dio_setPinVal(CopyLCD.E, Status_Pin_Low);
    14e2:	8a a1       	ldd	r24, Y+34	; 0x22
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
}
    14ea:	00 00       	nop
    14ec:	a6 96       	adiw	r28, 0x26	; 38
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <LCD_4_SetCursor_Position>:

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
    14fe:	0f 93       	push	r16
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	28 97       	sbiw	r28, 0x08	; 8
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	49 83       	std	Y+1, r20	; 0x01
    1516:	5a 83       	std	Y+2, r21	; 0x02
    1518:	6b 83       	std	Y+3, r22	; 0x03
    151a:	7c 83       	std	Y+4, r23	; 0x04
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	2f 83       	std	Y+7, r18	; 0x07
    1522:	08 87       	std	Y+8, r16	; 0x08
	CopyCoulmn--;
    1524:	88 85       	ldd	r24, Y+8	; 0x08
    1526:	81 50       	subi	r24, 0x01	; 1
    1528:	88 87       	std	Y+8, r24	; 0x08
	switch (CopyRow) {
    152a:	8f 81       	ldd	r24, Y+7	; 0x07
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	91 05       	cpc	r25, r1
    1534:	c1 f0       	breq	.+48     	; 0x1566 <LCD_4_SetCursor_Position+0x68>
    1536:	83 30       	cpi	r24, 0x03	; 3
    1538:	91 05       	cpc	r25, r1
    153a:	1c f4       	brge	.+6      	; 0x1542 <LCD_4_SetCursor_Position+0x44>
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	39 f0       	breq	.+14     	; 0x154e <LCD_4_SetCursor_Position+0x50>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    1540:	36 c0       	rjmp	.+108    	; 0x15ae <LCD_4_SetCursor_Position+0xb0>
}

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	91 05       	cpc	r25, r1
    1546:	d9 f0       	breq	.+54     	; 0x157e <LCD_4_SetCursor_Position+0x80>
    1548:	04 97       	sbiw	r24, 0x04	; 4
    154a:	29 f1       	breq	.+74     	; 0x1596 <LCD_4_SetCursor_Position+0x98>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    154c:	30 c0       	rjmp	.+96     	; 0x15ae <LCD_4_SetCursor_Position+0xb0>

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
    154e:	88 85       	ldd	r24, Y+8	; 0x08
    1550:	80 58       	subi	r24, 0x80	; 128
    1552:	28 2f       	mov	r18, r24
    1554:	49 81       	ldd	r20, Y+1	; 0x01
    1556:	5a 81       	ldd	r21, Y+2	; 0x02
    1558:	6b 81       	ldd	r22, Y+3	; 0x03
    155a:	7c 81       	ldd	r23, Y+4	; 0x04
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
    1564:	24 c0       	rjmp	.+72     	; 0x15ae <LCD_4_SetCursor_Position+0xb0>
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
    1566:	88 85       	ldd	r24, Y+8	; 0x08
    1568:	80 54       	subi	r24, 0x40	; 64
    156a:	28 2f       	mov	r18, r24
    156c:	49 81       	ldd	r20, Y+1	; 0x01
    156e:	5a 81       	ldd	r21, Y+2	; 0x02
    1570:	6b 81       	ldd	r22, Y+3	; 0x03
    1572:	7c 81       	ldd	r23, Y+4	; 0x04
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
    157c:	18 c0       	rjmp	.+48     	; 0x15ae <LCD_4_SetCursor_Position+0xb0>
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
    157e:	88 85       	ldd	r24, Y+8	; 0x08
    1580:	8c 56       	subi	r24, 0x6C	; 108
    1582:	28 2f       	mov	r18, r24
    1584:	49 81       	ldd	r20, Y+1	; 0x01
    1586:	5a 81       	ldd	r21, Y+2	; 0x02
    1588:	6b 81       	ldd	r22, Y+3	; 0x03
    158a:	7c 81       	ldd	r23, Y+4	; 0x04
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
    1594:	0c c0       	rjmp	.+24     	; 0x15ae <LCD_4_SetCursor_Position+0xb0>
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
    1596:	88 85       	ldd	r24, Y+8	; 0x08
    1598:	8c 52       	subi	r24, 0x2C	; 44
    159a:	28 2f       	mov	r18, r24
    159c:	49 81       	ldd	r20, Y+1	; 0x01
    159e:	5a 81       	ldd	r21, Y+2	; 0x02
    15a0:	6b 81       	ldd	r22, Y+3	; 0x03
    15a2:	7c 81       	ldd	r23, Y+4	; 0x04
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_4_CMD_Write>
    15ac:	00 00       	nop
		default: break;
	}
}
    15ae:	00 00       	nop
    15b0:	28 96       	adiw	r28, 0x08	; 8
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	0f 91       	pop	r16
    15c2:	08 95       	ret

000015c4 <KeyPad_Init>:
/********** SECTION : Includes **********/
#include "KeyPad_Init.h"

/********** SECTION : Functions Definitions **********/
void KeyPad_Init(KeyPad CopyKeyPad)
{
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	2a 97       	sbiw	r28, 0x0a	; 10
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	2b 83       	std	Y+3, r18	; 0x03
    15da:	3c 83       	std	Y+4, r19	; 0x04
    15dc:	4d 83       	std	Y+5, r20	; 0x05
    15de:	5e 83       	std	Y+6, r21	; 0x06
    15e0:	6f 83       	std	Y+7, r22	; 0x07
    15e2:	78 87       	std	Y+8, r23	; 0x08
    15e4:	89 87       	std	Y+9, r24	; 0x09
    15e6:	9a 87       	std	Y+10, r25	; 0x0a
	u8 Rows_Counter = Initial_Counter ;
    15e8:	19 82       	std	Y+1, r1	; 0x01
	u8 Columns_Counter = Initial_Counter;
    15ea:	1a 82       	std	Y+2, r1	; 0x02

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    15ec:	19 82       	std	Y+1, r1	; 0x01
    15ee:	10 c0       	rjmp	.+32     	; 0x1610 <KeyPad_Init+0x4c>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9e 01       	movw	r18, r28
    15f8:	2d 5f       	subi	r18, 0xFD	; 253
    15fa:	3f 4f       	sbci	r19, 0xFF	; 255
    15fc:	82 0f       	add	r24, r18
    15fe:	93 1f       	adc	r25, r19
    1600:	fc 01       	movw	r30, r24
    1602:	80 81       	ld	r24, Z
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
void KeyPad_Init(KeyPad CopyKeyPad)
{
	u8 Rows_Counter = Initial_Counter ;
	u8 Columns_Counter = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	8f 5f       	subi	r24, 0xFF	; 255
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	68 f3       	brcs	.-38     	; 0x15f0 <KeyPad_Init+0x2c>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
//		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_Low);
	}

	for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    1616:	1a 82       	std	Y+2, r1	; 0x02
    1618:	10 c0       	rjmp	.+32     	; 0x163a <KeyPad_Init+0x76>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Coulmn[Columns_Counter],Direction_Pin_Input);
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9e 01       	movw	r18, r28
    1622:	29 5f       	subi	r18, 0xF9	; 249
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	82 0f       	add	r24, r18
    1628:	93 1f       	adc	r25, r19
    162a:	fc 01       	movw	r30, r24
    162c:	80 81       	ld	r24, Z
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
//		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_Low);
	}

	for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	8f 5f       	subi	r24, 0xFF	; 255
    1638:	8a 83       	std	Y+2, r24	; 0x02
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	68 f3       	brcs	.-38     	; 0x161a <KeyPad_Init+0x56>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Coulmn[Columns_Counter],Direction_Pin_Input);
	}
}
    1640:	00 00       	nop
    1642:	2a 96       	adiw	r28, 0x0a	; 10
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <KeyPad_getValue>:

void KeyPad_getValue(KeyPad CopyKeyPad, u8 *CopyValue)
{
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	aa 97       	sbiw	r28, 0x2a	; 42
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	29 a3       	std	Y+33, r18	; 0x21
    166e:	3a a3       	std	Y+34, r19	; 0x22
    1670:	4b a3       	std	Y+35, r20	; 0x23
    1672:	5c a3       	std	Y+36, r21	; 0x24
    1674:	6d a3       	std	Y+37, r22	; 0x25
    1676:	7e a3       	std	Y+38, r23	; 0x26
    1678:	8f a3       	std	Y+39, r24	; 0x27
    167a:	98 a7       	std	Y+40, r25	; 0x28
    167c:	1a a7       	std	Y+42, r17	; 0x2a
    167e:	09 a7       	std	Y+41, r16	; 0x29
	u8 Rows_Counter = Initial_Counter ;
    1680:	19 82       	std	Y+1, r1	; 0x01
	u8 Columns_Counter = Initial_Counter;
    1682:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter_1 = Initial_Counter;
    1684:	1b 82       	std	Y+3, r1	; 0x03
	u8 Logic_Value = Initial_Counter;
    1686:	1c 82       	std	Y+4, r1	; 0x04

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    1688:	19 82       	std	Y+1, r1	; 0x01
    168a:	34 c1       	rjmp	.+616    	; 0x18f4 <KeyPad_getValue+0x2a0>
	{
		for(Counter_1 = Initial_Counter ; Counter_1 < KeyPad_Rows ; Counter_1++)
    168c:	1b 82       	std	Y+3, r1	; 0x03
    168e:	10 c0       	rjmp	.+32     	; 0x16b0 <KeyPad_getValue+0x5c>
		{
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9e 01       	movw	r18, r28
    1698:	2f 5d       	subi	r18, 0xDF	; 223
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	82 0f       	add	r24, r18
    169e:	93 1f       	adc	r25, r19
    16a0:	fc 01       	movw	r30, r24
    16a2:	80 81       	ld	r24, Z
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	u8 Counter_1 = Initial_Counter;
	u8 Logic_Value = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
	{
		for(Counter_1 = Initial_Counter ; Counter_1 < KeyPad_Rows ; Counter_1++)
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	8f 5f       	subi	r24, 0xFF	; 255
    16ae:	8b 83       	std	Y+3, r24	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	68 f3       	brcs	.-38     	; 0x1690 <KeyPad_getValue+0x3c>
		{
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
		}

		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_High);
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9e 01       	movw	r18, r28
    16be:	2f 5d       	subi	r18, 0xDF	; 223
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	fc 01       	movw	r30, r24
    16c8:	80 81       	ld	r24, Z
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a8 e4       	ldi	r26, 0x48	; 72
    16d6:	b2 e4       	ldi	r27, 0x42	; 66
    16d8:	89 87       	std	Y+9, r24	; 0x09
    16da:	9a 87       	std	Y+10, r25	; 0x0a
    16dc:	ab 87       	std	Y+11, r26	; 0x0b
    16de:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4a e7       	ldi	r20, 0x7A	; 122
    16e6:	53 e4       	ldi	r21, 0x43	; 67
    16e8:	69 85       	ldd	r22, Y+9	; 0x09
    16ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    16ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    16f0:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8d 87       	std	Y+13, r24	; 0x0d
    16fa:	9e 87       	std	Y+14, r25	; 0x0e
    16fc:	af 87       	std	Y+15, r26	; 0x0f
    16fe:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	6d 85       	ldd	r22, Y+13	; 0x0d
    170a:	7e 85       	ldd	r23, Y+14	; 0x0e
    170c:	8f 85       	ldd	r24, Y+15	; 0x0f
    170e:	98 89       	ldd	r25, Y+16	; 0x10
    1710:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
    1714:	88 23       	and	r24, r24
    1716:	2c f4       	brge	.+10     	; 0x1722 <KeyPad_getValue+0xce>
		__ticks = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9a 8b       	std	Y+18, r25	; 0x12
    171e:	89 8b       	std	Y+17, r24	; 0x11
    1720:	3f c0       	rjmp	.+126    	; 0x17a0 <KeyPad_getValue+0x14c>
	else if (__tmp > 65535)
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	3f ef       	ldi	r19, 0xFF	; 255
    1726:	4f e7       	ldi	r20, 0x7F	; 127
    1728:	57 e4       	ldi	r21, 0x47	; 71
    172a:	6d 85       	ldd	r22, Y+13	; 0x0d
    172c:	7e 85       	ldd	r23, Y+14	; 0x0e
    172e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1730:	98 89       	ldd	r25, Y+16	; 0x10
    1732:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
    1736:	18 16       	cp	r1, r24
    1738:	4c f5       	brge	.+82     	; 0x178c <KeyPad_getValue+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	69 85       	ldd	r22, Y+9	; 0x09
    1744:	7a 85       	ldd	r23, Y+10	; 0x0a
    1746:	8b 85       	ldd	r24, Y+11	; 0x0b
    1748:	9c 85       	ldd	r25, Y+12	; 0x0c
    174a:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9a 8b       	std	Y+18, r25	; 0x12
    1760:	89 8b       	std	Y+17, r24	; 0x11
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <KeyPad_getValue+0x12e>
    1764:	89 e1       	ldi	r24, 0x19	; 25
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9c 8b       	std	Y+20, r25	; 0x14
    176a:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    176c:	8b 89       	ldd	r24, Y+19	; 0x13
    176e:	9c 89       	ldd	r25, Y+20	; 0x14
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <KeyPad_getValue+0x11c>
    1774:	9c 8b       	std	Y+20, r25	; 0x14
    1776:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	89 89       	ldd	r24, Y+17	; 0x11
    177a:	9a 89       	ldd	r25, Y+18	; 0x12
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	9a 8b       	std	Y+18, r25	; 0x12
    1780:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1782:	89 89       	ldd	r24, Y+17	; 0x11
    1784:	9a 89       	ldd	r25, Y+18	; 0x12
    1786:	89 2b       	or	r24, r25
    1788:	69 f7       	brne	.-38     	; 0x1764 <KeyPad_getValue+0x110>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <KeyPad_getValue+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178c:	6d 85       	ldd	r22, Y+13	; 0x0d
    178e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1790:	8f 85       	ldd	r24, Y+15	; 0x0f
    1792:	98 89       	ldd	r25, Y+16	; 0x10
    1794:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9a 8b       	std	Y+18, r25	; 0x12
    179e:	89 8b       	std	Y+17, r24	; 0x11
    17a0:	89 89       	ldd	r24, Y+17	; 0x11
    17a2:	9a 89       	ldd	r25, Y+18	; 0x12
    17a4:	9e 8b       	std	Y+22, r25	; 0x16
    17a6:	8d 8b       	std	Y+21, r24	; 0x15
    17a8:	8d 89       	ldd	r24, Y+21	; 0x15
    17aa:	9e 89       	ldd	r25, Y+22	; 0x16
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <KeyPad_getValue+0x158>
    17b0:	9e 8b       	std	Y+22, r25	; 0x16
    17b2:	8d 8b       	std	Y+21, r24	; 0x15
		_delay_ms(50);
		for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    17b4:	1a 82       	std	Y+2, r1	; 0x02
    17b6:	97 c0       	rjmp	.+302    	; 0x18e6 <KeyPad_getValue+0x292>
		{
			Dio_getPinVal(CopyKeyPad.Pins_Coulmn[Columns_Counter]);
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9e 01       	movw	r18, r28
    17c0:	2b 5d       	subi	r18, 0xDB	; 219
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	82 0f       	add	r24, r18
    17c6:	93 1f       	adc	r25, r19
    17c8:	fc 01       	movw	r30, r24
    17ca:	80 81       	ld	r24, Z
    17cc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a8 e4       	ldi	r26, 0x48	; 72
    17d6:	b2 e4       	ldi	r27, 0x42	; 66
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	af 83       	std	Y+7, r26	; 0x07
    17de:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4a e7       	ldi	r20, 0x7A	; 122
    17e6:	53 e4       	ldi	r21, 0x43	; 67
    17e8:	6d 81       	ldd	r22, Y+5	; 0x05
    17ea:	7e 81       	ldd	r23, Y+6	; 0x06
    17ec:	8f 81       	ldd	r24, Y+7	; 0x07
    17ee:	98 85       	ldd	r25, Y+8	; 0x08
    17f0:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8f 8b       	std	Y+23, r24	; 0x17
    17fa:	98 8f       	std	Y+24, r25	; 0x18
    17fc:	a9 8f       	std	Y+25, r26	; 0x19
    17fe:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	6f 89       	ldd	r22, Y+23	; 0x17
    180a:	78 8d       	ldd	r23, Y+24	; 0x18
    180c:	89 8d       	ldd	r24, Y+25	; 0x19
    180e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1810:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__cmpsf2>
    1814:	88 23       	and	r24, r24
    1816:	2c f4       	brge	.+10     	; 0x1822 <KeyPad_getValue+0x1ce>
		__ticks = 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9c 8f       	std	Y+28, r25	; 0x1c
    181e:	8b 8f       	std	Y+27, r24	; 0x1b
    1820:	3f c0       	rjmp	.+126    	; 0x18a0 <KeyPad_getValue+0x24c>
	else if (__tmp > 65535)
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	3f ef       	ldi	r19, 0xFF	; 255
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	57 e4       	ldi	r21, 0x47	; 71
    182a:	6f 89       	ldd	r22, Y+23	; 0x17
    182c:	78 8d       	ldd	r23, Y+24	; 0x18
    182e:	89 8d       	ldd	r24, Y+25	; 0x19
    1830:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1832:	0e 94 0f 12 	call	0x241e	; 0x241e <__gesf2>
    1836:	18 16       	cp	r1, r24
    1838:	4c f5       	brge	.+82     	; 0x188c <KeyPad_getValue+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e2       	ldi	r20, 0x20	; 32
    1840:	51 e4       	ldi	r21, 0x41	; 65
    1842:	6d 81       	ldd	r22, Y+5	; 0x05
    1844:	7e 81       	ldd	r23, Y+6	; 0x06
    1846:	8f 81       	ldd	r24, Y+7	; 0x07
    1848:	98 85       	ldd	r25, Y+8	; 0x08
    184a:	0e 94 14 12 	call	0x2428	; 0x2428 <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	9c 8f       	std	Y+28, r25	; 0x1c
    1860:	8b 8f       	std	Y+27, r24	; 0x1b
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <KeyPad_getValue+0x22e>
    1864:	89 e1       	ldi	r24, 0x19	; 25
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9e 8f       	std	Y+30, r25	; 0x1e
    186a:	8d 8f       	std	Y+29, r24	; 0x1d
    186c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    186e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <KeyPad_getValue+0x21c>
    1874:	9e 8f       	std	Y+30, r25	; 0x1e
    1876:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	9c 8f       	std	Y+28, r25	; 0x1c
    1880:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1886:	89 2b       	or	r24, r25
    1888:	69 f7       	brne	.-38     	; 0x1864 <KeyPad_getValue+0x210>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <KeyPad_getValue+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188c:	6f 89       	ldd	r22, Y+23	; 0x17
    188e:	78 8d       	ldd	r23, Y+24	; 0x18
    1890:	89 8d       	ldd	r24, Y+25	; 0x19
    1892:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1894:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9c 8f       	std	Y+28, r25	; 0x1c
    189e:	8b 8f       	std	Y+27, r24	; 0x1b
    18a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a4:	98 a3       	std	Y+32, r25	; 0x20
    18a6:	8f 8f       	std	Y+31, r24	; 0x1f
    18a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18aa:	98 a1       	ldd	r25, Y+32	; 0x20
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <KeyPad_getValue+0x258>
    18b0:	98 a3       	std	Y+32, r25	; 0x20
    18b2:	8f 8f       	std	Y+31, r24	; 0x1f
			_delay_ms(50);

			if(Logic_Value == Status_Pin_High)
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	99 f4       	brne	.+38     	; 0x18e0 <KeyPad_getValue+0x28c>
			{
				*CopyValue = &(Keypad_Buttons[Rows_Counter][Columns_Counter]);
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	22 0f       	add	r18, r18
    18c8:	33 1f       	adc	r19, r19
    18ca:	22 0f       	add	r18, r18
    18cc:	33 1f       	adc	r19, r19
    18ce:	82 0f       	add	r24, r18
    18d0:	93 1f       	adc	r25, r19
    18d2:	88 57       	subi	r24, 0x78	; 120
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	28 2f       	mov	r18, r24
    18d8:	89 a5       	ldd	r24, Y+41	; 0x29
    18da:	9a a5       	ldd	r25, Y+42	; 0x2a
    18dc:	fc 01       	movw	r30, r24
    18de:	20 83       	st	Z, r18
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
		}

		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_High);
		_delay_ms(50);
		for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	8a 83       	std	Y+2, r24	; 0x02
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	84 30       	cpi	r24, 0x04	; 4
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <KeyPad_getValue+0x29a>
    18ec:	65 cf       	rjmp	.-310    	; 0x17b8 <KeyPad_getValue+0x164>
	u8 Rows_Counter = Initial_Counter ;
	u8 Columns_Counter = Initial_Counter;
	u8 Counter_1 = Initial_Counter;
	u8 Logic_Value = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	8f 5f       	subi	r24, 0xFF	; 255
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	84 30       	cpi	r24, 0x04	; 4
    18f8:	08 f4       	brcc	.+2      	; 0x18fc <KeyPad_getValue+0x2a8>
    18fa:	c8 ce       	rjmp	.-624    	; 0x168c <KeyPad_getValue+0x38>
			{
				*CopyValue = &(Keypad_Buttons[Rows_Counter][Columns_Counter]);
			}
		}
	}
}
    18fc:	00 00       	nop
    18fe:	aa 96       	adiw	r28, 0x2a	; 42
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <App_Init>:

/********** SECTION : Globale Variable **********/
u8 KeyPad_Value = 0;
/********** SECTION : Functions setUp Definitions **********/
void App_Init(void)
{
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62

}
    191c:	00 00       	nop
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <App_Loop>:

/********** SECTION : Functions Loop Definitions **********/
void App_Loop(void)
{
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62

}
    192c:	00 00       	nop
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <Motor_Init>:
#include "../../Mcal/DIO/dio_Init.h"
#include "Dc_Motor_Init.h"

/********** SECTION : Functions Definitions **********/
void Motor_Init(void)
{
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
	Dio_setPinDir(m1.ENA, Direction_Pin_Output);
    193c:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m1+0x2>
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m1.IN1, Direction_Pin_Output);
    1946:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1>
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m1.IN2, Direction_Pin_Output);
    1950:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <m1+0x1>
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	Dio_setPinDir(m2.ENB, Direction_Pin_Output);
    195a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <m2+0x2>
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m2.IN3, Direction_Pin_Output);
    1964:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2>
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m2.IN4, Direction_Pin_Output);
    196e:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <m2+0x1>
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
}
    1978:	00 00       	nop
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <Motor_Forward>:


void Motor_Forward(u8 CopyMotorNum)
{
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	1f 92       	push	r1
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	89 83       	std	Y+1, r24	; 0x01
	switch(CopyMotorNum)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	91 05       	cpc	r25, r1
    1996:	c1 f0       	breq	.+48     	; 0x19c8 <Motor_Forward+0x48>
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	91 05       	cpc	r25, r1
    199c:	39 f1       	breq	.+78     	; 0x19ec <Motor_Forward+0x6c>
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <Motor_Forward+0x24>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
		Dio_setPinVal(m2.IN3, Status_Pin_High);
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
		break;
	}
}
    19a2:	47 c0       	rjmp	.+142    	; 0x1a32 <Motor_Forward+0xb2>
void Motor_Forward(u8 CopyMotorNum)
{
	switch(CopyMotorNum)
	{
	case Motor_1:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    19a4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <m1+0x3>
    19a8:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m1+0x2>
    19ac:	69 2f       	mov	r22, r25
    19ae:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_High);
    19b2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1>
    19b6:	61 e0       	ldi	r22, 0x01	; 1
    19b8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    19bc:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <m1+0x1>
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    19c6:	35 c0       	rjmp	.+106    	; 0x1a32 <Motor_Forward+0xb2>
	case Motor_2:
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    19c8:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <m2+0x3>
    19cc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <m2+0x2>
    19d0:	69 2f       	mov	r22, r25
    19d2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_High);
    19d6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2>
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    19e0:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <m2+0x1>
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    19ea:	23 c0       	rjmp	.+70     	; 0x1a32 <Motor_Forward+0xb2>
	case Motors:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    19ec:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <m1+0x3>
    19f0:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m1+0x2>
    19f4:	69 2f       	mov	r22, r25
    19f6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    19fa:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <m2+0x3>
    19fe:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <m2+0x2>
    1a02:	69 2f       	mov	r22, r25
    1a04:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_High);
    1a08:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1>
    1a0c:	61 e0       	ldi	r22, 0x01	; 1
    1a0e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    1a12:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <m1+0x1>
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_High);
    1a1c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2>
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    1a26:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <m2+0x1>
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1a30:	00 00       	nop
	}
}
    1a32:	00 00       	nop
    1a34:	0f 90       	pop	r0
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	08 95       	ret

00001a3c <Motor_Reverse>:

void Motor_Reverse(u8 CopyMotorNum)
{
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	1f 92       	push	r1
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	89 83       	std	Y+1, r24	; 0x01
	switch(CopyMotorNum)
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	91 05       	cpc	r25, r1
    1a52:	c1 f0       	breq	.+48     	; 0x1a84 <Motor_Reverse+0x48>
    1a54:	83 30       	cpi	r24, 0x03	; 3
    1a56:	91 05       	cpc	r25, r1
    1a58:	39 f1       	breq	.+78     	; 0x1aa8 <Motor_Reverse+0x6c>
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <Motor_Reverse+0x24>
		Dio_setPinVal(m1.IN2, Status_Pin_High);
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
		Dio_setPinVal(m2.IN4, Status_Pin_High);
		break;
	}
}
    1a5e:	47 c0       	rjmp	.+142    	; 0x1aee <Motor_Reverse+0xb2>
void Motor_Reverse(u8 CopyMotorNum)
{
	switch(CopyMotorNum)
	{
	case Motor_1:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    1a60:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <m1+0x3>
    1a64:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m1+0x2>
    1a68:	69 2f       	mov	r22, r25
    1a6a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    1a6e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1>
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_High);
    1a78:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <m1+0x1>
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1a82:	35 c0       	rjmp	.+106    	; 0x1aee <Motor_Reverse+0xb2>
	case Motor_2:
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    1a84:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <m2+0x3>
    1a88:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <m2+0x2>
    1a8c:	69 2f       	mov	r22, r25
    1a8e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    1a92:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2>
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_High);
    1a9c:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <m2+0x1>
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1aa6:	23 c0       	rjmp	.+70     	; 0x1aee <Motor_Reverse+0xb2>
	case Motors:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    1aa8:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <m1+0x3>
    1aac:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m1+0x2>
    1ab0:	69 2f       	mov	r22, r25
    1ab2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    1ab6:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <m2+0x3>
    1aba:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <m2+0x2>
    1abe:	69 2f       	mov	r22, r25
    1ac0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    1ac4:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1>
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_High);
    1ace:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <m1+0x1>
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    1ad8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2>
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_High);
    1ae2:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <m2+0x1>
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1aec:	00 00       	nop
	}
}
    1aee:	00 00       	nop
    1af0:	0f 90       	pop	r0
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <Motor_Off>:


void Motor_Off(u8 CopyMotorNum)
{
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	1f 92       	push	r1
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	89 83       	std	Y+1, r24	; 0x01
	switch(CopyMotorNum)
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	82 30       	cpi	r24, 0x02	; 2
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	c1 f0       	breq	.+48     	; 0x1b40 <Motor_Off+0x48>
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	91 05       	cpc	r25, r1
    1b14:	39 f1       	breq	.+78     	; 0x1b64 <Motor_Off+0x6c>
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <Motor_Off+0x24>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
		break;
	}
}
    1b1a:	47 c0       	rjmp	.+142    	; 0x1baa <Motor_Off+0xb2>
void Motor_Off(u8 CopyMotorNum)
{
	switch(CopyMotorNum)
	{
	case Motor_1:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    1b1c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <m1+0x3>
    1b20:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m1+0x2>
    1b24:	69 2f       	mov	r22, r25
    1b26:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    1b2a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1>
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    1b34:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <m1+0x1>
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1b3e:	35 c0       	rjmp	.+106    	; 0x1baa <Motor_Off+0xb2>
	case Motor_2:
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    1b40:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <m2+0x3>
    1b44:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <m2+0x2>
    1b48:	69 2f       	mov	r22, r25
    1b4a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    1b4e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2>
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    1b58:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <m2+0x1>
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1b62:	23 c0       	rjmp	.+70     	; 0x1baa <Motor_Off+0xb2>
	case Motors:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    1b64:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <m1+0x3>
    1b68:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m1+0x2>
    1b6c:	69 2f       	mov	r22, r25
    1b6e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    1b72:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <m2+0x3>
    1b76:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <m2+0x2>
    1b7a:	69 2f       	mov	r22, r25
    1b7c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    1b80:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1>
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    1b8a:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <m1+0x1>
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    1b94:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2>
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    1b9e:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <m2+0x1>
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1ba8:	00 00       	nop
	}
}
    1baa:	00 00       	nop
    1bac:	0f 90       	pop	r0
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <Bcd_7segInit>:
/********** SECTION : Includes **********/
#include "bcd_Init.h"

/********** SECTION : Functions Definitions **********/
void Bcd_7segInit(BCD Copy7seg)
{
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <Bcd_7segInit+0x6>
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <Bcd_7segInit+0x8>
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	69 83       	std	Y+1, r22	; 0x01
    1bc2:	7a 83       	std	Y+2, r23	; 0x02
    1bc4:	8b 83       	std	Y+3, r24	; 0x03
    1bc6:	9c 83       	std	Y+4, r25	; 0x04
	Dio_setPinDir(Copy7seg.Pin_1, Direction_Pin_Output);
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	61 e0       	ldi	r22, 0x01	; 1
    1bcc:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_2, Direction_Pin_Output);
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_3, Direction_Pin_Output);
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	61 e0       	ldi	r22, 0x01	; 1
    1bdc:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_4, Direction_Pin_Output);
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	61 e0       	ldi	r22, 0x01	; 1
    1be4:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
}
    1be8:	00 00       	nop
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	08 95       	ret

00001bf8 <Bcd_7segWriteNum>:

void Bcd_7segWriteNum(BCD Copy7segNum , u8 CopyNumber)
{
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <Bcd_7segWriteNum+0x6>
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <Bcd_7segWriteNum+0x8>
    1c00:	1f 92       	push	r1
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	69 83       	std	Y+1, r22	; 0x01
    1c08:	7a 83       	std	Y+2, r23	; 0x02
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	9c 83       	std	Y+4, r25	; 0x04
    1c0e:	4d 83       	std	Y+5, r20	; 0x05
	switch (CopyNumber) {
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	09 2e       	mov	r0, r25
    1c18:	00 0c       	add	r0, r0
    1c1a:	aa 0b       	sbc	r26, r26
    1c1c:	bb 0b       	sbc	r27, r27
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	29 e0       	ldi	r18, 0x09	; 9
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	84 1b       	sub	r24, r20
    1c28:	95 0b       	sbc	r25, r21
    1c2a:	28 17       	cp	r18, r24
    1c2c:	39 07       	cpc	r19, r25
    1c2e:	08 f4       	brcc	.+2      	; 0x1c32 <Bcd_7segWriteNum+0x3a>
    1c30:	af c0       	rjmp	.+350    	; 0x1d90 <Bcd_7segWriteNum+0x198>
    1c32:	86 5d       	subi	r24, 0xD6	; 214
    1c34:	9f 4f       	sbci	r25, 0xFF	; 255
    1c36:	fc 01       	movw	r30, r24
    1c38:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__tablejump2__>
		case 0:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1c5c:	9a c0       	rjmp	.+308    	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		case 1:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1c7e:	89 c0       	rjmp	.+274    	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		case 2:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1ca0:	78 c0       	rjmp	.+240    	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		case 3:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	61 e0       	ldi	r22, 0x01	; 1
    1cae:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1cc2:	67 c0       	rjmp	.+206    	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		case 4:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1ce4:	56 c0       	rjmp	.+172    	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		case 5:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	61 e0       	ldi	r22, 0x01	; 1
    1cea:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1d06:	45 c0       	rjmp	.+138    	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		case 6:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	61 e0       	ldi	r22, 0x01	; 1
    1d14:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	61 e0       	ldi	r22, 0x01	; 1
    1d1c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1d20:	8c 81       	ldd	r24, Y+4	; 0x04
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1d28:	34 c0       	rjmp	.+104    	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		case 7:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1d4a:	23 c0       	rjmp	.+70     	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		case 8:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    1d64:	8c 81       	ldd	r24, Y+4	; 0x04
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1d6c:	12 c0       	rjmp	.+36     	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		case 9:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    1d86:	8c 81       	ldd	r24, Y+4	; 0x04
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <Bcd_7segWriteNum+0x19a>
		default:
			break;
    1d90:	00 00       	nop
	}
}
    1d92:	00 00       	nop
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	08 95       	ret

00001da4 <Bcd_MPX_2Enable>:

void Bcd_MPX_2Enable(MPX_2_Enables CopyPinsEnable, u8 CopyCommonType, u8 CopyStatus)
{
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <Bcd_MPX_2Enable+0x6>
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <Bcd_MPX_2Enable+0x8>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	6b 83       	std	Y+3, r22	; 0x03
    1db6:	4c 83       	std	Y+4, r20	; 0x04
	if(CopyStatus == Enable){
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	d1 f4       	brne	.+52     	; 0x1df2 <Bcd_MPX_2Enable+0x4e>
		switch (CopyCommonType) {
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	61 f0       	breq	.+24     	; 0x1de0 <Bcd_MPX_2Enable+0x3c>
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	09 f0       	breq	.+2      	; 0x1dce <Bcd_MPX_2Enable+0x2a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
				break;
			default:
				break;
    1dcc:	2f c0       	rjmp	.+94     	; 0x1e2c <Bcd_MPX_2Enable+0x88>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1dde:	26 c0       	rjmp	.+76     	; 0x1e2c <Bcd_MPX_2Enable+0x88>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1df0:	1d c0       	rjmp	.+58     	; 0x1e2c <Bcd_MPX_2Enable+0x88>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable){
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	88 23       	and	r24, r24
    1df6:	d1 f4       	brne	.+52     	; 0x1e2c <Bcd_MPX_2Enable+0x88>
		switch (CopyCommonType) {
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	61 f0       	breq	.+24     	; 0x1e1a <Bcd_MPX_2Enable+0x76>
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <Bcd_MPX_2Enable+0x64>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
				break;
			default:
				break;
    1e06:	12 c0       	rjmp	.+36     	; 0x1e2c <Bcd_MPX_2Enable+0x88>
	}
	else if (CopyStatus == Disable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <Bcd_MPX_2Enable+0x88>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1e2a:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    1e2c:	00 00       	nop
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	08 95       	ret

00001e3c <Bcd_MPX_4Enable>:
void Bcd_MPX_4Enable(MPX_4_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <Bcd_MPX_4Enable+0x6>
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <Bcd_MPX_4Enable+0x8>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <Bcd_MPX_4Enable+0xa>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	69 83       	std	Y+1, r22	; 0x01
    1e4c:	7a 83       	std	Y+2, r23	; 0x02
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	4d 83       	std	Y+5, r20	; 0x05
    1e54:	2e 83       	std	Y+6, r18	; 0x06
	if(CopyStatus == Enable){
    1e56:	8e 81       	ldd	r24, Y+6	; 0x06
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	51 f5       	brne	.+84     	; 0x1eb0 <Bcd_MPX_4Enable+0x74>
		switch (CopyCommonType) {
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	a1 f0       	breq	.+40     	; 0x1e8e <Bcd_MPX_4Enable+0x52>
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <Bcd_MPX_4Enable+0x30>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				break;
			default:
				break;
    1e6a:	4f c0       	rjmp	.+158    	; 0x1f0a <Bcd_MPX_4Enable+0xce>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	61 e0       	ldi	r22, 0x01	; 1
    1e70:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    1e84:	8c 81       	ldd	r24, Y+4	; 0x04
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1e8c:	3e c0       	rjmp	.+124    	; 0x1f0a <Bcd_MPX_4Enable+0xce>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1eae:	2d c0       	rjmp	.+90     	; 0x1f0a <Bcd_MPX_4Enable+0xce>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    1eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb2:	88 23       	and	r24, r24
    1eb4:	51 f5       	brne	.+84     	; 0x1f0a <Bcd_MPX_4Enable+0xce>
	{
		switch (CopyCommonType) {
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	a1 f0       	breq	.+40     	; 0x1ee8 <Bcd_MPX_4Enable+0xac>
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <Bcd_MPX_4Enable+0x8a>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				break;
			default:
				break;
    1ec4:	22 c0       	rjmp	.+68     	; 0x1f0a <Bcd_MPX_4Enable+0xce>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1ee6:	11 c0       	rjmp	.+34     	; 0x1f0a <Bcd_MPX_4Enable+0xce>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	61 e0       	ldi	r22, 0x01	; 1
    1f04:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1f08:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    1f0a:	00 00       	nop
    1f0c:	26 96       	adiw	r28, 0x06	; 6
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	08 95       	ret

00001f1e <Bcd_MPX_6Enable>:
void Bcd_MPX_6Enable(MPX_6_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    1f1e:	0f 93       	push	r16
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	28 97       	sbiw	r28, 0x08	; 8
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	49 83       	std	Y+1, r20	; 0x01
    1f36:	5a 83       	std	Y+2, r21	; 0x02
    1f38:	6b 83       	std	Y+3, r22	; 0x03
    1f3a:	7c 83       	std	Y+4, r23	; 0x04
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	2f 83       	std	Y+7, r18	; 0x07
    1f42:	08 87       	std	Y+8, r16	; 0x08
	if(CopyStatus == Enable){
    1f44:	88 85       	ldd	r24, Y+8	; 0x08
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	d1 f5       	brne	.+116    	; 0x1fbe <Bcd_MPX_6Enable+0xa0>
		switch (CopyCommonType) {
    1f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	e1 f0       	breq	.+56     	; 0x1f8c <Bcd_MPX_6Enable+0x6e>
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <Bcd_MPX_6Enable+0x3c>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				break;
			default:
				break;
    1f58:	6f c0       	rjmp	.+222    	; 0x2038 <Bcd_MPX_6Enable+0x11a>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
    1f5e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	61 e0       	ldi	r22, 0x01	; 1
    1f66:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	61 e0       	ldi	r22, 0x01	; 1
    1f6e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    1f72:	8c 81       	ldd	r24, Y+4	; 0x04
    1f74:	61 e0       	ldi	r22, 0x01	; 1
    1f76:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	61 e0       	ldi	r22, 0x01	; 1
    1f7e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    1f82:	8e 81       	ldd	r24, Y+6	; 0x06
    1f84:	61 e0       	ldi	r22, 0x01	; 1
    1f86:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1f8a:	56 c0       	rjmp	.+172    	; 0x2038 <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    1fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    1fac:	8d 81       	ldd	r24, Y+5	; 0x05
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    1fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1fbc:	3d c0       	rjmp	.+122    	; 0x2038 <Bcd_MPX_6Enable+0x11a>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    1fbe:	88 85       	ldd	r24, Y+8	; 0x08
    1fc0:	88 23       	and	r24, r24
    1fc2:	d1 f5       	brne	.+116    	; 0x2038 <Bcd_MPX_6Enable+0x11a>
	{
		switch (CopyCommonType) {
    1fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	e1 f0       	breq	.+56     	; 0x2006 <Bcd_MPX_6Enable+0xe8>
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <Bcd_MPX_6Enable+0xb6>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				break;
			default:
				break;
    1fd2:	32 c0       	rjmp	.+100    	; 0x2038 <Bcd_MPX_6Enable+0x11a>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    1ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    2004:	19 c0       	rjmp	.+50     	; 0x2038 <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	61 e0       	ldi	r22, 0x01	; 1
    200a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	61 e0       	ldi	r22, 0x01	; 1
    2012:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	61 e0       	ldi	r22, 0x01	; 1
    201a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    201e:	8c 81       	ldd	r24, Y+4	; 0x04
    2020:	61 e0       	ldi	r22, 0x01	; 1
    2022:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    2026:	8d 81       	ldd	r24, Y+5	; 0x05
    2028:	61 e0       	ldi	r22, 0x01	; 1
    202a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    202e:	8e 81       	ldd	r24, Y+6	; 0x06
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    2036:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    2038:	00 00       	nop
    203a:	28 96       	adiw	r28, 0x08	; 8
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	0f 91       	pop	r16
    204c:	08 95       	ret

0000204e <Bcd_MPX_8Enable>:
void Bcd_MPX_8Enable(MPX_8_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    204e:	ef 92       	push	r14
    2050:	0f 93       	push	r16
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	2a 97       	sbiw	r28, 0x0a	; 10
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	29 83       	std	Y+1, r18	; 0x01
    2068:	3a 83       	std	Y+2, r19	; 0x02
    206a:	4b 83       	std	Y+3, r20	; 0x03
    206c:	5c 83       	std	Y+4, r21	; 0x04
    206e:	6d 83       	std	Y+5, r22	; 0x05
    2070:	7e 83       	std	Y+6, r23	; 0x06
    2072:	8f 83       	std	Y+7, r24	; 0x07
    2074:	98 87       	std	Y+8, r25	; 0x08
    2076:	09 87       	std	Y+9, r16	; 0x09
    2078:	ea 86       	std	Y+10, r14	; 0x0a
	if(CopyStatus == Enable){
    207a:	8a 85       	ldd	r24, Y+10	; 0x0a
    207c:	81 30       	cpi	r24, 0x01	; 1
    207e:	09 f0       	breq	.+2      	; 0x2082 <Bcd_MPX_8Enable+0x34>
    2080:	4a c0       	rjmp	.+148    	; 0x2116 <Bcd_MPX_8Enable+0xc8>
		switch (CopyCommonType) {
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	21 f1       	breq	.+72     	; 0x20d4 <Bcd_MPX_8Enable+0x86>
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	09 f0       	breq	.+2      	; 0x2092 <Bcd_MPX_8Enable+0x44>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
				break;
			default:
				break;
    2090:	90 c0       	rjmp	.+288    	; 0x21b2 <Bcd_MPX_8Enable+0x164>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	61 e0       	ldi	r22, 0x01	; 1
    209e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	61 e0       	ldi	r22, 0x01	; 1
    20a6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    20ba:	8e 81       	ldd	r24, Y+6	; 0x06
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
    20c2:	8f 81       	ldd	r24, Y+7	; 0x07
    20c4:	61 e0       	ldi	r22, 0x01	; 1
    20c6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
    20ca:	88 85       	ldd	r24, Y+8	; 0x08
    20cc:	61 e0       	ldi	r22, 0x01	; 1
    20ce:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    20d2:	6f c0       	rjmp	.+222    	; 0x21b2 <Bcd_MPX_8Enable+0x164>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    20fc:	8e 81       	ldd	r24, Y+6	; 0x06
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
    2104:	8f 81       	ldd	r24, Y+7	; 0x07
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
    210c:	88 85       	ldd	r24, Y+8	; 0x08
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    2114:	4e c0       	rjmp	.+156    	; 0x21b2 <Bcd_MPX_8Enable+0x164>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    2116:	8a 85       	ldd	r24, Y+10	; 0x0a
    2118:	88 23       	and	r24, r24
    211a:	09 f0       	breq	.+2      	; 0x211e <Bcd_MPX_8Enable+0xd0>
    211c:	4a c0       	rjmp	.+148    	; 0x21b2 <Bcd_MPX_8Enable+0x164>
	{
		switch (CopyCommonType) {
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	21 f1       	breq	.+72     	; 0x2170 <Bcd_MPX_8Enable+0x122>
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	09 f0       	breq	.+2      	; 0x212e <Bcd_MPX_8Enable+0xe0>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
				break;
			default:
				break;
    212c:	42 c0       	rjmp	.+132    	; 0x21b2 <Bcd_MPX_8Enable+0x164>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    2156:	8e 81       	ldd	r24, Y+6	; 0x06
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
    215e:	8f 81       	ldd	r24, Y+7	; 0x07
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
    2166:	88 85       	ldd	r24, Y+8	; 0x08
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    216e:	21 c0       	rjmp	.+66     	; 0x21b2 <Bcd_MPX_8Enable+0x164>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    2190:	8d 81       	ldd	r24, Y+5	; 0x05
    2192:	61 e0       	ldi	r22, 0x01	; 1
    2194:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    2198:	8e 81       	ldd	r24, Y+6	; 0x06
    219a:	61 e0       	ldi	r22, 0x01	; 1
    219c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
    21a0:	8f 81       	ldd	r24, Y+7	; 0x07
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
    21a8:	88 85       	ldd	r24, Y+8	; 0x08
    21aa:	61 e0       	ldi	r22, 0x01	; 1
    21ac:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    21b0:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    21b2:	00 00       	nop
    21b4:	2a 96       	adiw	r28, 0x0a	; 10
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	0f 91       	pop	r16
    21c6:	ef 90       	pop	r14
    21c8:	08 95       	ret

000021ca <main>:
/********** SECTION : Includes **********/
#include "Main_Init.h"

/********** SECTION : Main Function **********/
int main (void)
{
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    21d2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <App_Init>

	while(1)
	{
		App_Loop();
    21d6:	0e 94 92 0c 	call	0x1924	; 0x1924 <App_Loop>
	}
    21da:	fd cf       	rjmp	.-6      	; 0x21d6 <main+0xc>

000021dc <__tablejump2__>:
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	05 90       	lpm	r0, Z+
    21e2:	f4 91       	lpm	r31, Z
    21e4:	e0 2d       	mov	r30, r0
    21e6:	09 94       	ijmp

000021e8 <__cmpsf2>:
    21e8:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fp_cmp>
    21ec:	08 f4       	brcc	.+2      	; 0x21f0 <__cmpsf2+0x8>
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	08 95       	ret

000021f2 <__divsf3>:
    21f2:	0e 94 0d 11 	call	0x221a	; 0x221a <__divsf3x>
    21f6:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_round>
    21fa:	0e 94 ce 11 	call	0x239c	; 0x239c <__fp_pscB>
    21fe:	58 f0       	brcs	.+22     	; 0x2216 <__divsf3+0x24>
    2200:	0e 94 c7 11 	call	0x238e	; 0x238e <__fp_pscA>
    2204:	40 f0       	brcs	.+16     	; 0x2216 <__divsf3+0x24>
    2206:	29 f4       	brne	.+10     	; 0x2212 <__divsf3+0x20>
    2208:	5f 3f       	cpi	r21, 0xFF	; 255
    220a:	29 f0       	breq	.+10     	; 0x2216 <__divsf3+0x24>
    220c:	0c 94 be 11 	jmp	0x237c	; 0x237c <__fp_inf>
    2210:	51 11       	cpse	r21, r1
    2212:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__fp_szero>
    2216:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__fp_nan>

0000221a <__divsf3x>:
    221a:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fp_split3>
    221e:	68 f3       	brcs	.-38     	; 0x21fa <__divsf3+0x8>

00002220 <__divsf3_pse>:
    2220:	99 23       	and	r25, r25
    2222:	b1 f3       	breq	.-20     	; 0x2210 <__divsf3+0x1e>
    2224:	55 23       	and	r21, r21
    2226:	91 f3       	breq	.-28     	; 0x220c <__divsf3+0x1a>
    2228:	95 1b       	sub	r25, r21
    222a:	55 0b       	sbc	r21, r21
    222c:	bb 27       	eor	r27, r27
    222e:	aa 27       	eor	r26, r26
    2230:	62 17       	cp	r22, r18
    2232:	73 07       	cpc	r23, r19
    2234:	84 07       	cpc	r24, r20
    2236:	38 f0       	brcs	.+14     	; 0x2246 <__divsf3_pse+0x26>
    2238:	9f 5f       	subi	r25, 0xFF	; 255
    223a:	5f 4f       	sbci	r21, 0xFF	; 255
    223c:	22 0f       	add	r18, r18
    223e:	33 1f       	adc	r19, r19
    2240:	44 1f       	adc	r20, r20
    2242:	aa 1f       	adc	r26, r26
    2244:	a9 f3       	breq	.-22     	; 0x2230 <__divsf3_pse+0x10>
    2246:	35 d0       	rcall	.+106    	; 0x22b2 <__divsf3_pse+0x92>
    2248:	0e 2e       	mov	r0, r30
    224a:	3a f0       	brmi	.+14     	; 0x225a <__divsf3_pse+0x3a>
    224c:	e0 e8       	ldi	r30, 0x80	; 128
    224e:	32 d0       	rcall	.+100    	; 0x22b4 <__divsf3_pse+0x94>
    2250:	91 50       	subi	r25, 0x01	; 1
    2252:	50 40       	sbci	r21, 0x00	; 0
    2254:	e6 95       	lsr	r30
    2256:	00 1c       	adc	r0, r0
    2258:	ca f7       	brpl	.-14     	; 0x224c <__divsf3_pse+0x2c>
    225a:	2b d0       	rcall	.+86     	; 0x22b2 <__divsf3_pse+0x92>
    225c:	fe 2f       	mov	r31, r30
    225e:	29 d0       	rcall	.+82     	; 0x22b2 <__divsf3_pse+0x92>
    2260:	66 0f       	add	r22, r22
    2262:	77 1f       	adc	r23, r23
    2264:	88 1f       	adc	r24, r24
    2266:	bb 1f       	adc	r27, r27
    2268:	26 17       	cp	r18, r22
    226a:	37 07       	cpc	r19, r23
    226c:	48 07       	cpc	r20, r24
    226e:	ab 07       	cpc	r26, r27
    2270:	b0 e8       	ldi	r27, 0x80	; 128
    2272:	09 f0       	breq	.+2      	; 0x2276 <__divsf3_pse+0x56>
    2274:	bb 0b       	sbc	r27, r27
    2276:	80 2d       	mov	r24, r0
    2278:	bf 01       	movw	r22, r30
    227a:	ff 27       	eor	r31, r31
    227c:	93 58       	subi	r25, 0x83	; 131
    227e:	5f 4f       	sbci	r21, 0xFF	; 255
    2280:	3a f0       	brmi	.+14     	; 0x2290 <__divsf3_pse+0x70>
    2282:	9e 3f       	cpi	r25, 0xFE	; 254
    2284:	51 05       	cpc	r21, r1
    2286:	78 f0       	brcs	.+30     	; 0x22a6 <__divsf3_pse+0x86>
    2288:	0c 94 be 11 	jmp	0x237c	; 0x237c <__fp_inf>
    228c:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__fp_szero>
    2290:	5f 3f       	cpi	r21, 0xFF	; 255
    2292:	e4 f3       	brlt	.-8      	; 0x228c <__divsf3_pse+0x6c>
    2294:	98 3e       	cpi	r25, 0xE8	; 232
    2296:	d4 f3       	brlt	.-12     	; 0x228c <__divsf3_pse+0x6c>
    2298:	86 95       	lsr	r24
    229a:	77 95       	ror	r23
    229c:	67 95       	ror	r22
    229e:	b7 95       	ror	r27
    22a0:	f7 95       	ror	r31
    22a2:	9f 5f       	subi	r25, 0xFF	; 255
    22a4:	c9 f7       	brne	.-14     	; 0x2298 <__divsf3_pse+0x78>
    22a6:	88 0f       	add	r24, r24
    22a8:	91 1d       	adc	r25, r1
    22aa:	96 95       	lsr	r25
    22ac:	87 95       	ror	r24
    22ae:	97 f9       	bld	r25, 7
    22b0:	08 95       	ret
    22b2:	e1 e0       	ldi	r30, 0x01	; 1
    22b4:	66 0f       	add	r22, r22
    22b6:	77 1f       	adc	r23, r23
    22b8:	88 1f       	adc	r24, r24
    22ba:	bb 1f       	adc	r27, r27
    22bc:	62 17       	cp	r22, r18
    22be:	73 07       	cpc	r23, r19
    22c0:	84 07       	cpc	r24, r20
    22c2:	ba 07       	cpc	r27, r26
    22c4:	20 f0       	brcs	.+8      	; 0x22ce <__divsf3_pse+0xae>
    22c6:	62 1b       	sub	r22, r18
    22c8:	73 0b       	sbc	r23, r19
    22ca:	84 0b       	sbc	r24, r20
    22cc:	ba 0b       	sbc	r27, r26
    22ce:	ee 1f       	adc	r30, r30
    22d0:	88 f7       	brcc	.-30     	; 0x22b4 <__divsf3_pse+0x94>
    22d2:	e0 95       	com	r30
    22d4:	08 95       	ret

000022d6 <__fixunssfsi>:
    22d6:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__fp_splitA>
    22da:	88 f0       	brcs	.+34     	; 0x22fe <__fixunssfsi+0x28>
    22dc:	9f 57       	subi	r25, 0x7F	; 127
    22de:	98 f0       	brcs	.+38     	; 0x2306 <__fixunssfsi+0x30>
    22e0:	b9 2f       	mov	r27, r25
    22e2:	99 27       	eor	r25, r25
    22e4:	b7 51       	subi	r27, 0x17	; 23
    22e6:	b0 f0       	brcs	.+44     	; 0x2314 <__fixunssfsi+0x3e>
    22e8:	e1 f0       	breq	.+56     	; 0x2322 <__fixunssfsi+0x4c>
    22ea:	66 0f       	add	r22, r22
    22ec:	77 1f       	adc	r23, r23
    22ee:	88 1f       	adc	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	1a f0       	brmi	.+6      	; 0x22fa <__fixunssfsi+0x24>
    22f4:	ba 95       	dec	r27
    22f6:	c9 f7       	brne	.-14     	; 0x22ea <__fixunssfsi+0x14>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <__fixunssfsi+0x4c>
    22fa:	b1 30       	cpi	r27, 0x01	; 1
    22fc:	91 f0       	breq	.+36     	; 0x2322 <__fixunssfsi+0x4c>
    22fe:	0e 94 08 12 	call	0x2410	; 0x2410 <__fp_zero>
    2302:	b1 e0       	ldi	r27, 0x01	; 1
    2304:	08 95       	ret
    2306:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__fp_zero>
    230a:	67 2f       	mov	r22, r23
    230c:	78 2f       	mov	r23, r24
    230e:	88 27       	eor	r24, r24
    2310:	b8 5f       	subi	r27, 0xF8	; 248
    2312:	39 f0       	breq	.+14     	; 0x2322 <__fixunssfsi+0x4c>
    2314:	b9 3f       	cpi	r27, 0xF9	; 249
    2316:	cc f3       	brlt	.-14     	; 0x230a <__fixunssfsi+0x34>
    2318:	86 95       	lsr	r24
    231a:	77 95       	ror	r23
    231c:	67 95       	ror	r22
    231e:	b3 95       	inc	r27
    2320:	d9 f7       	brne	.-10     	; 0x2318 <__fixunssfsi+0x42>
    2322:	3e f4       	brtc	.+14     	; 0x2332 <__fixunssfsi+0x5c>
    2324:	90 95       	com	r25
    2326:	80 95       	com	r24
    2328:	70 95       	com	r23
    232a:	61 95       	neg	r22
    232c:	7f 4f       	sbci	r23, 0xFF	; 255
    232e:	8f 4f       	sbci	r24, 0xFF	; 255
    2330:	9f 4f       	sbci	r25, 0xFF	; 255
    2332:	08 95       	ret

00002334 <__fp_cmp>:
    2334:	99 0f       	add	r25, r25
    2336:	00 08       	sbc	r0, r0
    2338:	55 0f       	add	r21, r21
    233a:	aa 0b       	sbc	r26, r26
    233c:	e0 e8       	ldi	r30, 0x80	; 128
    233e:	fe ef       	ldi	r31, 0xFE	; 254
    2340:	16 16       	cp	r1, r22
    2342:	17 06       	cpc	r1, r23
    2344:	e8 07       	cpc	r30, r24
    2346:	f9 07       	cpc	r31, r25
    2348:	c0 f0       	brcs	.+48     	; 0x237a <__fp_cmp+0x46>
    234a:	12 16       	cp	r1, r18
    234c:	13 06       	cpc	r1, r19
    234e:	e4 07       	cpc	r30, r20
    2350:	f5 07       	cpc	r31, r21
    2352:	98 f0       	brcs	.+38     	; 0x237a <__fp_cmp+0x46>
    2354:	62 1b       	sub	r22, r18
    2356:	73 0b       	sbc	r23, r19
    2358:	84 0b       	sbc	r24, r20
    235a:	95 0b       	sbc	r25, r21
    235c:	39 f4       	brne	.+14     	; 0x236c <__fp_cmp+0x38>
    235e:	0a 26       	eor	r0, r26
    2360:	61 f0       	breq	.+24     	; 0x237a <__fp_cmp+0x46>
    2362:	23 2b       	or	r18, r19
    2364:	24 2b       	or	r18, r20
    2366:	25 2b       	or	r18, r21
    2368:	21 f4       	brne	.+8      	; 0x2372 <__fp_cmp+0x3e>
    236a:	08 95       	ret
    236c:	0a 26       	eor	r0, r26
    236e:	09 f4       	brne	.+2      	; 0x2372 <__fp_cmp+0x3e>
    2370:	a1 40       	sbci	r26, 0x01	; 1
    2372:	a6 95       	lsr	r26
    2374:	8f ef       	ldi	r24, 0xFF	; 255
    2376:	81 1d       	adc	r24, r1
    2378:	81 1d       	adc	r24, r1
    237a:	08 95       	ret

0000237c <__fp_inf>:
    237c:	97 f9       	bld	r25, 7
    237e:	9f 67       	ori	r25, 0x7F	; 127
    2380:	80 e8       	ldi	r24, 0x80	; 128
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	08 95       	ret

00002388 <__fp_nan>:
    2388:	9f ef       	ldi	r25, 0xFF	; 255
    238a:	80 ec       	ldi	r24, 0xC0	; 192
    238c:	08 95       	ret

0000238e <__fp_pscA>:
    238e:	00 24       	eor	r0, r0
    2390:	0a 94       	dec	r0
    2392:	16 16       	cp	r1, r22
    2394:	17 06       	cpc	r1, r23
    2396:	18 06       	cpc	r1, r24
    2398:	09 06       	cpc	r0, r25
    239a:	08 95       	ret

0000239c <__fp_pscB>:
    239c:	00 24       	eor	r0, r0
    239e:	0a 94       	dec	r0
    23a0:	12 16       	cp	r1, r18
    23a2:	13 06       	cpc	r1, r19
    23a4:	14 06       	cpc	r1, r20
    23a6:	05 06       	cpc	r0, r21
    23a8:	08 95       	ret

000023aa <__fp_round>:
    23aa:	09 2e       	mov	r0, r25
    23ac:	03 94       	inc	r0
    23ae:	00 0c       	add	r0, r0
    23b0:	11 f4       	brne	.+4      	; 0x23b6 <__fp_round+0xc>
    23b2:	88 23       	and	r24, r24
    23b4:	52 f0       	brmi	.+20     	; 0x23ca <__fp_round+0x20>
    23b6:	bb 0f       	add	r27, r27
    23b8:	40 f4       	brcc	.+16     	; 0x23ca <__fp_round+0x20>
    23ba:	bf 2b       	or	r27, r31
    23bc:	11 f4       	brne	.+4      	; 0x23c2 <__fp_round+0x18>
    23be:	60 ff       	sbrs	r22, 0
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <__fp_round+0x20>
    23c2:	6f 5f       	subi	r22, 0xFF	; 255
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	8f 4f       	sbci	r24, 0xFF	; 255
    23c8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ca:	08 95       	ret

000023cc <__fp_split3>:
    23cc:	57 fd       	sbrc	r21, 7
    23ce:	90 58       	subi	r25, 0x80	; 128
    23d0:	44 0f       	add	r20, r20
    23d2:	55 1f       	adc	r21, r21
    23d4:	59 f0       	breq	.+22     	; 0x23ec <__fp_splitA+0x10>
    23d6:	5f 3f       	cpi	r21, 0xFF	; 255
    23d8:	71 f0       	breq	.+28     	; 0x23f6 <__fp_splitA+0x1a>
    23da:	47 95       	ror	r20

000023dc <__fp_splitA>:
    23dc:	88 0f       	add	r24, r24
    23de:	97 fb       	bst	r25, 7
    23e0:	99 1f       	adc	r25, r25
    23e2:	61 f0       	breq	.+24     	; 0x23fc <__fp_splitA+0x20>
    23e4:	9f 3f       	cpi	r25, 0xFF	; 255
    23e6:	79 f0       	breq	.+30     	; 0x2406 <__fp_splitA+0x2a>
    23e8:	87 95       	ror	r24
    23ea:	08 95       	ret
    23ec:	12 16       	cp	r1, r18
    23ee:	13 06       	cpc	r1, r19
    23f0:	14 06       	cpc	r1, r20
    23f2:	55 1f       	adc	r21, r21
    23f4:	f2 cf       	rjmp	.-28     	; 0x23da <__fp_split3+0xe>
    23f6:	46 95       	lsr	r20
    23f8:	f1 df       	rcall	.-30     	; 0x23dc <__fp_splitA>
    23fa:	08 c0       	rjmp	.+16     	; 0x240c <__fp_splitA+0x30>
    23fc:	16 16       	cp	r1, r22
    23fe:	17 06       	cpc	r1, r23
    2400:	18 06       	cpc	r1, r24
    2402:	99 1f       	adc	r25, r25
    2404:	f1 cf       	rjmp	.-30     	; 0x23e8 <__fp_splitA+0xc>
    2406:	86 95       	lsr	r24
    2408:	71 05       	cpc	r23, r1
    240a:	61 05       	cpc	r22, r1
    240c:	08 94       	sec
    240e:	08 95       	ret

00002410 <__fp_zero>:
    2410:	e8 94       	clt

00002412 <__fp_szero>:
    2412:	bb 27       	eor	r27, r27
    2414:	66 27       	eor	r22, r22
    2416:	77 27       	eor	r23, r23
    2418:	cb 01       	movw	r24, r22
    241a:	97 f9       	bld	r25, 7
    241c:	08 95       	ret

0000241e <__gesf2>:
    241e:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fp_cmp>
    2422:	08 f4       	brcc	.+2      	; 0x2426 <__gesf2+0x8>
    2424:	8f ef       	ldi	r24, 0xFF	; 255
    2426:	08 95       	ret

00002428 <__mulsf3>:
    2428:	0e 94 27 12 	call	0x244e	; 0x244e <__mulsf3x>
    242c:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_round>
    2430:	0e 94 c7 11 	call	0x238e	; 0x238e <__fp_pscA>
    2434:	38 f0       	brcs	.+14     	; 0x2444 <__mulsf3+0x1c>
    2436:	0e 94 ce 11 	call	0x239c	; 0x239c <__fp_pscB>
    243a:	20 f0       	brcs	.+8      	; 0x2444 <__mulsf3+0x1c>
    243c:	95 23       	and	r25, r21
    243e:	11 f0       	breq	.+4      	; 0x2444 <__mulsf3+0x1c>
    2440:	0c 94 be 11 	jmp	0x237c	; 0x237c <__fp_inf>
    2444:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__fp_nan>
    2448:	11 24       	eor	r1, r1
    244a:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__fp_szero>

0000244e <__mulsf3x>:
    244e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fp_split3>
    2452:	70 f3       	brcs	.-36     	; 0x2430 <__mulsf3+0x8>

00002454 <__mulsf3_pse>:
    2454:	95 9f       	mul	r25, r21
    2456:	c1 f3       	breq	.-16     	; 0x2448 <__mulsf3+0x20>
    2458:	95 0f       	add	r25, r21
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	55 1f       	adc	r21, r21
    245e:	62 9f       	mul	r22, r18
    2460:	f0 01       	movw	r30, r0
    2462:	72 9f       	mul	r23, r18
    2464:	bb 27       	eor	r27, r27
    2466:	f0 0d       	add	r31, r0
    2468:	b1 1d       	adc	r27, r1
    246a:	63 9f       	mul	r22, r19
    246c:	aa 27       	eor	r26, r26
    246e:	f0 0d       	add	r31, r0
    2470:	b1 1d       	adc	r27, r1
    2472:	aa 1f       	adc	r26, r26
    2474:	64 9f       	mul	r22, r20
    2476:	66 27       	eor	r22, r22
    2478:	b0 0d       	add	r27, r0
    247a:	a1 1d       	adc	r26, r1
    247c:	66 1f       	adc	r22, r22
    247e:	82 9f       	mul	r24, r18
    2480:	22 27       	eor	r18, r18
    2482:	b0 0d       	add	r27, r0
    2484:	a1 1d       	adc	r26, r1
    2486:	62 1f       	adc	r22, r18
    2488:	73 9f       	mul	r23, r19
    248a:	b0 0d       	add	r27, r0
    248c:	a1 1d       	adc	r26, r1
    248e:	62 1f       	adc	r22, r18
    2490:	83 9f       	mul	r24, r19
    2492:	a0 0d       	add	r26, r0
    2494:	61 1d       	adc	r22, r1
    2496:	22 1f       	adc	r18, r18
    2498:	74 9f       	mul	r23, r20
    249a:	33 27       	eor	r19, r19
    249c:	a0 0d       	add	r26, r0
    249e:	61 1d       	adc	r22, r1
    24a0:	23 1f       	adc	r18, r19
    24a2:	84 9f       	mul	r24, r20
    24a4:	60 0d       	add	r22, r0
    24a6:	21 1d       	adc	r18, r1
    24a8:	82 2f       	mov	r24, r18
    24aa:	76 2f       	mov	r23, r22
    24ac:	6a 2f       	mov	r22, r26
    24ae:	11 24       	eor	r1, r1
    24b0:	9f 57       	subi	r25, 0x7F	; 127
    24b2:	50 40       	sbci	r21, 0x00	; 0
    24b4:	9a f0       	brmi	.+38     	; 0x24dc <__mulsf3_pse+0x88>
    24b6:	f1 f0       	breq	.+60     	; 0x24f4 <__mulsf3_pse+0xa0>
    24b8:	88 23       	and	r24, r24
    24ba:	4a f0       	brmi	.+18     	; 0x24ce <__mulsf3_pse+0x7a>
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	bb 1f       	adc	r27, r27
    24c2:	66 1f       	adc	r22, r22
    24c4:	77 1f       	adc	r23, r23
    24c6:	88 1f       	adc	r24, r24
    24c8:	91 50       	subi	r25, 0x01	; 1
    24ca:	50 40       	sbci	r21, 0x00	; 0
    24cc:	a9 f7       	brne	.-22     	; 0x24b8 <__mulsf3_pse+0x64>
    24ce:	9e 3f       	cpi	r25, 0xFE	; 254
    24d0:	51 05       	cpc	r21, r1
    24d2:	80 f0       	brcs	.+32     	; 0x24f4 <__mulsf3_pse+0xa0>
    24d4:	0c 94 be 11 	jmp	0x237c	; 0x237c <__fp_inf>
    24d8:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__fp_szero>
    24dc:	5f 3f       	cpi	r21, 0xFF	; 255
    24de:	e4 f3       	brlt	.-8      	; 0x24d8 <__mulsf3_pse+0x84>
    24e0:	98 3e       	cpi	r25, 0xE8	; 232
    24e2:	d4 f3       	brlt	.-12     	; 0x24d8 <__mulsf3_pse+0x84>
    24e4:	86 95       	lsr	r24
    24e6:	77 95       	ror	r23
    24e8:	67 95       	ror	r22
    24ea:	b7 95       	ror	r27
    24ec:	f7 95       	ror	r31
    24ee:	e7 95       	ror	r30
    24f0:	9f 5f       	subi	r25, 0xFF	; 255
    24f2:	c1 f7       	brne	.-16     	; 0x24e4 <__mulsf3_pse+0x90>
    24f4:	fe 2b       	or	r31, r30
    24f6:	88 0f       	add	r24, r24
    24f8:	91 1d       	adc	r25, r1
    24fa:	96 95       	lsr	r25
    24fc:	87 95       	ror	r24
    24fe:	97 f9       	bld	r25, 7
    2500:	08 95       	ret

00002502 <memset>:
    2502:	dc 01       	movw	r26, r24
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <memset+0x6>
    2506:	6d 93       	st	X+, r22
    2508:	41 50       	subi	r20, 0x01	; 1
    250a:	50 40       	sbci	r21, 0x00	; 0
    250c:	e0 f7       	brcc	.-8      	; 0x2506 <memset+0x4>
    250e:	08 95       	ret

00002510 <sprintf>:
    2510:	ae e0       	ldi	r26, 0x0E	; 14
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ee e8       	ldi	r30, 0x8E	; 142
    2516:	f2 e1       	ldi	r31, 0x12	; 18
    2518:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__+0x1c>
    251c:	0d 89       	ldd	r16, Y+21	; 0x15
    251e:	1e 89       	ldd	r17, Y+22	; 0x16
    2520:	86 e0       	ldi	r24, 0x06	; 6
    2522:	8c 83       	std	Y+4, r24	; 0x04
    2524:	1a 83       	std	Y+2, r17	; 0x02
    2526:	09 83       	std	Y+1, r16	; 0x01
    2528:	8f ef       	ldi	r24, 0xFF	; 255
    252a:	9f e7       	ldi	r25, 0x7F	; 127
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	ae 01       	movw	r20, r28
    2532:	47 5e       	subi	r20, 0xE7	; 231
    2534:	5f 4f       	sbci	r21, 0xFF	; 255
    2536:	6f 89       	ldd	r22, Y+23	; 0x17
    2538:	78 8d       	ldd	r23, Y+24	; 0x18
    253a:	ce 01       	movw	r24, r28
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	0e 94 aa 12 	call	0x2554	; 0x2554 <vfprintf>
    2542:	ef 81       	ldd	r30, Y+7	; 0x07
    2544:	f8 85       	ldd	r31, Y+8	; 0x08
    2546:	e0 0f       	add	r30, r16
    2548:	f1 1f       	adc	r31, r17
    254a:	10 82       	st	Z, r1
    254c:	2e 96       	adiw	r28, 0x0e	; 14
    254e:	e4 e0       	ldi	r30, 0x04	; 4
    2550:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__+0x1c>

00002554 <vfprintf>:
    2554:	ab e0       	ldi	r26, 0x0B	; 11
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e0 eb       	ldi	r30, 0xB0	; 176
    255a:	f2 e1       	ldi	r31, 0x12	; 18
    255c:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__>
    2560:	6c 01       	movw	r12, r24
    2562:	7b 01       	movw	r14, r22
    2564:	8a 01       	movw	r16, r20
    2566:	fc 01       	movw	r30, r24
    2568:	17 82       	std	Z+7, r1	; 0x07
    256a:	16 82       	std	Z+6, r1	; 0x06
    256c:	83 81       	ldd	r24, Z+3	; 0x03
    256e:	81 ff       	sbrs	r24, 1
    2570:	cc c1       	rjmp	.+920    	; 0x290a <vfprintf+0x3b6>
    2572:	ce 01       	movw	r24, r28
    2574:	01 96       	adiw	r24, 0x01	; 1
    2576:	3c 01       	movw	r6, r24
    2578:	f6 01       	movw	r30, r12
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	f7 01       	movw	r30, r14
    257e:	93 fd       	sbrc	r25, 3
    2580:	85 91       	lpm	r24, Z+
    2582:	93 ff       	sbrs	r25, 3
    2584:	81 91       	ld	r24, Z+
    2586:	7f 01       	movw	r14, r30
    2588:	88 23       	and	r24, r24
    258a:	09 f4       	brne	.+2      	; 0x258e <vfprintf+0x3a>
    258c:	ba c1       	rjmp	.+884    	; 0x2902 <vfprintf+0x3ae>
    258e:	85 32       	cpi	r24, 0x25	; 37
    2590:	39 f4       	brne	.+14     	; 0x25a0 <vfprintf+0x4c>
    2592:	93 fd       	sbrc	r25, 3
    2594:	85 91       	lpm	r24, Z+
    2596:	93 ff       	sbrs	r25, 3
    2598:	81 91       	ld	r24, Z+
    259a:	7f 01       	movw	r14, r30
    259c:	85 32       	cpi	r24, 0x25	; 37
    259e:	29 f4       	brne	.+10     	; 0x25aa <vfprintf+0x56>
    25a0:	b6 01       	movw	r22, r12
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    25a8:	e7 cf       	rjmp	.-50     	; 0x2578 <vfprintf+0x24>
    25aa:	91 2c       	mov	r9, r1
    25ac:	21 2c       	mov	r2, r1
    25ae:	31 2c       	mov	r3, r1
    25b0:	ff e1       	ldi	r31, 0x1F	; 31
    25b2:	f3 15       	cp	r31, r3
    25b4:	d8 f0       	brcs	.+54     	; 0x25ec <vfprintf+0x98>
    25b6:	8b 32       	cpi	r24, 0x2B	; 43
    25b8:	79 f0       	breq	.+30     	; 0x25d8 <vfprintf+0x84>
    25ba:	38 f4       	brcc	.+14     	; 0x25ca <vfprintf+0x76>
    25bc:	80 32       	cpi	r24, 0x20	; 32
    25be:	79 f0       	breq	.+30     	; 0x25de <vfprintf+0x8a>
    25c0:	83 32       	cpi	r24, 0x23	; 35
    25c2:	a1 f4       	brne	.+40     	; 0x25ec <vfprintf+0x98>
    25c4:	23 2d       	mov	r18, r3
    25c6:	20 61       	ori	r18, 0x10	; 16
    25c8:	1d c0       	rjmp	.+58     	; 0x2604 <vfprintf+0xb0>
    25ca:	8d 32       	cpi	r24, 0x2D	; 45
    25cc:	61 f0       	breq	.+24     	; 0x25e6 <vfprintf+0x92>
    25ce:	80 33       	cpi	r24, 0x30	; 48
    25d0:	69 f4       	brne	.+26     	; 0x25ec <vfprintf+0x98>
    25d2:	23 2d       	mov	r18, r3
    25d4:	21 60       	ori	r18, 0x01	; 1
    25d6:	16 c0       	rjmp	.+44     	; 0x2604 <vfprintf+0xb0>
    25d8:	83 2d       	mov	r24, r3
    25da:	82 60       	ori	r24, 0x02	; 2
    25dc:	38 2e       	mov	r3, r24
    25de:	e3 2d       	mov	r30, r3
    25e0:	e4 60       	ori	r30, 0x04	; 4
    25e2:	3e 2e       	mov	r3, r30
    25e4:	2a c0       	rjmp	.+84     	; 0x263a <vfprintf+0xe6>
    25e6:	f3 2d       	mov	r31, r3
    25e8:	f8 60       	ori	r31, 0x08	; 8
    25ea:	1d c0       	rjmp	.+58     	; 0x2626 <vfprintf+0xd2>
    25ec:	37 fc       	sbrc	r3, 7
    25ee:	2d c0       	rjmp	.+90     	; 0x264a <vfprintf+0xf6>
    25f0:	20 ed       	ldi	r18, 0xD0	; 208
    25f2:	28 0f       	add	r18, r24
    25f4:	2a 30       	cpi	r18, 0x0A	; 10
    25f6:	40 f0       	brcs	.+16     	; 0x2608 <vfprintf+0xb4>
    25f8:	8e 32       	cpi	r24, 0x2E	; 46
    25fa:	b9 f4       	brne	.+46     	; 0x262a <vfprintf+0xd6>
    25fc:	36 fc       	sbrc	r3, 6
    25fe:	81 c1       	rjmp	.+770    	; 0x2902 <vfprintf+0x3ae>
    2600:	23 2d       	mov	r18, r3
    2602:	20 64       	ori	r18, 0x40	; 64
    2604:	32 2e       	mov	r3, r18
    2606:	19 c0       	rjmp	.+50     	; 0x263a <vfprintf+0xe6>
    2608:	36 fe       	sbrs	r3, 6
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <vfprintf+0xc4>
    260c:	8a e0       	ldi	r24, 0x0A	; 10
    260e:	98 9e       	mul	r9, r24
    2610:	20 0d       	add	r18, r0
    2612:	11 24       	eor	r1, r1
    2614:	92 2e       	mov	r9, r18
    2616:	11 c0       	rjmp	.+34     	; 0x263a <vfprintf+0xe6>
    2618:	ea e0       	ldi	r30, 0x0A	; 10
    261a:	2e 9e       	mul	r2, r30
    261c:	20 0d       	add	r18, r0
    261e:	11 24       	eor	r1, r1
    2620:	22 2e       	mov	r2, r18
    2622:	f3 2d       	mov	r31, r3
    2624:	f0 62       	ori	r31, 0x20	; 32
    2626:	3f 2e       	mov	r3, r31
    2628:	08 c0       	rjmp	.+16     	; 0x263a <vfprintf+0xe6>
    262a:	8c 36       	cpi	r24, 0x6C	; 108
    262c:	21 f4       	brne	.+8      	; 0x2636 <vfprintf+0xe2>
    262e:	83 2d       	mov	r24, r3
    2630:	80 68       	ori	r24, 0x80	; 128
    2632:	38 2e       	mov	r3, r24
    2634:	02 c0       	rjmp	.+4      	; 0x263a <vfprintf+0xe6>
    2636:	88 36       	cpi	r24, 0x68	; 104
    2638:	41 f4       	brne	.+16     	; 0x264a <vfprintf+0xf6>
    263a:	f7 01       	movw	r30, r14
    263c:	93 fd       	sbrc	r25, 3
    263e:	85 91       	lpm	r24, Z+
    2640:	93 ff       	sbrs	r25, 3
    2642:	81 91       	ld	r24, Z+
    2644:	7f 01       	movw	r14, r30
    2646:	81 11       	cpse	r24, r1
    2648:	b3 cf       	rjmp	.-154    	; 0x25b0 <vfprintf+0x5c>
    264a:	98 2f       	mov	r25, r24
    264c:	9f 7d       	andi	r25, 0xDF	; 223
    264e:	95 54       	subi	r25, 0x45	; 69
    2650:	93 30       	cpi	r25, 0x03	; 3
    2652:	28 f4       	brcc	.+10     	; 0x265e <vfprintf+0x10a>
    2654:	0c 5f       	subi	r16, 0xFC	; 252
    2656:	1f 4f       	sbci	r17, 0xFF	; 255
    2658:	9f e3       	ldi	r25, 0x3F	; 63
    265a:	99 83       	std	Y+1, r25	; 0x01
    265c:	0d c0       	rjmp	.+26     	; 0x2678 <vfprintf+0x124>
    265e:	83 36       	cpi	r24, 0x63	; 99
    2660:	31 f0       	breq	.+12     	; 0x266e <vfprintf+0x11a>
    2662:	83 37       	cpi	r24, 0x73	; 115
    2664:	71 f0       	breq	.+28     	; 0x2682 <vfprintf+0x12e>
    2666:	83 35       	cpi	r24, 0x53	; 83
    2668:	09 f0       	breq	.+2      	; 0x266c <vfprintf+0x118>
    266a:	59 c0       	rjmp	.+178    	; 0x271e <vfprintf+0x1ca>
    266c:	21 c0       	rjmp	.+66     	; 0x26b0 <vfprintf+0x15c>
    266e:	f8 01       	movw	r30, r16
    2670:	80 81       	ld	r24, Z
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	0e 5f       	subi	r16, 0xFE	; 254
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	88 24       	eor	r8, r8
    267a:	83 94       	inc	r8
    267c:	91 2c       	mov	r9, r1
    267e:	53 01       	movw	r10, r6
    2680:	13 c0       	rjmp	.+38     	; 0x26a8 <vfprintf+0x154>
    2682:	28 01       	movw	r4, r16
    2684:	f2 e0       	ldi	r31, 0x02	; 2
    2686:	4f 0e       	add	r4, r31
    2688:	51 1c       	adc	r5, r1
    268a:	f8 01       	movw	r30, r16
    268c:	a0 80       	ld	r10, Z
    268e:	b1 80       	ldd	r11, Z+1	; 0x01
    2690:	36 fe       	sbrs	r3, 6
    2692:	03 c0       	rjmp	.+6      	; 0x269a <vfprintf+0x146>
    2694:	69 2d       	mov	r22, r9
    2696:	70 e0       	ldi	r23, 0x00	; 0
    2698:	02 c0       	rjmp	.+4      	; 0x269e <vfprintf+0x14a>
    269a:	6f ef       	ldi	r22, 0xFF	; 255
    269c:	7f ef       	ldi	r23, 0xFF	; 255
    269e:	c5 01       	movw	r24, r10
    26a0:	0e 94 96 14 	call	0x292c	; 0x292c <strnlen>
    26a4:	4c 01       	movw	r8, r24
    26a6:	82 01       	movw	r16, r4
    26a8:	f3 2d       	mov	r31, r3
    26aa:	ff 77       	andi	r31, 0x7F	; 127
    26ac:	3f 2e       	mov	r3, r31
    26ae:	16 c0       	rjmp	.+44     	; 0x26dc <vfprintf+0x188>
    26b0:	28 01       	movw	r4, r16
    26b2:	22 e0       	ldi	r18, 0x02	; 2
    26b4:	42 0e       	add	r4, r18
    26b6:	51 1c       	adc	r5, r1
    26b8:	f8 01       	movw	r30, r16
    26ba:	a0 80       	ld	r10, Z
    26bc:	b1 80       	ldd	r11, Z+1	; 0x01
    26be:	36 fe       	sbrs	r3, 6
    26c0:	03 c0       	rjmp	.+6      	; 0x26c8 <vfprintf+0x174>
    26c2:	69 2d       	mov	r22, r9
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <vfprintf+0x178>
    26c8:	6f ef       	ldi	r22, 0xFF	; 255
    26ca:	7f ef       	ldi	r23, 0xFF	; 255
    26cc:	c5 01       	movw	r24, r10
    26ce:	0e 94 8b 14 	call	0x2916	; 0x2916 <strnlen_P>
    26d2:	4c 01       	movw	r8, r24
    26d4:	f3 2d       	mov	r31, r3
    26d6:	f0 68       	ori	r31, 0x80	; 128
    26d8:	3f 2e       	mov	r3, r31
    26da:	82 01       	movw	r16, r4
    26dc:	33 fc       	sbrc	r3, 3
    26de:	1b c0       	rjmp	.+54     	; 0x2716 <vfprintf+0x1c2>
    26e0:	82 2d       	mov	r24, r2
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	88 16       	cp	r8, r24
    26e6:	99 06       	cpc	r9, r25
    26e8:	b0 f4       	brcc	.+44     	; 0x2716 <vfprintf+0x1c2>
    26ea:	b6 01       	movw	r22, r12
    26ec:	80 e2       	ldi	r24, 0x20	; 32
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    26f4:	2a 94       	dec	r2
    26f6:	f4 cf       	rjmp	.-24     	; 0x26e0 <vfprintf+0x18c>
    26f8:	f5 01       	movw	r30, r10
    26fa:	37 fc       	sbrc	r3, 7
    26fc:	85 91       	lpm	r24, Z+
    26fe:	37 fe       	sbrs	r3, 7
    2700:	81 91       	ld	r24, Z+
    2702:	5f 01       	movw	r10, r30
    2704:	b6 01       	movw	r22, r12
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    270c:	21 10       	cpse	r2, r1
    270e:	2a 94       	dec	r2
    2710:	21 e0       	ldi	r18, 0x01	; 1
    2712:	82 1a       	sub	r8, r18
    2714:	91 08       	sbc	r9, r1
    2716:	81 14       	cp	r8, r1
    2718:	91 04       	cpc	r9, r1
    271a:	71 f7       	brne	.-36     	; 0x26f8 <vfprintf+0x1a4>
    271c:	e8 c0       	rjmp	.+464    	; 0x28ee <vfprintf+0x39a>
    271e:	84 36       	cpi	r24, 0x64	; 100
    2720:	11 f0       	breq	.+4      	; 0x2726 <vfprintf+0x1d2>
    2722:	89 36       	cpi	r24, 0x69	; 105
    2724:	41 f5       	brne	.+80     	; 0x2776 <vfprintf+0x222>
    2726:	f8 01       	movw	r30, r16
    2728:	37 fe       	sbrs	r3, 7
    272a:	07 c0       	rjmp	.+14     	; 0x273a <vfprintf+0x1e6>
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	0c 5f       	subi	r16, 0xFC	; 252
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	08 c0       	rjmp	.+16     	; 0x274a <vfprintf+0x1f6>
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	07 2e       	mov	r0, r23
    2740:	00 0c       	add	r0, r0
    2742:	88 0b       	sbc	r24, r24
    2744:	99 0b       	sbc	r25, r25
    2746:	0e 5f       	subi	r16, 0xFE	; 254
    2748:	1f 4f       	sbci	r17, 0xFF	; 255
    274a:	f3 2d       	mov	r31, r3
    274c:	ff 76       	andi	r31, 0x6F	; 111
    274e:	3f 2e       	mov	r3, r31
    2750:	97 ff       	sbrs	r25, 7
    2752:	09 c0       	rjmp	.+18     	; 0x2766 <vfprintf+0x212>
    2754:	90 95       	com	r25
    2756:	80 95       	com	r24
    2758:	70 95       	com	r23
    275a:	61 95       	neg	r22
    275c:	7f 4f       	sbci	r23, 0xFF	; 255
    275e:	8f 4f       	sbci	r24, 0xFF	; 255
    2760:	9f 4f       	sbci	r25, 0xFF	; 255
    2762:	f0 68       	ori	r31, 0x80	; 128
    2764:	3f 2e       	mov	r3, r31
    2766:	2a e0       	ldi	r18, 0x0A	; 10
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	a3 01       	movw	r20, r6
    276c:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__ultoa_invert>
    2770:	88 2e       	mov	r8, r24
    2772:	86 18       	sub	r8, r6
    2774:	45 c0       	rjmp	.+138    	; 0x2800 <vfprintf+0x2ac>
    2776:	85 37       	cpi	r24, 0x75	; 117
    2778:	31 f4       	brne	.+12     	; 0x2786 <vfprintf+0x232>
    277a:	23 2d       	mov	r18, r3
    277c:	2f 7e       	andi	r18, 0xEF	; 239
    277e:	b2 2e       	mov	r11, r18
    2780:	2a e0       	ldi	r18, 0x0A	; 10
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	25 c0       	rjmp	.+74     	; 0x27d0 <vfprintf+0x27c>
    2786:	93 2d       	mov	r25, r3
    2788:	99 7f       	andi	r25, 0xF9	; 249
    278a:	b9 2e       	mov	r11, r25
    278c:	8f 36       	cpi	r24, 0x6F	; 111
    278e:	c1 f0       	breq	.+48     	; 0x27c0 <vfprintf+0x26c>
    2790:	18 f4       	brcc	.+6      	; 0x2798 <vfprintf+0x244>
    2792:	88 35       	cpi	r24, 0x58	; 88
    2794:	79 f0       	breq	.+30     	; 0x27b4 <vfprintf+0x260>
    2796:	b5 c0       	rjmp	.+362    	; 0x2902 <vfprintf+0x3ae>
    2798:	80 37       	cpi	r24, 0x70	; 112
    279a:	19 f0       	breq	.+6      	; 0x27a2 <vfprintf+0x24e>
    279c:	88 37       	cpi	r24, 0x78	; 120
    279e:	21 f0       	breq	.+8      	; 0x27a8 <vfprintf+0x254>
    27a0:	b0 c0       	rjmp	.+352    	; 0x2902 <vfprintf+0x3ae>
    27a2:	e9 2f       	mov	r30, r25
    27a4:	e0 61       	ori	r30, 0x10	; 16
    27a6:	be 2e       	mov	r11, r30
    27a8:	b4 fe       	sbrs	r11, 4
    27aa:	0d c0       	rjmp	.+26     	; 0x27c6 <vfprintf+0x272>
    27ac:	fb 2d       	mov	r31, r11
    27ae:	f4 60       	ori	r31, 0x04	; 4
    27b0:	bf 2e       	mov	r11, r31
    27b2:	09 c0       	rjmp	.+18     	; 0x27c6 <vfprintf+0x272>
    27b4:	34 fe       	sbrs	r3, 4
    27b6:	0a c0       	rjmp	.+20     	; 0x27cc <vfprintf+0x278>
    27b8:	29 2f       	mov	r18, r25
    27ba:	26 60       	ori	r18, 0x06	; 6
    27bc:	b2 2e       	mov	r11, r18
    27be:	06 c0       	rjmp	.+12     	; 0x27cc <vfprintf+0x278>
    27c0:	28 e0       	ldi	r18, 0x08	; 8
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	05 c0       	rjmp	.+10     	; 0x27d0 <vfprintf+0x27c>
    27c6:	20 e1       	ldi	r18, 0x10	; 16
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <vfprintf+0x27c>
    27cc:	20 e1       	ldi	r18, 0x10	; 16
    27ce:	32 e0       	ldi	r19, 0x02	; 2
    27d0:	f8 01       	movw	r30, r16
    27d2:	b7 fe       	sbrs	r11, 7
    27d4:	07 c0       	rjmp	.+14     	; 0x27e4 <vfprintf+0x290>
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	0c 5f       	subi	r16, 0xFC	; 252
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	06 c0       	rjmp	.+12     	; 0x27f0 <vfprintf+0x29c>
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 5f       	subi	r16, 0xFE	; 254
    27ee:	1f 4f       	sbci	r17, 0xFF	; 255
    27f0:	a3 01       	movw	r20, r6
    27f2:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__ultoa_invert>
    27f6:	88 2e       	mov	r8, r24
    27f8:	86 18       	sub	r8, r6
    27fa:	fb 2d       	mov	r31, r11
    27fc:	ff 77       	andi	r31, 0x7F	; 127
    27fe:	3f 2e       	mov	r3, r31
    2800:	36 fe       	sbrs	r3, 6
    2802:	0d c0       	rjmp	.+26     	; 0x281e <vfprintf+0x2ca>
    2804:	23 2d       	mov	r18, r3
    2806:	2e 7f       	andi	r18, 0xFE	; 254
    2808:	a2 2e       	mov	r10, r18
    280a:	89 14       	cp	r8, r9
    280c:	58 f4       	brcc	.+22     	; 0x2824 <vfprintf+0x2d0>
    280e:	34 fe       	sbrs	r3, 4
    2810:	0b c0       	rjmp	.+22     	; 0x2828 <vfprintf+0x2d4>
    2812:	32 fc       	sbrc	r3, 2
    2814:	09 c0       	rjmp	.+18     	; 0x2828 <vfprintf+0x2d4>
    2816:	83 2d       	mov	r24, r3
    2818:	8e 7e       	andi	r24, 0xEE	; 238
    281a:	a8 2e       	mov	r10, r24
    281c:	05 c0       	rjmp	.+10     	; 0x2828 <vfprintf+0x2d4>
    281e:	b8 2c       	mov	r11, r8
    2820:	a3 2c       	mov	r10, r3
    2822:	03 c0       	rjmp	.+6      	; 0x282a <vfprintf+0x2d6>
    2824:	b8 2c       	mov	r11, r8
    2826:	01 c0       	rjmp	.+2      	; 0x282a <vfprintf+0x2d6>
    2828:	b9 2c       	mov	r11, r9
    282a:	a4 fe       	sbrs	r10, 4
    282c:	0f c0       	rjmp	.+30     	; 0x284c <vfprintf+0x2f8>
    282e:	fe 01       	movw	r30, r28
    2830:	e8 0d       	add	r30, r8
    2832:	f1 1d       	adc	r31, r1
    2834:	80 81       	ld	r24, Z
    2836:	80 33       	cpi	r24, 0x30	; 48
    2838:	21 f4       	brne	.+8      	; 0x2842 <vfprintf+0x2ee>
    283a:	9a 2d       	mov	r25, r10
    283c:	99 7e       	andi	r25, 0xE9	; 233
    283e:	a9 2e       	mov	r10, r25
    2840:	09 c0       	rjmp	.+18     	; 0x2854 <vfprintf+0x300>
    2842:	a2 fe       	sbrs	r10, 2
    2844:	06 c0       	rjmp	.+12     	; 0x2852 <vfprintf+0x2fe>
    2846:	b3 94       	inc	r11
    2848:	b3 94       	inc	r11
    284a:	04 c0       	rjmp	.+8      	; 0x2854 <vfprintf+0x300>
    284c:	8a 2d       	mov	r24, r10
    284e:	86 78       	andi	r24, 0x86	; 134
    2850:	09 f0       	breq	.+2      	; 0x2854 <vfprintf+0x300>
    2852:	b3 94       	inc	r11
    2854:	a3 fc       	sbrc	r10, 3
    2856:	11 c0       	rjmp	.+34     	; 0x287a <vfprintf+0x326>
    2858:	a0 fe       	sbrs	r10, 0
    285a:	06 c0       	rjmp	.+12     	; 0x2868 <vfprintf+0x314>
    285c:	b2 14       	cp	r11, r2
    285e:	88 f4       	brcc	.+34     	; 0x2882 <vfprintf+0x32e>
    2860:	28 0c       	add	r2, r8
    2862:	92 2c       	mov	r9, r2
    2864:	9b 18       	sub	r9, r11
    2866:	0e c0       	rjmp	.+28     	; 0x2884 <vfprintf+0x330>
    2868:	b2 14       	cp	r11, r2
    286a:	60 f4       	brcc	.+24     	; 0x2884 <vfprintf+0x330>
    286c:	b6 01       	movw	r22, r12
    286e:	80 e2       	ldi	r24, 0x20	; 32
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    2876:	b3 94       	inc	r11
    2878:	f7 cf       	rjmp	.-18     	; 0x2868 <vfprintf+0x314>
    287a:	b2 14       	cp	r11, r2
    287c:	18 f4       	brcc	.+6      	; 0x2884 <vfprintf+0x330>
    287e:	2b 18       	sub	r2, r11
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <vfprintf+0x332>
    2882:	98 2c       	mov	r9, r8
    2884:	21 2c       	mov	r2, r1
    2886:	a4 fe       	sbrs	r10, 4
    2888:	10 c0       	rjmp	.+32     	; 0x28aa <vfprintf+0x356>
    288a:	b6 01       	movw	r22, r12
    288c:	80 e3       	ldi	r24, 0x30	; 48
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    2894:	a2 fe       	sbrs	r10, 2
    2896:	17 c0       	rjmp	.+46     	; 0x28c6 <vfprintf+0x372>
    2898:	a1 fc       	sbrc	r10, 1
    289a:	03 c0       	rjmp	.+6      	; 0x28a2 <vfprintf+0x34e>
    289c:	88 e7       	ldi	r24, 0x78	; 120
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <vfprintf+0x352>
    28a2:	88 e5       	ldi	r24, 0x58	; 88
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	b6 01       	movw	r22, r12
    28a8:	0c c0       	rjmp	.+24     	; 0x28c2 <vfprintf+0x36e>
    28aa:	8a 2d       	mov	r24, r10
    28ac:	86 78       	andi	r24, 0x86	; 134
    28ae:	59 f0       	breq	.+22     	; 0x28c6 <vfprintf+0x372>
    28b0:	a1 fe       	sbrs	r10, 1
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <vfprintf+0x364>
    28b4:	8b e2       	ldi	r24, 0x2B	; 43
    28b6:	01 c0       	rjmp	.+2      	; 0x28ba <vfprintf+0x366>
    28b8:	80 e2       	ldi	r24, 0x20	; 32
    28ba:	a7 fc       	sbrc	r10, 7
    28bc:	8d e2       	ldi	r24, 0x2D	; 45
    28be:	b6 01       	movw	r22, r12
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    28c6:	89 14       	cp	r8, r9
    28c8:	38 f4       	brcc	.+14     	; 0x28d8 <vfprintf+0x384>
    28ca:	b6 01       	movw	r22, r12
    28cc:	80 e3       	ldi	r24, 0x30	; 48
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    28d4:	9a 94       	dec	r9
    28d6:	f7 cf       	rjmp	.-18     	; 0x28c6 <vfprintf+0x372>
    28d8:	8a 94       	dec	r8
    28da:	f3 01       	movw	r30, r6
    28dc:	e8 0d       	add	r30, r8
    28de:	f1 1d       	adc	r31, r1
    28e0:	80 81       	ld	r24, Z
    28e2:	b6 01       	movw	r22, r12
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    28ea:	81 10       	cpse	r8, r1
    28ec:	f5 cf       	rjmp	.-22     	; 0x28d8 <vfprintf+0x384>
    28ee:	22 20       	and	r2, r2
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <vfprintf+0x3a0>
    28f2:	42 ce       	rjmp	.-892    	; 0x2578 <vfprintf+0x24>
    28f4:	b6 01       	movw	r22, r12
    28f6:	80 e2       	ldi	r24, 0x20	; 32
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    28fe:	2a 94       	dec	r2
    2900:	f6 cf       	rjmp	.-20     	; 0x28ee <vfprintf+0x39a>
    2902:	f6 01       	movw	r30, r12
    2904:	86 81       	ldd	r24, Z+6	; 0x06
    2906:	97 81       	ldd	r25, Z+7	; 0x07
    2908:	02 c0       	rjmp	.+4      	; 0x290e <vfprintf+0x3ba>
    290a:	8f ef       	ldi	r24, 0xFF	; 255
    290c:	9f ef       	ldi	r25, 0xFF	; 255
    290e:	2b 96       	adiw	r28, 0x0b	; 11
    2910:	e2 e1       	ldi	r30, 0x12	; 18
    2912:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__>

00002916 <strnlen_P>:
    2916:	fc 01       	movw	r30, r24
    2918:	05 90       	lpm	r0, Z+
    291a:	61 50       	subi	r22, 0x01	; 1
    291c:	70 40       	sbci	r23, 0x00	; 0
    291e:	01 10       	cpse	r0, r1
    2920:	d8 f7       	brcc	.-10     	; 0x2918 <strnlen_P+0x2>
    2922:	80 95       	com	r24
    2924:	90 95       	com	r25
    2926:	8e 0f       	add	r24, r30
    2928:	9f 1f       	adc	r25, r31
    292a:	08 95       	ret

0000292c <strnlen>:
    292c:	fc 01       	movw	r30, r24
    292e:	61 50       	subi	r22, 0x01	; 1
    2930:	70 40       	sbci	r23, 0x00	; 0
    2932:	01 90       	ld	r0, Z+
    2934:	01 10       	cpse	r0, r1
    2936:	d8 f7       	brcc	.-10     	; 0x292e <strnlen+0x2>
    2938:	80 95       	com	r24
    293a:	90 95       	com	r25
    293c:	8e 0f       	add	r24, r30
    293e:	9f 1f       	adc	r25, r31
    2940:	08 95       	ret

00002942 <fputc>:
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	fb 01       	movw	r30, r22
    294c:	23 81       	ldd	r18, Z+3	; 0x03
    294e:	21 fd       	sbrc	r18, 1
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <fputc+0x16>
    2952:	8f ef       	ldi	r24, 0xFF	; 255
    2954:	9f ef       	ldi	r25, 0xFF	; 255
    2956:	2c c0       	rjmp	.+88     	; 0x29b0 <fputc+0x6e>
    2958:	22 ff       	sbrs	r18, 2
    295a:	16 c0       	rjmp	.+44     	; 0x2988 <fputc+0x46>
    295c:	46 81       	ldd	r20, Z+6	; 0x06
    295e:	57 81       	ldd	r21, Z+7	; 0x07
    2960:	24 81       	ldd	r18, Z+4	; 0x04
    2962:	35 81       	ldd	r19, Z+5	; 0x05
    2964:	42 17       	cp	r20, r18
    2966:	53 07       	cpc	r21, r19
    2968:	44 f4       	brge	.+16     	; 0x297a <fputc+0x38>
    296a:	a0 81       	ld	r26, Z
    296c:	b1 81       	ldd	r27, Z+1	; 0x01
    296e:	9d 01       	movw	r18, r26
    2970:	2f 5f       	subi	r18, 0xFF	; 255
    2972:	3f 4f       	sbci	r19, 0xFF	; 255
    2974:	31 83       	std	Z+1, r19	; 0x01
    2976:	20 83       	st	Z, r18
    2978:	8c 93       	st	X, r24
    297a:	26 81       	ldd	r18, Z+6	; 0x06
    297c:	37 81       	ldd	r19, Z+7	; 0x07
    297e:	2f 5f       	subi	r18, 0xFF	; 255
    2980:	3f 4f       	sbci	r19, 0xFF	; 255
    2982:	37 83       	std	Z+7, r19	; 0x07
    2984:	26 83       	std	Z+6, r18	; 0x06
    2986:	14 c0       	rjmp	.+40     	; 0x29b0 <fputc+0x6e>
    2988:	8b 01       	movw	r16, r22
    298a:	ec 01       	movw	r28, r24
    298c:	fb 01       	movw	r30, r22
    298e:	00 84       	ldd	r0, Z+8	; 0x08
    2990:	f1 85       	ldd	r31, Z+9	; 0x09
    2992:	e0 2d       	mov	r30, r0
    2994:	09 95       	icall
    2996:	89 2b       	or	r24, r25
    2998:	e1 f6       	brne	.-72     	; 0x2952 <fputc+0x10>
    299a:	d8 01       	movw	r26, r16
    299c:	16 96       	adiw	r26, 0x06	; 6
    299e:	8d 91       	ld	r24, X+
    29a0:	9c 91       	ld	r25, X
    29a2:	17 97       	sbiw	r26, 0x07	; 7
    29a4:	01 96       	adiw	r24, 0x01	; 1
    29a6:	17 96       	adiw	r26, 0x07	; 7
    29a8:	9c 93       	st	X, r25
    29aa:	8e 93       	st	-X, r24
    29ac:	16 97       	sbiw	r26, 0x06	; 6
    29ae:	ce 01       	movw	r24, r28
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	1f 91       	pop	r17
    29b6:	0f 91       	pop	r16
    29b8:	08 95       	ret

000029ba <__ultoa_invert>:
    29ba:	fa 01       	movw	r30, r20
    29bc:	aa 27       	eor	r26, r26
    29be:	28 30       	cpi	r18, 0x08	; 8
    29c0:	51 f1       	breq	.+84     	; 0x2a16 <__ultoa_invert+0x5c>
    29c2:	20 31       	cpi	r18, 0x10	; 16
    29c4:	81 f1       	breq	.+96     	; 0x2a26 <__ultoa_invert+0x6c>
    29c6:	e8 94       	clt
    29c8:	6f 93       	push	r22
    29ca:	6e 7f       	andi	r22, 0xFE	; 254
    29cc:	6e 5f       	subi	r22, 0xFE	; 254
    29ce:	7f 4f       	sbci	r23, 0xFF	; 255
    29d0:	8f 4f       	sbci	r24, 0xFF	; 255
    29d2:	9f 4f       	sbci	r25, 0xFF	; 255
    29d4:	af 4f       	sbci	r26, 0xFF	; 255
    29d6:	b1 e0       	ldi	r27, 0x01	; 1
    29d8:	3e d0       	rcall	.+124    	; 0x2a56 <__ultoa_invert+0x9c>
    29da:	b4 e0       	ldi	r27, 0x04	; 4
    29dc:	3c d0       	rcall	.+120    	; 0x2a56 <__ultoa_invert+0x9c>
    29de:	67 0f       	add	r22, r23
    29e0:	78 1f       	adc	r23, r24
    29e2:	89 1f       	adc	r24, r25
    29e4:	9a 1f       	adc	r25, r26
    29e6:	a1 1d       	adc	r26, r1
    29e8:	68 0f       	add	r22, r24
    29ea:	79 1f       	adc	r23, r25
    29ec:	8a 1f       	adc	r24, r26
    29ee:	91 1d       	adc	r25, r1
    29f0:	a1 1d       	adc	r26, r1
    29f2:	6a 0f       	add	r22, r26
    29f4:	71 1d       	adc	r23, r1
    29f6:	81 1d       	adc	r24, r1
    29f8:	91 1d       	adc	r25, r1
    29fa:	a1 1d       	adc	r26, r1
    29fc:	20 d0       	rcall	.+64     	; 0x2a3e <__ultoa_invert+0x84>
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <__ultoa_invert+0x48>
    2a00:	68 94       	set
    2a02:	3f 91       	pop	r19
    2a04:	2a e0       	ldi	r18, 0x0A	; 10
    2a06:	26 9f       	mul	r18, r22
    2a08:	11 24       	eor	r1, r1
    2a0a:	30 19       	sub	r19, r0
    2a0c:	30 5d       	subi	r19, 0xD0	; 208
    2a0e:	31 93       	st	Z+, r19
    2a10:	de f6       	brtc	.-74     	; 0x29c8 <__ultoa_invert+0xe>
    2a12:	cf 01       	movw	r24, r30
    2a14:	08 95       	ret
    2a16:	46 2f       	mov	r20, r22
    2a18:	47 70       	andi	r20, 0x07	; 7
    2a1a:	40 5d       	subi	r20, 0xD0	; 208
    2a1c:	41 93       	st	Z+, r20
    2a1e:	b3 e0       	ldi	r27, 0x03	; 3
    2a20:	0f d0       	rcall	.+30     	; 0x2a40 <__ultoa_invert+0x86>
    2a22:	c9 f7       	brne	.-14     	; 0x2a16 <__ultoa_invert+0x5c>
    2a24:	f6 cf       	rjmp	.-20     	; 0x2a12 <__ultoa_invert+0x58>
    2a26:	46 2f       	mov	r20, r22
    2a28:	4f 70       	andi	r20, 0x0F	; 15
    2a2a:	40 5d       	subi	r20, 0xD0	; 208
    2a2c:	4a 33       	cpi	r20, 0x3A	; 58
    2a2e:	18 f0       	brcs	.+6      	; 0x2a36 <__ultoa_invert+0x7c>
    2a30:	49 5d       	subi	r20, 0xD9	; 217
    2a32:	31 fd       	sbrc	r19, 1
    2a34:	40 52       	subi	r20, 0x20	; 32
    2a36:	41 93       	st	Z+, r20
    2a38:	02 d0       	rcall	.+4      	; 0x2a3e <__ultoa_invert+0x84>
    2a3a:	a9 f7       	brne	.-22     	; 0x2a26 <__ultoa_invert+0x6c>
    2a3c:	ea cf       	rjmp	.-44     	; 0x2a12 <__ultoa_invert+0x58>
    2a3e:	b4 e0       	ldi	r27, 0x04	; 4
    2a40:	a6 95       	lsr	r26
    2a42:	97 95       	ror	r25
    2a44:	87 95       	ror	r24
    2a46:	77 95       	ror	r23
    2a48:	67 95       	ror	r22
    2a4a:	ba 95       	dec	r27
    2a4c:	c9 f7       	brne	.-14     	; 0x2a40 <__ultoa_invert+0x86>
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	61 05       	cpc	r22, r1
    2a52:	71 05       	cpc	r23, r1
    2a54:	08 95       	ret
    2a56:	9b 01       	movw	r18, r22
    2a58:	ac 01       	movw	r20, r24
    2a5a:	0a 2e       	mov	r0, r26
    2a5c:	06 94       	lsr	r0
    2a5e:	57 95       	ror	r21
    2a60:	47 95       	ror	r20
    2a62:	37 95       	ror	r19
    2a64:	27 95       	ror	r18
    2a66:	ba 95       	dec	r27
    2a68:	c9 f7       	brne	.-14     	; 0x2a5c <__ultoa_invert+0xa2>
    2a6a:	62 0f       	add	r22, r18
    2a6c:	73 1f       	adc	r23, r19
    2a6e:	84 1f       	adc	r24, r20
    2a70:	95 1f       	adc	r25, r21
    2a72:	a0 1d       	adc	r26, r0
    2a74:	08 95       	ret

00002a76 <__prologue_saves__>:
    2a76:	2f 92       	push	r2
    2a78:	3f 92       	push	r3
    2a7a:	4f 92       	push	r4
    2a7c:	5f 92       	push	r5
    2a7e:	6f 92       	push	r6
    2a80:	7f 92       	push	r7
    2a82:	8f 92       	push	r8
    2a84:	9f 92       	push	r9
    2a86:	af 92       	push	r10
    2a88:	bf 92       	push	r11
    2a8a:	cf 92       	push	r12
    2a8c:	df 92       	push	r13
    2a8e:	ef 92       	push	r14
    2a90:	ff 92       	push	r15
    2a92:	0f 93       	push	r16
    2a94:	1f 93       	push	r17
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	ca 1b       	sub	r28, r26
    2aa0:	db 0b       	sbc	r29, r27
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	09 94       	ijmp

00002aae <__epilogue_restores__>:
    2aae:	2a 88       	ldd	r2, Y+18	; 0x12
    2ab0:	39 88       	ldd	r3, Y+17	; 0x11
    2ab2:	48 88       	ldd	r4, Y+16	; 0x10
    2ab4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ab6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ab8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aba:	8c 84       	ldd	r8, Y+12	; 0x0c
    2abc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2abe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ac0:	b9 84       	ldd	r11, Y+9	; 0x09
    2ac2:	c8 84       	ldd	r12, Y+8	; 0x08
    2ac4:	df 80       	ldd	r13, Y+7	; 0x07
    2ac6:	ee 80       	ldd	r14, Y+6	; 0x06
    2ac8:	fd 80       	ldd	r15, Y+5	; 0x05
    2aca:	0c 81       	ldd	r16, Y+4	; 0x04
    2acc:	1b 81       	ldd	r17, Y+3	; 0x03
    2ace:	aa 81       	ldd	r26, Y+2	; 0x02
    2ad0:	b9 81       	ldd	r27, Y+1	; 0x01
    2ad2:	ce 0f       	add	r28, r30
    2ad4:	d1 1d       	adc	r29, r1
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	ed 01       	movw	r28, r26
    2ae2:	08 95       	ret

00002ae4 <_exit>:
    2ae4:	f8 94       	cli

00002ae6 <__stop_program>:
    2ae6:	ff cf       	rjmp	.-2      	; 0x2ae6 <__stop_program>
