
Driver_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000035b0  00003644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000f6  008000f6  000036da  2**0
                  ALLOC
  3 .stab         00006138  00000000  00000000  000036dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004015  00000000  00000000  00009814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000d829  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000d83c  2**2
                  CONTENTS, READONLY
  7 .avr.prop     0000002c  00000000  00000000  0000d878  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000052e  00000000  00000000  0000d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004e7  00000000  00000000  0000ddd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000e2b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001af  00000000  00000000  0000e2d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 16 	call	0x2c24	; 0x2c24 <main>
      8a:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EXI_Init>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <EXI_Init+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	6a 83       	std	Y+2, r22	; 0x02
      a0:	89 81       	ldd	r24, Y+1	; 0x01
      a2:	88 2f       	mov	r24, r24
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	81 30       	cpi	r24, 0x01	; 1
      a8:	91 05       	cpc	r25, r1
      aa:	01 f1       	breq	.+64     	; 0xec <EXI_Init+0x5a>
      ac:	82 30       	cpi	r24, 0x02	; 2
      ae:	91 05       	cpc	r25, r1
      b0:	b9 f1       	breq	.+110    	; 0x120 <EXI_Init+0x8e>
      b2:	89 2b       	or	r24, r25
      b4:	09 f0       	breq	.+2      	; 0xb8 <EXI_Init+0x26>
      b6:	4e c0       	rjmp	.+156    	; 0x154 <EXI_Init+0xc2>
      b8:	8f e5       	ldi	r24, 0x5F	; 95
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	fc 01       	movw	r30, r24
      be:	20 81       	ld	r18, Z
      c0:	8f e5       	ldi	r24, 0x5F	; 95
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	20 68       	ori	r18, 0x80	; 128
      c6:	fc 01       	movw	r30, r24
      c8:	20 83       	st	Z, r18
      ca:	8b e5       	ldi	r24, 0x5B	; 91
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	fc 01       	movw	r30, r24
      d0:	20 81       	ld	r18, Z
      d2:	8b e5       	ldi	r24, 0x5B	; 91
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	20 64       	ori	r18, 0x40	; 64
      d8:	fc 01       	movw	r30, r24
      da:	20 83       	st	Z, r18
      dc:	8a 81       	ldd	r24, Y+2	; 0x02
      de:	0e 94 b0 00 	call	0x160	; 0x160 <EX_ControlIN0>
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	8a e1       	ldi	r24, 0x1A	; 26
      e6:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
      ea:	34 c0       	rjmp	.+104    	; 0x154 <EXI_Init+0xc2>
      ec:	8f e5       	ldi	r24, 0x5F	; 95
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	fc 01       	movw	r30, r24
      f2:	20 81       	ld	r18, Z
      f4:	8f e5       	ldi	r24, 0x5F	; 95
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	20 68       	ori	r18, 0x80	; 128
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
      fe:	8b e5       	ldi	r24, 0x5B	; 91
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	fc 01       	movw	r30, r24
     104:	20 81       	ld	r18, Z
     106:	8b e5       	ldi	r24, 0x5B	; 91
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	20 68       	ori	r18, 0x80	; 128
     10c:	fc 01       	movw	r30, r24
     10e:	20 83       	st	Z, r18
     110:	8a 81       	ldd	r24, Y+2	; 0x02
     112:	0e 94 19 01 	call	0x232	; 0x232 <EX_ControlIN1>
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	8b e1       	ldi	r24, 0x1B	; 27
     11a:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
     11e:	1a c0       	rjmp	.+52     	; 0x154 <EXI_Init+0xc2>
     120:	8f e5       	ldi	r24, 0x5F	; 95
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	fc 01       	movw	r30, r24
     126:	20 81       	ld	r18, Z
     128:	8f e5       	ldi	r24, 0x5F	; 95
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	20 68       	ori	r18, 0x80	; 128
     12e:	fc 01       	movw	r30, r24
     130:	20 83       	st	Z, r18
     132:	8b e5       	ldi	r24, 0x5B	; 91
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	20 81       	ld	r18, Z
     13a:	8b e5       	ldi	r24, 0x5B	; 91
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	20 62       	ori	r18, 0x20	; 32
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	0e 94 82 01 	call	0x304	; 0x304 <EX_ControlIN2>
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	8b e0       	ldi	r24, 0x0B	; 11
     14e:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
     152:	00 00       	nop
     154:	00 00       	nop
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <EX_ControlIN0>:
/**
  * @brief  : Static Function Control Direction of External Interrupt {0}
  * @param  : CopyDirIn
  */
static void EX_ControlIN0(EX_Interrupt_Dir CopyDirIn)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	1f 92       	push	r1
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	89 83       	std	Y+1, r24	; 0x01
	switch (CopyDirIn) {
     16c:	89 81       	ldd	r24, Y+1	; 0x01
     16e:	88 2f       	mov	r24, r24
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	91 05       	cpc	r25, r1
     176:	f9 f0       	breq	.+62     	; 0x1b6 <EX_ControlIN0+0x56>
     178:	82 30       	cpi	r24, 0x02	; 2
     17a:	91 05       	cpc	r25, r1
     17c:	1c f4       	brge	.+6      	; 0x184 <EX_ControlIN0+0x24>
     17e:	89 2b       	or	r24, r25
     180:	39 f0       	breq	.+14     	; 0x190 <EX_ControlIN0+0x30>
		case RISING_AGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
			SET_BIT(MCUCR , MCUCR_ISC10);
			break;
	}
}
     182:	52 c0       	rjmp	.+164    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
  * @brief  : Static Function Control Direction of External Interrupt {0}
  * @param  : CopyDirIn
  */
static void EX_ControlIN0(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn) {
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	91 05       	cpc	r25, r1
     188:	49 f1       	breq	.+82     	; 0x1dc <EX_ControlIN0+0x7c>
     18a:	03 97       	sbiw	r24, 0x03	; 3
     18c:	d1 f1       	breq	.+116    	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
		case RISING_AGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
			SET_BIT(MCUCR , MCUCR_ISC10);
			break;
	}
}
     18e:	4c c0       	rjmp	.+152    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
  */
static void EX_ControlIN0(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn) {
		case LOW_LEVEL:
			CLR_BIT(MCUCR , MCUCR_ISC11);
     190:	85 e5       	ldi	r24, 0x55	; 85
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	20 81       	ld	r18, Z
     198:	85 e5       	ldi	r24, 0x55	; 85
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	27 7f       	andi	r18, 0xF7	; 247
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
			CLR_BIT(MCUCR , MCUCR_ISC10);
     1a2:	85 e5       	ldi	r24, 0x55	; 85
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 81       	ld	r18, Z
     1aa:	85 e5       	ldi	r24, 0x55	; 85
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	2b 7f       	andi	r18, 0xFB	; 251
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 83       	st	Z, r18
			break;
     1b4:	39 c0       	rjmp	.+114    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		case ANY_LOGIC:
			CLR_BIT(MCUCR , MCUCR_ISC11);
     1b6:	85 e5       	ldi	r24, 0x55	; 85
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 81       	ld	r18, Z
     1be:	85 e5       	ldi	r24, 0x55	; 85
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	27 7f       	andi	r18, 0xF7	; 247
     1c4:	fc 01       	movw	r30, r24
     1c6:	20 83       	st	Z, r18
			SET_BIT(MCUCR , MCUCR_ISC10);
     1c8:	85 e5       	ldi	r24, 0x55	; 85
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 81       	ld	r18, Z
     1d0:	85 e5       	ldi	r24, 0x55	; 85
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	24 60       	ori	r18, 0x04	; 4
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
			break;
     1da:	26 c0       	rjmp	.+76     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		case FALLING_EDGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
     1dc:	85 e5       	ldi	r24, 0x55	; 85
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 81       	ld	r18, Z
     1e4:	85 e5       	ldi	r24, 0x55	; 85
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	28 60       	ori	r18, 0x08	; 8
     1ea:	fc 01       	movw	r30, r24
     1ec:	20 83       	st	Z, r18
			CLR_BIT(MCUCR , MCUCR_ISC10);
     1ee:	85 e5       	ldi	r24, 0x55	; 85
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 81       	ld	r18, Z
     1f6:	85 e5       	ldi	r24, 0x55	; 85
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	2b 7f       	andi	r18, 0xFB	; 251
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18
			break;
     200:	13 c0       	rjmp	.+38     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		case RISING_AGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
     202:	85 e5       	ldi	r24, 0x55	; 85
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	fc 01       	movw	r30, r24
     208:	20 81       	ld	r18, Z
     20a:	85 e5       	ldi	r24, 0x55	; 85
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	28 60       	ori	r18, 0x08	; 8
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18
			SET_BIT(MCUCR , MCUCR_ISC10);
     214:	85 e5       	ldi	r24, 0x55	; 85
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	fc 01       	movw	r30, r24
     21a:	20 81       	ld	r18, Z
     21c:	85 e5       	ldi	r24, 0x55	; 85
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	24 60       	ori	r18, 0x04	; 4
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
			break;
     226:	00 00       	nop
	}
}
     228:	00 00       	nop
     22a:	0f 90       	pop	r0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <EX_ControlIN1>:
/**
  * @brief  : Static Function Control Direction of External Interrupt {1}
  * @param  : CopyDirIn
  */
static void EX_ControlIN1(EX_Interrupt_Dir CopyDirIn)
{
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	1f 92       	push	r1
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	89 83       	std	Y+1, r24	; 0x01
	switch (CopyDirIn)
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	91 05       	cpc	r25, r1
     248:	f9 f0       	breq	.+62     	; 0x288 <EX_ControlIN1+0x56>
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	91 05       	cpc	r25, r1
     24e:	1c f4       	brge	.+6      	; 0x256 <EX_ControlIN1+0x24>
     250:	89 2b       	or	r24, r25
     252:	39 f0       	breq	.+14     	; 0x262 <EX_ControlIN1+0x30>
			case RISING_AGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
				SET_BIT(MCUCR , MCUCR_ISC00);
				break;
		}
}
     254:	52 c0       	rjmp	.+164    	; 0x2fa <EX_ControlIN1+0xc8>
  * @brief  : Static Function Control Direction of External Interrupt {1}
  * @param  : CopyDirIn
  */
static void EX_ControlIN1(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn)
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	91 05       	cpc	r25, r1
     25a:	49 f1       	breq	.+82     	; 0x2ae <EX_ControlIN1+0x7c>
     25c:	03 97       	sbiw	r24, 0x03	; 3
     25e:	d1 f1       	breq	.+116    	; 0x2d4 <EX_ControlIN1+0xa2>
			case RISING_AGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
				SET_BIT(MCUCR , MCUCR_ISC00);
				break;
		}
}
     260:	4c c0       	rjmp	.+152    	; 0x2fa <EX_ControlIN1+0xc8>
static void EX_ControlIN1(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn)
	{
			case LOW_LEVEL:
				CLR_BIT(MCUCR , MCUCR_ISC01);
     262:	85 e5       	ldi	r24, 0x55	; 85
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	fc 01       	movw	r30, r24
     268:	20 81       	ld	r18, Z
     26a:	85 e5       	ldi	r24, 0x55	; 85
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	2d 7f       	andi	r18, 0xFD	; 253
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
				CLR_BIT(MCUCR , MCUCR_ISC00);
     274:	85 e5       	ldi	r24, 0x55	; 85
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	fc 01       	movw	r30, r24
     27a:	20 81       	ld	r18, Z
     27c:	85 e5       	ldi	r24, 0x55	; 85
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	2e 7f       	andi	r18, 0xFE	; 254
     282:	fc 01       	movw	r30, r24
     284:	20 83       	st	Z, r18
				break;
     286:	39 c0       	rjmp	.+114    	; 0x2fa <EX_ControlIN1+0xc8>
			case ANY_LOGIC:
				CLR_BIT(MCUCR , MCUCR_ISC01);
     288:	85 e5       	ldi	r24, 0x55	; 85
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	fc 01       	movw	r30, r24
     28e:	20 81       	ld	r18, Z
     290:	85 e5       	ldi	r24, 0x55	; 85
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	2d 7f       	andi	r18, 0xFD	; 253
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
				SET_BIT(MCUCR , MCUCR_ISC00);
     29a:	85 e5       	ldi	r24, 0x55	; 85
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	fc 01       	movw	r30, r24
     2a0:	20 81       	ld	r18, Z
     2a2:	85 e5       	ldi	r24, 0x55	; 85
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	21 60       	ori	r18, 0x01	; 1
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18
				break;
     2ac:	26 c0       	rjmp	.+76     	; 0x2fa <EX_ControlIN1+0xc8>
			case FALLING_EDGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
     2ae:	85 e5       	ldi	r24, 0x55	; 85
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 81       	ld	r18, Z
     2b6:	85 e5       	ldi	r24, 0x55	; 85
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	22 60       	ori	r18, 0x02	; 2
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
				CLR_BIT(MCUCR , MCUCR_ISC00);
     2c0:	85 e5       	ldi	r24, 0x55	; 85
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 81       	ld	r18, Z
     2c8:	85 e5       	ldi	r24, 0x55	; 85
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	2e 7f       	andi	r18, 0xFE	; 254
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
				break;
     2d2:	13 c0       	rjmp	.+38     	; 0x2fa <EX_ControlIN1+0xc8>
			case RISING_AGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
     2d4:	85 e5       	ldi	r24, 0x55	; 85
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	fc 01       	movw	r30, r24
     2da:	20 81       	ld	r18, Z
     2dc:	85 e5       	ldi	r24, 0x55	; 85
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	22 60       	ori	r18, 0x02	; 2
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18
				SET_BIT(MCUCR , MCUCR_ISC00);
     2e6:	85 e5       	ldi	r24, 0x55	; 85
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 81       	ld	r18, Z
     2ee:	85 e5       	ldi	r24, 0x55	; 85
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	21 60       	ori	r18, 0x01	; 1
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 83       	st	Z, r18
				break;
     2f8:	00 00       	nop
		}
}
     2fa:	00 00       	nop
     2fc:	0f 90       	pop	r0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <EX_ControlIN2>:
/**
  * @brief  : Static Function Control Direction of External Interrupt {2}
  * @param  : CopyDirIn
  */
static void EX_ControlIN2(EX_Interrupt_Dir CopyDirIn)
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	89 83       	std	Y+1, r24	; 0x01
	switch (CopyDirIn)
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	91 05       	cpc	r25, r1
     31a:	19 f0       	breq	.+6      	; 0x322 <EX_ControlIN2+0x1e>
     31c:	03 97       	sbiw	r24, 0x03	; 3
     31e:	59 f0       	breq	.+22     	; 0x336 <EX_ControlIN2+0x32>
     320:	14 c0       	rjmp	.+40     	; 0x34a <EX_ControlIN2+0x46>
	{
			case FALLING_EDGE:
				CLR_BIT(MCUCSR , MCUCSR_ISC2);
     322:	84 e5       	ldi	r24, 0x54	; 84
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	fc 01       	movw	r30, r24
     328:	20 81       	ld	r18, Z
     32a:	84 e5       	ldi	r24, 0x54	; 84
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	2f 7b       	andi	r18, 0xBF	; 191
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
				break;
     334:	14 c0       	rjmp	.+40     	; 0x35e <EX_ControlIN2+0x5a>
			case RISING_AGE:
				SET_BIT(MCUCSR , MCUCSR_ISC2);
     336:	84 e5       	ldi	r24, 0x54	; 84
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	20 81       	ld	r18, Z
     33e:	84 e5       	ldi	r24, 0x54	; 84
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	20 64       	ori	r18, 0x40	; 64
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
				break;
     348:	0a c0       	rjmp	.+20     	; 0x35e <EX_ControlIN2+0x5a>
			default:
				CLR_BIT(MCUCSR , MCUCSR_ISC2);
     34a:	84 e5       	ldi	r24, 0x54	; 84
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	fc 01       	movw	r30, r24
     350:	20 81       	ld	r18, Z
     352:	84 e5       	ldi	r24, 0x54	; 84
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	2f 7b       	andi	r18, 0xBF	; 191
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
				break;
     35c:	00 00       	nop
		}
}
     35e:	00 00       	nop
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <Dio_setPinDir>:
  * @brief  : Set Direction of Bit (Input or Output)
  * @param  : CopyPinNum
  * @param  : CopyPinDir
  */
void Dio_setPinDir(u8 CopyPinNum,u8 CopyPinDir)
{
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <Dio_setPinDir+0x6>
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyPinDir)
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	91 f1       	breq	.+100    	; 0x3e4 <Dio_setPinDir+0x7c>
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	09 f0       	breq	.+2      	; 0x386 <Dio_setPinDir+0x1e>
		case Direction_Pin_Input:
				CLR_BIT(*Arr_DDr[CopyPinNum / 8 ],CopyPinNum % 8 );
			break;

		default :
			break;
     384:	5f c0       	rjmp	.+190    	; 0x444 <__DATA_REGION_LENGTH__+0x44>
void Dio_setPinDir(u8 CopyPinNum,u8 CopyPinDir)
{
	switch (CopyPinDir)
	{
		case Direction_Pin_Output:
				SET_BIT(*Arr_DDr[CopyPinNum / 8 ],CopyPinNum % 8 );
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	86 95       	lsr	r24
     38a:	86 95       	lsr	r24
     38c:	86 95       	lsr	r24
     38e:	88 2f       	mov	r24, r24
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	80 5a       	subi	r24, 0xA0	; 160
     398:	9f 4f       	sbci	r25, 0xFF	; 255
     39a:	fc 01       	movw	r30, r24
     39c:	80 81       	ld	r24, Z
     39e:	91 81       	ldd	r25, Z+1	; 0x01
     3a0:	fc 01       	movw	r30, r24
     3a2:	80 81       	ld	r24, Z
     3a4:	48 2f       	mov	r20, r24
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	9c 01       	movw	r18, r24
     3ae:	27 70       	andi	r18, 0x07	; 7
     3b0:	33 27       	eor	r19, r19
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <Dio_setPinDir+0x54>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	2a 95       	dec	r18
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <Dio_setPinDir+0x50>
     3c0:	24 2f       	mov	r18, r20
     3c2:	28 2b       	or	r18, r24
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	86 95       	lsr	r24
     3c8:	86 95       	lsr	r24
     3ca:	86 95       	lsr	r24
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	80 5a       	subi	r24, 0xA0	; 160
     3d6:	9f 4f       	sbci	r25, 0xFF	; 255
     3d8:	fc 01       	movw	r30, r24
     3da:	80 81       	ld	r24, Z
     3dc:	91 81       	ldd	r25, Z+1	; 0x01
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
			break;
     3e2:	30 c0       	rjmp	.+96     	; 0x444 <__DATA_REGION_LENGTH__+0x44>

		case Direction_Pin_Input:
				CLR_BIT(*Arr_DDr[CopyPinNum / 8 ],CopyPinNum % 8 );
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	86 95       	lsr	r24
     3e8:	86 95       	lsr	r24
     3ea:	86 95       	lsr	r24
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	80 5a       	subi	r24, 0xA0	; 160
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	48 2f       	mov	r20, r24
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	88 2f       	mov	r24, r24
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	9c 01       	movw	r18, r24
     40c:	27 70       	andi	r18, 0x07	; 7
     40e:	33 27       	eor	r19, r19
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	02 c0       	rjmp	.+4      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	2a 95       	dec	r18
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     41e:	80 95       	com	r24
     420:	24 2f       	mov	r18, r20
     422:	28 23       	and	r18, r24
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	86 95       	lsr	r24
     428:	86 95       	lsr	r24
     42a:	86 95       	lsr	r24
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	80 5a       	subi	r24, 0xA0	; 160
     436:	9f 4f       	sbci	r25, 0xFF	; 255
     438:	fc 01       	movw	r30, r24
     43a:	80 81       	ld	r24, Z
     43c:	91 81       	ldd	r25, Z+1	; 0x01
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
			break;
     442:	00 00       	nop

		default :
			break;
	}
}
     444:	00 00       	nop
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <Dio_setPinVal>:
  * @brief  : Set Status of Bit (High or Low or Toggle)
  * @param  : CopyPinNum
  * @param  : CopyPinVal
  */
void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <Dio_setPinVal+0x6>
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyPinVal)
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	91 05       	cpc	r25, r1
     468:	39 f0       	breq	.+14     	; 0x478 <__stack+0x19>
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	91 05       	cpc	r25, r1
     46e:	09 f4       	brne	.+2      	; 0x472 <__stack+0x13>
     470:	62 c0       	rjmp	.+196    	; 0x536 <__stack+0xd7>
     472:	89 2b       	or	r24, r25
     474:	81 f1       	breq	.+96     	; 0x4d6 <__stack+0x77>
		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
			break;

		default :
			break;
     476:	8e c0       	rjmp	.+284    	; 0x594 <__stack+0x135>
void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
	switch (CopyPinVal)
	{
		case Status_Pin_High:
				SET_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	86 95       	lsr	r24
     47c:	86 95       	lsr	r24
     47e:	86 95       	lsr	r24
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	88 59       	subi	r24, 0x98	; 152
     48a:	9f 4f       	sbci	r25, 0xFF	; 255
     48c:	fc 01       	movw	r30, r24
     48e:	80 81       	ld	r24, Z
     490:	91 81       	ldd	r25, Z+1	; 0x01
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	48 2f       	mov	r20, r24
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	88 2f       	mov	r24, r24
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	9c 01       	movw	r18, r24
     4a0:	27 70       	andi	r18, 0x07	; 7
     4a2:	33 27       	eor	r19, r19
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__stack+0x4f>
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	2a 95       	dec	r18
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__stack+0x4b>
     4b2:	24 2f       	mov	r18, r20
     4b4:	28 2b       	or	r18, r24
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	86 95       	lsr	r24
     4ba:	86 95       	lsr	r24
     4bc:	86 95       	lsr	r24
     4be:	88 2f       	mov	r24, r24
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	88 59       	subi	r24, 0x98	; 152
     4c8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	91 81       	ldd	r25, Z+1	; 0x01
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
			break;
     4d4:	5f c0       	rjmp	.+190    	; 0x594 <__stack+0x135>

		case Status_Pin_Low:
				CLR_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	86 95       	lsr	r24
     4da:	86 95       	lsr	r24
     4dc:	86 95       	lsr	r24
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	88 59       	subi	r24, 0x98	; 152
     4e8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ea:	fc 01       	movw	r30, r24
     4ec:	80 81       	ld	r24, Z
     4ee:	91 81       	ldd	r25, Z+1	; 0x01
     4f0:	fc 01       	movw	r30, r24
     4f2:	80 81       	ld	r24, Z
     4f4:	48 2f       	mov	r20, r24
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	88 2f       	mov	r24, r24
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9c 01       	movw	r18, r24
     4fe:	27 70       	andi	r18, 0x07	; 7
     500:	33 27       	eor	r19, r19
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <__stack+0xad>
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	2a 95       	dec	r18
     50e:	e2 f7       	brpl	.-8      	; 0x508 <__stack+0xa9>
     510:	80 95       	com	r24
     512:	24 2f       	mov	r18, r20
     514:	28 23       	and	r18, r24
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	86 95       	lsr	r24
     51a:	86 95       	lsr	r24
     51c:	86 95       	lsr	r24
     51e:	88 2f       	mov	r24, r24
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	88 59       	subi	r24, 0x98	; 152
     528:	9f 4f       	sbci	r25, 0xFF	; 255
     52a:	fc 01       	movw	r30, r24
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
			break;
     534:	2f c0       	rjmp	.+94     	; 0x594 <__stack+0x135>

		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	86 95       	lsr	r24
     53a:	86 95       	lsr	r24
     53c:	86 95       	lsr	r24
     53e:	88 2f       	mov	r24, r24
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	88 59       	subi	r24, 0x98	; 152
     548:	9f 4f       	sbci	r25, 0xFF	; 255
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	fc 01       	movw	r30, r24
     552:	80 81       	ld	r24, Z
     554:	48 2f       	mov	r20, r24
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	88 2f       	mov	r24, r24
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	9c 01       	movw	r18, r24
     55e:	27 70       	andi	r18, 0x07	; 7
     560:	33 27       	eor	r19, r19
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	02 c0       	rjmp	.+4      	; 0x56c <__stack+0x10d>
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	2a 95       	dec	r18
     56e:	e2 f7       	brpl	.-8      	; 0x568 <__stack+0x109>
     570:	24 2f       	mov	r18, r20
     572:	28 27       	eor	r18, r24
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	86 95       	lsr	r24
     578:	86 95       	lsr	r24
     57a:	86 95       	lsr	r24
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	88 59       	subi	r24, 0x98	; 152
     586:	9f 4f       	sbci	r25, 0xFF	; 255
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	91 81       	ldd	r25, Z+1	; 0x01
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
			break;
     592:	00 00       	nop

		default :
			break;
	}
}
     594:	00 00       	nop
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <Dio_getPinVal>:
  * @brief  : Get Status of Bit (High or Low)
  * @param  : CopyPinNum
  * @RetVal : Ret
  */
Std_Return Dio_getPinVal(u8 CopyPinNum)
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <Dio_getPinVal+0x6>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     5ac:	19 82       	std	Y+1, r1	; 0x01
	Ret = GET_BIT(*Arr_Pin[CopyPinNum / 8 ],CopyPinNum % 8 );
     5ae:	8a 81       	ldd	r24, Y+2	; 0x02
     5b0:	86 95       	lsr	r24
     5b2:	86 95       	lsr	r24
     5b4:	86 95       	lsr	r24
     5b6:	88 2f       	mov	r24, r24
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	80 59       	subi	r24, 0x90	; 144
     5c0:	9f 4f       	sbci	r25, 0xFF	; 255
     5c2:	fc 01       	movw	r30, r24
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2a 81       	ldd	r18, Y+2	; 0x02
     5d2:	22 2f       	mov	r18, r18
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	27 70       	andi	r18, 0x07	; 7
     5d8:	33 27       	eor	r19, r19
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <Dio_getPinVal+0x40>
     5dc:	95 95       	asr	r25
     5de:	87 95       	ror	r24
     5e0:	2a 95       	dec	r18
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <Dio_getPinVal+0x3c>
     5e4:	81 70       	andi	r24, 0x01	; 1
     5e6:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <DIO_vidSetPinSDir>:
  * @param  : u8PinsNum
  * @param  : Copyu8Size
  * @param  : Copyu8Dir
  */
void DIO_vidSetPinSDir(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Dir)
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <DIO_vidSetPinSDir+0x6>
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <DIO_vidSetPinSDir+0x8>
     5fc:	1f 92       	push	r1
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	9b 83       	std	Y+3, r25	; 0x03
     604:	8a 83       	std	Y+2, r24	; 0x02
     606:	6c 83       	std	Y+4, r22	; 0x04
     608:	4d 83       	std	Y+5, r20	; 0x05
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     60a:	19 82       	std	Y+1, r1	; 0x01
     60c:	9b c0       	rjmp	.+310    	; 0x744 <DIO_vidSetPinSDir+0x150>
		switch (Copyu8Dir){
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	88 2f       	mov	r24, r24
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	00 97       	sbiw	r24, 0x00	; 0
     616:	21 f0       	breq	.+8      	; 0x620 <DIO_vidSetPinSDir+0x2c>
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	09 f4       	brne	.+2      	; 0x61e <DIO_vidSetPinSDir+0x2a>
     61c:	49 c0       	rjmp	.+146    	; 0x6b0 <DIO_vidSetPinSDir+0xbc>
     61e:	8f c0       	rjmp	.+286    	; 0x73e <DIO_vidSetPinSDir+0x14a>
		case Direction_Pin_Input  :CLR_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	2a 81       	ldd	r18, Y+2	; 0x02
     628:	3b 81       	ldd	r19, Y+3	; 0x03
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	fc 01       	movw	r30, r24
     630:	80 81       	ld	r24, Z
     632:	86 95       	lsr	r24
     634:	86 95       	lsr	r24
     636:	86 95       	lsr	r24
     638:	88 2f       	mov	r24, r24
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	80 5a       	subi	r24, 0xA0	; 160
     642:	9f 4f       	sbci	r25, 0xFF	; 255
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	fc 01       	movw	r30, r24
     64c:	80 81       	ld	r24, Z
     64e:	48 2f       	mov	r20, r24
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	2a 81       	ldd	r18, Y+2	; 0x02
     658:	3b 81       	ldd	r19, Y+3	; 0x03
     65a:	82 0f       	add	r24, r18
     65c:	93 1f       	adc	r25, r19
     65e:	fc 01       	movw	r30, r24
     660:	80 81       	ld	r24, Z
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	9c 01       	movw	r18, r24
     668:	27 70       	andi	r18, 0x07	; 7
     66a:	33 27       	eor	r19, r19
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_vidSetPinSDir+0x82>
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	2a 95       	dec	r18
     678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_vidSetPinSDir+0x7e>
     67a:	80 95       	com	r24
     67c:	48 23       	and	r20, r24
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	88 2f       	mov	r24, r24
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	2a 81       	ldd	r18, Y+2	; 0x02
     686:	3b 81       	ldd	r19, Y+3	; 0x03
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	86 95       	lsr	r24
     692:	86 95       	lsr	r24
     694:	86 95       	lsr	r24
     696:	88 2f       	mov	r24, r24
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	80 5a       	subi	r24, 0xA0	; 160
     6a0:	9f 4f       	sbci	r25, 0xFF	; 255
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	24 2f       	mov	r18, r20
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 83       	st	Z, r18
     6ae:	47 c0       	rjmp	.+142    	; 0x73e <DIO_vidSetPinSDir+0x14a>
		case Direction_Pin_Output :SET_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	2a 81       	ldd	r18, Y+2	; 0x02
     6b8:	3b 81       	ldd	r19, Y+3	; 0x03
     6ba:	82 0f       	add	r24, r18
     6bc:	93 1f       	adc	r25, r19
     6be:	fc 01       	movw	r30, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	86 95       	lsr	r24
     6c4:	86 95       	lsr	r24
     6c6:	86 95       	lsr	r24
     6c8:	88 2f       	mov	r24, r24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	80 5a       	subi	r24, 0xA0	; 160
     6d2:	9f 4f       	sbci	r25, 0xFF	; 255
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	48 2f       	mov	r20, r24
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	88 2f       	mov	r24, r24
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	2a 81       	ldd	r18, Y+2	; 0x02
     6e8:	3b 81       	ldd	r19, Y+3	; 0x03
     6ea:	82 0f       	add	r24, r18
     6ec:	93 1f       	adc	r25, r19
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	9c 01       	movw	r18, r24
     6f8:	27 70       	andi	r18, 0x07	; 7
     6fa:	33 27       	eor	r19, r19
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_vidSetPinSDir+0x112>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	2a 95       	dec	r18
     708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_vidSetPinSDir+0x10e>
     70a:	48 2b       	or	r20, r24
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	2a 81       	ldd	r18, Y+2	; 0x02
     714:	3b 81       	ldd	r19, Y+3	; 0x03
     716:	82 0f       	add	r24, r18
     718:	93 1f       	adc	r25, r19
     71a:	fc 01       	movw	r30, r24
     71c:	80 81       	ld	r24, Z
     71e:	86 95       	lsr	r24
     720:	86 95       	lsr	r24
     722:	86 95       	lsr	r24
     724:	88 2f       	mov	r24, r24
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	80 5a       	subi	r24, 0xA0	; 160
     72e:	9f 4f       	sbci	r25, 0xFF	; 255
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
     734:	91 81       	ldd	r25, Z+1	; 0x01
     736:	24 2f       	mov	r18, r20
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
     73c:	00 00       	nop
  * @param  : Copyu8Dir
  */
void DIO_vidSetPinSDir(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Dir)
{
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	99 81       	ldd	r25, Y+1	; 0x01
     746:	8c 81       	ldd	r24, Y+4	; 0x04
     748:	98 17       	cp	r25, r24
     74a:	08 f4       	brcc	.+2      	; 0x74e <DIO_vidSetPinSDir+0x15a>
     74c:	60 cf       	rjmp	.-320    	; 0x60e <DIO_vidSetPinSDir+0x1a>
		switch (Copyu8Dir){
		case Direction_Pin_Input  :CLR_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
		case Direction_Pin_Output :SET_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
		}
	}
}
     74e:	00 00       	nop
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <DIO_vidSetPinSVal>:
  * @param  : u8PinsNum
  * @param  : Copyu8Size
  * @param  : Copyu8Val
  */
void DIO_vidSetPinSVal(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Val)
{
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	00 d0       	rcall	.+0      	; 0x766 <DIO_vidSetPinSVal+0x6>
     766:	00 d0       	rcall	.+0      	; 0x768 <DIO_vidSetPinSVal+0x8>
     768:	1f 92       	push	r1
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	9b 83       	std	Y+3, r25	; 0x03
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	6c 83       	std	Y+4, r22	; 0x04
     774:	4d 83       	std	Y+5, r20	; 0x05
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     776:	19 82       	std	Y+1, r1	; 0x01
     778:	9b c0       	rjmp	.+310    	; 0x8b0 <DIO_vidSetPinSVal+0x150>
		switch (Copyu8Val){
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	21 f0       	breq	.+8      	; 0x78c <DIO_vidSetPinSVal+0x2c>
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	09 f4       	brne	.+2      	; 0x78a <DIO_vidSetPinSVal+0x2a>
     788:	49 c0       	rjmp	.+146    	; 0x81c <DIO_vidSetPinSVal+0xbc>
     78a:	8f c0       	rjmp	.+286    	; 0x8aa <DIO_vidSetPinSVal+0x14a>
		case Status_Pin_Low  :CLR_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	2a 81       	ldd	r18, Y+2	; 0x02
     794:	3b 81       	ldd	r19, Y+3	; 0x03
     796:	82 0f       	add	r24, r18
     798:	93 1f       	adc	r25, r19
     79a:	fc 01       	movw	r30, r24
     79c:	80 81       	ld	r24, Z
     79e:	86 95       	lsr	r24
     7a0:	86 95       	lsr	r24
     7a2:	86 95       	lsr	r24
     7a4:	88 2f       	mov	r24, r24
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	88 59       	subi	r24, 0x98	; 152
     7ae:	9f 4f       	sbci	r25, 0xFF	; 255
     7b0:	fc 01       	movw	r30, r24
     7b2:	80 81       	ld	r24, Z
     7b4:	91 81       	ldd	r25, Z+1	; 0x01
     7b6:	fc 01       	movw	r30, r24
     7b8:	80 81       	ld	r24, Z
     7ba:	48 2f       	mov	r20, r24
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	2a 81       	ldd	r18, Y+2	; 0x02
     7c4:	3b 81       	ldd	r19, Y+3	; 0x03
     7c6:	82 0f       	add	r24, r18
     7c8:	93 1f       	adc	r25, r19
     7ca:	fc 01       	movw	r30, r24
     7cc:	80 81       	ld	r24, Z
     7ce:	88 2f       	mov	r24, r24
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9c 01       	movw	r18, r24
     7d4:	27 70       	andi	r18, 0x07	; 7
     7d6:	33 27       	eor	r19, r19
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_vidSetPinSVal+0x82>
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	2a 95       	dec	r18
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_vidSetPinSVal+0x7e>
     7e6:	80 95       	com	r24
     7e8:	48 23       	and	r20, r24
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	2a 81       	ldd	r18, Y+2	; 0x02
     7f2:	3b 81       	ldd	r19, Y+3	; 0x03
     7f4:	82 0f       	add	r24, r18
     7f6:	93 1f       	adc	r25, r19
     7f8:	fc 01       	movw	r30, r24
     7fa:	80 81       	ld	r24, Z
     7fc:	86 95       	lsr	r24
     7fe:	86 95       	lsr	r24
     800:	86 95       	lsr	r24
     802:	88 2f       	mov	r24, r24
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	88 59       	subi	r24, 0x98	; 152
     80c:	9f 4f       	sbci	r25, 0xFF	; 255
     80e:	fc 01       	movw	r30, r24
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	24 2f       	mov	r18, r20
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
     81a:	47 c0       	rjmp	.+142    	; 0x8aa <DIO_vidSetPinSVal+0x14a>
		case Status_Pin_High :SET_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	88 2f       	mov	r24, r24
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	2a 81       	ldd	r18, Y+2	; 0x02
     824:	3b 81       	ldd	r19, Y+3	; 0x03
     826:	82 0f       	add	r24, r18
     828:	93 1f       	adc	r25, r19
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	86 95       	lsr	r24
     830:	86 95       	lsr	r24
     832:	86 95       	lsr	r24
     834:	88 2f       	mov	r24, r24
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	88 59       	subi	r24, 0x98	; 152
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	91 81       	ldd	r25, Z+1	; 0x01
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	48 2f       	mov	r20, r24
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	2a 81       	ldd	r18, Y+2	; 0x02
     854:	3b 81       	ldd	r19, Y+3	; 0x03
     856:	82 0f       	add	r24, r18
     858:	93 1f       	adc	r25, r19
     85a:	fc 01       	movw	r30, r24
     85c:	80 81       	ld	r24, Z
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9c 01       	movw	r18, r24
     864:	27 70       	andi	r18, 0x07	; 7
     866:	33 27       	eor	r19, r19
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	02 c0       	rjmp	.+4      	; 0x872 <DIO_vidSetPinSVal+0x112>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	2a 95       	dec	r18
     874:	e2 f7       	brpl	.-8      	; 0x86e <DIO_vidSetPinSVal+0x10e>
     876:	48 2b       	or	r20, r24
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	2a 81       	ldd	r18, Y+2	; 0x02
     880:	3b 81       	ldd	r19, Y+3	; 0x03
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	fc 01       	movw	r30, r24
     888:	80 81       	ld	r24, Z
     88a:	86 95       	lsr	r24
     88c:	86 95       	lsr	r24
     88e:	86 95       	lsr	r24
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	88 59       	subi	r24, 0x98	; 152
     89a:	9f 4f       	sbci	r25, 0xFF	; 255
     89c:	fc 01       	movw	r30, r24
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	24 2f       	mov	r18, r20
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
     8a8:	00 00       	nop
  * @param  : Copyu8Val
  */
void DIO_vidSetPinSVal(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Val)
{
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	99 81       	ldd	r25, Y+1	; 0x01
     8b2:	8c 81       	ldd	r24, Y+4	; 0x04
     8b4:	98 17       	cp	r25, r24
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <DIO_vidSetPinSVal+0x15a>
     8b8:	60 cf       	rjmp	.-320    	; 0x77a <DIO_vidSetPinSVal+0x1a>
		switch (Copyu8Val){
		case Status_Pin_Low  :CLR_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
		case Status_Pin_High :SET_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
		}
	}
}
     8ba:	00 00       	nop
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <Dio_setPortDir>:
  * @brief  : Set Direction of Port (Input or Output)
  * @param  : CopyPortNum
  * @param  : CopyPinDir
  */
void Dio_setPortDir(u8 CopyPortNum,u8 CopyPinDir)
{
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <Dio_setPortDir+0x6>
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_DDr[CopyPortNum] = CopyPinDir;
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	80 5a       	subi	r24, 0xA0	; 160
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	2a 81       	ldd	r18, Y+2	; 0x02
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
}
     8f4:	00 00       	nop
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <Dio_setPortVal>:
  * @brief  : Set Status of Port (High or Low or Toggle)
  * @param  : CopyPortNum
  * @param  : CopyPinVal
  */
void Dio_setPortVal(u8 CopyPortNum,u8 CopyPinVal)
{
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	00 d0       	rcall	.+0      	; 0x906 <Dio_setPortVal+0x6>
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	89 83       	std	Y+1, r24	; 0x01
     90c:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_Port[CopyPortNum] = CopyPinVal;
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	88 2f       	mov	r24, r24
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	88 59       	subi	r24, 0x98	; 152
     91a:	9f 4f       	sbci	r25, 0xFF	; 255
     91c:	fc 01       	movw	r30, r24
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	2a 81       	ldd	r18, Y+2	; 0x02
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
}
     928:	00 00       	nop
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <Dio_getPortVal>:
  * @brief  : Get Status of Port (High or Low)
  * @param  : CopyPortNum
  * @RetVal : Ret
  */
Std_Return Dio_getPortVal(u8 CopyPortNum)
{
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	00 d0       	rcall	.+0      	; 0x93a <Dio_getPortVal+0x6>
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     940:	19 82       	std	Y+1, r1	; 0x01
	Ret = *Arr_Pin[CopyPortNum];
     942:	8a 81       	ldd	r24, Y+2	; 0x02
     944:	88 2f       	mov	r24, r24
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	80 59       	subi	r24, 0x90	; 144
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	91 81       	ldd	r25, Z+1	; 0x01
     956:	fc 01       	movw	r30, r24
     958:	80 81       	ld	r24, Z
     95a:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     95c:	89 81       	ldd	r24, Y+1	; 0x01
}
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <ADC_INIT>:

/**
  * @brief  : Initialization ADC
  */
void ADC_INIT(void)
{
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
#if	ADC_Stat == ADC_AREF
	CLR_BIT(ADMUX_Reg , ADMUX_REFS0);
	CLR_BIT(ADMUX_Reg , ADMUX_REFS1);
#elif ADC_Stat == ADC_AVCC
	SET_BIT(ADMUX_Reg , ADMUX_REFS0);
     970:	87 e2       	ldi	r24, 0x27	; 39
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	fc 01       	movw	r30, r24
     976:	20 81       	ld	r18, Z
     978:	87 e2       	ldi	r24, 0x27	; 39
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	20 64       	ori	r18, 0x40	; 64
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
	CLR_BIT(ADMUX_Reg , ADMUX_REFS1);
     982:	87 e2       	ldi	r24, 0x27	; 39
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	fc 01       	movw	r30, r24
     988:	20 81       	ld	r18, Z
     98a:	87 e2       	ldi	r24, 0x27	; 39
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	2f 77       	andi	r18, 0x7F	; 127
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
#elif ADC_Stat == ADC_Inter
	SET_BIT(ADMUX_Reg , ADMUX_REFS0);
	SET_BIT(ADMUX_Reg , ADMUX_REFS1);
#endif
	SET_BIT(ADCSRA_Reg,ADCSRA_ADEN);
     994:	86 e2       	ldi	r24, 0x26	; 38
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	fc 01       	movw	r30, r24
     99a:	20 81       	ld	r18, Z
     99c:	86 e2       	ldi	r24, 0x26	; 38
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	20 68       	ori	r18, 0x80	; 128
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
	ADCSRA_Reg |= ADC_PRESCALER;
     9a6:	86 e2       	ldi	r24, 0x26	; 38
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 81       	ld	r18, Z
     9ae:	86 e2       	ldi	r24, 0x26	; 38
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	21 60       	ori	r18, 0x01	; 1
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
}
     9b8:	00 00       	nop
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <ADC_readDigitalSignal>:
  * @brief  : Conversion Digital Signal to Analog Signal And Return The Result
  * @param  : CopyChanal
  * @retval : Res
  */
u16 ADC_readDigitalSignal(ADC_CHANNEL CopyChanal)
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <ADC_readDigitalSignal+0x6>
     9c6:	1f 92       	push	r1
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	8b 83       	std	Y+3, r24	; 0x03
	u16 Res = Initial_Counter;
     9ce:	1a 82       	std	Y+2, r1	; 0x02
     9d0:	19 82       	std	Y+1, r1	; 0x01
	ADMUX_Reg &= ADC_CLEAR_MASK;
     9d2:	87 e2       	ldi	r24, 0x27	; 39
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 81       	ld	r18, Z
     9da:	87 e2       	ldi	r24, 0x27	; 39
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	20 7e       	andi	r18, 0xE0	; 224
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
	ADMUX_Reg |= CopyChanal;
     9e4:	87 e2       	ldi	r24, 0x27	; 39
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	fc 01       	movw	r30, r24
     9ea:	30 81       	ld	r19, Z
     9ec:	87 e2       	ldi	r24, 0x27	; 39
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	2b 81       	ldd	r18, Y+3	; 0x03
     9f2:	23 2b       	or	r18, r19
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
	SET_BIT(ADCSRA_Reg,ADCSRA_ADSC);
     9f8:	86 e2       	ldi	r24, 0x26	; 38
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 81       	ld	r18, Z
     a00:	86 e2       	ldi	r24, 0x26	; 38
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	20 64       	ori	r18, 0x40	; 64
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
	while((GET_BIT(ADCSRA_Reg,ADCSRA_ADSC)));
     a0a:	00 00       	nop
     a0c:	86 e2       	ldi	r24, 0x26	; 38
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	82 95       	swap	r24
     a16:	86 95       	lsr	r24
     a18:	86 95       	lsr	r24
     a1a:	83 70       	andi	r24, 0x03	; 3
     a1c:	88 2f       	mov	r24, r24
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	81 70       	andi	r24, 0x01	; 1
     a22:	99 27       	eor	r25, r25
     a24:	89 2b       	or	r24, r25
     a26:	91 f7       	brne	.-28     	; 0xa0c <ADC_readDigitalSignal+0x4c>
	Res = ADCL_Reg;
     a28:	84 e2       	ldi	r24, 0x24	; 36
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	fc 01       	movw	r30, r24
     a2e:	80 81       	ld	r24, Z
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	9a 83       	std	Y+2, r25	; 0x02
     a36:	89 83       	std	Y+1, r24	; 0x01
	Res |= (ADCH_Reg << 8);
     a38:	85 e2       	ldi	r24, 0x25	; 37
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	fc 01       	movw	r30, r24
     a3e:	80 81       	ld	r24, Z
     a40:	88 2f       	mov	r24, r24
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	98 2f       	mov	r25, r24
     a46:	88 27       	eor	r24, r24
     a48:	9c 01       	movw	r18, r24
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	82 2b       	or	r24, r18
     a50:	93 2b       	or	r25, r19
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	89 83       	std	Y+1, r24	; 0x01
	return Res;
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <ADC_Enable>:

/**
  * @brief  : Enable ADC
  */
void ADC_Enable(void)
{
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA_Reg,ADCSRA_ADEN);
     a6e:	86 e2       	ldi	r24, 0x26	; 38
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	fc 01       	movw	r30, r24
     a74:	20 81       	ld	r18, Z
     a76:	86 e2       	ldi	r24, 0x26	; 38
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	20 68       	ori	r18, 0x80	; 128
     a7c:	fc 01       	movw	r30, r24
     a7e:	20 83       	st	Z, r18
}
     a80:	00 00       	nop
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <ADC_Disable>:

/**
  * @brief  : Disable ADC
  */
void ADC_Disable(void)
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Reg,ADCSRA_ADEN);
     a90:	86 e2       	ldi	r24, 0x26	; 38
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	fc 01       	movw	r30, r24
     a96:	20 81       	ld	r18, Z
     a98:	86 e2       	ldi	r24, 0x26	; 38
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	2f 77       	andi	r18, 0x7F	; 127
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 83       	st	Z, r18
}
     aa2:	00 00       	nop
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <ADC_EnableINT>:

/**
  * @brief  : Enable Interrupt of ADC
  */
void ADC_EnableINT(void)
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_Reg , GIE);
     ab2:	8f e5       	ldi	r24, 0x5F	; 95
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 81       	ld	r18, Z
     aba:	8f e5       	ldi	r24, 0x5F	; 95
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	20 68       	ori	r18, 0x80	; 128
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18
	SET_BIT(ADCSRA_Reg, ADCSRA_ADIE);
     ac4:	86 e2       	ldi	r24, 0x26	; 38
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	fc 01       	movw	r30, r24
     aca:	20 81       	ld	r18, Z
     acc:	86 e2       	ldi	r24, 0x26	; 38
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	28 60       	ori	r18, 0x08	; 8
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
}
     ad6:	00 00       	nop
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <ADC_DisableINT>:

/**
  * @brief  : Disable Interrupt of ADC
  */
void ADC_DisableINT(void)
{
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Reg, ADCSRA_ADIE);
     ae6:	86 e2       	ldi	r24, 0x26	; 38
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	fc 01       	movw	r30, r24
     aec:	20 81       	ld	r18, Z
     aee:	86 e2       	ldi	r24, 0x26	; 38
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	27 7f       	andi	r18, 0xF7	; 247
     af4:	fc 01       	movw	r30, r24
     af6:	20 83       	st	Z, r18
}
     af8:	00 00       	nop
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <ADC_CLRflag>:

/**
  * @brief  : Clear The ADCSRA_ADIF Bit
  */
void ADC_CLRflag(void)
{
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Reg , ADCSRA_ADIF);
     b08:	86 e2       	ldi	r24, 0x26	; 38
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	fc 01       	movw	r30, r24
     b0e:	20 81       	ld	r18, Z
     b10:	86 e2       	ldi	r24, 0x26	; 38
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	2f 7e       	andi	r18, 0xEF	; 239
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
}
     b1a:	00 00       	nop
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <LCD_4_INIT>:
/**
  * @brief  : Initialization Lcd 4 Bit Mode
  * @param  : CopyLCD
  */
void LCD_4_INIT(LCD_4_MODE CopyLCD)
{
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	c3 54       	subi	r28, 0x43	; 67
     b2c:	d1 09       	sbc	r29, r1
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	4e af       	std	Y+62, r20	; 0x3e
     b3a:	5f af       	std	Y+63, r21	; 0x3f
     b3c:	9e 01       	movw	r18, r28
     b3e:	20 5c       	subi	r18, 0xC0	; 192
     b40:	3f 4f       	sbci	r19, 0xFF	; 255
     b42:	f9 01       	movw	r30, r18
     b44:	60 83       	st	Z, r22
     b46:	9e 01       	movw	r18, r28
     b48:	2f 5b       	subi	r18, 0xBF	; 191
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	f9 01       	movw	r30, r18
     b4e:	70 83       	st	Z, r23
     b50:	9e 01       	movw	r18, r28
     b52:	2e 5b       	subi	r18, 0xBE	; 190
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	f9 01       	movw	r30, r18
     b58:	80 83       	st	Z, r24
     b5a:	9e 01       	movw	r18, r28
     b5c:	2d 5b       	subi	r18, 0xBD	; 189
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	f9 01       	movw	r30, r18
     b62:	90 83       	st	Z, r25
	u8 Counter = Initial_Counter;
     b64:	19 82       	std	Y+1, r1	; 0x01

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
     b66:	8f ad       	ldd	r24, Y+63	; 0x3f
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);
     b6e:	8e ad       	ldd	r24, Y+62	; 0x3e
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     b76:	19 82       	std	Y+1, r1	; 0x01
     b78:	10 c0       	rjmp	.+32     	; 0xb9a <LCD_4_INIT+0x78>
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	9e 01       	movw	r18, r28
     b82:	20 5c       	subi	r18, 0xC0	; 192
     b84:	3f 4f       	sbci	r19, 0xFF	; 255
     b86:	82 0f       	add	r24, r18
     b88:	93 1f       	adc	r25, r19
     b8a:	fc 01       	movw	r30, r24
     b8c:	80 81       	ld	r24, Z
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	u8 Counter = Initial_Counter;

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	68 f3       	brcs	.-38     	; 0xb7a <LCD_4_INIT+0x58>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	a0 ea       	ldi	r26, 0xA0	; 160
     ba6:	b1 e4       	ldi	r27, 0x41	; 65
     ba8:	88 ab       	std	Y+48, r24	; 0x30
     baa:	99 ab       	std	Y+49, r25	; 0x31
     bac:	aa ab       	std	Y+50, r26	; 0x32
     bae:	bb ab       	std	Y+51, r27	; 0x33

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4a e7       	ldi	r20, 0x7A	; 122
     bb6:	53 e4       	ldi	r21, 0x43	; 67
     bb8:	68 a9       	ldd	r22, Y+48	; 0x30
     bba:	79 a9       	ldd	r23, Y+49	; 0x31
     bbc:	8a a9       	ldd	r24, Y+50	; 0x32
     bbe:	9b a9       	ldd	r25, Y+51	; 0x33
     bc0:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	8c ab       	std	Y+52, r24	; 0x34
     bca:	9d ab       	std	Y+53, r25	; 0x35
     bcc:	ae ab       	std	Y+54, r26	; 0x36
     bce:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e8       	ldi	r20, 0x80	; 128
     bd6:	5f e3       	ldi	r21, 0x3F	; 63
     bd8:	6c a9       	ldd	r22, Y+52	; 0x34
     bda:	7d a9       	ldd	r23, Y+53	; 0x35
     bdc:	8e a9       	ldd	r24, Y+54	; 0x36
     bde:	9f a9       	ldd	r25, Y+55	; 0x37
     be0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
     be4:	88 23       	and	r24, r24
     be6:	2c f4       	brge	.+10     	; 0xbf2 <LCD_4_INIT+0xd0>
		__ticks = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	99 af       	std	Y+57, r25	; 0x39
     bee:	88 af       	std	Y+56, r24	; 0x38
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <LCD_4_INIT+0x14e>
	else if (__tmp > 65535)
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	4f e7       	ldi	r20, 0x7F	; 127
     bf8:	57 e4       	ldi	r21, 0x47	; 71
     bfa:	6c a9       	ldd	r22, Y+52	; 0x34
     bfc:	7d a9       	ldd	r23, Y+53	; 0x35
     bfe:	8e a9       	ldd	r24, Y+54	; 0x36
     c00:	9f a9       	ldd	r25, Y+55	; 0x37
     c02:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
     c06:	18 16       	cp	r1, r24
     c08:	4c f5       	brge	.+82     	; 0xc5c <LCD_4_INIT+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	68 a9       	ldd	r22, Y+48	; 0x30
     c14:	79 a9       	ldd	r23, Y+49	; 0x31
     c16:	8a a9       	ldd	r24, Y+50	; 0x32
     c18:	9b a9       	ldd	r25, Y+51	; 0x33
     c1a:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	99 af       	std	Y+57, r25	; 0x39
     c30:	88 af       	std	Y+56, r24	; 0x38
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <LCD_4_INIT+0x130>
     c34:	89 e1       	ldi	r24, 0x19	; 25
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	9b af       	std	Y+59, r25	; 0x3b
     c3a:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3c:	8a ad       	ldd	r24, Y+58	; 0x3a
     c3e:	9b ad       	ldd	r25, Y+59	; 0x3b
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <LCD_4_INIT+0x11e>
     c44:	9b af       	std	Y+59, r25	; 0x3b
     c46:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	88 ad       	ldd	r24, Y+56	; 0x38
     c4a:	99 ad       	ldd	r25, Y+57	; 0x39
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	99 af       	std	Y+57, r25	; 0x39
     c50:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	88 ad       	ldd	r24, Y+56	; 0x38
     c54:	99 ad       	ldd	r25, Y+57	; 0x39
     c56:	89 2b       	or	r24, r25
     c58:	69 f7       	brne	.-38     	; 0xc34 <LCD_4_INIT+0x112>
     c5a:	14 c0       	rjmp	.+40     	; 0xc84 <LCD_4_INIT+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5c:	6c a9       	ldd	r22, Y+52	; 0x34
     c5e:	7d a9       	ldd	r23, Y+53	; 0x35
     c60:	8e a9       	ldd	r24, Y+54	; 0x36
     c62:	9f a9       	ldd	r25, Y+55	; 0x37
     c64:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	99 af       	std	Y+57, r25	; 0x39
     c6e:	88 af       	std	Y+56, r24	; 0x38
     c70:	88 ad       	ldd	r24, Y+56	; 0x38
     c72:	99 ad       	ldd	r25, Y+57	; 0x39
     c74:	9d af       	std	Y+61, r25	; 0x3d
     c76:	8c af       	std	Y+60, r24	; 0x3c
     c78:	8c ad       	ldd	r24, Y+60	; 0x3c
     c7a:	9d ad       	ldd	r25, Y+61	; 0x3d
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <LCD_4_INIT+0x15a>
     c80:	9d af       	std	Y+61, r25	; 0x3d
     c82:	8c af       	std	Y+60, r24	; 0x3c
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
	}
	_delay_ms(20);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     c84:	28 e3       	ldi	r18, 0x38	; 56
     c86:	4e ad       	ldd	r20, Y+62	; 0x3e
     c88:	5f ad       	ldd	r21, Y+63	; 0x3f
     c8a:	ce 01       	movw	r24, r28
     c8c:	80 5c       	subi	r24, 0xC0	; 192
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	fc 01       	movw	r30, r24
     c92:	60 81       	ld	r22, Z
     c94:	ce 01       	movw	r24, r28
     c96:	8f 5b       	subi	r24, 0xBF	; 191
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	fc 01       	movw	r30, r24
     c9c:	70 81       	ld	r23, Z
     c9e:	ce 01       	movw	r24, r28
     ca0:	8e 5b       	subi	r24, 0xBE	; 190
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	fc 01       	movw	r30, r24
     ca6:	80 81       	ld	r24, Z
     ca8:	fe 01       	movw	r30, r28
     caa:	ed 5b       	subi	r30, 0xBD	; 189
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	90 81       	ld	r25, Z
     cb0:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 ea       	ldi	r26, 0xA0	; 160
     cba:	b0 e4       	ldi	r27, 0x40	; 64
     cbc:	8a a3       	std	Y+34, r24	; 0x22
     cbe:	9b a3       	std	Y+35, r25	; 0x23
     cc0:	ac a3       	std	Y+36, r26	; 0x24
     cc2:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	4a e7       	ldi	r20, 0x7A	; 122
     cca:	53 e4       	ldi	r21, 0x43	; 67
     ccc:	6a a1       	ldd	r22, Y+34	; 0x22
     cce:	7b a1       	ldd	r23, Y+35	; 0x23
     cd0:	8c a1       	ldd	r24, Y+36	; 0x24
     cd2:	9d a1       	ldd	r25, Y+37	; 0x25
     cd4:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	8e a3       	std	Y+38, r24	; 0x26
     cde:	9f a3       	std	Y+39, r25	; 0x27
     ce0:	a8 a7       	std	Y+40, r26	; 0x28
     ce2:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e8       	ldi	r20, 0x80	; 128
     cea:	5f e3       	ldi	r21, 0x3F	; 63
     cec:	6e a1       	ldd	r22, Y+38	; 0x26
     cee:	7f a1       	ldd	r23, Y+39	; 0x27
     cf0:	88 a5       	ldd	r24, Y+40	; 0x28
     cf2:	99 a5       	ldd	r25, Y+41	; 0x29
     cf4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	2c f4       	brge	.+10     	; 0xd06 <LCD_4_INIT+0x1e4>
		__ticks = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9b a7       	std	Y+43, r25	; 0x2b
     d02:	8a a7       	std	Y+42, r24	; 0x2a
     d04:	3f c0       	rjmp	.+126    	; 0xd84 <LCD_4_INIT+0x262>
	else if (__tmp > 65535)
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	3f ef       	ldi	r19, 0xFF	; 255
     d0a:	4f e7       	ldi	r20, 0x7F	; 127
     d0c:	57 e4       	ldi	r21, 0x47	; 71
     d0e:	6e a1       	ldd	r22, Y+38	; 0x26
     d10:	7f a1       	ldd	r23, Y+39	; 0x27
     d12:	88 a5       	ldd	r24, Y+40	; 0x28
     d14:	99 a5       	ldd	r25, Y+41	; 0x29
     d16:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	4c f5       	brge	.+82     	; 0xd70 <LCD_4_INIT+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e2       	ldi	r20, 0x20	; 32
     d24:	51 e4       	ldi	r21, 0x41	; 65
     d26:	6a a1       	ldd	r22, Y+34	; 0x22
     d28:	7b a1       	ldd	r23, Y+35	; 0x23
     d2a:	8c a1       	ldd	r24, Y+36	; 0x24
     d2c:	9d a1       	ldd	r25, Y+37	; 0x25
     d2e:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	9b a7       	std	Y+43, r25	; 0x2b
     d44:	8a a7       	std	Y+42, r24	; 0x2a
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <LCD_4_INIT+0x244>
     d48:	89 e1       	ldi	r24, 0x19	; 25
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9d a7       	std	Y+45, r25	; 0x2d
     d4e:	8c a7       	std	Y+44, r24	; 0x2c
     d50:	8c a5       	ldd	r24, Y+44	; 0x2c
     d52:	9d a5       	ldd	r25, Y+45	; 0x2d
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <LCD_4_INIT+0x232>
     d58:	9d a7       	std	Y+45, r25	; 0x2d
     d5a:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5c:	8a a5       	ldd	r24, Y+42	; 0x2a
     d5e:	9b a5       	ldd	r25, Y+43	; 0x2b
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	9b a7       	std	Y+43, r25	; 0x2b
     d64:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d66:	8a a5       	ldd	r24, Y+42	; 0x2a
     d68:	9b a5       	ldd	r25, Y+43	; 0x2b
     d6a:	89 2b       	or	r24, r25
     d6c:	69 f7       	brne	.-38     	; 0xd48 <LCD_4_INIT+0x226>
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <LCD_4_INIT+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d70:	6e a1       	ldd	r22, Y+38	; 0x26
     d72:	7f a1       	ldd	r23, Y+39	; 0x27
     d74:	88 a5       	ldd	r24, Y+40	; 0x28
     d76:	99 a5       	ldd	r25, Y+41	; 0x29
     d78:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	9b a7       	std	Y+43, r25	; 0x2b
     d82:	8a a7       	std	Y+42, r24	; 0x2a
     d84:	8a a5       	ldd	r24, Y+42	; 0x2a
     d86:	9b a5       	ldd	r25, Y+43	; 0x2b
     d88:	9f a7       	std	Y+47, r25	; 0x2f
     d8a:	8e a7       	std	Y+46, r24	; 0x2e
     d8c:	8e a5       	ldd	r24, Y+46	; 0x2e
     d8e:	9f a5       	ldd	r25, Y+47	; 0x2f
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <LCD_4_INIT+0x26e>
     d94:	9f a7       	std	Y+47, r25	; 0x2f
     d96:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_ms(5);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     d98:	28 e3       	ldi	r18, 0x38	; 56
     d9a:	4e ad       	ldd	r20, Y+62	; 0x3e
     d9c:	5f ad       	ldd	r21, Y+63	; 0x3f
     d9e:	ce 01       	movw	r24, r28
     da0:	80 5c       	subi	r24, 0xC0	; 192
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	fc 01       	movw	r30, r24
     da6:	60 81       	ld	r22, Z
     da8:	ce 01       	movw	r24, r28
     daa:	8f 5b       	subi	r24, 0xBF	; 191
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	fc 01       	movw	r30, r24
     db0:	70 81       	ld	r23, Z
     db2:	ce 01       	movw	r24, r28
     db4:	8e 5b       	subi	r24, 0xBE	; 190
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	fe 01       	movw	r30, r28
     dbe:	ed 5b       	subi	r30, 0xBD	; 189
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	90 81       	ld	r25, Z
     dc4:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a6 e1       	ldi	r26, 0x16	; 22
     dce:	b3 e4       	ldi	r27, 0x43	; 67
     dd0:	8a 83       	std	Y+2, r24	; 0x02
     dd2:	9b 83       	std	Y+3, r25	; 0x03
     dd4:	ac 83       	std	Y+4, r26	; 0x04
     dd6:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     dd8:	2b ea       	ldi	r18, 0xAB	; 171
     dda:	3a ea       	ldi	r19, 0xAA	; 170
     ddc:	4a ea       	ldi	r20, 0xAA	; 170
     dde:	5e e3       	ldi	r21, 0x3E	; 62
     de0:	6a 81       	ldd	r22, Y+2	; 0x02
     de2:	7b 81       	ldd	r23, Y+3	; 0x03
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	8e 83       	std	Y+6, r24	; 0x06
     df2:	9f 83       	std	Y+7, r25	; 0x07
     df4:	a8 87       	std	Y+8, r26	; 0x08
     df6:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	5e e3       	ldi	r21, 0x3E	; 62
     e00:	6a 81       	ldd	r22, Y+2	; 0x02
     e02:	7b 81       	ldd	r23, Y+3	; 0x03
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	9d 81       	ldd	r25, Y+5	; 0x05
     e08:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	8a 87       	std	Y+10, r24	; 0x0a
     e12:	9b 87       	std	Y+11, r25	; 0x0b
     e14:	ac 87       	std	Y+12, r26	; 0x0c
     e16:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	6e 81       	ldd	r22, Y+6	; 0x06
     e22:	7f 81       	ldd	r23, Y+7	; 0x07
     e24:	88 85       	ldd	r24, Y+8	; 0x08
     e26:	99 85       	ldd	r25, Y+9	; 0x09
     e28:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
     e2c:	88 23       	and	r24, r24
     e2e:	1c f4       	brge	.+6      	; 0xe36 <LCD_4_INIT+0x314>
		__ticks = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	8e 87       	std	Y+14, r24	; 0x0e
     e34:	b2 c0       	rjmp	.+356    	; 0xf9a <LCD_4_INIT+0x478>
	else if (__tmp2 > 65535)
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	4f e7       	ldi	r20, 0x7F	; 127
     e3c:	57 e4       	ldi	r21, 0x47	; 71
     e3e:	6a 85       	ldd	r22, Y+10	; 0x0a
     e40:	7b 85       	ldd	r23, Y+11	; 0x0b
     e42:	8c 85       	ldd	r24, Y+12	; 0x0c
     e44:	9d 85       	ldd	r25, Y+13	; 0x0d
     e46:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	0c f0       	brlt	.+2      	; 0xe50 <LCD_4_INIT+0x32e>
     e4e:	7b c0       	rjmp	.+246    	; 0xf46 <LCD_4_INIT+0x424>
	{
		_delay_ms(__us / 1000.0);
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	4a e7       	ldi	r20, 0x7A	; 122
     e56:	54 e4       	ldi	r21, 0x44	; 68
     e58:	6a 81       	ldd	r22, Y+2	; 0x02
     e5a:	7b 81       	ldd	r23, Y+3	; 0x03
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__divsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	8f 87       	std	Y+15, r24	; 0x0f
     e6a:	98 8b       	std	Y+16, r25	; 0x10
     e6c:	a9 8b       	std	Y+17, r26	; 0x11
     e6e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	4a e7       	ldi	r20, 0x7A	; 122
     e76:	53 e4       	ldi	r21, 0x43	; 67
     e78:	6f 85       	ldd	r22, Y+15	; 0x0f
     e7a:	78 89       	ldd	r23, Y+16	; 0x10
     e7c:	89 89       	ldd	r24, Y+17	; 0x11
     e7e:	9a 89       	ldd	r25, Y+18	; 0x12
     e80:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8b 8b       	std	Y+19, r24	; 0x13
     e8a:	9c 8b       	std	Y+20, r25	; 0x14
     e8c:	ad 8b       	std	Y+21, r26	; 0x15
     e8e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e8       	ldi	r20, 0x80	; 128
     e96:	5f e3       	ldi	r21, 0x3F	; 63
     e98:	6b 89       	ldd	r22, Y+19	; 0x13
     e9a:	7c 89       	ldd	r23, Y+20	; 0x14
     e9c:	8d 89       	ldd	r24, Y+21	; 0x15
     e9e:	9e 89       	ldd	r25, Y+22	; 0x16
     ea0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <LCD_4_INIT+0x390>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	98 8f       	std	Y+24, r25	; 0x18
     eae:	8f 8b       	std	Y+23, r24	; 0x17
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <LCD_4_INIT+0x40e>
	else if (__tmp > 65535)
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	3f ef       	ldi	r19, 0xFF	; 255
     eb6:	4f e7       	ldi	r20, 0x7F	; 127
     eb8:	57 e4       	ldi	r21, 0x47	; 71
     eba:	6b 89       	ldd	r22, Y+19	; 0x13
     ebc:	7c 89       	ldd	r23, Y+20	; 0x14
     ebe:	8d 89       	ldd	r24, Y+21	; 0x15
     ec0:	9e 89       	ldd	r25, Y+22	; 0x16
     ec2:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <LCD_4_INIT+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	51 e4       	ldi	r21, 0x41	; 65
     ed2:	6f 85       	ldd	r22, Y+15	; 0x0f
     ed4:	78 89       	ldd	r23, Y+16	; 0x10
     ed6:	89 89       	ldd	r24, Y+17	; 0x11
     ed8:	9a 89       	ldd	r25, Y+18	; 0x12
     eda:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	98 8f       	std	Y+24, r25	; 0x18
     ef0:	8f 8b       	std	Y+23, r24	; 0x17
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <LCD_4_INIT+0x3f0>
     ef4:	89 e1       	ldi	r24, 0x19	; 25
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9a 8f       	std	Y+26, r25	; 0x1a
     efa:	89 8f       	std	Y+25, r24	; 0x19
     efc:	89 8d       	ldd	r24, Y+25	; 0x19
     efe:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <LCD_4_INIT+0x3de>
     f04:	9a 8f       	std	Y+26, r25	; 0x1a
     f06:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8f 89       	ldd	r24, Y+23	; 0x17
     f0a:	98 8d       	ldd	r25, Y+24	; 0x18
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	98 8f       	std	Y+24, r25	; 0x18
     f10:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8f 89       	ldd	r24, Y+23	; 0x17
     f14:	98 8d       	ldd	r25, Y+24	; 0x18
     f16:	89 2b       	or	r24, r25
     f18:	69 f7       	brne	.-38     	; 0xef4 <LCD_4_INIT+0x3d2>
     f1a:	3f c0       	rjmp	.+126    	; 0xf9a <LCD_4_INIT+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6b 89       	ldd	r22, Y+19	; 0x13
     f1e:	7c 89       	ldd	r23, Y+20	; 0x14
     f20:	8d 89       	ldd	r24, Y+21	; 0x15
     f22:	9e 89       	ldd	r25, Y+22	; 0x16
     f24:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	98 8f       	std	Y+24, r25	; 0x18
     f2e:	8f 8b       	std	Y+23, r24	; 0x17
     f30:	8f 89       	ldd	r24, Y+23	; 0x17
     f32:	98 8d       	ldd	r25, Y+24	; 0x18
     f34:	9c 8f       	std	Y+28, r25	; 0x1c
     f36:	8b 8f       	std	Y+27, r24	; 0x1b
     f38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <LCD_4_INIT+0x41a>
     f40:	9c 8f       	std	Y+28, r25	; 0x1c
     f42:	8b 8f       	std	Y+27, r24	; 0x1b
     f44:	2a c0       	rjmp	.+84     	; 0xf9a <LCD_4_INIT+0x478>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	53 e4       	ldi	r21, 0x43	; 67
     f4e:	6e 81       	ldd	r22, Y+6	; 0x06
     f50:	7f 81       	ldd	r23, Y+7	; 0x07
     f52:	88 85       	ldd	r24, Y+8	; 0x08
     f54:	99 85       	ldd	r25, Y+9	; 0x09
     f56:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
     f5a:	18 16       	cp	r1, r24
     f5c:	ac f4       	brge	.+42     	; 0xf88 <LCD_4_INIT+0x466>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     f5e:	6a 85       	ldd	r22, Y+10	; 0x0a
     f60:	7b 85       	ldd	r23, Y+11	; 0x0b
     f62:	8c 85       	ldd	r24, Y+12	; 0x0c
     f64:	9d 85       	ldd	r25, Y+13	; 0x0d
     f66:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	9e 8f       	std	Y+30, r25	; 0x1e
     f70:	8d 8f       	std	Y+29, r24	; 0x1d
     f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f74:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f76:	98 a3       	std	Y+32, r25	; 0x20
     f78:	8f 8f       	std	Y+31, r24	; 0x1f
     f7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f7c:	98 a1       	ldd	r25, Y+32	; 0x20
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <LCD_4_INIT+0x45c>
     f82:	98 a3       	std	Y+32, r25	; 0x20
     f84:	8f 8f       	std	Y+31, r24	; 0x1f
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <LCD_4_INIT+0x484>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f88:	6e 81       	ldd	r22, Y+6	; 0x06
     f8a:	7f 81       	ldd	r23, Y+7	; 0x07
     f8c:	88 85       	ldd	r24, Y+8	; 0x08
     f8e:	99 85       	ldd	r25, Y+9	; 0x09
     f90:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	8e 87       	std	Y+14, r24	; 0x0e
     f9a:	8e 85       	ldd	r24, Y+14	; 0x0e
     f9c:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f9e:	89 a1       	ldd	r24, Y+33	; 0x21
     fa0:	8a 95       	dec	r24
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <LCD_4_INIT+0x47e>
     fa4:	89 a3       	std	Y+33, r24	; 0x21
	_delay_us(150);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     fa6:	28 e3       	ldi	r18, 0x38	; 56
     fa8:	4e ad       	ldd	r20, Y+62	; 0x3e
     faa:	5f ad       	ldd	r21, Y+63	; 0x3f
     fac:	ce 01       	movw	r24, r28
     fae:	80 5c       	subi	r24, 0xC0	; 192
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	fc 01       	movw	r30, r24
     fb4:	60 81       	ld	r22, Z
     fb6:	ce 01       	movw	r24, r28
     fb8:	8f 5b       	subi	r24, 0xBF	; 191
     fba:	9f 4f       	sbci	r25, 0xFF	; 255
     fbc:	fc 01       	movw	r30, r24
     fbe:	70 81       	ld	r23, Z
     fc0:	ce 01       	movw	r24, r28
     fc2:	8e 5b       	subi	r24, 0xBE	; 190
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	fc 01       	movw	r30, r24
     fc8:	80 81       	ld	r24, Z
     fca:	fe 01       	movw	r30, r28
     fcc:	ed 5b       	subi	r30, 0xBD	; 189
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	90 81       	ld	r25, Z
     fd2:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Clear_Dis);
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	4e ad       	ldd	r20, Y+62	; 0x3e
     fda:	5f ad       	ldd	r21, Y+63	; 0x3f
     fdc:	ce 01       	movw	r24, r28
     fde:	80 5c       	subi	r24, 0xC0	; 192
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	fc 01       	movw	r30, r24
     fe4:	60 81       	ld	r22, Z
     fe6:	ce 01       	movw	r24, r28
     fe8:	8f 5b       	subi	r24, 0xBF	; 191
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	fc 01       	movw	r30, r24
     fee:	70 81       	ld	r23, Z
     ff0:	ce 01       	movw	r24, r28
     ff2:	8e 5b       	subi	r24, 0xBE	; 190
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	fc 01       	movw	r30, r24
     ff8:	80 81       	ld	r24, Z
     ffa:	fe 01       	movw	r30, r28
     ffc:	ed 5b       	subi	r30, 0xBD	; 189
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	90 81       	ld	r25, Z
    1002:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Return_Home);
    1006:	22 e0       	ldi	r18, 0x02	; 2
    1008:	4e ad       	ldd	r20, Y+62	; 0x3e
    100a:	5f ad       	ldd	r21, Y+63	; 0x3f
    100c:	ce 01       	movw	r24, r28
    100e:	80 5c       	subi	r24, 0xC0	; 192
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	fc 01       	movw	r30, r24
    1014:	60 81       	ld	r22, Z
    1016:	ce 01       	movw	r24, r28
    1018:	8f 5b       	subi	r24, 0xBF	; 191
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	fc 01       	movw	r30, r24
    101e:	70 81       	ld	r23, Z
    1020:	ce 01       	movw	r24, r28
    1022:	8e 5b       	subi	r24, 0xBE	; 190
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	fc 01       	movw	r30, r24
    1028:	80 81       	ld	r24, Z
    102a:	fe 01       	movw	r30, r28
    102c:	ed 5b       	subi	r30, 0xBD	; 189
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	90 81       	ld	r25, Z
    1032:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Entery_INC);
    1036:	26 e0       	ldi	r18, 0x06	; 6
    1038:	4e ad       	ldd	r20, Y+62	; 0x3e
    103a:	5f ad       	ldd	r21, Y+63	; 0x3f
    103c:	ce 01       	movw	r24, r28
    103e:	80 5c       	subi	r24, 0xC0	; 192
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	fc 01       	movw	r30, r24
    1044:	60 81       	ld	r22, Z
    1046:	ce 01       	movw	r24, r28
    1048:	8f 5b       	subi	r24, 0xBF	; 191
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	fc 01       	movw	r30, r24
    104e:	70 81       	ld	r23, Z
    1050:	ce 01       	movw	r24, r28
    1052:	8e 5b       	subi	r24, 0xBE	; 190
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	fc 01       	movw	r30, r24
    1058:	80 81       	ld	r24, Z
    105a:	fe 01       	movw	r30, r28
    105c:	ed 5b       	subi	r30, 0xBD	; 189
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	90 81       	ld	r25, Z
    1062:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Dis_ON);
    1066:	2c e0       	ldi	r18, 0x0C	; 12
    1068:	4e ad       	ldd	r20, Y+62	; 0x3e
    106a:	5f ad       	ldd	r21, Y+63	; 0x3f
    106c:	ce 01       	movw	r24, r28
    106e:	80 5c       	subi	r24, 0xC0	; 192
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	fc 01       	movw	r30, r24
    1074:	60 81       	ld	r22, Z
    1076:	ce 01       	movw	r24, r28
    1078:	8f 5b       	subi	r24, 0xBF	; 191
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	fc 01       	movw	r30, r24
    107e:	70 81       	ld	r23, Z
    1080:	ce 01       	movw	r24, r28
    1082:	8e 5b       	subi	r24, 0xBE	; 190
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	fc 01       	movw	r30, r24
    1088:	80 81       	ld	r24, Z
    108a:	fe 01       	movw	r30, r28
    108c:	ed 5b       	subi	r30, 0xBD	; 189
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	90 81       	ld	r25, Z
    1092:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_4_Bit_Mode);
    1096:	28 e2       	ldi	r18, 0x28	; 40
    1098:	4e ad       	ldd	r20, Y+62	; 0x3e
    109a:	5f ad       	ldd	r21, Y+63	; 0x3f
    109c:	ce 01       	movw	r24, r28
    109e:	80 5c       	subi	r24, 0xC0	; 192
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	fc 01       	movw	r30, r24
    10a4:	60 81       	ld	r22, Z
    10a6:	ce 01       	movw	r24, r28
    10a8:	8f 5b       	subi	r24, 0xBF	; 191
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	fc 01       	movw	r30, r24
    10ae:	70 81       	ld	r23, Z
    10b0:	ce 01       	movw	r24, r28
    10b2:	8e 5b       	subi	r24, 0xBE	; 190
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	fc 01       	movw	r30, r24
    10b8:	80 81       	ld	r24, Z
    10ba:	fe 01       	movw	r30, r28
    10bc:	ed 5b       	subi	r30, 0xBD	; 189
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	90 81       	ld	r25, Z
    10c2:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, 0x80);
    10c6:	20 e8       	ldi	r18, 0x80	; 128
    10c8:	4e ad       	ldd	r20, Y+62	; 0x3e
    10ca:	5f ad       	ldd	r21, Y+63	; 0x3f
    10cc:	ce 01       	movw	r24, r28
    10ce:	80 5c       	subi	r24, 0xC0	; 192
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	fc 01       	movw	r30, r24
    10d4:	60 81       	ld	r22, Z
    10d6:	ce 01       	movw	r24, r28
    10d8:	8f 5b       	subi	r24, 0xBF	; 191
    10da:	9f 4f       	sbci	r25, 0xFF	; 255
    10dc:	fc 01       	movw	r30, r24
    10de:	70 81       	ld	r23, Z
    10e0:	ce 01       	movw	r24, r28
    10e2:	8e 5b       	subi	r24, 0xBE	; 190
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	fc 01       	movw	r30, r24
    10e8:	80 81       	ld	r24, Z
    10ea:	fe 01       	movw	r30, r28
    10ec:	ed 5b       	subi	r30, 0xBD	; 189
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	90 81       	ld	r25, Z
    10f2:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
}
    10f6:	00 00       	nop
    10f8:	cd 5b       	subi	r28, 0xBD	; 189
    10fa:	df 4f       	sbci	r29, 0xFF	; 255
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <LCD_4_CMD_Write>:
  * @brief  : Write Command in Lcd 4 Bit Mode
  * @param  : CopyLCD
  * @param  : CopyCMD
  */
void LCD_4_CMD_Write(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	00 d0       	rcall	.+0      	; 0x1112 <LCD_4_CMD_Write+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <LCD_4_CMD_Write+0x8>
    1114:	00 d0       	rcall	.+0      	; 0x1116 <LCD_4_CMD_Write+0xa>
    1116:	1f 92       	push	r1
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	49 83       	std	Y+1, r20	; 0x01
    111e:	5a 83       	std	Y+2, r21	; 0x02
    1120:	6b 83       	std	Y+3, r22	; 0x03
    1122:	7c 83       	std	Y+4, r23	; 0x04
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	9e 83       	std	Y+6, r25	; 0x06
    1128:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_Low);
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyCMD >> 4);
    1132:	8f 81       	ldd	r24, Y+7	; 0x07
    1134:	82 95       	swap	r24
    1136:	8f 70       	andi	r24, 0x0F	; 15
    1138:	28 2f       	mov	r18, r24
    113a:	49 81       	ldd	r20, Y+1	; 0x01
    113c:	5a 81       	ldd	r21, Y+2	; 0x02
    113e:	6b 81       	ldd	r22, Y+3	; 0x03
    1140:	7c 81       	ldd	r23, Y+4	; 0x04
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    114a:	49 81       	ldd	r20, Y+1	; 0x01
    114c:	5a 81       	ldd	r21, Y+2	; 0x02
    114e:	6b 81       	ldd	r22, Y+3	; 0x03
    1150:	7c 81       	ldd	r23, Y+4	; 0x04
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	0e 94 93 0a 	call	0x1526	; 0x1526 <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyCMD);
    115a:	2f 81       	ldd	r18, Y+7	; 0x07
    115c:	49 81       	ldd	r20, Y+1	; 0x01
    115e:	5a 81       	ldd	r21, Y+2	; 0x02
    1160:	6b 81       	ldd	r22, Y+3	; 0x03
    1162:	7c 81       	ldd	r23, Y+4	; 0x04
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    116c:	49 81       	ldd	r20, Y+1	; 0x01
    116e:	5a 81       	ldd	r21, Y+2	; 0x02
    1170:	6b 81       	ldd	r22, Y+3	; 0x03
    1172:	7c 81       	ldd	r23, Y+4	; 0x04
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	0e 94 93 0a 	call	0x1526	; 0x1526 <LCD_4_SendEnable_Signal>
}
    117c:	00 00       	nop
    117e:	27 96       	adiw	r28, 0x07	; 7
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <LCD_4_Char_Write>:
  * @brief  : Write Character in first address in Lcd 4 Bit Mode
  * @param  : CopyLCD
  * @param  : CopyChar
  */
void LCD_4_Char_Write(LCD_4_MODE CopyLCD , u8 CopyChar)
{
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	00 d0       	rcall	.+0      	; 0x1196 <LCD_4_Char_Write+0x6>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <LCD_4_Char_Write+0x8>
    1198:	00 d0       	rcall	.+0      	; 0x119a <LCD_4_Char_Write+0xa>
    119a:	1f 92       	push	r1
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	49 83       	std	Y+1, r20	; 0x01
    11a2:	5a 83       	std	Y+2, r21	; 0x02
    11a4:	6b 83       	std	Y+3, r22	; 0x03
    11a6:	7c 83       	std	Y+4, r23	; 0x04
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_High);
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyChar >> 4);
    11b6:	8f 81       	ldd	r24, Y+7	; 0x07
    11b8:	82 95       	swap	r24
    11ba:	8f 70       	andi	r24, 0x0F	; 15
    11bc:	28 2f       	mov	r18, r24
    11be:	49 81       	ldd	r20, Y+1	; 0x01
    11c0:	5a 81       	ldd	r21, Y+2	; 0x02
    11c2:	6b 81       	ldd	r22, Y+3	; 0x03
    11c4:	7c 81       	ldd	r23, Y+4	; 0x04
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ca:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    11ce:	49 81       	ldd	r20, Y+1	; 0x01
    11d0:	5a 81       	ldd	r21, Y+2	; 0x02
    11d2:	6b 81       	ldd	r22, Y+3	; 0x03
    11d4:	7c 81       	ldd	r23, Y+4	; 0x04
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	0e 94 93 0a 	call	0x1526	; 0x1526 <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyChar);
    11de:	2f 81       	ldd	r18, Y+7	; 0x07
    11e0:	49 81       	ldd	r20, Y+1	; 0x01
    11e2:	5a 81       	ldd	r21, Y+2	; 0x02
    11e4:	6b 81       	ldd	r22, Y+3	; 0x03
    11e6:	7c 81       	ldd	r23, Y+4	; 0x04
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    11f0:	49 81       	ldd	r20, Y+1	; 0x01
    11f2:	5a 81       	ldd	r21, Y+2	; 0x02
    11f4:	6b 81       	ldd	r22, Y+3	; 0x03
    11f6:	7c 81       	ldd	r23, Y+4	; 0x04
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	0e 94 93 0a 	call	0x1526	; 0x1526 <LCD_4_SendEnable_Signal>
}
    1200:	00 00       	nop
    1202:	27 96       	adiw	r28, 0x07	; 7
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <LCD_4_Char_Postion>:
  * @param  : CopyRow
  * @param  : CopyCoulmn
  * @param  : CopyChar
  */
void LCD_4_Char_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 CopyChar)
{
    1214:	ef 92       	push	r14
    1216:	0f 93       	push	r16
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	29 97       	sbiw	r28, 0x09	; 9
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	49 83       	std	Y+1, r20	; 0x01
    122e:	5a 83       	std	Y+2, r21	; 0x02
    1230:	6b 83       	std	Y+3, r22	; 0x03
    1232:	7c 83       	std	Y+4, r23	; 0x04
    1234:	8d 83       	std	Y+5, r24	; 0x05
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	2f 83       	std	Y+7, r18	; 0x07
    123a:	08 87       	std	Y+8, r16	; 0x08
    123c:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
    123e:	08 85       	ldd	r16, Y+8	; 0x08
    1240:	2f 81       	ldd	r18, Y+7	; 0x07
    1242:	49 81       	ldd	r20, Y+1	; 0x01
    1244:	5a 81       	ldd	r21, Y+2	; 0x02
    1246:	6b 81       	ldd	r22, Y+3	; 0x03
    1248:	7c 81       	ldd	r23, Y+4	; 0x04
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LCD_4_SetCursor_Position>
	LCD_4_Char_Write(CopyLCD , CopyChar);
    1252:	29 85       	ldd	r18, Y+9	; 0x09
    1254:	49 81       	ldd	r20, Y+1	; 0x01
    1256:	5a 81       	ldd	r21, Y+2	; 0x02
    1258:	6b 81       	ldd	r22, Y+3	; 0x03
    125a:	7c 81       	ldd	r23, Y+4	; 0x04
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_4_Char_Write>
}
    1264:	00 00       	nop
    1266:	29 96       	adiw	r28, 0x09	; 9
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	0f 91       	pop	r16
    1278:	ef 90       	pop	r14
    127a:	08 95       	ret

0000127c <LCD_4_Str_Write>:
  * @brief  : Write String in first address in Lcd 4 Bit Mode
  * @param  : CopyLCD
  * @param  : CopySTR
  */
void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	28 97       	sbiw	r28, 0x08	; 8
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	49 83       	std	Y+1, r20	; 0x01
    1292:	5a 83       	std	Y+2, r21	; 0x02
    1294:	6b 83       	std	Y+3, r22	; 0x03
    1296:	7c 83       	std	Y+4, r23	; 0x04
    1298:	8d 83       	std	Y+5, r24	; 0x05
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	38 87       	std	Y+8, r19	; 0x08
    129e:	2f 83       	std	Y+7, r18	; 0x07
	while(*CopySTR)
    12a0:	12 c0       	rjmp	.+36     	; 0x12c6 <LCD_4_Str_Write+0x4a>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
    12a2:	8f 81       	ldd	r24, Y+7	; 0x07
    12a4:	98 85       	ldd	r25, Y+8	; 0x08
    12a6:	9c 01       	movw	r18, r24
    12a8:	2f 5f       	subi	r18, 0xFF	; 255
    12aa:	3f 4f       	sbci	r19, 0xFF	; 255
    12ac:	38 87       	std	Y+8, r19	; 0x08
    12ae:	2f 83       	std	Y+7, r18	; 0x07
    12b0:	fc 01       	movw	r30, r24
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	49 81       	ldd	r20, Y+1	; 0x01
    12b8:	5a 81       	ldd	r21, Y+2	; 0x02
    12ba:	6b 81       	ldd	r22, Y+3	; 0x03
    12bc:	7c 81       	ldd	r23, Y+4	; 0x04
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_4_Char_Write>
  * @param  : CopyLCD
  * @param  : CopySTR
  */
void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
	while(*CopySTR)
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	fc 01       	movw	r30, r24
    12cc:	80 81       	ld	r24, Z
    12ce:	88 23       	and	r24, r24
    12d0:	41 f7       	brne	.-48     	; 0x12a2 <LCD_4_Str_Write+0x26>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
    12d2:	00 00       	nop
    12d4:	28 96       	adiw	r28, 0x08	; 8
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <LCD_4_STR_Postion>:
  * @param  : CopyRow
  * @param  : CopyCoulmn
  * @param  : CopySTR
  */
void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	2a 97       	sbiw	r28, 0x0a	; 10
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	49 83       	std	Y+1, r20	; 0x01
    1302:	5a 83       	std	Y+2, r21	; 0x02
    1304:	6b 83       	std	Y+3, r22	; 0x03
    1306:	7c 83       	std	Y+4, r23	; 0x04
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	2f 83       	std	Y+7, r18	; 0x07
    130e:	08 87       	std	Y+8, r16	; 0x08
    1310:	fa 86       	std	Y+10, r15	; 0x0a
    1312:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
    1314:	08 85       	ldd	r16, Y+8	; 0x08
    1316:	2f 81       	ldd	r18, Y+7	; 0x07
    1318:	49 81       	ldd	r20, Y+1	; 0x01
    131a:	5a 81       	ldd	r21, Y+2	; 0x02
    131c:	6b 81       	ldd	r22, Y+3	; 0x03
    131e:	7c 81       	ldd	r23, Y+4	; 0x04
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LCD_4_SetCursor_Position>
	while(*CopySTR)
    1328:	12 c0       	rjmp	.+36     	; 0x134e <LCD_4_STR_Postion+0x68>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
    132a:	89 85       	ldd	r24, Y+9	; 0x09
    132c:	9a 85       	ldd	r25, Y+10	; 0x0a
    132e:	9c 01       	movw	r18, r24
    1330:	2f 5f       	subi	r18, 0xFF	; 255
    1332:	3f 4f       	sbci	r19, 0xFF	; 255
    1334:	3a 87       	std	Y+10, r19	; 0x0a
    1336:	29 87       	std	Y+9, r18	; 0x09
    1338:	fc 01       	movw	r30, r24
    133a:	80 81       	ld	r24, Z
    133c:	28 2f       	mov	r18, r24
    133e:	49 81       	ldd	r20, Y+1	; 0x01
    1340:	5a 81       	ldd	r21, Y+2	; 0x02
    1342:	6b 81       	ldd	r22, Y+3	; 0x03
    1344:	7c 81       	ldd	r23, Y+4	; 0x04
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_4_Char_Write>
  * @param  : CopySTR
  */
void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
	while(*CopySTR)
    134e:	89 85       	ldd	r24, Y+9	; 0x09
    1350:	9a 85       	ldd	r25, Y+10	; 0x0a
    1352:	fc 01       	movw	r30, r24
    1354:	80 81       	ld	r24, Z
    1356:	88 23       	and	r24, r24
    1358:	41 f7       	brne	.-48     	; 0x132a <LCD_4_STR_Postion+0x44>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
    135a:	00 00       	nop
    135c:	2a 96       	adiw	r28, 0x0a	; 10
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	08 95       	ret

00001374 <Convert_u8_to_String>:
  * @brief  : Conversion Number To String And Store String In CopySTR (Array)
  * @param  : CopyValueu8
  * @param  : CopySTR
  */
void Convert_u8_to_String(u8 CopyValueu8 , u8 *CopySTR)
{
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	00 d0       	rcall	.+0      	; 0x137a <Convert_u8_to_String+0x6>
    137a:	1f 92       	push	r1
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	7b 83       	std	Y+3, r23	; 0x03
    1384:	6a 83       	std	Y+2, r22	; 0x02
	memset(CopySTR , '\0' , 4);
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	9b 81       	ldd	r25, Y+3	; 0x03
    138a:	44 e0       	ldi	r20, 0x04	; 4
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	0e 94 f7 17 	call	0x2fee	; 0x2fee <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	29 2f       	mov	r18, r25
    139e:	2f 93       	push	r18
    13a0:	8f 93       	push	r24
    13a2:	8e e9       	ldi	r24, 0x9E	; 158
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	89 2f       	mov	r24, r25
    13a8:	8f 93       	push	r24
    13aa:	8e e9       	ldi	r24, 0x9E	; 158
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	8f 93       	push	r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	8f 93       	push	r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	8f 93       	push	r24
    13b8:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <sprintf>
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
}
    13c8:	00 00       	nop
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <Convert_u16_to_String>:
  * @brief  : Conversion Number To String And Store String In CopySTR (Array)
  * @param  : CopyValueu16
  * @param  : CopySTR
  */
void Convert_u16_to_String(u16 CopyValueu16 , u8 *CopySTR)
{
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	00 d0       	rcall	.+0      	; 0x13dc <Convert_u16_to_String+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <Convert_u16_to_String+0x8>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	7c 83       	std	Y+4, r23	; 0x04
    13e8:	6b 83       	std	Y+3, r22	; 0x03
	memset(CopySTR , '\0' , 6);
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	46 e0       	ldi	r20, 0x06	; 6
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	0e 94 f7 17 	call	0x2fee	; 0x2fee <memset>
	sprintf(CopySTR , "%i", CopyValueu16);
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	8f 93       	push	r24
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	8f 93       	push	r24
    1402:	8e e9       	ldi	r24, 0x9E	; 158
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	89 2f       	mov	r24, r25
    1408:	8f 93       	push	r24
    140a:	8e e9       	ldi	r24, 0x9E	; 158
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	8f 93       	push	r24
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	8f 93       	push	r24
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	8f 93       	push	r24
    1418:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <sprintf>
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
}
    1428:	00 00       	nop
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <Convert_u32_to_String>:
  * @brief  : Conversion Number To String And Store String In CopySTR (Array)
  * @param  : CopyValueu32
  * @param  : CopySTR
  */
void Convert_u32_to_String(u32 CopyValueu32 , u8 *CopySTR)
{
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	00 d0       	rcall	.+0      	; 0x143e <Convert_u32_to_String+0x6>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <Convert_u32_to_String+0x8>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <Convert_u32_to_String+0xa>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	69 83       	std	Y+1, r22	; 0x01
    1448:	7a 83       	std	Y+2, r23	; 0x02
    144a:	8b 83       	std	Y+3, r24	; 0x03
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	5e 83       	std	Y+6, r21	; 0x06
    1450:	4d 83       	std	Y+5, r20	; 0x05
	memset(CopySTR , '\0' , 11);
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	4b e0       	ldi	r20, 0x0B	; 11
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <memset>
	sprintf(CopySTR , "%i", CopyValueu32);
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	8f 93       	push	r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	8f 93       	push	r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	8f 93       	push	r24
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	8f 93       	push	r24
    1472:	8e e9       	ldi	r24, 0x9E	; 158
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	89 2f       	mov	r24, r25
    1478:	8f 93       	push	r24
    147a:	8e e9       	ldi	r24, 0x9E	; 158
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	8f 93       	push	r24
    1480:	8e 81       	ldd	r24, Y+6	; 0x06
    1482:	8f 93       	push	r24
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	8f 93       	push	r24
    1488:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <sprintf>
    148c:	8d b7       	in	r24, 0x3d	; 61
    148e:	9e b7       	in	r25, 0x3e	; 62
    1490:	08 96       	adiw	r24, 0x08	; 8
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
}
    149c:	00 00       	nop
    149e:	26 96       	adiw	r28, 0x06	; 6
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <LCD_4_GetData>:
  * @brief  : Static Function To Get Data of LCD 4 Bit Mode
  * @param  : CopyLCD
  * @param  : CopyCMD
  */
static void LCD_4_GetData(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <LCD_4_GetData+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <LCD_4_GetData+0x8>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <LCD_4_GetData+0xa>
    14ba:	1f 92       	push	r1
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	49 83       	std	Y+1, r20	; 0x01
    14c2:	5a 83       	std	Y+2, r21	; 0x02
    14c4:	6b 83       	std	Y+3, r22	; 0x03
    14c6:	7c 83       	std	Y+4, r23	; 0x04
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.Port[0] , (CopyCMD >> 0) & (u8)0x01);
    14ce:	8f 81       	ldd	r24, Y+7	; 0x07
    14d0:	98 2f       	mov	r25, r24
    14d2:	91 70       	andi	r25, 0x01	; 1
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	69 2f       	mov	r22, r25
    14d8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[1] , (CopyCMD >> 1) & (u8)0x01);
    14dc:	8f 81       	ldd	r24, Y+7	; 0x07
    14de:	86 95       	lsr	r24
    14e0:	98 2f       	mov	r25, r24
    14e2:	91 70       	andi	r25, 0x01	; 1
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	69 2f       	mov	r22, r25
    14e8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[2] , (CopyCMD >> 2) & (u8)0x01);
    14ec:	8f 81       	ldd	r24, Y+7	; 0x07
    14ee:	86 95       	lsr	r24
    14f0:	86 95       	lsr	r24
    14f2:	98 2f       	mov	r25, r24
    14f4:	91 70       	andi	r25, 0x01	; 1
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	69 2f       	mov	r22, r25
    14fa:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[3] , (CopyCMD >> 3) & (u8)0x01);
    14fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1500:	86 95       	lsr	r24
    1502:	86 95       	lsr	r24
    1504:	86 95       	lsr	r24
    1506:	98 2f       	mov	r25, r24
    1508:	91 70       	andi	r25, 0x01	; 1
    150a:	8e 81       	ldd	r24, Y+6	; 0x06
    150c:	69 2f       	mov	r22, r25
    150e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
}
    1512:	00 00       	nop
    1514:	27 96       	adiw	r28, 0x07	; 7
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <LCD_4_SendEnable_Signal>:
/**
  * @brief  : Static Function To Send Enable Signal
  * @param  : CopyLCD
  */
static void LCD_4_SendEnable_Signal(LCD_4_MODE CopyLCD)
{
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	a6 97       	sbiw	r28, 0x26	; 38
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	49 a3       	std	Y+33, r20	; 0x21
    153c:	5a a3       	std	Y+34, r21	; 0x22
    153e:	6b a3       	std	Y+35, r22	; 0x23
    1540:	7c a3       	std	Y+36, r23	; 0x24
    1542:	8d a3       	std	Y+37, r24	; 0x25
    1544:	9e a3       	std	Y+38, r25	; 0x26
	Dio_setPinVal(CopyLCD.E,Status_Pin_High);
    1546:	8a a1       	ldd	r24, Y+34	; 0x22
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a0 ea       	ldi	r26, 0xA0	; 160
    1554:	b0 e4       	ldi	r27, 0x40	; 64
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	ab 83       	std	Y+3, r26	; 0x03
    155c:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    155e:	2b ea       	ldi	r18, 0xAB	; 171
    1560:	3a ea       	ldi	r19, 0xAA	; 170
    1562:	4a ea       	ldi	r20, 0xAA	; 170
    1564:	5e e3       	ldi	r21, 0x3E	; 62
    1566:	69 81       	ldd	r22, Y+1	; 0x01
    1568:	7a 81       	ldd	r23, Y+2	; 0x02
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	af 83       	std	Y+7, r26	; 0x07
    157c:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e8       	ldi	r20, 0x80	; 128
    1584:	5e e3       	ldi	r21, 0x3E	; 62
    1586:	69 81       	ldd	r22, Y+1	; 0x01
    1588:	7a 81       	ldd	r23, Y+2	; 0x02
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	89 87       	std	Y+9, r24	; 0x09
    1598:	9a 87       	std	Y+10, r25	; 0x0a
    159a:	ab 87       	std	Y+11, r26	; 0x0b
    159c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	6d 81       	ldd	r22, Y+5	; 0x05
    15a8:	7e 81       	ldd	r23, Y+6	; 0x06
    15aa:	8f 81       	ldd	r24, Y+7	; 0x07
    15ac:	98 85       	ldd	r25, Y+8	; 0x08
    15ae:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    15b2:	88 23       	and	r24, r24
    15b4:	1c f4       	brge	.+6      	; 0x15bc <LCD_4_SendEnable_Signal+0x96>
		__ticks = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	8d 87       	std	Y+13, r24	; 0x0d
    15ba:	b2 c0       	rjmp	.+356    	; 0x1720 <LCD_4_SendEnable_Signal+0x1fa>
	else if (__tmp2 > 65535)
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	69 85       	ldd	r22, Y+9	; 0x09
    15c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    15c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    15cc:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	0c f0       	brlt	.+2      	; 0x15d6 <LCD_4_SendEnable_Signal+0xb0>
    15d4:	7b c0       	rjmp	.+246    	; 0x16cc <LCD_4_SendEnable_Signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	4a e7       	ldi	r20, 0x7A	; 122
    15dc:	54 e4       	ldi	r21, 0x44	; 68
    15de:	69 81       	ldd	r22, Y+1	; 0x01
    15e0:	7a 81       	ldd	r23, Y+2	; 0x02
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__divsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	8e 87       	std	Y+14, r24	; 0x0e
    15f0:	9f 87       	std	Y+15, r25	; 0x0f
    15f2:	a8 8b       	std	Y+16, r26	; 0x10
    15f4:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	4a e7       	ldi	r20, 0x7A	; 122
    15fc:	53 e4       	ldi	r21, 0x43	; 67
    15fe:	6e 85       	ldd	r22, Y+14	; 0x0e
    1600:	7f 85       	ldd	r23, Y+15	; 0x0f
    1602:	88 89       	ldd	r24, Y+16	; 0x10
    1604:	99 89       	ldd	r25, Y+17	; 0x11
    1606:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8a 8b       	std	Y+18, r24	; 0x12
    1610:	9b 8b       	std	Y+19, r25	; 0x13
    1612:	ac 8b       	std	Y+20, r26	; 0x14
    1614:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	5f e3       	ldi	r21, 0x3F	; 63
    161e:	6a 89       	ldd	r22, Y+18	; 0x12
    1620:	7b 89       	ldd	r23, Y+19	; 0x13
    1622:	8c 89       	ldd	r24, Y+20	; 0x14
    1624:	9d 89       	ldd	r25, Y+21	; 0x15
    1626:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    162a:	88 23       	and	r24, r24
    162c:	2c f4       	brge	.+10     	; 0x1638 <LCD_4_SendEnable_Signal+0x112>
		__ticks = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9f 8b       	std	Y+23, r25	; 0x17
    1634:	8e 8b       	std	Y+22, r24	; 0x16
    1636:	3f c0       	rjmp	.+126    	; 0x16b6 <LCD_4_SendEnable_Signal+0x190>
	else if (__tmp > 65535)
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	3f ef       	ldi	r19, 0xFF	; 255
    163c:	4f e7       	ldi	r20, 0x7F	; 127
    163e:	57 e4       	ldi	r21, 0x47	; 71
    1640:	6a 89       	ldd	r22, Y+18	; 0x12
    1642:	7b 89       	ldd	r23, Y+19	; 0x13
    1644:	8c 89       	ldd	r24, Y+20	; 0x14
    1646:	9d 89       	ldd	r25, Y+21	; 0x15
    1648:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    164c:	18 16       	cp	r1, r24
    164e:	4c f5       	brge	.+82     	; 0x16a2 <LCD_4_SendEnable_Signal+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e2       	ldi	r20, 0x20	; 32
    1656:	51 e4       	ldi	r21, 0x41	; 65
    1658:	6e 85       	ldd	r22, Y+14	; 0x0e
    165a:	7f 85       	ldd	r23, Y+15	; 0x0f
    165c:	88 89       	ldd	r24, Y+16	; 0x10
    165e:	99 89       	ldd	r25, Y+17	; 0x11
    1660:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9f 8b       	std	Y+23, r25	; 0x17
    1676:	8e 8b       	std	Y+22, r24	; 0x16
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <LCD_4_SendEnable_Signal+0x172>
    167a:	89 e1       	ldi	r24, 0x19	; 25
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	99 8f       	std	Y+25, r25	; 0x19
    1680:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1682:	88 8d       	ldd	r24, Y+24	; 0x18
    1684:	99 8d       	ldd	r25, Y+25	; 0x19
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <LCD_4_SendEnable_Signal+0x160>
    168a:	99 8f       	std	Y+25, r25	; 0x19
    168c:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	8e 89       	ldd	r24, Y+22	; 0x16
    1690:	9f 89       	ldd	r25, Y+23	; 0x17
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	9f 8b       	std	Y+23, r25	; 0x17
    1696:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	8e 89       	ldd	r24, Y+22	; 0x16
    169a:	9f 89       	ldd	r25, Y+23	; 0x17
    169c:	89 2b       	or	r24, r25
    169e:	69 f7       	brne	.-38     	; 0x167a <LCD_4_SendEnable_Signal+0x154>
    16a0:	3f c0       	rjmp	.+126    	; 0x1720 <LCD_4_SendEnable_Signal+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a2:	6a 89       	ldd	r22, Y+18	; 0x12
    16a4:	7b 89       	ldd	r23, Y+19	; 0x13
    16a6:	8c 89       	ldd	r24, Y+20	; 0x14
    16a8:	9d 89       	ldd	r25, Y+21	; 0x15
    16aa:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9f 8b       	std	Y+23, r25	; 0x17
    16b4:	8e 8b       	std	Y+22, r24	; 0x16
    16b6:	8e 89       	ldd	r24, Y+22	; 0x16
    16b8:	9f 89       	ldd	r25, Y+23	; 0x17
    16ba:	9b 8f       	std	Y+27, r25	; 0x1b
    16bc:	8a 8f       	std	Y+26, r24	; 0x1a
    16be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <LCD_4_SendEnable_Signal+0x19c>
    16c6:	9b 8f       	std	Y+27, r25	; 0x1b
    16c8:	8a 8f       	std	Y+26, r24	; 0x1a
    16ca:	2a c0       	rjmp	.+84     	; 0x1720 <LCD_4_SendEnable_Signal+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	53 e4       	ldi	r21, 0x43	; 67
    16d4:	6d 81       	ldd	r22, Y+5	; 0x05
    16d6:	7e 81       	ldd	r23, Y+6	; 0x06
    16d8:	8f 81       	ldd	r24, Y+7	; 0x07
    16da:	98 85       	ldd	r25, Y+8	; 0x08
    16dc:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	ac f4       	brge	.+42     	; 0x170e <LCD_4_SendEnable_Signal+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    16e4:	69 85       	ldd	r22, Y+9	; 0x09
    16e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    16e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ec:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9d 8f       	std	Y+29, r25	; 0x1d
    16f6:	8c 8f       	std	Y+28, r24	; 0x1c
    16f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16fc:	9f 8f       	std	Y+31, r25	; 0x1f
    16fe:	8e 8f       	std	Y+30, r24	; 0x1e
    1700:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1702:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <LCD_4_SendEnable_Signal+0x1de>
    1708:	9f 8f       	std	Y+31, r25	; 0x1f
    170a:	8e 8f       	std	Y+30, r24	; 0x1e
    170c:	0f c0       	rjmp	.+30     	; 0x172c <LCD_4_SendEnable_Signal+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    170e:	6d 81       	ldd	r22, Y+5	; 0x05
    1710:	7e 81       	ldd	r23, Y+6	; 0x06
    1712:	8f 81       	ldd	r24, Y+7	; 0x07
    1714:	98 85       	ldd	r25, Y+8	; 0x08
    1716:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	8d 87       	std	Y+13, r24	; 0x0d
    1720:	8d 85       	ldd	r24, Y+13	; 0x0d
    1722:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1724:	88 a1       	ldd	r24, Y+32	; 0x20
    1726:	8a 95       	dec	r24
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_4_SendEnable_Signal+0x200>
    172a:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(5);
	Dio_setPinVal(CopyLCD.E, Status_Pin_Low);
    172c:	8a a1       	ldd	r24, Y+34	; 0x22
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
}
    1734:	00 00       	nop
    1736:	a6 96       	adiw	r28, 0x26	; 38
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <LCD_4_SetCursor_Position>:
  * @param  : CopyLCD
  * @param  : CopyRow
  * @param  : CopyCoulmn
  */
static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
    1748:	0f 93       	push	r16
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	28 97       	sbiw	r28, 0x08	; 8
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	49 83       	std	Y+1, r20	; 0x01
    1760:	5a 83       	std	Y+2, r21	; 0x02
    1762:	6b 83       	std	Y+3, r22	; 0x03
    1764:	7c 83       	std	Y+4, r23	; 0x04
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	2f 83       	std	Y+7, r18	; 0x07
    176c:	08 87       	std	Y+8, r16	; 0x08
	CopyCoulmn--;
    176e:	88 85       	ldd	r24, Y+8	; 0x08
    1770:	81 50       	subi	r24, 0x01	; 1
    1772:	88 87       	std	Y+8, r24	; 0x08
	switch (CopyRow) {
    1774:	8f 81       	ldd	r24, Y+7	; 0x07
    1776:	88 2f       	mov	r24, r24
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	91 05       	cpc	r25, r1
    177e:	c1 f0       	breq	.+48     	; 0x17b0 <LCD_4_SetCursor_Position+0x68>
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	91 05       	cpc	r25, r1
    1784:	1c f4       	brge	.+6      	; 0x178c <LCD_4_SetCursor_Position+0x44>
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	39 f0       	breq	.+14     	; 0x1798 <LCD_4_SetCursor_Position+0x50>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    178a:	36 c0       	rjmp	.+108    	; 0x17f8 <LCD_4_SetCursor_Position+0xb0>
  * @param  : CopyCoulmn
  */
static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
    178c:	83 30       	cpi	r24, 0x03	; 3
    178e:	91 05       	cpc	r25, r1
    1790:	d9 f0       	breq	.+54     	; 0x17c8 <LCD_4_SetCursor_Position+0x80>
    1792:	04 97       	sbiw	r24, 0x04	; 4
    1794:	29 f1       	breq	.+74     	; 0x17e0 <LCD_4_SetCursor_Position+0x98>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    1796:	30 c0       	rjmp	.+96     	; 0x17f8 <LCD_4_SetCursor_Position+0xb0>
  */
static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
    1798:	88 85       	ldd	r24, Y+8	; 0x08
    179a:	80 58       	subi	r24, 0x80	; 128
    179c:	28 2f       	mov	r18, r24
    179e:	49 81       	ldd	r20, Y+1	; 0x01
    17a0:	5a 81       	ldd	r21, Y+2	; 0x02
    17a2:	6b 81       	ldd	r22, Y+3	; 0x03
    17a4:	7c 81       	ldd	r23, Y+4	; 0x04
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
    17ae:	24 c0       	rjmp	.+72     	; 0x17f8 <LCD_4_SetCursor_Position+0xb0>
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
    17b0:	88 85       	ldd	r24, Y+8	; 0x08
    17b2:	80 54       	subi	r24, 0x40	; 64
    17b4:	28 2f       	mov	r18, r24
    17b6:	49 81       	ldd	r20, Y+1	; 0x01
    17b8:	5a 81       	ldd	r21, Y+2	; 0x02
    17ba:	6b 81       	ldd	r22, Y+3	; 0x03
    17bc:	7c 81       	ldd	r23, Y+4	; 0x04
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
    17c6:	18 c0       	rjmp	.+48     	; 0x17f8 <LCD_4_SetCursor_Position+0xb0>
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
    17c8:	88 85       	ldd	r24, Y+8	; 0x08
    17ca:	8c 56       	subi	r24, 0x6C	; 108
    17cc:	28 2f       	mov	r18, r24
    17ce:	49 81       	ldd	r20, Y+1	; 0x01
    17d0:	5a 81       	ldd	r21, Y+2	; 0x02
    17d2:	6b 81       	ldd	r22, Y+3	; 0x03
    17d4:	7c 81       	ldd	r23, Y+4	; 0x04
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
    17de:	0c c0       	rjmp	.+24     	; 0x17f8 <LCD_4_SetCursor_Position+0xb0>
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
    17e0:	88 85       	ldd	r24, Y+8	; 0x08
    17e2:	8c 52       	subi	r24, 0x2C	; 44
    17e4:	28 2f       	mov	r18, r24
    17e6:	49 81       	ldd	r20, Y+1	; 0x01
    17e8:	5a 81       	ldd	r21, Y+2	; 0x02
    17ea:	6b 81       	ldd	r22, Y+3	; 0x03
    17ec:	7c 81       	ldd	r23, Y+4	; 0x04
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
    17f6:	00 00       	nop
		default: break;
	}
}
    17f8:	00 00       	nop
    17fa:	28 96       	adiw	r28, 0x08	; 8
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	0f 91       	pop	r16
    180c:	08 95       	ret

0000180e <keypad_vidInit>:
/**
  * @brief  : Initialization KeyPad Pins
  * @param  : CopyKeyPad
  */
void keypad_vidInit()
{
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinSDir(Row_Pin,NO_ROW,Direction_Pin_Input);
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	64 e0       	ldi	r22, 0x04	; 4
    181a:	8e e8       	ldi	r24, 0x8E	; 142
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <DIO_vidSetPinSDir>
	DIO_vidSetPinSDir(Col_Pin,NO_COL,Direction_Pin_Output);
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	64 e0       	ldi	r22, 0x04	; 4
    1826:	82 e9       	ldi	r24, 0x92	; 146
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <DIO_vidSetPinSDir>
	DIO_vidSetPinSVal(Row_Pin,NO_ROW,Status_Pin_High);
    182e:	41 e0       	ldi	r20, 0x01	; 1
    1830:	64 e0       	ldi	r22, 0x04	; 4
    1832:	8e e8       	ldi	r24, 0x8E	; 142
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 b0 03 	call	0x760	; 0x760 <DIO_vidSetPinSVal>
	DIO_vidSetPinSVal(Col_Pin,NO_COL,Status_Pin_High);
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	64 e0       	ldi	r22, 0x04	; 4
    183e:	82 e9       	ldi	r24, 0x92	; 146
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 b0 03 	call	0x760	; 0x760 <DIO_vidSetPinSVal>
}
    1846:	00 00       	nop
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	08 95       	ret

0000184e <keypad_u8Stat>:
  * @brief  : Get Value From KeyPad Pins And Store It In CopyValue
  * @param  : CopyKeyPad
  * @param  : CopyValue
  */
u8 keypad_u8Stat(u8 *ptr)
{
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	63 97       	sbiw	r28, 0x13	; 19
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	9b 8b       	std	Y+19, r25	; 0x13
    1864:	8a 8b       	std	Y+18, r24	; 0x12
	u8 i , j;
	u8 flag = 0;
    1866:	1b 82       	std	Y+3, r1	; 0x03
	for(i = 0 ; i < 4 ; i++)
    1868:	19 82       	std	Y+1, r1	; 0x01
    186a:	cc c0       	rjmp	.+408    	; 0x1a04 <keypad_u8Stat+0x1b6>
	{
		Dio_setPinVal(Col_Pin[i],Status_Pin_Low);
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	88 2f       	mov	r24, r24
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	8e 56       	subi	r24, 0x6E	; 110
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	fc 01       	movw	r30, r24
    1878:	80 81       	ld	r24, Z
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
		for(j=0;j<4;j++)
    1880:	1a 82       	std	Y+2, r1	; 0x02
    1882:	af c0       	rjmp	.+350    	; 0x19e2 <keypad_u8Stat+0x194>
		{
			if(Dio_getPinVal(Row_Pin[j]) == 0)
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	82 57       	subi	r24, 0x72	; 114
    188c:	9f 4f       	sbci	r25, 0xFF	; 255
    188e:	fc 01       	movw	r30, r24
    1890:	80 81       	ld	r24, Z
    1892:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Dio_getPinVal>
    1896:	88 23       	and	r24, r24
    1898:	09 f0       	breq	.+2      	; 0x189c <keypad_u8Stat+0x4e>
    189a:	a0 c0       	rjmp	.+320    	; 0x19dc <keypad_u8Stat+0x18e>
			{
				*ptr = Pattern[j][i];
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	22 0f       	add	r18, r18
    18aa:	33 1f       	adc	r19, r19
    18ac:	22 0f       	add	r18, r18
    18ae:	33 1f       	adc	r19, r19
    18b0:	82 0f       	add	r24, r18
    18b2:	93 1f       	adc	r25, r19
    18b4:	82 58       	subi	r24, 0x82	; 130
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	fc 01       	movw	r30, r24
    18ba:	20 81       	ld	r18, Z
    18bc:	8a 89       	ldd	r24, Y+18	; 0x12
    18be:	9b 89       	ldd	r25, Y+19	; 0x13
    18c0:	fc 01       	movw	r30, r24
    18c2:	20 83       	st	Z, r18
				flag=1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	8b 83       	std	Y+3, r24	; 0x03
//				_delay_ms(20);
				while(Dio_getPinVal(Row_Pin[j])==0);
    18c8:	00 00       	nop
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	82 57       	subi	r24, 0x72	; 114
    18d2:	9f 4f       	sbci	r25, 0xFF	; 255
    18d4:	fc 01       	movw	r30, r24
    18d6:	80 81       	ld	r24, Z
    18d8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Dio_getPinVal>
    18dc:	88 23       	and	r24, r24
    18de:	a9 f3       	breq	.-22     	; 0x18ca <keypad_u8Stat+0x7c>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a0 ea       	ldi	r26, 0xA0	; 160
    18e6:	b1 e4       	ldi	r27, 0x41	; 65
    18e8:	8c 83       	std	Y+4, r24	; 0x04
    18ea:	9d 83       	std	Y+5, r25	; 0x05
    18ec:	ae 83       	std	Y+6, r26	; 0x06
    18ee:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a e7       	ldi	r20, 0x7A	; 122
    18f6:	53 e4       	ldi	r21, 0x43	; 67
    18f8:	6c 81       	ldd	r22, Y+4	; 0x04
    18fa:	7d 81       	ldd	r23, Y+5	; 0x05
    18fc:	8e 81       	ldd	r24, Y+6	; 0x06
    18fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1900:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	88 87       	std	Y+8, r24	; 0x08
    190a:	99 87       	std	Y+9, r25	; 0x09
    190c:	aa 87       	std	Y+10, r26	; 0x0a
    190e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	68 85       	ldd	r22, Y+8	; 0x08
    191a:	79 85       	ldd	r23, Y+9	; 0x09
    191c:	8a 85       	ldd	r24, Y+10	; 0x0a
    191e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1920:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    1924:	88 23       	and	r24, r24
    1926:	2c f4       	brge	.+10     	; 0x1932 <keypad_u8Stat+0xe4>
		__ticks = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9d 87       	std	Y+13, r25	; 0x0d
    192e:	8c 87       	std	Y+12, r24	; 0x0c
    1930:	3f c0       	rjmp	.+126    	; 0x19b0 <keypad_u8Stat+0x162>
	else if (__tmp > 65535)
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	57 e4       	ldi	r21, 0x47	; 71
    193a:	68 85       	ldd	r22, Y+8	; 0x08
    193c:	79 85       	ldd	r23, Y+9	; 0x09
    193e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1940:	9b 85       	ldd	r25, Y+11	; 0x0b
    1942:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    1946:	18 16       	cp	r1, r24
    1948:	4c f5       	brge	.+82     	; 0x199c <keypad_u8Stat+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	6c 81       	ldd	r22, Y+4	; 0x04
    1954:	7d 81       	ldd	r23, Y+5	; 0x05
    1956:	8e 81       	ldd	r24, Y+6	; 0x06
    1958:	9f 81       	ldd	r25, Y+7	; 0x07
    195a:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9d 87       	std	Y+13, r25	; 0x0d
    1970:	8c 87       	std	Y+12, r24	; 0x0c
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <keypad_u8Stat+0x144>
    1974:	89 e1       	ldi	r24, 0x19	; 25
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9f 87       	std	Y+15, r25	; 0x0f
    197a:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    197c:	8e 85       	ldd	r24, Y+14	; 0x0e
    197e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <keypad_u8Stat+0x132>
    1984:	9f 87       	std	Y+15, r25	; 0x0f
    1986:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1988:	8c 85       	ldd	r24, Y+12	; 0x0c
    198a:	9d 85       	ldd	r25, Y+13	; 0x0d
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	9d 87       	std	Y+13, r25	; 0x0d
    1990:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1992:	8c 85       	ldd	r24, Y+12	; 0x0c
    1994:	9d 85       	ldd	r25, Y+13	; 0x0d
    1996:	89 2b       	or	r24, r25
    1998:	69 f7       	brne	.-38     	; 0x1974 <keypad_u8Stat+0x126>
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <keypad_u8Stat+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199c:	68 85       	ldd	r22, Y+8	; 0x08
    199e:	79 85       	ldd	r23, Y+9	; 0x09
    19a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19a4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	9d 87       	std	Y+13, r25	; 0x0d
    19ae:	8c 87       	std	Y+12, r24	; 0x0c
    19b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    19b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    19b4:	99 8b       	std	Y+17, r25	; 0x11
    19b6:	88 8b       	std	Y+16, r24	; 0x10
    19b8:	88 89       	ldd	r24, Y+16	; 0x10
    19ba:	99 89       	ldd	r25, Y+17	; 0x11
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <keypad_u8Stat+0x16e>
    19c0:	99 8b       	std	Y+17, r25	; 0x11
    19c2:	88 8b       	std	Y+16, r24	; 0x10
//				if(DIO_u8GetPinVal(Row_Pin[j]) == 0)
//				{
//					*ptr = Pattern[j][i];
//				}
				_delay_ms(20);
				Dio_setPinVal(Col_Pin[i],Status_Pin_High);
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	8e 56       	subi	r24, 0x6E	; 110
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	fc 01       	movw	r30, r24
    19d0:	80 81       	ld	r24, Z
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				return flag;
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	19 c0       	rjmp	.+50     	; 0x1a0e <keypad_u8Stat+0x1c0>
	u8 i , j;
	u8 flag = 0;
	for(i = 0 ; i < 4 ; i++)
	{
		Dio_setPinVal(Col_Pin[i],Status_Pin_Low);
		for(j=0;j<4;j++)
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	8f 5f       	subi	r24, 0xFF	; 255
    19e0:	8a 83       	std	Y+2, r24	; 0x02
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	84 30       	cpi	r24, 0x04	; 4
    19e6:	08 f4       	brcc	.+2      	; 0x19ea <keypad_u8Stat+0x19c>
    19e8:	4d cf       	rjmp	.-358    	; 0x1884 <keypad_u8Stat+0x36>
				_delay_ms(20);
				Dio_setPinVal(Col_Pin[i],Status_Pin_High);
				return flag;
			}
		}
		Dio_setPinVal(Col_Pin[i],Status_Pin_High);
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	8e 56       	subi	r24, 0x6E	; 110
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	fc 01       	movw	r30, r24
    19f6:	80 81       	ld	r24, Z
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
  */
u8 keypad_u8Stat(u8 *ptr)
{
	u8 i , j;
	u8 flag = 0;
	for(i = 0 ; i < 4 ; i++)
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	8f 5f       	subi	r24, 0xFF	; 255
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <keypad_u8Stat+0x1be>
    1a0a:	30 cf       	rjmp	.-416    	; 0x186c <keypad_u8Stat+0x1e>
				return flag;
			}
		}
		Dio_setPinVal(Col_Pin[i],Status_Pin_High);
	}
	return flag;
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a0e:	63 96       	adiw	r28, 0x13	; 19
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

00001a20 <App_Init>:

/**
* @brief  : Function to Initialization All Peripherals
*/
void App_Init(void)
{
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
    1a24:	0f 93       	push	r16
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	2e 97       	sbiw	r28, 0x0e	; 14
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
	keypad_vidInit();
    1a3a:	0e 94 07 0c 	call	0x180e	; 0x180e <keypad_vidInit>
	LCD_4_INIT(LCD4);
    1a3e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    1a42:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    1a46:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    1a4a:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    1a4e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    1a52:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    1a56:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_4_INIT>
	LCD_4_STR_Postion(LCD4, Row_2, 1, "Welcome calculator");
    1a5a:	0f 2e       	mov	r0, r31
    1a5c:	f1 ea       	ldi	r31, 0xA1	; 161
    1a5e:	ef 2e       	mov	r14, r31
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	ff 2e       	mov	r15, r31
    1a64:	f0 2d       	mov	r31, r0
    1a66:	01 e0       	ldi	r16, 0x01	; 1
    1a68:	22 e0       	ldi	r18, 0x02	; 2
    1a6a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    1a6e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    1a72:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    1a76:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    1a7a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    1a7e:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    1a82:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_4_STR_Postion>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e8       	ldi	r25, 0x80	; 128
    1a8a:	ab e3       	ldi	r26, 0x3B	; 59
    1a8c:	b5 e4       	ldi	r27, 0x45	; 69
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	ab 83       	std	Y+3, r26	; 0x03
    1a94:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a e7       	ldi	r20, 0x7A	; 122
    1a9c:	53 e4       	ldi	r21, 0x43	; 67
    1a9e:	69 81       	ldd	r22, Y+1	; 0x01
    1aa0:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8d 83       	std	Y+5, r24	; 0x05
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	af 83       	std	Y+7, r26	; 0x07
    1ab4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac4:	98 85       	ldd	r25, Y+8	; 0x08
    1ac6:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <App_Init+0xb8>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9a 87       	std	Y+10, r25	; 0x0a
    1ad4:	89 87       	std	Y+9, r24	; 0x09
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <App_Init+0x136>
	else if (__tmp > 65535)
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae6:	98 85       	ldd	r25, Y+8	; 0x08
    1ae8:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	4c f5       	brge	.+82     	; 0x1b42 <App_Init+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	69 81       	ldd	r22, Y+1	; 0x01
    1afa:	7a 81       	ldd	r23, Y+2	; 0x02
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9a 87       	std	Y+10, r25	; 0x0a
    1b16:	89 87       	std	Y+9, r24	; 0x09
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <App_Init+0x118>
    1b1a:	89 e1       	ldi	r24, 0x19	; 25
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9c 87       	std	Y+12, r25	; 0x0c
    1b20:	8b 87       	std	Y+11, r24	; 0x0b
    1b22:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b24:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <App_Init+0x106>
    1b2a:	9c 87       	std	Y+12, r25	; 0x0c
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	9a 87       	std	Y+10, r25	; 0x0a
    1b36:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	89 2b       	or	r24, r25
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <App_Init+0xfa>
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <App_Init+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	6d 81       	ldd	r22, Y+5	; 0x05
    1b44:	7e 81       	ldd	r23, Y+6	; 0x06
    1b46:	8f 81       	ldd	r24, Y+7	; 0x07
    1b48:	98 85       	ldd	r25, Y+8	; 0x08
    1b4a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9a 87       	std	Y+10, r25	; 0x0a
    1b54:	89 87       	std	Y+9, r24	; 0x09
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	9e 87       	std	Y+14, r25	; 0x0e
    1b5c:	8d 87       	std	Y+13, r24	; 0x0d
    1b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <App_Init+0x142>
    1b66:	9e 87       	std	Y+14, r25	; 0x0e
    1b68:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(3000);
	LCD_4_CMD_Write(LCD4, _LCD_Clear_Dis);
    1b6a:	21 e0       	ldi	r18, 0x01	; 1
    1b6c:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    1b70:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    1b74:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    1b78:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    1b7c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    1b80:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    1b84:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>
}
    1b88:	00 00       	nop
    1b8a:	2e 96       	adiw	r28, 0x0e	; 14
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	08 95       	ret

00001ba2 <App_Loop>:
/********** SECTION : Functions Loop Definitions **********/
/**
* @brief  : Function to Looping My Program
*/
void App_Loop(void)
{
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	c8 56       	subi	r28, 0x68	; 104
    1bb4:	d1 09       	sbc	r29, r1
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
	u8 Keypad_Val = 0;
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	8d 59       	subi	r24, 0x9D	; 157
    1bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	10 82       	st	Z, r1
	LCD_4_STR_Postion(LCD4, Row_2, 1, "Enter Your Operation");
    1bca:	0f 2e       	mov	r0, r31
    1bcc:	f4 eb       	ldi	r31, 0xB4	; 180
    1bce:	ef 2e       	mov	r14, r31
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	ff 2e       	mov	r15, r31
    1bd4:	f0 2d       	mov	r31, r0
    1bd6:	01 e0       	ldi	r16, 0x01	; 1
    1bd8:	22 e0       	ldi	r18, 0x02	; 2
    1bda:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    1bde:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    1be2:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    1be6:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    1bea:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    1bee:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    1bf2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_4_STR_Postion>
	op = keypad_u8Stat(&Keypad_Val);
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	8d 59       	subi	r24, 0x9D	; 157
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	0e 94 27 0c 	call	0x184e	; 0x184e <keypad_u8Stat>
    1c00:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
    1c04:	9e 01       	movw	r18, r28
    1c06:	2b 5a       	subi	r18, 0xAB	; 171
    1c08:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	aa ef       	ldi	r26, 0xFA	; 250
    1c10:	b3 e4       	ldi	r27, 0x43	; 67
    1c12:	f9 01       	movw	r30, r18
    1c14:	80 83       	st	Z, r24
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	a2 83       	std	Z+2, r26	; 0x02
    1c1a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	8e 01       	movw	r16, r28
    1c1e:	07 5a       	subi	r16, 0xA7	; 167
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	ce 01       	movw	r24, r28
    1c24:	8b 5a       	subi	r24, 0xAB	; 171
    1c26:	9f 4f       	sbci	r25, 0xFF	; 255
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a e7       	ldi	r20, 0x7A	; 122
    1c2e:	53 e4       	ldi	r21, 0x43	; 67
    1c30:	fc 01       	movw	r30, r24
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	87 5a       	subi	r24, 0xA7	; 167
    1c50:	9f 4f       	sbci	r25, 0xFF	; 255
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	4c f4       	brge	.+18     	; 0x1c7e <App_Loop+0xdc>
		__ticks = 1;
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	83 5a       	subi	r24, 0xA3	; 163
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	21 e0       	ldi	r18, 0x01	; 1
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	fc 01       	movw	r30, r24
    1c78:	31 83       	std	Z+1, r19	; 0x01
    1c7a:	20 83       	st	Z, r18
    1c7c:	6d c0       	rjmp	.+218    	; 0x1d58 <App_Loop+0x1b6>
	else if (__tmp > 65535)
    1c7e:	ce 01       	movw	r24, r28
    1c80:	87 5a       	subi	r24, 0xA7	; 167
    1c82:	9f 4f       	sbci	r25, 0xFF	; 255
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    1c9a:	18 16       	cp	r1, r24
    1c9c:	0c f0       	brlt	.+2      	; 0x1ca0 <App_Loop+0xfe>
    1c9e:	4a c0       	rjmp	.+148    	; 0x1d34 <App_Loop+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	8b 5a       	subi	r24, 0xAB	; 171
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	fc 01       	movw	r30, r24
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	8e 01       	movw	r16, r28
    1cc2:	03 5a       	subi	r16, 0xA3	; 163
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
    1cd8:	24 c0       	rjmp	.+72     	; 0x1d22 <App_Loop+0x180>
    1cda:	ce 01       	movw	r24, r28
    1cdc:	81 5a       	subi	r24, 0xA1	; 161
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	29 e1       	ldi	r18, 0x19	; 25
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	31 83       	std	Z+1, r19	; 0x01
    1ce8:	20 83       	st	Z, r18
    1cea:	ce 01       	movw	r24, r28
    1cec:	81 5a       	subi	r24, 0xA1	; 161
    1cee:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <App_Loop+0x154>
    1cfa:	9e 01       	movw	r18, r28
    1cfc:	21 5a       	subi	r18, 0xA1	; 161
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	f9 01       	movw	r30, r18
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	ce 01       	movw	r24, r28
    1d08:	83 5a       	subi	r24, 0xA3	; 163
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	9e 01       	movw	r18, r28
    1d0e:	23 5a       	subi	r18, 0xA3	; 163
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	f9 01       	movw	r30, r18
    1d14:	20 81       	ld	r18, Z
    1d16:	31 81       	ldd	r19, Z+1	; 0x01
    1d18:	21 50       	subi	r18, 0x01	; 1
    1d1a:	31 09       	sbc	r19, r1
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	31 83       	std	Z+1, r19	; 0x01
    1d20:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d22:	ce 01       	movw	r24, r28
    1d24:	83 5a       	subi	r24, 0xA3	; 163
    1d26:	9f 4f       	sbci	r25, 0xFF	; 255
    1d28:	fc 01       	movw	r30, r24
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	89 2b       	or	r24, r25
    1d30:	a1 f6       	brne	.-88     	; 0x1cda <App_Loop+0x138>
    1d32:	2c c0       	rjmp	.+88     	; 0x1d8c <App_Loop+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	8e 01       	movw	r16, r28
    1d36:	03 5a       	subi	r16, 0xA3	; 163
    1d38:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	87 5a       	subi	r24, 0xA7	; 167
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	fc 01       	movw	r30, r24
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	f8 01       	movw	r30, r16
    1d54:	91 83       	std	Z+1, r25	; 0x01
    1d56:	80 83       	st	Z, r24
    1d58:	ce 01       	movw	r24, r28
    1d5a:	8f 59       	subi	r24, 0x9F	; 159
    1d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5e:	9e 01       	movw	r18, r28
    1d60:	23 5a       	subi	r18, 0xA3	; 163
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	f9 01       	movw	r30, r18
    1d66:	20 81       	ld	r18, Z
    1d68:	31 81       	ldd	r19, Z+1	; 0x01
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	31 83       	std	Z+1, r19	; 0x01
    1d6e:	20 83       	st	Z, r18
    1d70:	ce 01       	movw	r24, r28
    1d72:	8f 59       	subi	r24, 0x9F	; 159
    1d74:	9f 4f       	sbci	r25, 0xFF	; 255
    1d76:	fc 01       	movw	r30, r24
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <App_Loop+0x1da>
    1d80:	9e 01       	movw	r18, r28
    1d82:	2f 59       	subi	r18, 0x9F	; 159
    1d84:	3f 4f       	sbci	r19, 0xFF	; 255
    1d86:	f9 01       	movw	r30, r18
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	80 83       	st	Z, r24
	_delay_ms(500);
	LCD_4_Char_Postion(LCD4, Row_3, 10, Keypad_Val);
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	8d 59       	subi	r24, 0x9D	; 157
    1d90:	9f 4f       	sbci	r25, 0xFF	; 255
    1d92:	fc 01       	movw	r30, r24
    1d94:	80 81       	ld	r24, Z
    1d96:	e8 2e       	mov	r14, r24
    1d98:	0a e0       	ldi	r16, 0x0A	; 10
    1d9a:	23 e0       	ldi	r18, 0x03	; 3
    1d9c:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    1da0:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    1da4:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    1da8:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    1dac:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    1db0:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    1db4:	0e 94 0a 09 	call	0x1214	; 0x1214 <LCD_4_Char_Postion>
    1db8:	9e 01       	movw	r18, r28
    1dba:	29 5b       	subi	r18, 0xB9	; 185
    1dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e8       	ldi	r25, 0x80	; 128
    1dc2:	ab e3       	ldi	r26, 0x3B	; 59
    1dc4:	b5 e4       	ldi	r27, 0x45	; 69
    1dc6:	f9 01       	movw	r30, r18
    1dc8:	80 83       	st	Z, r24
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	a2 83       	std	Z+2, r26	; 0x02
    1dce:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1dd0:	8e 01       	movw	r16, r28
    1dd2:	05 5b       	subi	r16, 0xB5	; 181
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	89 5b       	subi	r24, 0xB9	; 185
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a e7       	ldi	r20, 0x7A	; 122
    1de2:	53 e4       	ldi	r21, 0x43	; 67
    1de4:	fc 01       	movw	r30, r24
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	f8 01       	movw	r30, r16
    1df8:	80 83       	st	Z, r24
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	a2 83       	std	Z+2, r26	; 0x02
    1dfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e00:	ce 01       	movw	r24, r28
    1e02:	85 5b       	subi	r24, 0xB5	; 181
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	fc 01       	movw	r30, r24
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	4c f4       	brge	.+18     	; 0x1e32 <App_Loop+0x290>
		__ticks = 1;
    1e20:	ce 01       	movw	r24, r28
    1e22:	81 5b       	subi	r24, 0xB1	; 177
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
    1e26:	21 e0       	ldi	r18, 0x01	; 1
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	31 83       	std	Z+1, r19	; 0x01
    1e2e:	20 83       	st	Z, r18
    1e30:	6d c0       	rjmp	.+218    	; 0x1f0c <App_Loop+0x36a>
	else if (__tmp > 65535)
    1e32:	ce 01       	movw	r24, r28
    1e34:	85 5b       	subi	r24, 0xB5	; 181
    1e36:	9f 4f       	sbci	r25, 0xFF	; 255
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	fc 01       	movw	r30, r24
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	0c f0       	brlt	.+2      	; 0x1e54 <App_Loop+0x2b2>
    1e52:	4a c0       	rjmp	.+148    	; 0x1ee8 <App_Loop+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	ce 01       	movw	r24, r28
    1e56:	89 5b       	subi	r24, 0xB9	; 185
    1e58:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e2       	ldi	r20, 0x20	; 32
    1e60:	51 e4       	ldi	r21, 0x41	; 65
    1e62:	fc 01       	movw	r30, r24
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8e 01       	movw	r16, r28
    1e76:	01 5b       	subi	r16, 0xB1	; 177
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	f8 01       	movw	r30, r16
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
    1e8c:	24 c0       	rjmp	.+72     	; 0x1ed6 <App_Loop+0x334>
    1e8e:	ce 01       	movw	r24, r28
    1e90:	8f 5a       	subi	r24, 0xAF	; 175
    1e92:	9f 4f       	sbci	r25, 0xFF	; 255
    1e94:	29 e1       	ldi	r18, 0x19	; 25
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	fc 01       	movw	r30, r24
    1e9a:	31 83       	std	Z+1, r19	; 0x01
    1e9c:	20 83       	st	Z, r18
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	8f 5a       	subi	r24, 0xAF	; 175
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	80 81       	ld	r24, Z
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <App_Loop+0x308>
    1eae:	9e 01       	movw	r18, r28
    1eb0:	2f 5a       	subi	r18, 0xAF	; 175
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eba:	ce 01       	movw	r24, r28
    1ebc:	81 5b       	subi	r24, 0xB1	; 177
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	9e 01       	movw	r18, r28
    1ec2:	21 5b       	subi	r18, 0xB1	; 177
    1ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec6:	f9 01       	movw	r30, r18
    1ec8:	20 81       	ld	r18, Z
    1eca:	31 81       	ldd	r19, Z+1	; 0x01
    1ecc:	21 50       	subi	r18, 0x01	; 1
    1ece:	31 09       	sbc	r19, r1
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	31 83       	std	Z+1, r19	; 0x01
    1ed4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	81 5b       	subi	r24, 0xB1	; 177
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	fc 01       	movw	r30, r24
    1ede:	80 81       	ld	r24, Z
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	89 2b       	or	r24, r25
    1ee4:	a1 f6       	brne	.-88     	; 0x1e8e <App_Loop+0x2ec>
    1ee6:	2c c0       	rjmp	.+88     	; 0x1f40 <App_Loop+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	8e 01       	movw	r16, r28
    1eea:	01 5b       	subi	r16, 0xB1	; 177
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
    1eee:	ce 01       	movw	r24, r28
    1ef0:	85 5b       	subi	r24, 0xB5	; 181
    1ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	f8 01       	movw	r30, r16
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	80 83       	st	Z, r24
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	8d 5a       	subi	r24, 0xAD	; 173
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	9e 01       	movw	r18, r28
    1f14:	21 5b       	subi	r18, 0xB1	; 177
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	f9 01       	movw	r30, r18
    1f1a:	20 81       	ld	r18, Z
    1f1c:	31 81       	ldd	r19, Z+1	; 0x01
    1f1e:	fc 01       	movw	r30, r24
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
    1f24:	ce 01       	movw	r24, r28
    1f26:	8d 5a       	subi	r24, 0xAD	; 173
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	80 81       	ld	r24, Z
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <App_Loop+0x38e>
    1f34:	9e 01       	movw	r18, r28
    1f36:	2d 5a       	subi	r18, 0xAD	; 173
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
	_delay_ms(3000);
	LCD_4_CMD_Write(LCD4, _LCD_Clear_Dis);
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    1f46:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    1f4a:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    1f4e:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    1f52:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    1f56:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    1f5a:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>

	LCD_4_STR_Postion(LCD4, Row_3, 1, "Enter Number One");
    1f5e:	0f 2e       	mov	r0, r31
    1f60:	f9 ec       	ldi	r31, 0xC9	; 201
    1f62:	ef 2e       	mov	r14, r31
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	ff 2e       	mov	r15, r31
    1f68:	f0 2d       	mov	r31, r0
    1f6a:	01 e0       	ldi	r16, 0x01	; 1
    1f6c:	23 e0       	ldi	r18, 0x03	; 3
    1f6e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    1f72:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    1f76:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    1f7a:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    1f7e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    1f82:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    1f86:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_4_STR_Postion>
	keypad_u8Stat(&Keypad_Val);
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	8d 59       	subi	r24, 0x9D	; 157
    1f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f90:	0e 94 27 0c 	call	0x184e	; 0x184e <keypad_u8Stat>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	aa ef       	ldi	r26, 0xFA	; 250
    1f9a:	b3 e4       	ldi	r27, 0x43	; 67
    1f9c:	89 af       	std	Y+57, r24	; 0x39
    1f9e:	9a af       	std	Y+58, r25	; 0x3a
    1fa0:	ab af       	std	Y+59, r26	; 0x3b
    1fa2:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4a e7       	ldi	r20, 0x7A	; 122
    1faa:	53 e4       	ldi	r21, 0x43	; 67
    1fac:	69 ad       	ldd	r22, Y+57	; 0x39
    1fae:	7a ad       	ldd	r23, Y+58	; 0x3a
    1fb0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fb2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fb4:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e 01       	movw	r18, r28
    1fbe:	23 5c       	subi	r18, 0xC3	; 195
    1fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc2:	f9 01       	movw	r30, r18
    1fc4:	80 83       	st	Z, r24
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	a2 83       	std	Z+2, r26	; 0x02
    1fca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	cd 96       	adiw	r24, 0x3d	; 61
    1fd8:	fc 01       	movw	r30, r24
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    1fe6:	88 23       	and	r24, r24
    1fe8:	4c f4       	brge	.+18     	; 0x1ffc <App_Loop+0x45a>
		__ticks = 1;
    1fea:	ce 01       	movw	r24, r28
    1fec:	8f 5b       	subi	r24, 0xBF	; 191
    1fee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff0:	21 e0       	ldi	r18, 0x01	; 1
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	31 83       	std	Z+1, r19	; 0x01
    1ff8:	20 83       	st	Z, r18
    1ffa:	67 c0       	rjmp	.+206    	; 0x20ca <App_Loop+0x528>
	else if (__tmp > 65535)
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	ce 01       	movw	r24, r28
    2006:	cd 96       	adiw	r24, 0x3d	; 61
    2008:	fc 01       	movw	r30, r24
    200a:	60 81       	ld	r22, Z
    200c:	71 81       	ldd	r23, Z+1	; 0x01
    200e:	82 81       	ldd	r24, Z+2	; 0x02
    2010:	93 81       	ldd	r25, Z+3	; 0x03
    2012:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    2016:	18 16       	cp	r1, r24
    2018:	0c f0       	brlt	.+2      	; 0x201c <App_Loop+0x47a>
    201a:	46 c0       	rjmp	.+140    	; 0x20a8 <App_Loop+0x506>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	69 ad       	ldd	r22, Y+57	; 0x39
    2026:	7a ad       	ldd	r23, Y+58	; 0x3a
    2028:	8b ad       	ldd	r24, Y+59	; 0x3b
    202a:	9c ad       	ldd	r25, Y+60	; 0x3c
    202c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	8e 01       	movw	r16, r28
    2036:	0f 5b       	subi	r16, 0xBF	; 191
    2038:	1f 4f       	sbci	r17, 0xFF	; 255
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	f8 01       	movw	r30, r16
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	80 83       	st	Z, r24
    204c:	24 c0       	rjmp	.+72     	; 0x2096 <App_Loop+0x4f4>
    204e:	ce 01       	movw	r24, r28
    2050:	8d 5b       	subi	r24, 0xBD	; 189
    2052:	9f 4f       	sbci	r25, 0xFF	; 255
    2054:	29 e1       	ldi	r18, 0x19	; 25
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	fc 01       	movw	r30, r24
    205a:	31 83       	std	Z+1, r19	; 0x01
    205c:	20 83       	st	Z, r18
    205e:	ce 01       	movw	r24, r28
    2060:	8d 5b       	subi	r24, 0xBD	; 189
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	fc 01       	movw	r30, r24
    2066:	80 81       	ld	r24, Z
    2068:	91 81       	ldd	r25, Z+1	; 0x01
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <App_Loop+0x4c8>
    206e:	9e 01       	movw	r18, r28
    2070:	2d 5b       	subi	r18, 0xBD	; 189
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	f9 01       	movw	r30, r18
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207a:	ce 01       	movw	r24, r28
    207c:	8f 5b       	subi	r24, 0xBF	; 191
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	9e 01       	movw	r18, r28
    2082:	2f 5b       	subi	r18, 0xBF	; 191
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	f9 01       	movw	r30, r18
    2088:	20 81       	ld	r18, Z
    208a:	31 81       	ldd	r19, Z+1	; 0x01
    208c:	21 50       	subi	r18, 0x01	; 1
    208e:	31 09       	sbc	r19, r1
    2090:	fc 01       	movw	r30, r24
    2092:	31 83       	std	Z+1, r19	; 0x01
    2094:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	ce 01       	movw	r24, r28
    2098:	8f 5b       	subi	r24, 0xBF	; 191
    209a:	9f 4f       	sbci	r25, 0xFF	; 255
    209c:	fc 01       	movw	r30, r24
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	89 2b       	or	r24, r25
    20a4:	a1 f6       	brne	.-88     	; 0x204e <App_Loop+0x4ac>
    20a6:	2b c0       	rjmp	.+86     	; 0x20fe <App_Loop+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	8e 01       	movw	r16, r28
    20aa:	0f 5b       	subi	r16, 0xBF	; 191
    20ac:	1f 4f       	sbci	r17, 0xFF	; 255
    20ae:	ce 01       	movw	r24, r28
    20b0:	cd 96       	adiw	r24, 0x3d	; 61
    20b2:	fc 01       	movw	r30, r24
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	f8 01       	movw	r30, r16
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
    20ca:	ce 01       	movw	r24, r28
    20cc:	8b 5b       	subi	r24, 0xBB	; 187
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	9e 01       	movw	r18, r28
    20d2:	2f 5b       	subi	r18, 0xBF	; 191
    20d4:	3f 4f       	sbci	r19, 0xFF	; 255
    20d6:	f9 01       	movw	r30, r18
    20d8:	20 81       	ld	r18, Z
    20da:	31 81       	ldd	r19, Z+1	; 0x01
    20dc:	fc 01       	movw	r30, r24
    20de:	31 83       	std	Z+1, r19	; 0x01
    20e0:	20 83       	st	Z, r18
    20e2:	ce 01       	movw	r24, r28
    20e4:	8b 5b       	subi	r24, 0xBB	; 187
    20e6:	9f 4f       	sbci	r25, 0xFF	; 255
    20e8:	fc 01       	movw	r30, r24
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <App_Loop+0x54c>
    20f2:	9e 01       	movw	r18, r28
    20f4:	2b 5b       	subi	r18, 0xBB	; 187
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	f9 01       	movw	r30, r18
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
	_delay_ms(500);
	LCD_4_Char_Postion(LCD4, Row_3, 10, Keypad_Val);
    20fe:	ce 01       	movw	r24, r28
    2100:	8d 59       	subi	r24, 0x9D	; 157
    2102:	9f 4f       	sbci	r25, 0xFF	; 255
    2104:	fc 01       	movw	r30, r24
    2106:	80 81       	ld	r24, Z
    2108:	e8 2e       	mov	r14, r24
    210a:	0a e0       	ldi	r16, 0x0A	; 10
    210c:	23 e0       	ldi	r18, 0x03	; 3
    210e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    2112:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    2116:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    211a:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    211e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    2122:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    2126:	0e 94 0a 09 	call	0x1214	; 0x1214 <LCD_4_Char_Postion>
	Num1 = convert(Keypad_Val);
    212a:	ce 01       	movw	r24, r28
    212c:	8d 59       	subi	r24, 0x9D	; 157
    212e:	9f 4f       	sbci	r25, 0xFF	; 255
    2130:	fc 01       	movw	r30, r24
    2132:	80 81       	ld	r24, Z
    2134:	0e 94 ab 13 	call	0x2756	; 0x2756 <convert>
    2138:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <Num1>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e8       	ldi	r25, 0x80	; 128
    2140:	ab e3       	ldi	r26, 0x3B	; 59
    2142:	b5 e4       	ldi	r27, 0x45	; 69
    2144:	8b a7       	std	Y+43, r24	; 0x2b
    2146:	9c a7       	std	Y+44, r25	; 0x2c
    2148:	ad a7       	std	Y+45, r26	; 0x2d
    214a:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a e7       	ldi	r20, 0x7A	; 122
    2152:	53 e4       	ldi	r21, 0x43	; 67
    2154:	6b a5       	ldd	r22, Y+43	; 0x2b
    2156:	7c a5       	ldd	r23, Y+44	; 0x2c
    2158:	8d a5       	ldd	r24, Y+45	; 0x2d
    215a:	9e a5       	ldd	r25, Y+46	; 0x2e
    215c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8f a7       	std	Y+47, r24	; 0x2f
    2166:	98 ab       	std	Y+48, r25	; 0x30
    2168:	a9 ab       	std	Y+49, r26	; 0x31
    216a:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	6f a5       	ldd	r22, Y+47	; 0x2f
    2176:	78 a9       	ldd	r23, Y+48	; 0x30
    2178:	89 a9       	ldd	r24, Y+49	; 0x31
    217a:	9a a9       	ldd	r25, Y+50	; 0x32
    217c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <App_Loop+0x5ec>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9c ab       	std	Y+52, r25	; 0x34
    218a:	8b ab       	std	Y+51, r24	; 0x33
    218c:	3f c0       	rjmp	.+126    	; 0x220c <App_Loop+0x66a>
	else if (__tmp > 65535)
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	6f a5       	ldd	r22, Y+47	; 0x2f
    2198:	78 a9       	ldd	r23, Y+48	; 0x30
    219a:	89 a9       	ldd	r24, Y+49	; 0x31
    219c:	9a a9       	ldd	r25, Y+50	; 0x32
    219e:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	4c f5       	brge	.+82     	; 0x21f8 <App_Loop+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	6b a5       	ldd	r22, Y+43	; 0x2b
    21b0:	7c a5       	ldd	r23, Y+44	; 0x2c
    21b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21b6:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9c ab       	std	Y+52, r25	; 0x34
    21cc:	8b ab       	std	Y+51, r24	; 0x33
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <App_Loop+0x64c>
    21d0:	89 e1       	ldi	r24, 0x19	; 25
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9e ab       	std	Y+54, r25	; 0x36
    21d6:	8d ab       	std	Y+53, r24	; 0x35
    21d8:	8d a9       	ldd	r24, Y+53	; 0x35
    21da:	9e a9       	ldd	r25, Y+54	; 0x36
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <App_Loop+0x63a>
    21e0:	9e ab       	std	Y+54, r25	; 0x36
    21e2:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8b a9       	ldd	r24, Y+51	; 0x33
    21e6:	9c a9       	ldd	r25, Y+52	; 0x34
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	9c ab       	std	Y+52, r25	; 0x34
    21ec:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8b a9       	ldd	r24, Y+51	; 0x33
    21f0:	9c a9       	ldd	r25, Y+52	; 0x34
    21f2:	89 2b       	or	r24, r25
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <App_Loop+0x62e>
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <App_Loop+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	6f a5       	ldd	r22, Y+47	; 0x2f
    21fa:	78 a9       	ldd	r23, Y+48	; 0x30
    21fc:	89 a9       	ldd	r24, Y+49	; 0x31
    21fe:	9a a9       	ldd	r25, Y+50	; 0x32
    2200:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9c ab       	std	Y+52, r25	; 0x34
    220a:	8b ab       	std	Y+51, r24	; 0x33
    220c:	8b a9       	ldd	r24, Y+51	; 0x33
    220e:	9c a9       	ldd	r25, Y+52	; 0x34
    2210:	98 af       	std	Y+56, r25	; 0x38
    2212:	8f ab       	std	Y+55, r24	; 0x37
    2214:	8f a9       	ldd	r24, Y+55	; 0x37
    2216:	98 ad       	ldd	r25, Y+56	; 0x38
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <App_Loop+0x676>
    221c:	98 af       	std	Y+56, r25	; 0x38
    221e:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(3000);
	LCD_4_CMD_Write(LCD4, _LCD_Clear_Dis);
    2220:	21 e0       	ldi	r18, 0x01	; 1
    2222:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    2226:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    222a:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    222e:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    2232:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    2236:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    223a:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>


	LCD_4_STR_Postion(LCD4, Row_3, 1, "Enter Number Two");
    223e:	0f 2e       	mov	r0, r31
    2240:	fa ed       	ldi	r31, 0xDA	; 218
    2242:	ef 2e       	mov	r14, r31
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	ff 2e       	mov	r15, r31
    2248:	f0 2d       	mov	r31, r0
    224a:	01 e0       	ldi	r16, 0x01	; 1
    224c:	23 e0       	ldi	r18, 0x03	; 3
    224e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    2252:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    2256:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    225a:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    225e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    2262:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    2266:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_4_STR_Postion>
	keypad_u8Stat(&Keypad_Val);
    226a:	ce 01       	movw	r24, r28
    226c:	8d 59       	subi	r24, 0x9D	; 157
    226e:	9f 4f       	sbci	r25, 0xFF	; 255
    2270:	0e 94 27 0c 	call	0x184e	; 0x184e <keypad_u8Stat>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	aa ef       	ldi	r26, 0xFA	; 250
    227a:	b3 e4       	ldi	r27, 0x43	; 67
    227c:	8d 8f       	std	Y+29, r24	; 0x1d
    227e:	9e 8f       	std	Y+30, r25	; 0x1e
    2280:	af 8f       	std	Y+31, r26	; 0x1f
    2282:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a e7       	ldi	r20, 0x7A	; 122
    228a:	53 e4       	ldi	r21, 0x43	; 67
    228c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    228e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2290:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2292:	98 a1       	ldd	r25, Y+32	; 0x20
    2294:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	89 a3       	std	Y+33, r24	; 0x21
    229e:	9a a3       	std	Y+34, r25	; 0x22
    22a0:	ab a3       	std	Y+35, r26	; 0x23
    22a2:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e8       	ldi	r20, 0x80	; 128
    22aa:	5f e3       	ldi	r21, 0x3F	; 63
    22ac:	69 a1       	ldd	r22, Y+33	; 0x21
    22ae:	7a a1       	ldd	r23, Y+34	; 0x22
    22b0:	8b a1       	ldd	r24, Y+35	; 0x23
    22b2:	9c a1       	ldd	r25, Y+36	; 0x24
    22b4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <App_Loop+0x724>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9e a3       	std	Y+38, r25	; 0x26
    22c2:	8d a3       	std	Y+37, r24	; 0x25
    22c4:	3f c0       	rjmp	.+126    	; 0x2344 <App_Loop+0x7a2>
	else if (__tmp > 65535)
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	3f ef       	ldi	r19, 0xFF	; 255
    22ca:	4f e7       	ldi	r20, 0x7F	; 127
    22cc:	57 e4       	ldi	r21, 0x47	; 71
    22ce:	69 a1       	ldd	r22, Y+33	; 0x21
    22d0:	7a a1       	ldd	r23, Y+34	; 0x22
    22d2:	8b a1       	ldd	r24, Y+35	; 0x23
    22d4:	9c a1       	ldd	r25, Y+36	; 0x24
    22d6:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    22da:	18 16       	cp	r1, r24
    22dc:	4c f5       	brge	.+82     	; 0x2330 <App_Loop+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e2       	ldi	r20, 0x20	; 32
    22e4:	51 e4       	ldi	r21, 0x41	; 65
    22e6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22e8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    22ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ec:	98 a1       	ldd	r25, Y+32	; 0x20
    22ee:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9e a3       	std	Y+38, r25	; 0x26
    2304:	8d a3       	std	Y+37, r24	; 0x25
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <App_Loop+0x784>
    2308:	89 e1       	ldi	r24, 0x19	; 25
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	98 a7       	std	Y+40, r25	; 0x28
    230e:	8f a3       	std	Y+39, r24	; 0x27
    2310:	8f a1       	ldd	r24, Y+39	; 0x27
    2312:	98 a5       	ldd	r25, Y+40	; 0x28
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <App_Loop+0x772>
    2318:	98 a7       	std	Y+40, r25	; 0x28
    231a:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	8d a1       	ldd	r24, Y+37	; 0x25
    231e:	9e a1       	ldd	r25, Y+38	; 0x26
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9e a3       	std	Y+38, r25	; 0x26
    2324:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	8d a1       	ldd	r24, Y+37	; 0x25
    2328:	9e a1       	ldd	r25, Y+38	; 0x26
    232a:	89 2b       	or	r24, r25
    232c:	69 f7       	brne	.-38     	; 0x2308 <App_Loop+0x766>
    232e:	14 c0       	rjmp	.+40     	; 0x2358 <App_Loop+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	69 a1       	ldd	r22, Y+33	; 0x21
    2332:	7a a1       	ldd	r23, Y+34	; 0x22
    2334:	8b a1       	ldd	r24, Y+35	; 0x23
    2336:	9c a1       	ldd	r25, Y+36	; 0x24
    2338:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9e a3       	std	Y+38, r25	; 0x26
    2342:	8d a3       	std	Y+37, r24	; 0x25
    2344:	8d a1       	ldd	r24, Y+37	; 0x25
    2346:	9e a1       	ldd	r25, Y+38	; 0x26
    2348:	9a a7       	std	Y+42, r25	; 0x2a
    234a:	89 a7       	std	Y+41, r24	; 0x29
    234c:	89 a5       	ldd	r24, Y+41	; 0x29
    234e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <App_Loop+0x7ae>
    2354:	9a a7       	std	Y+42, r25	; 0x2a
    2356:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(500);
	LCD_4_Char_Postion(LCD4, Row_3, 10, Keypad_Val);
    2358:	ce 01       	movw	r24, r28
    235a:	8d 59       	subi	r24, 0x9D	; 157
    235c:	9f 4f       	sbci	r25, 0xFF	; 255
    235e:	fc 01       	movw	r30, r24
    2360:	80 81       	ld	r24, Z
    2362:	e8 2e       	mov	r14, r24
    2364:	0a e0       	ldi	r16, 0x0A	; 10
    2366:	23 e0       	ldi	r18, 0x03	; 3
    2368:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    236c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    2370:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    2374:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    2378:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    237c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    2380:	0e 94 0a 09 	call	0x1214	; 0x1214 <LCD_4_Char_Postion>
	Num2 = convert(Keypad_Val);
    2384:	ce 01       	movw	r24, r28
    2386:	8d 59       	subi	r24, 0x9D	; 157
    2388:	9f 4f       	sbci	r25, 0xFF	; 255
    238a:	fc 01       	movw	r30, r24
    238c:	80 81       	ld	r24, Z
    238e:	0e 94 ab 13 	call	0x2756	; 0x2756 <convert>
    2392:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <Num2>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e8       	ldi	r25, 0x80	; 128
    239a:	ab e3       	ldi	r26, 0x3B	; 59
    239c:	b5 e4       	ldi	r27, 0x45	; 69
    239e:	8f 87       	std	Y+15, r24	; 0x0f
    23a0:	98 8b       	std	Y+16, r25	; 0x10
    23a2:	a9 8b       	std	Y+17, r26	; 0x11
    23a4:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a e7       	ldi	r20, 0x7A	; 122
    23ac:	53 e4       	ldi	r21, 0x43	; 67
    23ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    23b0:	78 89       	ldd	r23, Y+16	; 0x10
    23b2:	89 89       	ldd	r24, Y+17	; 0x11
    23b4:	9a 89       	ldd	r25, Y+18	; 0x12
    23b6:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	8b 8b       	std	Y+19, r24	; 0x13
    23c0:	9c 8b       	std	Y+20, r25	; 0x14
    23c2:	ad 8b       	std	Y+21, r26	; 0x15
    23c4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	6b 89       	ldd	r22, Y+19	; 0x13
    23d0:	7c 89       	ldd	r23, Y+20	; 0x14
    23d2:	8d 89       	ldd	r24, Y+21	; 0x15
    23d4:	9e 89       	ldd	r25, Y+22	; 0x16
    23d6:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    23da:	88 23       	and	r24, r24
    23dc:	2c f4       	brge	.+10     	; 0x23e8 <App_Loop+0x846>
		__ticks = 1;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	98 8f       	std	Y+24, r25	; 0x18
    23e4:	8f 8b       	std	Y+23, r24	; 0x17
    23e6:	3f c0       	rjmp	.+126    	; 0x2466 <App_Loop+0x8c4>
	else if (__tmp > 65535)
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	6b 89       	ldd	r22, Y+19	; 0x13
    23f2:	7c 89       	ldd	r23, Y+20	; 0x14
    23f4:	8d 89       	ldd	r24, Y+21	; 0x15
    23f6:	9e 89       	ldd	r25, Y+22	; 0x16
    23f8:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    23fc:	18 16       	cp	r1, r24
    23fe:	4c f5       	brge	.+82     	; 0x2452 <App_Loop+0x8b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	6f 85       	ldd	r22, Y+15	; 0x0f
    240a:	78 89       	ldd	r23, Y+16	; 0x10
    240c:	89 89       	ldd	r24, Y+17	; 0x11
    240e:	9a 89       	ldd	r25, Y+18	; 0x12
    2410:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	98 8f       	std	Y+24, r25	; 0x18
    2426:	8f 8b       	std	Y+23, r24	; 0x17
    2428:	0f c0       	rjmp	.+30     	; 0x2448 <App_Loop+0x8a6>
    242a:	89 e1       	ldi	r24, 0x19	; 25
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	9a 8f       	std	Y+26, r25	; 0x1a
    2430:	89 8f       	std	Y+25, r24	; 0x19
    2432:	89 8d       	ldd	r24, Y+25	; 0x19
    2434:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <App_Loop+0x894>
    243a:	9a 8f       	std	Y+26, r25	; 0x1a
    243c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243e:	8f 89       	ldd	r24, Y+23	; 0x17
    2440:	98 8d       	ldd	r25, Y+24	; 0x18
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	98 8f       	std	Y+24, r25	; 0x18
    2446:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2448:	8f 89       	ldd	r24, Y+23	; 0x17
    244a:	98 8d       	ldd	r25, Y+24	; 0x18
    244c:	89 2b       	or	r24, r25
    244e:	69 f7       	brne	.-38     	; 0x242a <App_Loop+0x888>
    2450:	14 c0       	rjmp	.+40     	; 0x247a <App_Loop+0x8d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2452:	6b 89       	ldd	r22, Y+19	; 0x13
    2454:	7c 89       	ldd	r23, Y+20	; 0x14
    2456:	8d 89       	ldd	r24, Y+21	; 0x15
    2458:	9e 89       	ldd	r25, Y+22	; 0x16
    245a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	98 8f       	std	Y+24, r25	; 0x18
    2464:	8f 8b       	std	Y+23, r24	; 0x17
    2466:	8f 89       	ldd	r24, Y+23	; 0x17
    2468:	98 8d       	ldd	r25, Y+24	; 0x18
    246a:	9c 8f       	std	Y+28, r25	; 0x1c
    246c:	8b 8f       	std	Y+27, r24	; 0x1b
    246e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <App_Loop+0x8d0>
    2476:	9c 8f       	std	Y+28, r25	; 0x1c
    2478:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(3000);
	LCD_4_CMD_Write(LCD4, _LCD_Clear_Dis);
    247a:	21 e0       	ldi	r18, 0x01	; 1
    247c:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    2480:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    2484:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    2488:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    248c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    2490:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    2494:	0e 94 86 08 	call	0x110c	; 0x110c <LCD_4_CMD_Write>


	LCD_4_STR_Postion(LCD4, Row_3, 1, "Result = ");
    2498:	0f 2e       	mov	r0, r31
    249a:	fb ee       	ldi	r31, 0xEB	; 235
    249c:	ef 2e       	mov	r14, r31
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	ff 2e       	mov	r15, r31
    24a2:	f0 2d       	mov	r31, r0
    24a4:	01 e0       	ldi	r16, 0x01	; 1
    24a6:	23 e0       	ldi	r18, 0x03	; 3
    24a8:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    24ac:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    24b0:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    24b4:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    24b8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    24bc:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    24c0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_4_STR_Postion>
	Res = Calc(op , Num1 , Num2);
    24c4:	30 91 f8 00 	lds	r19, 0x00F8	; 0x8000f8 <Num2>
    24c8:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <Num1>
    24cc:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	43 2f       	mov	r20, r19
    24d6:	62 2f       	mov	r22, r18
    24d8:	0e 94 16 13 	call	0x262c	; 0x262c <Calc>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <Res>
	u8 Res_str[5];
	Convert_u8_to_String(Res, Res_str);
    24f0:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <Res>
    24f4:	ce 01       	movw	r24, r28
    24f6:	8c 59       	subi	r24, 0x9C	; 156
    24f8:	9f 4f       	sbci	r25, 0xFF	; 255
    24fa:	bc 01       	movw	r22, r24
    24fc:	82 2f       	mov	r24, r18
    24fe:	0e 94 ba 09 	call	0x1374	; 0x1374 <Convert_u8_to_String>
	LCD_4_STR_Postion(LCD4, Row_3, 10, Res_str);
    2502:	ce 01       	movw	r24, r28
    2504:	8c 59       	subi	r24, 0x9C	; 156
    2506:	9f 4f       	sbci	r25, 0xFF	; 255
    2508:	7c 01       	movw	r14, r24
    250a:	0a e0       	ldi	r16, 0x0A	; 10
    250c:	23 e0       	ldi	r18, 0x03	; 3
    250e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <LCD4>
    2512:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <LCD4+0x1>
    2516:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <LCD4+0x2>
    251a:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <LCD4+0x3>
    251e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LCD4+0x4>
    2522:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LCD4+0x5>
    2526:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_4_STR_Postion>
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e4       	ldi	r25, 0x40	; 64
    252e:	ac e9       	ldi	r26, 0x9C	; 156
    2530:	b5 e4       	ldi	r27, 0x45	; 69
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	ab 83       	std	Y+3, r26	; 0x03
    2538:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	4a e7       	ldi	r20, 0x7A	; 122
    2540:	53 e4       	ldi	r21, 0x43	; 67
    2542:	69 81       	ldd	r22, Y+1	; 0x01
    2544:	7a 81       	ldd	r23, Y+2	; 0x02
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8d 83       	std	Y+5, r24	; 0x05
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	af 83       	std	Y+7, r26	; 0x07
    2558:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e8       	ldi	r20, 0x80	; 128
    2560:	5f e3       	ldi	r21, 0x3F	; 63
    2562:	6d 81       	ldd	r22, Y+5	; 0x05
    2564:	7e 81       	ldd	r23, Y+6	; 0x06
    2566:	8f 81       	ldd	r24, Y+7	; 0x07
    2568:	98 85       	ldd	r25, Y+8	; 0x08
    256a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__cmpsf2>
    256e:	88 23       	and	r24, r24
    2570:	2c f4       	brge	.+10     	; 0x257c <App_Loop+0x9da>
		__ticks = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9a 87       	std	Y+10, r25	; 0x0a
    2578:	89 87       	std	Y+9, r24	; 0x09
    257a:	3f c0       	rjmp	.+126    	; 0x25fa <App_Loop+0xa58>
	else if (__tmp > 65535)
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	3f ef       	ldi	r19, 0xFF	; 255
    2580:	4f e7       	ldi	r20, 0x7F	; 127
    2582:	57 e4       	ldi	r21, 0x47	; 71
    2584:	6d 81       	ldd	r22, Y+5	; 0x05
    2586:	7e 81       	ldd	r23, Y+6	; 0x06
    2588:	8f 81       	ldd	r24, Y+7	; 0x07
    258a:	98 85       	ldd	r25, Y+8	; 0x08
    258c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__gesf2>
    2590:	18 16       	cp	r1, r24
    2592:	4c f5       	brge	.+82     	; 0x25e6 <App_Loop+0xa44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	69 81       	ldd	r22, Y+1	; 0x01
    259e:	7a 81       	ldd	r23, Y+2	; 0x02
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9a 87       	std	Y+10, r25	; 0x0a
    25ba:	89 87       	std	Y+9, r24	; 0x09
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <App_Loop+0xa3a>
    25be:	89 e1       	ldi	r24, 0x19	; 25
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9c 87       	std	Y+12, r25	; 0x0c
    25c4:	8b 87       	std	Y+11, r24	; 0x0b
    25c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <App_Loop+0xa28>
    25ce:	9c 87       	std	Y+12, r25	; 0x0c
    25d0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	9a 87       	std	Y+10, r25	; 0x0a
    25da:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	89 2b       	or	r24, r25
    25e2:	69 f7       	brne	.-38     	; 0x25be <App_Loop+0xa1c>
	_delay_ms(5000);

}
    25e4:	14 c0       	rjmp	.+40     	; 0x260e <App_Loop+0xa6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	6d 81       	ldd	r22, Y+5	; 0x05
    25e8:	7e 81       	ldd	r23, Y+6	; 0x06
    25ea:	8f 81       	ldd	r24, Y+7	; 0x07
    25ec:	98 85       	ldd	r25, Y+8	; 0x08
    25ee:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9a 87       	std	Y+10, r25	; 0x0a
    25f8:	89 87       	std	Y+9, r24	; 0x09
    25fa:	89 85       	ldd	r24, Y+9	; 0x09
    25fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fe:	9e 87       	std	Y+14, r25	; 0x0e
    2600:	8d 87       	std	Y+13, r24	; 0x0d
    2602:	8d 85       	ldd	r24, Y+13	; 0x0d
    2604:	9e 85       	ldd	r25, Y+14	; 0x0e
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <App_Loop+0xa64>
    260a:	9e 87       	std	Y+14, r25	; 0x0e
    260c:	8d 87       	std	Y+13, r24	; 0x0d
    260e:	00 00       	nop
    2610:	c8 59       	subi	r28, 0x98	; 152
    2612:	df 4f       	sbci	r29, 0xFF	; 255
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	ff 90       	pop	r15
    2628:	ef 90       	pop	r14
    262a:	08 95       	ret

0000262c <Calc>:

float Calc(u16 op , u8 Num1 , u8 Num2)
{
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	28 97       	sbiw	r28, 0x08	; 8
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	6f 83       	std	Y+7, r22	; 0x07
    2646:	48 87       	std	Y+8, r20	; 0x08
	float Ret = 0;
    2648:	19 82       	std	Y+1, r1	; 0x01
    264a:	1a 82       	std	Y+2, r1	; 0x02
    264c:	1b 82       	std	Y+3, r1	; 0x03
    264e:	1c 82       	std	Y+4, r1	; 0x04
	switch (op)
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	8b 32       	cpi	r24, 0x2B	; 43
    2656:	91 05       	cpc	r25, r1
    2658:	69 f0       	breq	.+26     	; 0x2674 <Calc+0x48>
    265a:	8c 32       	cpi	r24, 0x2C	; 44
    265c:	91 05       	cpc	r25, r1
    265e:	18 f4       	brcc	.+6      	; 0x2666 <Calc+0x3a>
    2660:	8a 97       	sbiw	r24, 0x2a	; 42
    2662:	c1 f1       	breq	.+112    	; 0x26d4 <Calc+0xa8>
    2664:	69 c0       	rjmp	.+210    	; 0x2738 <Calc+0x10c>
    2666:	8d 32       	cpi	r24, 0x2D	; 45
    2668:	91 05       	cpc	r25, r1
    266a:	d9 f0       	breq	.+54     	; 0x26a2 <Calc+0x76>
    266c:	8f 97       	sbiw	r24, 0x2f	; 47
    266e:	09 f4       	brne	.+2      	; 0x2672 <Calc+0x46>
    2670:	4d c0       	rjmp	.+154    	; 0x270c <Calc+0xe0>
    2672:	62 c0       	rjmp	.+196    	; 0x2738 <Calc+0x10c>
	{
		case '+': Ret = Num1+Num2; break;
    2674:	8f 81       	ldd	r24, Y+7	; 0x07
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	88 85       	ldd	r24, Y+8	; 0x08
    267c:	88 2f       	mov	r24, r24
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	82 0f       	add	r24, r18
    2682:	93 1f       	adc	r25, r19
    2684:	09 2e       	mov	r0, r25
    2686:	00 0c       	add	r0, r0
    2688:	aa 0b       	sbc	r26, r26
    268a:	bb 0b       	sbc	r27, r27
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	ab 83       	std	Y+3, r26	; 0x03
    269e:	bc 83       	std	Y+4, r27	; 0x04
    26a0:	4b c0       	rjmp	.+150    	; 0x2738 <Calc+0x10c>
		case '-': Ret = Num1-Num2; break;
    26a2:	8f 81       	ldd	r24, Y+7	; 0x07
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	88 85       	ldd	r24, Y+8	; 0x08
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	a9 01       	movw	r20, r18
    26b0:	48 1b       	sub	r20, r24
    26b2:	59 0b       	sbc	r21, r25
    26b4:	ca 01       	movw	r24, r20
    26b6:	09 2e       	mov	r0, r25
    26b8:	00 0c       	add	r0, r0
    26ba:	aa 0b       	sbc	r26, r26
    26bc:	bb 0b       	sbc	r27, r27
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	ab 83       	std	Y+3, r26	; 0x03
    26d0:	bc 83       	std	Y+4, r27	; 0x04
    26d2:	32 c0       	rjmp	.+100    	; 0x2738 <Calc+0x10c>
		case '*': Ret = Num1*Num2; break;
    26d4:	8f 81       	ldd	r24, Y+7	; 0x07
    26d6:	48 2f       	mov	r20, r24
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	88 85       	ldd	r24, Y+8	; 0x08
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	42 9f       	mul	r20, r18
    26e2:	c0 01       	movw	r24, r0
    26e4:	43 9f       	mul	r20, r19
    26e6:	90 0d       	add	r25, r0
    26e8:	52 9f       	mul	r21, r18
    26ea:	90 0d       	add	r25, r0
    26ec:	11 24       	eor	r1, r1
    26ee:	09 2e       	mov	r0, r25
    26f0:	00 0c       	add	r0, r0
    26f2:	aa 0b       	sbc	r26, r26
    26f4:	bb 0b       	sbc	r27, r27
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	ab 83       	std	Y+3, r26	; 0x03
    2708:	bc 83       	std	Y+4, r27	; 0x04
    270a:	16 c0       	rjmp	.+44     	; 0x2738 <Calc+0x10c>
		case '/': Ret = Num1/Num2; break;
    270c:	8f 81       	ldd	r24, Y+7	; 0x07
    270e:	98 85       	ldd	r25, Y+8	; 0x08
    2710:	69 2f       	mov	r22, r25
    2712:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <__udivmodqi4>
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	09 2e       	mov	r0, r25
    271c:	00 0c       	add	r0, r0
    271e:	aa 0b       	sbc	r26, r26
    2720:	bb 0b       	sbc	r27, r27
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	ab 83       	std	Y+3, r26	; 0x03
    2734:	bc 83       	std	Y+4, r27	; 0x04
    2736:	00 00       	nop
	}
	return Ret;
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	ab 81       	ldd	r26, Y+3	; 0x03
    273e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2740:	bc 01       	movw	r22, r24
    2742:	cd 01       	movw	r24, r26
    2744:	28 96       	adiw	r28, 0x08	; 8
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	08 95       	ret

00002756 <convert>:

u8 convert(u8 Keypad_Val)
{
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	00 d0       	rcall	.+0      	; 0x275c <convert+0x6>
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
    2762:	19 82       	std	Y+1, r1	; 0x01
	switch (Keypad_Val)
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	88 2f       	mov	r24, r24
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	09 2e       	mov	r0, r25
    276c:	00 0c       	add	r0, r0
    276e:	aa 0b       	sbc	r26, r26
    2770:	bb 0b       	sbc	r27, r27
    2772:	c1 97       	sbiw	r24, 0x31	; 49
    2774:	a1 09       	sbc	r26, r1
    2776:	b1 09       	sbc	r27, r1
    2778:	89 30       	cpi	r24, 0x09	; 9
    277a:	91 05       	cpc	r25, r1
    277c:	a1 05       	cpc	r26, r1
    277e:	b1 05       	cpc	r27, r1
    2780:	48 f5       	brcc	.+82     	; 0x27d4 <convert+0x7e>
    2782:	8a 53       	subi	r24, 0x3A	; 58
    2784:	9c 4e       	sbci	r25, 0xEC	; 236
    2786:	fc 01       	movw	r30, r24
    2788:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__tablejump2__>
    278c:	cf 13       	cpse	r28, r31
    278e:	d2 13       	cpse	r29, r18
    2790:	d5 13       	cpse	r29, r21
    2792:	d8 13       	cpse	r29, r24
    2794:	db 13       	cpse	r29, r27
    2796:	de 13       	cpse	r29, r30
    2798:	e1 13       	cpse	r30, r17
    279a:	e4 13       	cpse	r30, r20
    279c:	e7 13       	cpse	r30, r23
	{
		case '1': Ret = 1; break;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	89 83       	std	Y+1, r24	; 0x01
    27a2:	18 c0       	rjmp	.+48     	; 0x27d4 <convert+0x7e>
		case '2': Ret = 2; break;
    27a4:	82 e0       	ldi	r24, 0x02	; 2
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	15 c0       	rjmp	.+42     	; 0x27d4 <convert+0x7e>
		case '3': Ret = 3; break;
    27aa:	83 e0       	ldi	r24, 0x03	; 3
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	12 c0       	rjmp	.+36     	; 0x27d4 <convert+0x7e>
		case '4': Ret = 4; break;
    27b0:	84 e0       	ldi	r24, 0x04	; 4
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <convert+0x7e>
		case '5': Ret = 5; break;
    27b6:	85 e0       	ldi	r24, 0x05	; 5
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	0c c0       	rjmp	.+24     	; 0x27d4 <convert+0x7e>
		case '6': Ret = 6; break;
    27bc:	86 e0       	ldi	r24, 0x06	; 6
    27be:	89 83       	std	Y+1, r24	; 0x01
    27c0:	09 c0       	rjmp	.+18     	; 0x27d4 <convert+0x7e>
		case '7': Ret = 7; break;
    27c2:	87 e0       	ldi	r24, 0x07	; 7
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	06 c0       	rjmp	.+12     	; 0x27d4 <convert+0x7e>
		case '8': Ret = 8; break;
    27c8:	88 e0       	ldi	r24, 0x08	; 8
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <convert+0x7e>
		case '9': Ret = 9; break;
    27ce:	89 e0       	ldi	r24, 0x09	; 9
    27d0:	89 83       	std	Y+1, r24	; 0x01
    27d2:	00 00       	nop
	}
	return Ret;
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <Motor_2_Motors_Init>:
  * @brief  : Initialization 2 Motor With Motor Driver
  * @param  : CopyMotor_1
  * @param  : CopyMotor_2
  */
void Motor_2_Motors_Init(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <Motor_2_Motors_Init+0x6>
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <Motor_2_Motors_Init+0x8>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	7c 83       	std	Y+4, r23	; 0x04
    27f2:	6b 83       	std	Y+3, r22	; 0x03
	Dio_setPinDir(m1.IN1, Direction_Pin_Output);
    27f4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <m1>
    27f8:	61 e0       	ldi	r22, 0x01	; 1
    27fa:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(m1.IN2, Direction_Pin_Output);
    27fe:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <m1+0x1>
    2802:	61 e0       	ldi	r22, 0x01	; 1
    2804:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>


	Dio_setPinDir(m2.IN3, Direction_Pin_Output);
    2808:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m2>
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(m2.IN4, Direction_Pin_Output);
    2812:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <m2+0x1>
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
}
    281c:	00 00       	nop
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	08 95       	ret

0000282c <Motor_2_Motors_Forward>:
  * @brief  : 2 Motor With Motor Driver Move Forward
  * @param  : CopyMotor_1
  * @param  : CopyMotor_2
  */
void Motor_2_Motors_Forward(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	00 d0       	rcall	.+0      	; 0x2832 <Motor_2_Motors_Forward+0x6>
    2832:	00 d0       	rcall	.+0      	; 0x2834 <Motor_2_Motors_Forward+0x8>
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	7c 83       	std	Y+4, r23	; 0x04
    283e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_setPinVal(CopyMotor_1.IN1, Status_Pin_High);
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	61 e0       	ldi	r22, 0x01	; 1
    2844:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.IN2, Status_Pin_Low);
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>

	Dio_setPinVal(CopyMotor_2.IN3, Status_Pin_High);
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	61 e0       	ldi	r22, 0x01	; 1
    2854:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.IN4, Status_Pin_Low);
    2858:	8c 81       	ldd	r24, Y+4	; 0x04
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
}
    2860:	00 00       	nop
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	08 95       	ret

00002870 <Motor_2_Motors_Reverse>:
  * @brief  : 2 Motor With Motor Driver Move Reverse
  * @param  : CopyMotor_1
  * @param  : CopyMotor_2
  */
void Motor_2_Motors_Reverse(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	00 d0       	rcall	.+0      	; 0x2876 <Motor_2_Motors_Reverse+0x6>
    2876:	00 d0       	rcall	.+0      	; 0x2878 <Motor_2_Motors_Reverse+0x8>
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	7c 83       	std	Y+4, r23	; 0x04
    2882:	6b 83       	std	Y+3, r22	; 0x03
	Dio_setPinVal(CopyMotor_1.IN1, Status_Pin_Low);
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.IN2, Status_Pin_High);
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	61 e0       	ldi	r22, 0x01	; 1
    2890:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>


	Dio_setPinVal(CopyMotor_2.IN3, Status_Pin_Low);
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	60 e0       	ldi	r22, 0x00	; 0
    2898:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.IN4, Status_Pin_High);
    289c:	8c 81       	ldd	r24, Y+4	; 0x04
    289e:	61 e0       	ldi	r22, 0x01	; 1
    28a0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
}
    28a4:	00 00       	nop
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	08 95       	ret

000028b4 <Motor_2_Motors_Off>:
  * @brief  : 2 Motor With Motor Driver Move Stop
  * @param  : CopyMotor_1
  * @param  : CopyMotor_2
  */
void Motor_2_Motors_Off(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <Motor_2_Motors_Off+0x6>
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <Motor_2_Motors_Off+0x8>
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	7c 83       	std	Y+4, r23	; 0x04
    28c6:	6b 83       	std	Y+3, r22	; 0x03
	Dio_setPinVal(CopyMotor_1.IN1, Status_Pin_Low);
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.IN2, Status_Pin_Low);
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>


	Dio_setPinVal(CopyMotor_2.IN3, Status_Pin_Low);
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.IN4, Status_Pin_Low);
    28e0:	8c 81       	ldd	r24, Y+4	; 0x04
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
}
    28e8:	00 00       	nop
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	08 95       	ret

000028f8 <Bcd_7segInit>:
/**
  * @brief  : Initialization 7-segment With BCD
  * @param  : Copy7seg
  */
void Bcd_7segInit(BCD Copy7seg)
{
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <Bcd_7segInit+0x6>
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <Bcd_7segInit+0x8>
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	69 83       	std	Y+1, r22	; 0x01
    2906:	7a 83       	std	Y+2, r23	; 0x02
    2908:	8b 83       	std	Y+3, r24	; 0x03
    290a:	9c 83       	std	Y+4, r25	; 0x04
	Dio_setPinDir(Copy7seg.Pin_1, Direction_Pin_Output);
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_2, Direction_Pin_Output);
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_3, Direction_Pin_Output);
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	61 e0       	ldi	r22, 0x01	; 1
    2920:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_4, Direction_Pin_Output);
    2924:	8c 81       	ldd	r24, Y+4	; 0x04
    2926:	61 e0       	ldi	r22, 0x01	; 1
    2928:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
}
    292c:	00 00       	nop
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	08 95       	ret

0000293c <Bcd_7segWriteNum>:
  * @brief  : Write Number in 7-segment With BCD
  * @param  : Copy7segNum
  * @param  : CopyNumber
  */
void Bcd_7segWriteNum(BCD Copy7segNum , u8 CopyNumber)
{
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	00 d0       	rcall	.+0      	; 0x2942 <Bcd_7segWriteNum+0x6>
    2942:	00 d0       	rcall	.+0      	; 0x2944 <Bcd_7segWriteNum+0x8>
    2944:	1f 92       	push	r1
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	69 83       	std	Y+1, r22	; 0x01
    294c:	7a 83       	std	Y+2, r23	; 0x02
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	9c 83       	std	Y+4, r25	; 0x04
    2952:	4d 83       	std	Y+5, r20	; 0x05
	switch (CopyNumber) {
    2954:	8d 81       	ldd	r24, Y+5	; 0x05
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	09 2e       	mov	r0, r25
    295c:	00 0c       	add	r0, r0
    295e:	aa 0b       	sbc	r26, r26
    2960:	bb 0b       	sbc	r27, r27
    2962:	8a 30       	cpi	r24, 0x0A	; 10
    2964:	91 05       	cpc	r25, r1
    2966:	a1 05       	cpc	r26, r1
    2968:	b1 05       	cpc	r27, r1
    296a:	08 f0       	brcs	.+2      	; 0x296e <Bcd_7segWriteNum+0x32>
    296c:	b9 c0       	rjmp	.+370    	; 0x2ae0 <Bcd_7segWriteNum+0x1a4>
    296e:	84 54       	subi	r24, 0x44	; 68
    2970:	9b 4e       	sbci	r25, 0xEB	; 235
    2972:	fc 01       	movw	r30, r24
    2974:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__tablejump2__>
    2978:	c6 14       	cp	r12, r6
    297a:	d7 14       	cp	r13, r7
    297c:	e8 14       	cp	r14, r8
    297e:	f9 14       	cp	r15, r9
    2980:	0a 15       	cp	r16, r10
    2982:	1b 15       	cp	r17, r11
    2984:	2c 15       	cp	r18, r12
    2986:	3d 15       	cp	r19, r13
    2988:	4e 15       	cp	r20, r14
    298a:	5f 15       	cp	r21, r15
		case 0:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	60 e0       	ldi	r22, 0x00	; 0
    2990:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	60 e0       	ldi	r22, 0x00	; 0
    29a8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    29ac:	9a c0       	rjmp	.+308    	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		case 1:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	60 e0       	ldi	r22, 0x00	; 0
    29ba:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	60 e0       	ldi	r22, 0x00	; 0
    29c2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    29ce:	89 c0       	rjmp	.+274    	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		case 2:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    29e8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ea:	60 e0       	ldi	r22, 0x00	; 0
    29ec:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    29f0:	78 c0       	rjmp	.+240    	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		case 3:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	61 e0       	ldi	r22, 0x01	; 1
    29f6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	61 e0       	ldi	r22, 0x01	; 1
    29fe:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    2a12:	67 c0       	rjmp	.+206    	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		case 4:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    2a34:	56 c0       	rjmp	.+172    	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		case 5:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	61 e0       	ldi	r22, 0x01	; 1
    2a3a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	61 e0       	ldi	r22, 0x01	; 1
    2a4a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a50:	60 e0       	ldi	r22, 0x00	; 0
    2a52:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    2a56:	45 c0       	rjmp	.+138    	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		case 6:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	61 e0       	ldi	r22, 0x01	; 1
    2a64:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	61 e0       	ldi	r22, 0x01	; 1
    2a6c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    2a78:	34 c0       	rjmp	.+104    	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		case 7:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	61 e0       	ldi	r22, 0x01	; 1
    2a8e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2a92:	8c 81       	ldd	r24, Y+4	; 0x04
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    2a9a:	23 c0       	rjmp	.+70     	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		case 8:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    2ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab6:	61 e0       	ldi	r22, 0x01	; 1
    2ab8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    2abc:	12 c0       	rjmp	.+36     	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		case 9:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	61 e0       	ldi	r22, 0x01	; 1
    2ac2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    2ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad8:	61 e0       	ldi	r22, 0x01	; 1
    2ada:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    2ade:	01 c0       	rjmp	.+2      	; 0x2ae2 <Bcd_7segWriteNum+0x1a6>
		default:
			break;
    2ae0:	00 00       	nop
	}
}
    2ae2:	00 00       	nop
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	08 95       	ret

00002af4 <Bcd_MPX_6Enable>:
  * @brief  :  Set or Clear Enable Pins & Select Type Of 6 Multiplexing 7-segment
  * @param  : Copy7segNum
  * @param  : CopyNumber
  */
void Bcd_MPX_6Enable(MPX_6_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    2af4:	0f 93       	push	r16
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	28 97       	sbiw	r28, 0x08	; 8
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	49 83       	std	Y+1, r20	; 0x01
    2b0c:	5a 83       	std	Y+2, r21	; 0x02
    2b0e:	6b 83       	std	Y+3, r22	; 0x03
    2b10:	7c 83       	std	Y+4, r23	; 0x04
    2b12:	8d 83       	std	Y+5, r24	; 0x05
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	2f 83       	std	Y+7, r18	; 0x07
    2b18:	08 87       	std	Y+8, r16	; 0x08
	if(CopyStatus == Enable){
    2b1a:	88 85       	ldd	r24, Y+8	; 0x08
    2b1c:	81 30       	cpi	r24, 0x01	; 1
    2b1e:	d1 f5       	brne	.+116    	; 0x2b94 <Bcd_MPX_6Enable+0xa0>
		switch (CopyCommonType) {
    2b20:	8f 81       	ldd	r24, Y+7	; 0x07
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	e1 f0       	breq	.+56     	; 0x2b62 <Bcd_MPX_6Enable+0x6e>
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	09 f0       	breq	.+2      	; 0x2b30 <Bcd_MPX_6Enable+0x3c>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				break;
			default:
				break;
    2b2e:	6f c0       	rjmp	.+222    	; 0x2c0e <Bcd_MPX_6Enable+0x11a>
void Bcd_MPX_6Enable(MPX_6_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	61 e0       	ldi	r22, 0x01	; 1
    2b34:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	61 e0       	ldi	r22, 0x01	; 1
    2b3c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2b48:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	61 e0       	ldi	r22, 0x01	; 1
    2b54:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    2b58:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    2b60:	56 c0       	rjmp	.+172    	; 0x2c0e <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    2b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    2b82:	8d 81       	ldd	r24, Y+5	; 0x05
    2b84:	60 e0       	ldi	r22, 0x00	; 0
    2b86:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    2b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    2b92:	3d c0       	rjmp	.+122    	; 0x2c0e <Bcd_MPX_6Enable+0x11a>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    2b94:	88 85       	ldd	r24, Y+8	; 0x08
    2b96:	88 23       	and	r24, r24
    2b98:	d1 f5       	brne	.+116    	; 0x2c0e <Bcd_MPX_6Enable+0x11a>
	{
		switch (CopyCommonType) {
    2b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b9c:	88 2f       	mov	r24, r24
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	e1 f0       	breq	.+56     	; 0x2bdc <Bcd_MPX_6Enable+0xe8>
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	09 f0       	breq	.+2      	; 0x2baa <Bcd_MPX_6Enable+0xb6>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				break;
			default:
				break;
    2ba8:	32 c0       	rjmp	.+100    	; 0x2c0e <Bcd_MPX_6Enable+0x11a>
	}
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	60 e0       	ldi	r22, 0x00	; 0
    2bae:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	60 e0       	ldi	r22, 0x00	; 0
    2bb6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    2bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    2bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    2bda:	19 c0       	rjmp	.+50     	; 0x2c0e <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	61 e0       	ldi	r22, 0x01	; 1
    2be0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	61 e0       	ldi	r22, 0x01	; 1
    2be8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	61 e0       	ldi	r22, 0x01	; 1
    2bf0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    2bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfe:	61 e0       	ldi	r22, 0x01	; 1
    2c00:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    2c04:	8e 81       	ldd	r24, Y+6	; 0x06
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    2c0c:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    2c0e:	00 00       	nop
    2c10:	28 96       	adiw	r28, 0x08	; 8
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	0f 91       	pop	r16
    2c22:	08 95       	ret

00002c24 <main>:
 */
/********** SECTION : Includes **********/
#include "Main_Init.h"
/********** SECTION : Main Function **********/
int main (void)
{
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    2c2c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <App_Init>
	while(1)
	{
		App_Loop();
    2c30:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <App_Loop>
    2c34:	fd cf       	rjmp	.-6      	; 0x2c30 <main+0xc>

00002c36 <__udivmodqi4>:
    2c36:	99 1b       	sub	r25, r25
    2c38:	79 e0       	ldi	r23, 0x09	; 9
    2c3a:	04 c0       	rjmp	.+8      	; 0x2c44 <__udivmodqi4_ep>

00002c3c <__udivmodqi4_loop>:
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	96 17       	cp	r25, r22
    2c40:	08 f0       	brcs	.+2      	; 0x2c44 <__udivmodqi4_ep>
    2c42:	96 1b       	sub	r25, r22

00002c44 <__udivmodqi4_ep>:
    2c44:	88 1f       	adc	r24, r24
    2c46:	7a 95       	dec	r23
    2c48:	c9 f7       	brne	.-14     	; 0x2c3c <__udivmodqi4_loop>
    2c4a:	80 95       	com	r24
    2c4c:	08 95       	ret

00002c4e <__tablejump2__>:
    2c4e:	ee 0f       	add	r30, r30
    2c50:	ff 1f       	adc	r31, r31
    2c52:	05 90       	lpm	r0, Z+
    2c54:	f4 91       	lpm	r31, Z
    2c56:	e0 2d       	mov	r30, r0
    2c58:	09 94       	ijmp

00002c5a <__cmpsf2>:
    2c5a:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__fp_cmp>
    2c5e:	08 f4       	brcc	.+2      	; 0x2c62 <__cmpsf2+0x8>
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	08 95       	ret

00002c64 <__divsf3>:
    2c64:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__divsf3x>
    2c68:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__fp_round>
    2c6c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__fp_pscB>
    2c70:	58 f0       	brcs	.+22     	; 0x2c88 <__divsf3+0x24>
    2c72:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__fp_pscA>
    2c76:	40 f0       	brcs	.+16     	; 0x2c88 <__divsf3+0x24>
    2c78:	29 f4       	brne	.+10     	; 0x2c84 <__divsf3+0x20>
    2c7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c7c:	29 f0       	breq	.+10     	; 0x2c88 <__divsf3+0x24>
    2c7e:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__fp_inf>
    2c82:	51 11       	cpse	r21, r1
    2c84:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__fp_szero>
    2c88:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__fp_nan>

00002c8c <__divsf3x>:
    2c8c:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__fp_split3>
    2c90:	68 f3       	brcs	.-38     	; 0x2c6c <__divsf3+0x8>

00002c92 <__divsf3_pse>:
    2c92:	99 23       	and	r25, r25
    2c94:	b1 f3       	breq	.-20     	; 0x2c82 <__divsf3+0x1e>
    2c96:	55 23       	and	r21, r21
    2c98:	91 f3       	breq	.-28     	; 0x2c7e <__divsf3+0x1a>
    2c9a:	95 1b       	sub	r25, r21
    2c9c:	55 0b       	sbc	r21, r21
    2c9e:	bb 27       	eor	r27, r27
    2ca0:	aa 27       	eor	r26, r26
    2ca2:	62 17       	cp	r22, r18
    2ca4:	73 07       	cpc	r23, r19
    2ca6:	84 07       	cpc	r24, r20
    2ca8:	38 f0       	brcs	.+14     	; 0x2cb8 <__divsf3_pse+0x26>
    2caa:	9f 5f       	subi	r25, 0xFF	; 255
    2cac:	5f 4f       	sbci	r21, 0xFF	; 255
    2cae:	22 0f       	add	r18, r18
    2cb0:	33 1f       	adc	r19, r19
    2cb2:	44 1f       	adc	r20, r20
    2cb4:	aa 1f       	adc	r26, r26
    2cb6:	a9 f3       	breq	.-22     	; 0x2ca2 <__divsf3_pse+0x10>
    2cb8:	35 d0       	rcall	.+106    	; 0x2d24 <__divsf3_pse+0x92>
    2cba:	0e 2e       	mov	r0, r30
    2cbc:	3a f0       	brmi	.+14     	; 0x2ccc <__divsf3_pse+0x3a>
    2cbe:	e0 e8       	ldi	r30, 0x80	; 128
    2cc0:	32 d0       	rcall	.+100    	; 0x2d26 <__divsf3_pse+0x94>
    2cc2:	91 50       	subi	r25, 0x01	; 1
    2cc4:	50 40       	sbci	r21, 0x00	; 0
    2cc6:	e6 95       	lsr	r30
    2cc8:	00 1c       	adc	r0, r0
    2cca:	ca f7       	brpl	.-14     	; 0x2cbe <__divsf3_pse+0x2c>
    2ccc:	2b d0       	rcall	.+86     	; 0x2d24 <__divsf3_pse+0x92>
    2cce:	fe 2f       	mov	r31, r30
    2cd0:	29 d0       	rcall	.+82     	; 0x2d24 <__divsf3_pse+0x92>
    2cd2:	66 0f       	add	r22, r22
    2cd4:	77 1f       	adc	r23, r23
    2cd6:	88 1f       	adc	r24, r24
    2cd8:	bb 1f       	adc	r27, r27
    2cda:	26 17       	cp	r18, r22
    2cdc:	37 07       	cpc	r19, r23
    2cde:	48 07       	cpc	r20, r24
    2ce0:	ab 07       	cpc	r26, r27
    2ce2:	b0 e8       	ldi	r27, 0x80	; 128
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <__divsf3_pse+0x56>
    2ce6:	bb 0b       	sbc	r27, r27
    2ce8:	80 2d       	mov	r24, r0
    2cea:	bf 01       	movw	r22, r30
    2cec:	ff 27       	eor	r31, r31
    2cee:	93 58       	subi	r25, 0x83	; 131
    2cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf2:	3a f0       	brmi	.+14     	; 0x2d02 <__divsf3_pse+0x70>
    2cf4:	9e 3f       	cpi	r25, 0xFE	; 254
    2cf6:	51 05       	cpc	r21, r1
    2cf8:	78 f0       	brcs	.+30     	; 0x2d18 <__divsf3_pse+0x86>
    2cfa:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__fp_inf>
    2cfe:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__fp_szero>
    2d02:	5f 3f       	cpi	r21, 0xFF	; 255
    2d04:	e4 f3       	brlt	.-8      	; 0x2cfe <__divsf3_pse+0x6c>
    2d06:	98 3e       	cpi	r25, 0xE8	; 232
    2d08:	d4 f3       	brlt	.-12     	; 0x2cfe <__divsf3_pse+0x6c>
    2d0a:	86 95       	lsr	r24
    2d0c:	77 95       	ror	r23
    2d0e:	67 95       	ror	r22
    2d10:	b7 95       	ror	r27
    2d12:	f7 95       	ror	r31
    2d14:	9f 5f       	subi	r25, 0xFF	; 255
    2d16:	c9 f7       	brne	.-14     	; 0x2d0a <__divsf3_pse+0x78>
    2d18:	88 0f       	add	r24, r24
    2d1a:	91 1d       	adc	r25, r1
    2d1c:	96 95       	lsr	r25
    2d1e:	87 95       	ror	r24
    2d20:	97 f9       	bld	r25, 7
    2d22:	08 95       	ret
    2d24:	e1 e0       	ldi	r30, 0x01	; 1
    2d26:	66 0f       	add	r22, r22
    2d28:	77 1f       	adc	r23, r23
    2d2a:	88 1f       	adc	r24, r24
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	62 17       	cp	r22, r18
    2d30:	73 07       	cpc	r23, r19
    2d32:	84 07       	cpc	r24, r20
    2d34:	ba 07       	cpc	r27, r26
    2d36:	20 f0       	brcs	.+8      	; 0x2d40 <__divsf3_pse+0xae>
    2d38:	62 1b       	sub	r22, r18
    2d3a:	73 0b       	sbc	r23, r19
    2d3c:	84 0b       	sbc	r24, r20
    2d3e:	ba 0b       	sbc	r27, r26
    2d40:	ee 1f       	adc	r30, r30
    2d42:	88 f7       	brcc	.-30     	; 0x2d26 <__divsf3_pse+0x94>
    2d44:	e0 95       	com	r30
    2d46:	08 95       	ret

00002d48 <__fixunssfsi>:
    2d48:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <__fp_splitA>
    2d4c:	88 f0       	brcs	.+34     	; 0x2d70 <__fixunssfsi+0x28>
    2d4e:	9f 57       	subi	r25, 0x7F	; 127
    2d50:	98 f0       	brcs	.+38     	; 0x2d78 <__fixunssfsi+0x30>
    2d52:	b9 2f       	mov	r27, r25
    2d54:	99 27       	eor	r25, r25
    2d56:	b7 51       	subi	r27, 0x17	; 23
    2d58:	b0 f0       	brcs	.+44     	; 0x2d86 <__fixunssfsi+0x3e>
    2d5a:	e1 f0       	breq	.+56     	; 0x2d94 <__fixunssfsi+0x4c>
    2d5c:	66 0f       	add	r22, r22
    2d5e:	77 1f       	adc	r23, r23
    2d60:	88 1f       	adc	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	1a f0       	brmi	.+6      	; 0x2d6c <__fixunssfsi+0x24>
    2d66:	ba 95       	dec	r27
    2d68:	c9 f7       	brne	.-14     	; 0x2d5c <__fixunssfsi+0x14>
    2d6a:	14 c0       	rjmp	.+40     	; 0x2d94 <__fixunssfsi+0x4c>
    2d6c:	b1 30       	cpi	r27, 0x01	; 1
    2d6e:	91 f0       	breq	.+36     	; 0x2d94 <__fixunssfsi+0x4c>
    2d70:	0e 94 7e 17 	call	0x2efc	; 0x2efc <__fp_zero>
    2d74:	b1 e0       	ldi	r27, 0x01	; 1
    2d76:	08 95       	ret
    2d78:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__fp_zero>
    2d7c:	67 2f       	mov	r22, r23
    2d7e:	78 2f       	mov	r23, r24
    2d80:	88 27       	eor	r24, r24
    2d82:	b8 5f       	subi	r27, 0xF8	; 248
    2d84:	39 f0       	breq	.+14     	; 0x2d94 <__fixunssfsi+0x4c>
    2d86:	b9 3f       	cpi	r27, 0xF9	; 249
    2d88:	cc f3       	brlt	.-14     	; 0x2d7c <__fixunssfsi+0x34>
    2d8a:	86 95       	lsr	r24
    2d8c:	77 95       	ror	r23
    2d8e:	67 95       	ror	r22
    2d90:	b3 95       	inc	r27
    2d92:	d9 f7       	brne	.-10     	; 0x2d8a <__fixunssfsi+0x42>
    2d94:	3e f4       	brtc	.+14     	; 0x2da4 <__fixunssfsi+0x5c>
    2d96:	90 95       	com	r25
    2d98:	80 95       	com	r24
    2d9a:	70 95       	com	r23
    2d9c:	61 95       	neg	r22
    2d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2da0:	8f 4f       	sbci	r24, 0xFF	; 255
    2da2:	9f 4f       	sbci	r25, 0xFF	; 255
    2da4:	08 95       	ret

00002da6 <__floatunsisf>:
    2da6:	e8 94       	clt
    2da8:	09 c0       	rjmp	.+18     	; 0x2dbc <__floatsisf+0x12>

00002daa <__floatsisf>:
    2daa:	97 fb       	bst	r25, 7
    2dac:	3e f4       	brtc	.+14     	; 0x2dbc <__floatsisf+0x12>
    2dae:	90 95       	com	r25
    2db0:	80 95       	com	r24
    2db2:	70 95       	com	r23
    2db4:	61 95       	neg	r22
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dba:	9f 4f       	sbci	r25, 0xFF	; 255
    2dbc:	99 23       	and	r25, r25
    2dbe:	a9 f0       	breq	.+42     	; 0x2dea <__floatsisf+0x40>
    2dc0:	f9 2f       	mov	r31, r25
    2dc2:	96 e9       	ldi	r25, 0x96	; 150
    2dc4:	bb 27       	eor	r27, r27
    2dc6:	93 95       	inc	r25
    2dc8:	f6 95       	lsr	r31
    2dca:	87 95       	ror	r24
    2dcc:	77 95       	ror	r23
    2dce:	67 95       	ror	r22
    2dd0:	b7 95       	ror	r27
    2dd2:	f1 11       	cpse	r31, r1
    2dd4:	f8 cf       	rjmp	.-16     	; 0x2dc6 <__floatsisf+0x1c>
    2dd6:	fa f4       	brpl	.+62     	; 0x2e16 <__floatsisf+0x6c>
    2dd8:	bb 0f       	add	r27, r27
    2dda:	11 f4       	brne	.+4      	; 0x2de0 <__floatsisf+0x36>
    2ddc:	60 ff       	sbrs	r22, 0
    2dde:	1b c0       	rjmp	.+54     	; 0x2e16 <__floatsisf+0x6c>
    2de0:	6f 5f       	subi	r22, 0xFF	; 255
    2de2:	7f 4f       	sbci	r23, 0xFF	; 255
    2de4:	8f 4f       	sbci	r24, 0xFF	; 255
    2de6:	9f 4f       	sbci	r25, 0xFF	; 255
    2de8:	16 c0       	rjmp	.+44     	; 0x2e16 <__floatsisf+0x6c>
    2dea:	88 23       	and	r24, r24
    2dec:	11 f0       	breq	.+4      	; 0x2df2 <__floatsisf+0x48>
    2dee:	96 e9       	ldi	r25, 0x96	; 150
    2df0:	11 c0       	rjmp	.+34     	; 0x2e14 <__floatsisf+0x6a>
    2df2:	77 23       	and	r23, r23
    2df4:	21 f0       	breq	.+8      	; 0x2dfe <__floatsisf+0x54>
    2df6:	9e e8       	ldi	r25, 0x8E	; 142
    2df8:	87 2f       	mov	r24, r23
    2dfa:	76 2f       	mov	r23, r22
    2dfc:	05 c0       	rjmp	.+10     	; 0x2e08 <__floatsisf+0x5e>
    2dfe:	66 23       	and	r22, r22
    2e00:	71 f0       	breq	.+28     	; 0x2e1e <__floatsisf+0x74>
    2e02:	96 e8       	ldi	r25, 0x86	; 134
    2e04:	86 2f       	mov	r24, r22
    2e06:	70 e0       	ldi	r23, 0x00	; 0
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	2a f0       	brmi	.+10     	; 0x2e16 <__floatsisf+0x6c>
    2e0c:	9a 95       	dec	r25
    2e0e:	66 0f       	add	r22, r22
    2e10:	77 1f       	adc	r23, r23
    2e12:	88 1f       	adc	r24, r24
    2e14:	da f7       	brpl	.-10     	; 0x2e0c <__floatsisf+0x62>
    2e16:	88 0f       	add	r24, r24
    2e18:	96 95       	lsr	r25
    2e1a:	87 95       	ror	r24
    2e1c:	97 f9       	bld	r25, 7
    2e1e:	08 95       	ret

00002e20 <__fp_cmp>:
    2e20:	99 0f       	add	r25, r25
    2e22:	00 08       	sbc	r0, r0
    2e24:	55 0f       	add	r21, r21
    2e26:	aa 0b       	sbc	r26, r26
    2e28:	e0 e8       	ldi	r30, 0x80	; 128
    2e2a:	fe ef       	ldi	r31, 0xFE	; 254
    2e2c:	16 16       	cp	r1, r22
    2e2e:	17 06       	cpc	r1, r23
    2e30:	e8 07       	cpc	r30, r24
    2e32:	f9 07       	cpc	r31, r25
    2e34:	c0 f0       	brcs	.+48     	; 0x2e66 <__fp_cmp+0x46>
    2e36:	12 16       	cp	r1, r18
    2e38:	13 06       	cpc	r1, r19
    2e3a:	e4 07       	cpc	r30, r20
    2e3c:	f5 07       	cpc	r31, r21
    2e3e:	98 f0       	brcs	.+38     	; 0x2e66 <__fp_cmp+0x46>
    2e40:	62 1b       	sub	r22, r18
    2e42:	73 0b       	sbc	r23, r19
    2e44:	84 0b       	sbc	r24, r20
    2e46:	95 0b       	sbc	r25, r21
    2e48:	39 f4       	brne	.+14     	; 0x2e58 <__fp_cmp+0x38>
    2e4a:	0a 26       	eor	r0, r26
    2e4c:	61 f0       	breq	.+24     	; 0x2e66 <__fp_cmp+0x46>
    2e4e:	23 2b       	or	r18, r19
    2e50:	24 2b       	or	r18, r20
    2e52:	25 2b       	or	r18, r21
    2e54:	21 f4       	brne	.+8      	; 0x2e5e <__fp_cmp+0x3e>
    2e56:	08 95       	ret
    2e58:	0a 26       	eor	r0, r26
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <__fp_cmp+0x3e>
    2e5c:	a1 40       	sbci	r26, 0x01	; 1
    2e5e:	a6 95       	lsr	r26
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	81 1d       	adc	r24, r1
    2e64:	81 1d       	adc	r24, r1
    2e66:	08 95       	ret

00002e68 <__fp_inf>:
    2e68:	97 f9       	bld	r25, 7
    2e6a:	9f 67       	ori	r25, 0x7F	; 127
    2e6c:	80 e8       	ldi	r24, 0x80	; 128
    2e6e:	70 e0       	ldi	r23, 0x00	; 0
    2e70:	60 e0       	ldi	r22, 0x00	; 0
    2e72:	08 95       	ret

00002e74 <__fp_nan>:
    2e74:	9f ef       	ldi	r25, 0xFF	; 255
    2e76:	80 ec       	ldi	r24, 0xC0	; 192
    2e78:	08 95       	ret

00002e7a <__fp_pscA>:
    2e7a:	00 24       	eor	r0, r0
    2e7c:	0a 94       	dec	r0
    2e7e:	16 16       	cp	r1, r22
    2e80:	17 06       	cpc	r1, r23
    2e82:	18 06       	cpc	r1, r24
    2e84:	09 06       	cpc	r0, r25
    2e86:	08 95       	ret

00002e88 <__fp_pscB>:
    2e88:	00 24       	eor	r0, r0
    2e8a:	0a 94       	dec	r0
    2e8c:	12 16       	cp	r1, r18
    2e8e:	13 06       	cpc	r1, r19
    2e90:	14 06       	cpc	r1, r20
    2e92:	05 06       	cpc	r0, r21
    2e94:	08 95       	ret

00002e96 <__fp_round>:
    2e96:	09 2e       	mov	r0, r25
    2e98:	03 94       	inc	r0
    2e9a:	00 0c       	add	r0, r0
    2e9c:	11 f4       	brne	.+4      	; 0x2ea2 <__fp_round+0xc>
    2e9e:	88 23       	and	r24, r24
    2ea0:	52 f0       	brmi	.+20     	; 0x2eb6 <__fp_round+0x20>
    2ea2:	bb 0f       	add	r27, r27
    2ea4:	40 f4       	brcc	.+16     	; 0x2eb6 <__fp_round+0x20>
    2ea6:	bf 2b       	or	r27, r31
    2ea8:	11 f4       	brne	.+4      	; 0x2eae <__fp_round+0x18>
    2eaa:	60 ff       	sbrs	r22, 0
    2eac:	04 c0       	rjmp	.+8      	; 0x2eb6 <__fp_round+0x20>
    2eae:	6f 5f       	subi	r22, 0xFF	; 255
    2eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb2:	8f 4f       	sbci	r24, 0xFF	; 255
    2eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb6:	08 95       	ret

00002eb8 <__fp_split3>:
    2eb8:	57 fd       	sbrc	r21, 7
    2eba:	90 58       	subi	r25, 0x80	; 128
    2ebc:	44 0f       	add	r20, r20
    2ebe:	55 1f       	adc	r21, r21
    2ec0:	59 f0       	breq	.+22     	; 0x2ed8 <__fp_splitA+0x10>
    2ec2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ec4:	71 f0       	breq	.+28     	; 0x2ee2 <__fp_splitA+0x1a>
    2ec6:	47 95       	ror	r20

00002ec8 <__fp_splitA>:
    2ec8:	88 0f       	add	r24, r24
    2eca:	97 fb       	bst	r25, 7
    2ecc:	99 1f       	adc	r25, r25
    2ece:	61 f0       	breq	.+24     	; 0x2ee8 <__fp_splitA+0x20>
    2ed0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ed2:	79 f0       	breq	.+30     	; 0x2ef2 <__fp_splitA+0x2a>
    2ed4:	87 95       	ror	r24
    2ed6:	08 95       	ret
    2ed8:	12 16       	cp	r1, r18
    2eda:	13 06       	cpc	r1, r19
    2edc:	14 06       	cpc	r1, r20
    2ede:	55 1f       	adc	r21, r21
    2ee0:	f2 cf       	rjmp	.-28     	; 0x2ec6 <__fp_split3+0xe>
    2ee2:	46 95       	lsr	r20
    2ee4:	f1 df       	rcall	.-30     	; 0x2ec8 <__fp_splitA>
    2ee6:	08 c0       	rjmp	.+16     	; 0x2ef8 <__fp_splitA+0x30>
    2ee8:	16 16       	cp	r1, r22
    2eea:	17 06       	cpc	r1, r23
    2eec:	18 06       	cpc	r1, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	f1 cf       	rjmp	.-30     	; 0x2ed4 <__fp_splitA+0xc>
    2ef2:	86 95       	lsr	r24
    2ef4:	71 05       	cpc	r23, r1
    2ef6:	61 05       	cpc	r22, r1
    2ef8:	08 94       	sec
    2efa:	08 95       	ret

00002efc <__fp_zero>:
    2efc:	e8 94       	clt

00002efe <__fp_szero>:
    2efe:	bb 27       	eor	r27, r27
    2f00:	66 27       	eor	r22, r22
    2f02:	77 27       	eor	r23, r23
    2f04:	cb 01       	movw	r24, r22
    2f06:	97 f9       	bld	r25, 7
    2f08:	08 95       	ret

00002f0a <__gesf2>:
    2f0a:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__fp_cmp>
    2f0e:	08 f4       	brcc	.+2      	; 0x2f12 <__gesf2+0x8>
    2f10:	8f ef       	ldi	r24, 0xFF	; 255
    2f12:	08 95       	ret

00002f14 <__mulsf3>:
    2f14:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3x>
    2f18:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__fp_round>
    2f1c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__fp_pscA>
    2f20:	38 f0       	brcs	.+14     	; 0x2f30 <__mulsf3+0x1c>
    2f22:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__fp_pscB>
    2f26:	20 f0       	brcs	.+8      	; 0x2f30 <__mulsf3+0x1c>
    2f28:	95 23       	and	r25, r21
    2f2a:	11 f0       	breq	.+4      	; 0x2f30 <__mulsf3+0x1c>
    2f2c:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__fp_inf>
    2f30:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__fp_nan>
    2f34:	11 24       	eor	r1, r1
    2f36:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__fp_szero>

00002f3a <__mulsf3x>:
    2f3a:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__fp_split3>
    2f3e:	70 f3       	brcs	.-36     	; 0x2f1c <__mulsf3+0x8>

00002f40 <__mulsf3_pse>:
    2f40:	95 9f       	mul	r25, r21
    2f42:	c1 f3       	breq	.-16     	; 0x2f34 <__mulsf3+0x20>
    2f44:	95 0f       	add	r25, r21
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	55 1f       	adc	r21, r21
    2f4a:	62 9f       	mul	r22, r18
    2f4c:	f0 01       	movw	r30, r0
    2f4e:	72 9f       	mul	r23, r18
    2f50:	bb 27       	eor	r27, r27
    2f52:	f0 0d       	add	r31, r0
    2f54:	b1 1d       	adc	r27, r1
    2f56:	63 9f       	mul	r22, r19
    2f58:	aa 27       	eor	r26, r26
    2f5a:	f0 0d       	add	r31, r0
    2f5c:	b1 1d       	adc	r27, r1
    2f5e:	aa 1f       	adc	r26, r26
    2f60:	64 9f       	mul	r22, r20
    2f62:	66 27       	eor	r22, r22
    2f64:	b0 0d       	add	r27, r0
    2f66:	a1 1d       	adc	r26, r1
    2f68:	66 1f       	adc	r22, r22
    2f6a:	82 9f       	mul	r24, r18
    2f6c:	22 27       	eor	r18, r18
    2f6e:	b0 0d       	add	r27, r0
    2f70:	a1 1d       	adc	r26, r1
    2f72:	62 1f       	adc	r22, r18
    2f74:	73 9f       	mul	r23, r19
    2f76:	b0 0d       	add	r27, r0
    2f78:	a1 1d       	adc	r26, r1
    2f7a:	62 1f       	adc	r22, r18
    2f7c:	83 9f       	mul	r24, r19
    2f7e:	a0 0d       	add	r26, r0
    2f80:	61 1d       	adc	r22, r1
    2f82:	22 1f       	adc	r18, r18
    2f84:	74 9f       	mul	r23, r20
    2f86:	33 27       	eor	r19, r19
    2f88:	a0 0d       	add	r26, r0
    2f8a:	61 1d       	adc	r22, r1
    2f8c:	23 1f       	adc	r18, r19
    2f8e:	84 9f       	mul	r24, r20
    2f90:	60 0d       	add	r22, r0
    2f92:	21 1d       	adc	r18, r1
    2f94:	82 2f       	mov	r24, r18
    2f96:	76 2f       	mov	r23, r22
    2f98:	6a 2f       	mov	r22, r26
    2f9a:	11 24       	eor	r1, r1
    2f9c:	9f 57       	subi	r25, 0x7F	; 127
    2f9e:	50 40       	sbci	r21, 0x00	; 0
    2fa0:	9a f0       	brmi	.+38     	; 0x2fc8 <__mulsf3_pse+0x88>
    2fa2:	f1 f0       	breq	.+60     	; 0x2fe0 <__mulsf3_pse+0xa0>
    2fa4:	88 23       	and	r24, r24
    2fa6:	4a f0       	brmi	.+18     	; 0x2fba <__mulsf3_pse+0x7a>
    2fa8:	ee 0f       	add	r30, r30
    2faa:	ff 1f       	adc	r31, r31
    2fac:	bb 1f       	adc	r27, r27
    2fae:	66 1f       	adc	r22, r22
    2fb0:	77 1f       	adc	r23, r23
    2fb2:	88 1f       	adc	r24, r24
    2fb4:	91 50       	subi	r25, 0x01	; 1
    2fb6:	50 40       	sbci	r21, 0x00	; 0
    2fb8:	a9 f7       	brne	.-22     	; 0x2fa4 <__mulsf3_pse+0x64>
    2fba:	9e 3f       	cpi	r25, 0xFE	; 254
    2fbc:	51 05       	cpc	r21, r1
    2fbe:	80 f0       	brcs	.+32     	; 0x2fe0 <__mulsf3_pse+0xa0>
    2fc0:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__fp_inf>
    2fc4:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__fp_szero>
    2fc8:	5f 3f       	cpi	r21, 0xFF	; 255
    2fca:	e4 f3       	brlt	.-8      	; 0x2fc4 <__mulsf3_pse+0x84>
    2fcc:	98 3e       	cpi	r25, 0xE8	; 232
    2fce:	d4 f3       	brlt	.-12     	; 0x2fc4 <__mulsf3_pse+0x84>
    2fd0:	86 95       	lsr	r24
    2fd2:	77 95       	ror	r23
    2fd4:	67 95       	ror	r22
    2fd6:	b7 95       	ror	r27
    2fd8:	f7 95       	ror	r31
    2fda:	e7 95       	ror	r30
    2fdc:	9f 5f       	subi	r25, 0xFF	; 255
    2fde:	c1 f7       	brne	.-16     	; 0x2fd0 <__mulsf3_pse+0x90>
    2fe0:	fe 2b       	or	r31, r30
    2fe2:	88 0f       	add	r24, r24
    2fe4:	91 1d       	adc	r25, r1
    2fe6:	96 95       	lsr	r25
    2fe8:	87 95       	ror	r24
    2fea:	97 f9       	bld	r25, 7
    2fec:	08 95       	ret

00002fee <memset>:
    2fee:	dc 01       	movw	r26, r24
    2ff0:	01 c0       	rjmp	.+2      	; 0x2ff4 <memset+0x6>
    2ff2:	6d 93       	st	X+, r22
    2ff4:	41 50       	subi	r20, 0x01	; 1
    2ff6:	50 40       	sbci	r21, 0x00	; 0
    2ff8:	e0 f7       	brcc	.-8      	; 0x2ff2 <memset+0x4>
    2ffa:	08 95       	ret

00002ffc <sprintf>:
    2ffc:	ae e0       	ldi	r26, 0x0E	; 14
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	e4 e0       	ldi	r30, 0x04	; 4
    3002:	f8 e1       	ldi	r31, 0x18	; 24
    3004:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__+0x1c>
    3008:	0d 89       	ldd	r16, Y+21	; 0x15
    300a:	1e 89       	ldd	r17, Y+22	; 0x16
    300c:	86 e0       	ldi	r24, 0x06	; 6
    300e:	8c 83       	std	Y+4, r24	; 0x04
    3010:	1a 83       	std	Y+2, r17	; 0x02
    3012:	09 83       	std	Y+1, r16	; 0x01
    3014:	8f ef       	ldi	r24, 0xFF	; 255
    3016:	9f e7       	ldi	r25, 0x7F	; 127
    3018:	9e 83       	std	Y+6, r25	; 0x06
    301a:	8d 83       	std	Y+5, r24	; 0x05
    301c:	ae 01       	movw	r20, r28
    301e:	47 5e       	subi	r20, 0xE7	; 231
    3020:	5f 4f       	sbci	r21, 0xFF	; 255
    3022:	6f 89       	ldd	r22, Y+23	; 0x17
    3024:	78 8d       	ldd	r23, Y+24	; 0x18
    3026:	ce 01       	movw	r24, r28
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	0e 94 21 18 	call	0x3042	; 0x3042 <vfprintf>
    302e:	2f 81       	ldd	r18, Y+7	; 0x07
    3030:	38 85       	ldd	r19, Y+8	; 0x08
    3032:	02 0f       	add	r16, r18
    3034:	13 1f       	adc	r17, r19
    3036:	f8 01       	movw	r30, r16
    3038:	10 82       	st	Z, r1
    303a:	2e 96       	adiw	r28, 0x0e	; 14
    303c:	e4 e0       	ldi	r30, 0x04	; 4
    303e:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__+0x1c>

00003042 <vfprintf>:
    3042:	ab e0       	ldi	r26, 0x0B	; 11
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e7 e2       	ldi	r30, 0x27	; 39
    3048:	f8 e1       	ldi	r31, 0x18	; 24
    304a:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__>
    304e:	7c 01       	movw	r14, r24
    3050:	3b 01       	movw	r6, r22
    3052:	8a 01       	movw	r16, r20
    3054:	fc 01       	movw	r30, r24
    3056:	17 82       	std	Z+7, r1	; 0x07
    3058:	16 82       	std	Z+6, r1	; 0x06
    305a:	83 81       	ldd	r24, Z+3	; 0x03
    305c:	81 ff       	sbrs	r24, 1
    305e:	c8 c1       	rjmp	.+912    	; 0x33f0 <vfprintf+0x3ae>
    3060:	ce 01       	movw	r24, r28
    3062:	01 96       	adiw	r24, 0x01	; 1
    3064:	5c 01       	movw	r10, r24
    3066:	f7 01       	movw	r30, r14
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	f3 01       	movw	r30, r6
    306c:	93 fd       	sbrc	r25, 3
    306e:	85 91       	lpm	r24, Z+
    3070:	93 ff       	sbrs	r25, 3
    3072:	81 91       	ld	r24, Z+
    3074:	3f 01       	movw	r6, r30
    3076:	88 23       	and	r24, r24
    3078:	09 f4       	brne	.+2      	; 0x307c <vfprintf+0x3a>
    307a:	53 c1       	rjmp	.+678    	; 0x3322 <vfprintf+0x2e0>
    307c:	85 32       	cpi	r24, 0x25	; 37
    307e:	39 f4       	brne	.+14     	; 0x308e <vfprintf+0x4c>
    3080:	93 fd       	sbrc	r25, 3
    3082:	85 91       	lpm	r24, Z+
    3084:	93 ff       	sbrs	r25, 3
    3086:	81 91       	ld	r24, Z+
    3088:	3f 01       	movw	r6, r30
    308a:	85 32       	cpi	r24, 0x25	; 37
    308c:	29 f4       	brne	.+10     	; 0x3098 <vfprintf+0x56>
    308e:	b7 01       	movw	r22, r14
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 94 11 1a 	call	0x3422	; 0x3422 <fputc>
    3096:	e7 cf       	rjmp	.-50     	; 0x3066 <vfprintf+0x24>
    3098:	91 2c       	mov	r9, r1
    309a:	21 2c       	mov	r2, r1
    309c:	31 2c       	mov	r3, r1
    309e:	ff e1       	ldi	r31, 0x1F	; 31
    30a0:	f3 15       	cp	r31, r3
    30a2:	38 f0       	brcs	.+14     	; 0x30b2 <vfprintf+0x70>
    30a4:	8b 32       	cpi	r24, 0x2B	; 43
    30a6:	11 f1       	breq	.+68     	; 0x30ec <vfprintf+0xaa>
    30a8:	90 f4       	brcc	.+36     	; 0x30ce <vfprintf+0x8c>
    30aa:	80 32       	cpi	r24, 0x20	; 32
    30ac:	09 f1       	breq	.+66     	; 0x30f0 <vfprintf+0xae>
    30ae:	83 32       	cpi	r24, 0x23	; 35
    30b0:	29 f1       	breq	.+74     	; 0x30fc <vfprintf+0xba>
    30b2:	37 fc       	sbrc	r3, 7
    30b4:	3c c0       	rjmp	.+120    	; 0x312e <vfprintf+0xec>
    30b6:	20 ed       	ldi	r18, 0xD0	; 208
    30b8:	28 0f       	add	r18, r24
    30ba:	2a 30       	cpi	r18, 0x0A	; 10
    30bc:	50 f5       	brcc	.+84     	; 0x3112 <vfprintf+0xd0>
    30be:	36 fe       	sbrs	r3, 6
    30c0:	20 c0       	rjmp	.+64     	; 0x3102 <vfprintf+0xc0>
    30c2:	8a e0       	ldi	r24, 0x0A	; 10
    30c4:	98 9e       	mul	r9, r24
    30c6:	20 0d       	add	r18, r0
    30c8:	11 24       	eor	r1, r1
    30ca:	92 2e       	mov	r9, r18
    30cc:	06 c0       	rjmp	.+12     	; 0x30da <vfprintf+0x98>
    30ce:	8d 32       	cpi	r24, 0x2D	; 45
    30d0:	91 f0       	breq	.+36     	; 0x30f6 <vfprintf+0xb4>
    30d2:	80 33       	cpi	r24, 0x30	; 48
    30d4:	71 f7       	brne	.-36     	; 0x30b2 <vfprintf+0x70>
    30d6:	68 94       	set
    30d8:	30 f8       	bld	r3, 0
    30da:	f3 01       	movw	r30, r6
    30dc:	93 fd       	sbrc	r25, 3
    30de:	85 91       	lpm	r24, Z+
    30e0:	93 ff       	sbrs	r25, 3
    30e2:	81 91       	ld	r24, Z+
    30e4:	3f 01       	movw	r6, r30
    30e6:	81 11       	cpse	r24, r1
    30e8:	da cf       	rjmp	.-76     	; 0x309e <vfprintf+0x5c>
    30ea:	21 c0       	rjmp	.+66     	; 0x312e <vfprintf+0xec>
    30ec:	68 94       	set
    30ee:	31 f8       	bld	r3, 1
    30f0:	68 94       	set
    30f2:	32 f8       	bld	r3, 2
    30f4:	f2 cf       	rjmp	.-28     	; 0x30da <vfprintf+0x98>
    30f6:	68 94       	set
    30f8:	33 f8       	bld	r3, 3
    30fa:	ef cf       	rjmp	.-34     	; 0x30da <vfprintf+0x98>
    30fc:	68 94       	set
    30fe:	34 f8       	bld	r3, 4
    3100:	ec cf       	rjmp	.-40     	; 0x30da <vfprintf+0x98>
    3102:	ea e0       	ldi	r30, 0x0A	; 10
    3104:	2e 9e       	mul	r2, r30
    3106:	20 0d       	add	r18, r0
    3108:	11 24       	eor	r1, r1
    310a:	22 2e       	mov	r2, r18
    310c:	68 94       	set
    310e:	35 f8       	bld	r3, 5
    3110:	e4 cf       	rjmp	.-56     	; 0x30da <vfprintf+0x98>
    3112:	8e 32       	cpi	r24, 0x2E	; 46
    3114:	29 f4       	brne	.+10     	; 0x3120 <vfprintf+0xde>
    3116:	36 fc       	sbrc	r3, 6
    3118:	04 c1       	rjmp	.+520    	; 0x3322 <vfprintf+0x2e0>
    311a:	68 94       	set
    311c:	36 f8       	bld	r3, 6
    311e:	dd cf       	rjmp	.-70     	; 0x30da <vfprintf+0x98>
    3120:	8c 36       	cpi	r24, 0x6C	; 108
    3122:	19 f4       	brne	.+6      	; 0x312a <vfprintf+0xe8>
    3124:	68 94       	set
    3126:	37 f8       	bld	r3, 7
    3128:	d8 cf       	rjmp	.-80     	; 0x30da <vfprintf+0x98>
    312a:	88 36       	cpi	r24, 0x68	; 104
    312c:	b1 f2       	breq	.-84     	; 0x30da <vfprintf+0x98>
    312e:	98 2f       	mov	r25, r24
    3130:	9f 7d       	andi	r25, 0xDF	; 223
    3132:	95 54       	subi	r25, 0x45	; 69
    3134:	93 30       	cpi	r25, 0x03	; 3
    3136:	e0 f0       	brcs	.+56     	; 0x3170 <vfprintf+0x12e>
    3138:	83 36       	cpi	r24, 0x63	; 99
    313a:	a1 f1       	breq	.+104    	; 0x31a4 <vfprintf+0x162>
    313c:	83 37       	cpi	r24, 0x73	; 115
    313e:	c1 f1       	breq	.+112    	; 0x31b0 <vfprintf+0x16e>
    3140:	83 35       	cpi	r24, 0x53	; 83
    3142:	09 f0       	breq	.+2      	; 0x3146 <vfprintf+0x104>
    3144:	63 c0       	rjmp	.+198    	; 0x320c <vfprintf+0x1ca>
    3146:	28 01       	movw	r4, r16
    3148:	f2 e0       	ldi	r31, 0x02	; 2
    314a:	4f 0e       	add	r4, r31
    314c:	51 1c       	adc	r5, r1
    314e:	f8 01       	movw	r30, r16
    3150:	c0 80       	ld	r12, Z
    3152:	d1 80       	ldd	r13, Z+1	; 0x01
    3154:	69 2d       	mov	r22, r9
    3156:	70 e0       	ldi	r23, 0x00	; 0
    3158:	36 fc       	sbrc	r3, 6
    315a:	02 c0       	rjmp	.+4      	; 0x3160 <vfprintf+0x11e>
    315c:	6f ef       	ldi	r22, 0xFF	; 255
    315e:	7f ef       	ldi	r23, 0xFF	; 255
    3160:	c6 01       	movw	r24, r12
    3162:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <strnlen_P>
    3166:	4c 01       	movw	r8, r24
    3168:	68 94       	set
    316a:	37 f8       	bld	r3, 7
    316c:	82 01       	movw	r16, r4
    316e:	0a c0       	rjmp	.+20     	; 0x3184 <vfprintf+0x142>
    3170:	0c 5f       	subi	r16, 0xFC	; 252
    3172:	1f 4f       	sbci	r17, 0xFF	; 255
    3174:	ff e3       	ldi	r31, 0x3F	; 63
    3176:	f9 83       	std	Y+1, r31	; 0x01
    3178:	88 24       	eor	r8, r8
    317a:	83 94       	inc	r8
    317c:	91 2c       	mov	r9, r1
    317e:	65 01       	movw	r12, r10
    3180:	e8 94       	clt
    3182:	37 f8       	bld	r3, 7
    3184:	33 fe       	sbrs	r3, 3
    3186:	2d c0       	rjmp	.+90     	; 0x31e2 <vfprintf+0x1a0>
    3188:	52 2c       	mov	r5, r2
    318a:	81 14       	cp	r8, r1
    318c:	91 04       	cpc	r9, r1
    318e:	71 f5       	brne	.+92     	; 0x31ec <vfprintf+0x1aa>
    3190:	55 20       	and	r5, r5
    3192:	09 f4       	brne	.+2      	; 0x3196 <vfprintf+0x154>
    3194:	68 cf       	rjmp	.-304    	; 0x3066 <vfprintf+0x24>
    3196:	b7 01       	movw	r22, r14
    3198:	80 e2       	ldi	r24, 0x20	; 32
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 11 1a 	call	0x3422	; 0x3422 <fputc>
    31a0:	5a 94       	dec	r5
    31a2:	f6 cf       	rjmp	.-20     	; 0x3190 <vfprintf+0x14e>
    31a4:	f8 01       	movw	r30, r16
    31a6:	80 81       	ld	r24, Z
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	0e 5f       	subi	r16, 0xFE	; 254
    31ac:	1f 4f       	sbci	r17, 0xFF	; 255
    31ae:	e4 cf       	rjmp	.-56     	; 0x3178 <vfprintf+0x136>
    31b0:	28 01       	movw	r4, r16
    31b2:	f2 e0       	ldi	r31, 0x02	; 2
    31b4:	4f 0e       	add	r4, r31
    31b6:	51 1c       	adc	r5, r1
    31b8:	f8 01       	movw	r30, r16
    31ba:	c0 80       	ld	r12, Z
    31bc:	d1 80       	ldd	r13, Z+1	; 0x01
    31be:	69 2d       	mov	r22, r9
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	36 fc       	sbrc	r3, 6
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <vfprintf+0x188>
    31c6:	6f ef       	ldi	r22, 0xFF	; 255
    31c8:	7f ef       	ldi	r23, 0xFF	; 255
    31ca:	c6 01       	movw	r24, r12
    31cc:	0e 94 06 1a 	call	0x340c	; 0x340c <strnlen>
    31d0:	4c 01       	movw	r8, r24
    31d2:	82 01       	movw	r16, r4
    31d4:	d5 cf       	rjmp	.-86     	; 0x3180 <vfprintf+0x13e>
    31d6:	b7 01       	movw	r22, r14
    31d8:	80 e2       	ldi	r24, 0x20	; 32
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 11 1a 	call	0x3422	; 0x3422 <fputc>
    31e0:	2a 94       	dec	r2
    31e2:	28 14       	cp	r2, r8
    31e4:	19 04       	cpc	r1, r9
    31e6:	09 f0       	breq	.+2      	; 0x31ea <vfprintf+0x1a8>
    31e8:	b0 f7       	brcc	.-20     	; 0x31d6 <vfprintf+0x194>
    31ea:	ce cf       	rjmp	.-100    	; 0x3188 <vfprintf+0x146>
    31ec:	f6 01       	movw	r30, r12
    31ee:	37 fc       	sbrc	r3, 7
    31f0:	85 91       	lpm	r24, Z+
    31f2:	37 fe       	sbrs	r3, 7
    31f4:	81 91       	ld	r24, Z+
    31f6:	6f 01       	movw	r12, r30
    31f8:	b7 01       	movw	r22, r14
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0e 94 11 1a 	call	0x3422	; 0x3422 <fputc>
    3200:	51 10       	cpse	r5, r1
    3202:	5a 94       	dec	r5
    3204:	f1 e0       	ldi	r31, 0x01	; 1
    3206:	8f 1a       	sub	r8, r31
    3208:	91 08       	sbc	r9, r1
    320a:	bf cf       	rjmp	.-130    	; 0x318a <vfprintf+0x148>
    320c:	84 36       	cpi	r24, 0x64	; 100
    320e:	19 f0       	breq	.+6      	; 0x3216 <vfprintf+0x1d4>
    3210:	89 36       	cpi	r24, 0x69	; 105
    3212:	09 f0       	breq	.+2      	; 0x3216 <vfprintf+0x1d4>
    3214:	77 c0       	rjmp	.+238    	; 0x3304 <vfprintf+0x2c2>
    3216:	f8 01       	movw	r30, r16
    3218:	37 fe       	sbrs	r3, 7
    321a:	6b c0       	rjmp	.+214    	; 0x32f2 <vfprintf+0x2b0>
    321c:	60 81       	ld	r22, Z
    321e:	71 81       	ldd	r23, Z+1	; 0x01
    3220:	82 81       	ldd	r24, Z+2	; 0x02
    3222:	93 81       	ldd	r25, Z+3	; 0x03
    3224:	0c 5f       	subi	r16, 0xFC	; 252
    3226:	1f 4f       	sbci	r17, 0xFF	; 255
    3228:	f3 2d       	mov	r31, r3
    322a:	ff 76       	andi	r31, 0x6F	; 111
    322c:	3f 2e       	mov	r3, r31
    322e:	97 ff       	sbrs	r25, 7
    3230:	09 c0       	rjmp	.+18     	; 0x3244 <vfprintf+0x202>
    3232:	90 95       	com	r25
    3234:	80 95       	com	r24
    3236:	70 95       	com	r23
    3238:	61 95       	neg	r22
    323a:	7f 4f       	sbci	r23, 0xFF	; 255
    323c:	8f 4f       	sbci	r24, 0xFF	; 255
    323e:	9f 4f       	sbci	r25, 0xFF	; 255
    3240:	68 94       	set
    3242:	37 f8       	bld	r3, 7
    3244:	2a e0       	ldi	r18, 0x0A	; 10
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	a5 01       	movw	r20, r10
    324a:	0e 94 41 1a 	call	0x3482	; 0x3482 <__ultoa_invert>
    324e:	c8 2e       	mov	r12, r24
    3250:	ca 18       	sub	r12, r10
    3252:	8c 2c       	mov	r8, r12
    3254:	43 2c       	mov	r4, r3
    3256:	36 fe       	sbrs	r3, 6
    3258:	0c c0       	rjmp	.+24     	; 0x3272 <vfprintf+0x230>
    325a:	e8 94       	clt
    325c:	40 f8       	bld	r4, 0
    325e:	c9 14       	cp	r12, r9
    3260:	40 f4       	brcc	.+16     	; 0x3272 <vfprintf+0x230>
    3262:	34 fe       	sbrs	r3, 4
    3264:	05 c0       	rjmp	.+10     	; 0x3270 <vfprintf+0x22e>
    3266:	32 fc       	sbrc	r3, 2
    3268:	03 c0       	rjmp	.+6      	; 0x3270 <vfprintf+0x22e>
    326a:	f3 2d       	mov	r31, r3
    326c:	fe 7e       	andi	r31, 0xEE	; 238
    326e:	4f 2e       	mov	r4, r31
    3270:	89 2c       	mov	r8, r9
    3272:	44 fe       	sbrs	r4, 4
    3274:	95 c0       	rjmp	.+298    	; 0x33a0 <vfprintf+0x35e>
    3276:	fe 01       	movw	r30, r28
    3278:	ec 0d       	add	r30, r12
    327a:	f1 1d       	adc	r31, r1
    327c:	80 81       	ld	r24, Z
    327e:	80 33       	cpi	r24, 0x30	; 48
    3280:	09 f0       	breq	.+2      	; 0x3284 <vfprintf+0x242>
    3282:	87 c0       	rjmp	.+270    	; 0x3392 <vfprintf+0x350>
    3284:	24 2d       	mov	r18, r4
    3286:	29 7e       	andi	r18, 0xE9	; 233
    3288:	42 2e       	mov	r4, r18
    328a:	84 2d       	mov	r24, r4
    328c:	88 70       	andi	r24, 0x08	; 8
    328e:	58 2e       	mov	r5, r24
    3290:	43 fc       	sbrc	r4, 3
    3292:	95 c0       	rjmp	.+298    	; 0x33be <vfprintf+0x37c>
    3294:	40 fe       	sbrs	r4, 0
    3296:	8f c0       	rjmp	.+286    	; 0x33b6 <vfprintf+0x374>
    3298:	9c 2c       	mov	r9, r12
    329a:	82 14       	cp	r8, r2
    329c:	18 f4       	brcc	.+6      	; 0x32a4 <vfprintf+0x262>
    329e:	2c 0c       	add	r2, r12
    32a0:	92 2c       	mov	r9, r2
    32a2:	98 18       	sub	r9, r8
    32a4:	44 fe       	sbrs	r4, 4
    32a6:	91 c0       	rjmp	.+290    	; 0x33ca <vfprintf+0x388>
    32a8:	b7 01       	movw	r22, r14
    32aa:	80 e3       	ldi	r24, 0x30	; 48
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	0e 94 11 1a 	call	0x3422	; 0x3422 <fputc>
    32b2:	42 fe       	sbrs	r4, 2
    32b4:	09 c0       	rjmp	.+18     	; 0x32c8 <vfprintf+0x286>
    32b6:	88 e7       	ldi	r24, 0x78	; 120
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	41 fe       	sbrs	r4, 1
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <vfprintf+0x280>
    32be:	88 e5       	ldi	r24, 0x58	; 88
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	b7 01       	movw	r22, r14
    32c4:	0e 94 11 1a 	call	0x3422	; 0x3422 <fputc>
    32c8:	c9 14       	cp	r12, r9
    32ca:	08 f4       	brcc	.+2      	; 0x32ce <vfprintf+0x28c>
    32cc:	8a c0       	rjmp	.+276    	; 0x33e2 <vfprintf+0x3a0>
    32ce:	ca 94       	dec	r12
    32d0:	d1 2c       	mov	r13, r1
    32d2:	9f ef       	ldi	r25, 0xFF	; 255
    32d4:	c9 1a       	sub	r12, r25
    32d6:	d9 0a       	sbc	r13, r25
    32d8:	ca 0c       	add	r12, r10
    32da:	db 1c       	adc	r13, r11
    32dc:	f6 01       	movw	r30, r12
    32de:	82 91       	ld	r24, -Z
    32e0:	6f 01       	movw	r12, r30
    32e2:	b7 01       	movw	r22, r14
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 11 1a 	call	0x3422	; 0x3422 <fputc>
    32ea:	ac 14       	cp	r10, r12
    32ec:	bd 04       	cpc	r11, r13
    32ee:	b1 f7       	brne	.-20     	; 0x32dc <vfprintf+0x29a>
    32f0:	4f cf       	rjmp	.-354    	; 0x3190 <vfprintf+0x14e>
    32f2:	60 81       	ld	r22, Z
    32f4:	71 81       	ldd	r23, Z+1	; 0x01
    32f6:	07 2e       	mov	r0, r23
    32f8:	00 0c       	add	r0, r0
    32fa:	88 0b       	sbc	r24, r24
    32fc:	99 0b       	sbc	r25, r25
    32fe:	0e 5f       	subi	r16, 0xFE	; 254
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	92 cf       	rjmp	.-220    	; 0x3228 <vfprintf+0x1e6>
    3304:	d3 2c       	mov	r13, r3
    3306:	e8 94       	clt
    3308:	d4 f8       	bld	r13, 4
    330a:	2a e0       	ldi	r18, 0x0A	; 10
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	85 37       	cpi	r24, 0x75	; 117
    3310:	39 f1       	breq	.+78     	; 0x3360 <vfprintf+0x31e>
    3312:	23 2d       	mov	r18, r3
    3314:	29 7f       	andi	r18, 0xF9	; 249
    3316:	d2 2e       	mov	r13, r18
    3318:	8f 36       	cpi	r24, 0x6F	; 111
    331a:	01 f1       	breq	.+64     	; 0x335c <vfprintf+0x31a>
    331c:	48 f4       	brcc	.+18     	; 0x3330 <vfprintf+0x2ee>
    331e:	88 35       	cpi	r24, 0x58	; 88
    3320:	a9 f0       	breq	.+42     	; 0x334c <vfprintf+0x30a>
    3322:	f7 01       	movw	r30, r14
    3324:	86 81       	ldd	r24, Z+6	; 0x06
    3326:	97 81       	ldd	r25, Z+7	; 0x07
    3328:	2b 96       	adiw	r28, 0x0b	; 11
    332a:	e2 e1       	ldi	r30, 0x12	; 18
    332c:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__>
    3330:	80 37       	cpi	r24, 0x70	; 112
    3332:	49 f0       	breq	.+18     	; 0x3346 <vfprintf+0x304>
    3334:	88 37       	cpi	r24, 0x78	; 120
    3336:	a9 f7       	brne	.-22     	; 0x3322 <vfprintf+0x2e0>
    3338:	d4 fe       	sbrs	r13, 4
    333a:	02 c0       	rjmp	.+4      	; 0x3340 <vfprintf+0x2fe>
    333c:	68 94       	set
    333e:	d2 f8       	bld	r13, 2
    3340:	20 e1       	ldi	r18, 0x10	; 16
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	0d c0       	rjmp	.+26     	; 0x3360 <vfprintf+0x31e>
    3346:	68 94       	set
    3348:	d4 f8       	bld	r13, 4
    334a:	f6 cf       	rjmp	.-20     	; 0x3338 <vfprintf+0x2f6>
    334c:	34 fe       	sbrs	r3, 4
    334e:	03 c0       	rjmp	.+6      	; 0x3356 <vfprintf+0x314>
    3350:	82 2f       	mov	r24, r18
    3352:	86 60       	ori	r24, 0x06	; 6
    3354:	d8 2e       	mov	r13, r24
    3356:	20 e1       	ldi	r18, 0x10	; 16
    3358:	32 e0       	ldi	r19, 0x02	; 2
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <vfprintf+0x31e>
    335c:	28 e0       	ldi	r18, 0x08	; 8
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	f8 01       	movw	r30, r16
    3362:	d7 fe       	sbrs	r13, 7
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <vfprintf+0x342>
    3366:	60 81       	ld	r22, Z
    3368:	71 81       	ldd	r23, Z+1	; 0x01
    336a:	82 81       	ldd	r24, Z+2	; 0x02
    336c:	93 81       	ldd	r25, Z+3	; 0x03
    336e:	0c 5f       	subi	r16, 0xFC	; 252
    3370:	1f 4f       	sbci	r17, 0xFF	; 255
    3372:	a5 01       	movw	r20, r10
    3374:	0e 94 41 1a 	call	0x3482	; 0x3482 <__ultoa_invert>
    3378:	c8 2e       	mov	r12, r24
    337a:	ca 18       	sub	r12, r10
    337c:	3d 2c       	mov	r3, r13
    337e:	e8 94       	clt
    3380:	37 f8       	bld	r3, 7
    3382:	67 cf       	rjmp	.-306    	; 0x3252 <vfprintf+0x210>
    3384:	60 81       	ld	r22, Z
    3386:	71 81       	ldd	r23, Z+1	; 0x01
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	0e 5f       	subi	r16, 0xFE	; 254
    338e:	1f 4f       	sbci	r17, 0xFF	; 255
    3390:	f0 cf       	rjmp	.-32     	; 0x3372 <vfprintf+0x330>
    3392:	42 fc       	sbrc	r4, 2
    3394:	02 c0       	rjmp	.+4      	; 0x339a <vfprintf+0x358>
    3396:	83 94       	inc	r8
    3398:	78 cf       	rjmp	.-272    	; 0x328a <vfprintf+0x248>
    339a:	83 94       	inc	r8
    339c:	83 94       	inc	r8
    339e:	75 cf       	rjmp	.-278    	; 0x328a <vfprintf+0x248>
    33a0:	84 2d       	mov	r24, r4
    33a2:	86 78       	andi	r24, 0x86	; 134
    33a4:	09 f4       	brne	.+2      	; 0x33a8 <vfprintf+0x366>
    33a6:	71 cf       	rjmp	.-286    	; 0x328a <vfprintf+0x248>
    33a8:	f6 cf       	rjmp	.-20     	; 0x3396 <vfprintf+0x354>
    33aa:	b7 01       	movw	r22, r14
    33ac:	80 e2       	ldi	r24, 0x20	; 32
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 11 1a 	call	0x3422	; 0x3422 <fputc>
    33b4:	83 94       	inc	r8
    33b6:	82 14       	cp	r8, r2
    33b8:	c0 f3       	brcs	.-16     	; 0x33aa <vfprintf+0x368>
    33ba:	51 2c       	mov	r5, r1
    33bc:	73 cf       	rjmp	.-282    	; 0x32a4 <vfprintf+0x262>
    33be:	52 2c       	mov	r5, r2
    33c0:	58 18       	sub	r5, r8
    33c2:	82 14       	cp	r8, r2
    33c4:	08 f4       	brcc	.+2      	; 0x33c8 <vfprintf+0x386>
    33c6:	6e cf       	rjmp	.-292    	; 0x32a4 <vfprintf+0x262>
    33c8:	f8 cf       	rjmp	.-16     	; 0x33ba <vfprintf+0x378>
    33ca:	84 2d       	mov	r24, r4
    33cc:	86 78       	andi	r24, 0x86	; 134
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <vfprintf+0x390>
    33d0:	7b cf       	rjmp	.-266    	; 0x32c8 <vfprintf+0x286>
    33d2:	8b e2       	ldi	r24, 0x2B	; 43
    33d4:	41 fe       	sbrs	r4, 1
    33d6:	80 e2       	ldi	r24, 0x20	; 32
    33d8:	47 fc       	sbrc	r4, 7
    33da:	8d e2       	ldi	r24, 0x2D	; 45
    33dc:	b7 01       	movw	r22, r14
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	71 cf       	rjmp	.-286    	; 0x32c4 <vfprintf+0x282>
    33e2:	b7 01       	movw	r22, r14
    33e4:	80 e3       	ldi	r24, 0x30	; 48
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	0e 94 11 1a 	call	0x3422	; 0x3422 <fputc>
    33ec:	9a 94       	dec	r9
    33ee:	6c cf       	rjmp	.-296    	; 0x32c8 <vfprintf+0x286>
    33f0:	8f ef       	ldi	r24, 0xFF	; 255
    33f2:	9f ef       	ldi	r25, 0xFF	; 255
    33f4:	99 cf       	rjmp	.-206    	; 0x3328 <vfprintf+0x2e6>

000033f6 <strnlen_P>:
    33f6:	fc 01       	movw	r30, r24
    33f8:	05 90       	lpm	r0, Z+
    33fa:	61 50       	subi	r22, 0x01	; 1
    33fc:	70 40       	sbci	r23, 0x00	; 0
    33fe:	01 10       	cpse	r0, r1
    3400:	d8 f7       	brcc	.-10     	; 0x33f8 <strnlen_P+0x2>
    3402:	80 95       	com	r24
    3404:	90 95       	com	r25
    3406:	8e 0f       	add	r24, r30
    3408:	9f 1f       	adc	r25, r31
    340a:	08 95       	ret

0000340c <strnlen>:
    340c:	fc 01       	movw	r30, r24
    340e:	61 50       	subi	r22, 0x01	; 1
    3410:	70 40       	sbci	r23, 0x00	; 0
    3412:	01 90       	ld	r0, Z+
    3414:	01 10       	cpse	r0, r1
    3416:	d8 f7       	brcc	.-10     	; 0x340e <strnlen+0x2>
    3418:	80 95       	com	r24
    341a:	90 95       	com	r25
    341c:	8e 0f       	add	r24, r30
    341e:	9f 1f       	adc	r25, r31
    3420:	08 95       	ret

00003422 <fputc>:
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	18 2f       	mov	r17, r24
    342c:	09 2f       	mov	r16, r25
    342e:	eb 01       	movw	r28, r22
    3430:	8b 81       	ldd	r24, Y+3	; 0x03
    3432:	81 fd       	sbrc	r24, 1
    3434:	09 c0       	rjmp	.+18     	; 0x3448 <fputc+0x26>
    3436:	1f ef       	ldi	r17, 0xFF	; 255
    3438:	0f ef       	ldi	r16, 0xFF	; 255
    343a:	81 2f       	mov	r24, r17
    343c:	90 2f       	mov	r25, r16
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	08 95       	ret
    3448:	82 ff       	sbrs	r24, 2
    344a:	14 c0       	rjmp	.+40     	; 0x3474 <fputc+0x52>
    344c:	2e 81       	ldd	r18, Y+6	; 0x06
    344e:	3f 81       	ldd	r19, Y+7	; 0x07
    3450:	8c 81       	ldd	r24, Y+4	; 0x04
    3452:	9d 81       	ldd	r25, Y+5	; 0x05
    3454:	28 17       	cp	r18, r24
    3456:	39 07       	cpc	r19, r25
    3458:	3c f4       	brge	.+14     	; 0x3468 <fputc+0x46>
    345a:	e8 81       	ld	r30, Y
    345c:	f9 81       	ldd	r31, Y+1	; 0x01
    345e:	cf 01       	movw	r24, r30
    3460:	01 96       	adiw	r24, 0x01	; 1
    3462:	99 83       	std	Y+1, r25	; 0x01
    3464:	88 83       	st	Y, r24
    3466:	10 83       	st	Z, r17
    3468:	8e 81       	ldd	r24, Y+6	; 0x06
    346a:	9f 81       	ldd	r25, Y+7	; 0x07
    346c:	01 96       	adiw	r24, 0x01	; 1
    346e:	9f 83       	std	Y+7, r25	; 0x07
    3470:	8e 83       	std	Y+6, r24	; 0x06
    3472:	e3 cf       	rjmp	.-58     	; 0x343a <fputc+0x18>
    3474:	e8 85       	ldd	r30, Y+8	; 0x08
    3476:	f9 85       	ldd	r31, Y+9	; 0x09
    3478:	81 2f       	mov	r24, r17
    347a:	09 95       	icall
    347c:	89 2b       	or	r24, r25
    347e:	a1 f3       	breq	.-24     	; 0x3468 <fputc+0x46>
    3480:	da cf       	rjmp	.-76     	; 0x3436 <fputc+0x14>

00003482 <__ultoa_invert>:
    3482:	fa 01       	movw	r30, r20
    3484:	aa 27       	eor	r26, r26
    3486:	28 30       	cpi	r18, 0x08	; 8
    3488:	51 f1       	breq	.+84     	; 0x34de <__ultoa_invert+0x5c>
    348a:	20 31       	cpi	r18, 0x10	; 16
    348c:	81 f1       	breq	.+96     	; 0x34ee <__ultoa_invert+0x6c>
    348e:	e8 94       	clt
    3490:	6f 93       	push	r22
    3492:	6e 7f       	andi	r22, 0xFE	; 254
    3494:	6e 5f       	subi	r22, 0xFE	; 254
    3496:	7f 4f       	sbci	r23, 0xFF	; 255
    3498:	8f 4f       	sbci	r24, 0xFF	; 255
    349a:	9f 4f       	sbci	r25, 0xFF	; 255
    349c:	af 4f       	sbci	r26, 0xFF	; 255
    349e:	b1 e0       	ldi	r27, 0x01	; 1
    34a0:	3e d0       	rcall	.+124    	; 0x351e <__ultoa_invert+0x9c>
    34a2:	b4 e0       	ldi	r27, 0x04	; 4
    34a4:	3c d0       	rcall	.+120    	; 0x351e <__ultoa_invert+0x9c>
    34a6:	67 0f       	add	r22, r23
    34a8:	78 1f       	adc	r23, r24
    34aa:	89 1f       	adc	r24, r25
    34ac:	9a 1f       	adc	r25, r26
    34ae:	a1 1d       	adc	r26, r1
    34b0:	68 0f       	add	r22, r24
    34b2:	79 1f       	adc	r23, r25
    34b4:	8a 1f       	adc	r24, r26
    34b6:	91 1d       	adc	r25, r1
    34b8:	a1 1d       	adc	r26, r1
    34ba:	6a 0f       	add	r22, r26
    34bc:	71 1d       	adc	r23, r1
    34be:	81 1d       	adc	r24, r1
    34c0:	91 1d       	adc	r25, r1
    34c2:	a1 1d       	adc	r26, r1
    34c4:	20 d0       	rcall	.+64     	; 0x3506 <__ultoa_invert+0x84>
    34c6:	09 f4       	brne	.+2      	; 0x34ca <__ultoa_invert+0x48>
    34c8:	68 94       	set
    34ca:	3f 91       	pop	r19
    34cc:	2a e0       	ldi	r18, 0x0A	; 10
    34ce:	26 9f       	mul	r18, r22
    34d0:	11 24       	eor	r1, r1
    34d2:	30 19       	sub	r19, r0
    34d4:	30 5d       	subi	r19, 0xD0	; 208
    34d6:	31 93       	st	Z+, r19
    34d8:	de f6       	brtc	.-74     	; 0x3490 <__ultoa_invert+0xe>
    34da:	cf 01       	movw	r24, r30
    34dc:	08 95       	ret
    34de:	46 2f       	mov	r20, r22
    34e0:	47 70       	andi	r20, 0x07	; 7
    34e2:	40 5d       	subi	r20, 0xD0	; 208
    34e4:	41 93       	st	Z+, r20
    34e6:	b3 e0       	ldi	r27, 0x03	; 3
    34e8:	0f d0       	rcall	.+30     	; 0x3508 <__ultoa_invert+0x86>
    34ea:	c9 f7       	brne	.-14     	; 0x34de <__ultoa_invert+0x5c>
    34ec:	f6 cf       	rjmp	.-20     	; 0x34da <__ultoa_invert+0x58>
    34ee:	46 2f       	mov	r20, r22
    34f0:	4f 70       	andi	r20, 0x0F	; 15
    34f2:	40 5d       	subi	r20, 0xD0	; 208
    34f4:	4a 33       	cpi	r20, 0x3A	; 58
    34f6:	18 f0       	brcs	.+6      	; 0x34fe <__ultoa_invert+0x7c>
    34f8:	49 5d       	subi	r20, 0xD9	; 217
    34fa:	31 fd       	sbrc	r19, 1
    34fc:	40 52       	subi	r20, 0x20	; 32
    34fe:	41 93       	st	Z+, r20
    3500:	02 d0       	rcall	.+4      	; 0x3506 <__ultoa_invert+0x84>
    3502:	a9 f7       	brne	.-22     	; 0x34ee <__ultoa_invert+0x6c>
    3504:	ea cf       	rjmp	.-44     	; 0x34da <__ultoa_invert+0x58>
    3506:	b4 e0       	ldi	r27, 0x04	; 4
    3508:	a6 95       	lsr	r26
    350a:	97 95       	ror	r25
    350c:	87 95       	ror	r24
    350e:	77 95       	ror	r23
    3510:	67 95       	ror	r22
    3512:	ba 95       	dec	r27
    3514:	c9 f7       	brne	.-14     	; 0x3508 <__ultoa_invert+0x86>
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	61 05       	cpc	r22, r1
    351a:	71 05       	cpc	r23, r1
    351c:	08 95       	ret
    351e:	9b 01       	movw	r18, r22
    3520:	ac 01       	movw	r20, r24
    3522:	0a 2e       	mov	r0, r26
    3524:	06 94       	lsr	r0
    3526:	57 95       	ror	r21
    3528:	47 95       	ror	r20
    352a:	37 95       	ror	r19
    352c:	27 95       	ror	r18
    352e:	ba 95       	dec	r27
    3530:	c9 f7       	brne	.-14     	; 0x3524 <__ultoa_invert+0xa2>
    3532:	62 0f       	add	r22, r18
    3534:	73 1f       	adc	r23, r19
    3536:	84 1f       	adc	r24, r20
    3538:	95 1f       	adc	r25, r21
    353a:	a0 1d       	adc	r26, r0
    353c:	08 95       	ret

0000353e <__prologue_saves__>:
    353e:	2f 92       	push	r2
    3540:	3f 92       	push	r3
    3542:	4f 92       	push	r4
    3544:	5f 92       	push	r5
    3546:	6f 92       	push	r6
    3548:	7f 92       	push	r7
    354a:	8f 92       	push	r8
    354c:	9f 92       	push	r9
    354e:	af 92       	push	r10
    3550:	bf 92       	push	r11
    3552:	cf 92       	push	r12
    3554:	df 92       	push	r13
    3556:	ef 92       	push	r14
    3558:	ff 92       	push	r15
    355a:	0f 93       	push	r16
    355c:	1f 93       	push	r17
    355e:	cf 93       	push	r28
    3560:	df 93       	push	r29
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	ca 1b       	sub	r28, r26
    3568:	db 0b       	sbc	r29, r27
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	09 94       	ijmp

00003576 <__epilogue_restores__>:
    3576:	2a 88       	ldd	r2, Y+18	; 0x12
    3578:	39 88       	ldd	r3, Y+17	; 0x11
    357a:	48 88       	ldd	r4, Y+16	; 0x10
    357c:	5f 84       	ldd	r5, Y+15	; 0x0f
    357e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3580:	7d 84       	ldd	r7, Y+13	; 0x0d
    3582:	8c 84       	ldd	r8, Y+12	; 0x0c
    3584:	9b 84       	ldd	r9, Y+11	; 0x0b
    3586:	aa 84       	ldd	r10, Y+10	; 0x0a
    3588:	b9 84       	ldd	r11, Y+9	; 0x09
    358a:	c8 84       	ldd	r12, Y+8	; 0x08
    358c:	df 80       	ldd	r13, Y+7	; 0x07
    358e:	ee 80       	ldd	r14, Y+6	; 0x06
    3590:	fd 80       	ldd	r15, Y+5	; 0x05
    3592:	0c 81       	ldd	r16, Y+4	; 0x04
    3594:	1b 81       	ldd	r17, Y+3	; 0x03
    3596:	aa 81       	ldd	r26, Y+2	; 0x02
    3598:	b9 81       	ldd	r27, Y+1	; 0x01
    359a:	ce 0f       	add	r28, r30
    359c:	d1 1d       	adc	r29, r1
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	ed 01       	movw	r28, r26
    35aa:	08 95       	ret

000035ac <_exit>:
    35ac:	f8 94       	cli

000035ae <__stop_program>:
    35ae:	ff cf       	rjmp	.-2      	; 0x35ae <__stop_program>
