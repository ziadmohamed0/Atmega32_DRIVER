
Driver_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  000032b4  00003328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00005868  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000037e4  00000000  00000000  00008be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000c3c8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000c3dc  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  0000c418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  0000c946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000ce2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  0000ce47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	04 12       	cpse	r0, r20
      56:	15 12       	cpse	r1, r21
      58:	26 12       	cpse	r2, r22
      5a:	37 12       	cpse	r3, r23
      5c:	48 12       	cpse	r4, r24
      5e:	59 12       	cpse	r5, r25
      60:	6a 12       	cpse	r6, r26
      62:	7b 12       	cpse	r7, r27
      64:	8c 12       	cpse	r8, r28
      66:	9d 12       	cpse	r9, r29

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	10 e0       	ldi	r17, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e4 eb       	ldi	r30, 0xB4	; 180
      7c:	f2 e3       	ldi	r31, 0x32	; 50
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3b       	cpi	r26, 0xB4	; 180
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	20 e0       	ldi	r18, 0x00	; 0
      8c:	a4 eb       	ldi	r26, 0xB4	; 180
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 3b       	cpi	r26, 0xB4	; 180
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 cb 14 	call	0x2996	; 0x2996 <main>
      9e:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Dio_setPinDir>:
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <Dio_setPinDir+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
      b2:	6a 83       	std	Y+2, r22	; 0x02
      b4:	8a 81       	ldd	r24, Y+2	; 0x02
      b6:	88 2f       	mov	r24, r24
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	00 97       	sbiw	r24, 0x00	; 0
      bc:	89 f1       	breq	.+98     	; 0x120 <Dio_setPinDir+0x7a>
      be:	01 97       	sbiw	r24, 0x01	; 1
      c0:	09 f0       	breq	.+2      	; 0xc4 <Dio_setPinDir+0x1e>
      c2:	5d c0       	rjmp	.+186    	; 0x17e <Dio_setPinDir+0xd8>
      c4:	89 81       	ldd	r24, Y+1	; 0x01
      c6:	86 95       	lsr	r24
      c8:	86 95       	lsr	r24
      ca:	86 95       	lsr	r24
      cc:	88 2f       	mov	r24, r24
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	88 0f       	add	r24, r24
      d2:	99 1f       	adc	r25, r25
      d4:	80 5a       	subi	r24, 0xA0	; 160
      d6:	9f 4f       	sbci	r25, 0xFF	; 255
      d8:	fc 01       	movw	r30, r24
      da:	80 81       	ld	r24, Z
      dc:	91 81       	ldd	r25, Z+1	; 0x01
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	26 95       	lsr	r18
      e2:	26 95       	lsr	r18
      e4:	26 95       	lsr	r18
      e6:	22 2f       	mov	r18, r18
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	20 5a       	subi	r18, 0xA0	; 160
      f0:	3f 4f       	sbci	r19, 0xFF	; 255
      f2:	f9 01       	movw	r30, r18
      f4:	20 81       	ld	r18, Z
      f6:	31 81       	ldd	r19, Z+1	; 0x01
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	62 2f       	mov	r22, r18
      fe:	29 81       	ldd	r18, Y+1	; 0x01
     100:	22 2f       	mov	r18, r18
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	a9 01       	movw	r20, r18
     106:	47 70       	andi	r20, 0x07	; 7
     108:	55 27       	eor	r21, r21
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	02 c0       	rjmp	.+4      	; 0x114 <Dio_setPinDir+0x6e>
     110:	22 0f       	add	r18, r18
     112:	33 1f       	adc	r19, r19
     114:	4a 95       	dec	r20
     116:	e2 f7       	brpl	.-8      	; 0x110 <Dio_setPinDir+0x6a>
     118:	26 2b       	or	r18, r22
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
     11e:	2f c0       	rjmp	.+94     	; 0x17e <Dio_setPinDir+0xd8>
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	86 95       	lsr	r24
     124:	86 95       	lsr	r24
     126:	86 95       	lsr	r24
     128:	88 2f       	mov	r24, r24
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	88 0f       	add	r24, r24
     12e:	99 1f       	adc	r25, r25
     130:	80 5a       	subi	r24, 0xA0	; 160
     132:	9f 4f       	sbci	r25, 0xFF	; 255
     134:	fc 01       	movw	r30, r24
     136:	80 81       	ld	r24, Z
     138:	91 81       	ldd	r25, Z+1	; 0x01
     13a:	29 81       	ldd	r18, Y+1	; 0x01
     13c:	26 95       	lsr	r18
     13e:	26 95       	lsr	r18
     140:	26 95       	lsr	r18
     142:	22 2f       	mov	r18, r18
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	22 0f       	add	r18, r18
     148:	33 1f       	adc	r19, r19
     14a:	20 5a       	subi	r18, 0xA0	; 160
     14c:	3f 4f       	sbci	r19, 0xFF	; 255
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	31 81       	ldd	r19, Z+1	; 0x01
     154:	f9 01       	movw	r30, r18
     156:	20 81       	ld	r18, Z
     158:	62 2f       	mov	r22, r18
     15a:	29 81       	ldd	r18, Y+1	; 0x01
     15c:	22 2f       	mov	r18, r18
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	a9 01       	movw	r20, r18
     162:	47 70       	andi	r20, 0x07	; 7
     164:	55 27       	eor	r21, r21
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <Dio_setPinDir+0xca>
     16c:	22 0f       	add	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	4a 95       	dec	r20
     172:	e2 f7       	brpl	.-8      	; 0x16c <Dio_setPinDir+0xc6>
     174:	20 95       	com	r18
     176:	26 23       	and	r18, r22
     178:	fc 01       	movw	r30, r24
     17a:	20 83       	st	Z, r18
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <Dio_setPinVal>:
			break;
	}
}

void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	00 d0       	rcall	.+0      	; 0x190 <Dio_setPinVal+0x6>
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyPinVal)
     198:	8a 81       	ldd	r24, Y+2	; 0x02
     19a:	88 2f       	mov	r24, r24
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	91 05       	cpc	r25, r1
     1a2:	39 f0       	breq	.+14     	; 0x1b2 <Dio_setPinVal+0x28>
     1a4:	82 30       	cpi	r24, 0x02	; 2
     1a6:	91 05       	cpc	r25, r1
     1a8:	09 f4       	brne	.+2      	; 0x1ac <Dio_setPinVal+0x22>
     1aa:	60 c0       	rjmp	.+192    	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
     1ac:	89 2b       	or	r24, r25
     1ae:	79 f1       	breq	.+94     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
			break;

		default :
			break;
     1b0:	8b c0       	rjmp	.+278    	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
	switch (CopyPinVal)
	{
		case Status_Pin_High:
				SET_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	86 95       	lsr	r24
     1b6:	86 95       	lsr	r24
     1b8:	86 95       	lsr	r24
     1ba:	88 2f       	mov	r24, r24
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	88 59       	subi	r24, 0x98	; 152
     1c4:	9f 4f       	sbci	r25, 0xFF	; 255
     1c6:	fc 01       	movw	r30, r24
     1c8:	80 81       	ld	r24, Z
     1ca:	91 81       	ldd	r25, Z+1	; 0x01
     1cc:	29 81       	ldd	r18, Y+1	; 0x01
     1ce:	26 95       	lsr	r18
     1d0:	26 95       	lsr	r18
     1d2:	26 95       	lsr	r18
     1d4:	22 2f       	mov	r18, r18
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	22 0f       	add	r18, r18
     1da:	33 1f       	adc	r19, r19
     1dc:	28 59       	subi	r18, 0x98	; 152
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
     1e0:	f9 01       	movw	r30, r18
     1e2:	20 81       	ld	r18, Z
     1e4:	31 81       	ldd	r19, Z+1	; 0x01
     1e6:	f9 01       	movw	r30, r18
     1e8:	20 81       	ld	r18, Z
     1ea:	62 2f       	mov	r22, r18
     1ec:	29 81       	ldd	r18, Y+1	; 0x01
     1ee:	22 2f       	mov	r18, r18
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	a9 01       	movw	r20, r18
     1f4:	47 70       	andi	r20, 0x07	; 7
     1f6:	55 27       	eor	r21, r21
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     1fe:	22 0f       	add	r18, r18
     200:	33 1f       	adc	r19, r19
     202:	4a 95       	dec	r20
     204:	e2 f7       	brpl	.-8      	; 0x1fe <Dio_setPinVal+0x74>
     206:	26 2b       	or	r18, r22
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18
			break;
     20c:	5d c0       	rjmp	.+186    	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>

		case Status_Pin_Low:
				CLR_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	86 95       	lsr	r24
     212:	86 95       	lsr	r24
     214:	86 95       	lsr	r24
     216:	88 2f       	mov	r24, r24
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	88 59       	subi	r24, 0x98	; 152
     220:	9f 4f       	sbci	r25, 0xFF	; 255
     222:	fc 01       	movw	r30, r24
     224:	80 81       	ld	r24, Z
     226:	91 81       	ldd	r25, Z+1	; 0x01
     228:	29 81       	ldd	r18, Y+1	; 0x01
     22a:	26 95       	lsr	r18
     22c:	26 95       	lsr	r18
     22e:	26 95       	lsr	r18
     230:	22 2f       	mov	r18, r18
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	22 0f       	add	r18, r18
     236:	33 1f       	adc	r19, r19
     238:	28 59       	subi	r18, 0x98	; 152
     23a:	3f 4f       	sbci	r19, 0xFF	; 255
     23c:	f9 01       	movw	r30, r18
     23e:	20 81       	ld	r18, Z
     240:	31 81       	ldd	r19, Z+1	; 0x01
     242:	f9 01       	movw	r30, r18
     244:	20 81       	ld	r18, Z
     246:	62 2f       	mov	r22, r18
     248:	29 81       	ldd	r18, Y+1	; 0x01
     24a:	22 2f       	mov	r18, r18
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	a9 01       	movw	r20, r18
     250:	47 70       	andi	r20, 0x07	; 7
     252:	55 27       	eor	r21, r21
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	02 c0       	rjmp	.+4      	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	4a 95       	dec	r20
     260:	e2 f7       	brpl	.-8      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
     262:	20 95       	com	r18
     264:	26 23       	and	r18, r22
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
			break;
     26a:	2e c0       	rjmp	.+92     	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>

		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	86 95       	lsr	r24
     270:	86 95       	lsr	r24
     272:	86 95       	lsr	r24
     274:	88 2f       	mov	r24, r24
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	88 59       	subi	r24, 0x98	; 152
     27e:	9f 4f       	sbci	r25, 0xFF	; 255
     280:	fc 01       	movw	r30, r24
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	29 81       	ldd	r18, Y+1	; 0x01
     288:	26 95       	lsr	r18
     28a:	26 95       	lsr	r18
     28c:	26 95       	lsr	r18
     28e:	22 2f       	mov	r18, r18
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	22 0f       	add	r18, r18
     294:	33 1f       	adc	r19, r19
     296:	28 59       	subi	r18, 0x98	; 152
     298:	3f 4f       	sbci	r19, 0xFF	; 255
     29a:	f9 01       	movw	r30, r18
     29c:	20 81       	ld	r18, Z
     29e:	31 81       	ldd	r19, Z+1	; 0x01
     2a0:	f9 01       	movw	r30, r18
     2a2:	20 81       	ld	r18, Z
     2a4:	62 2f       	mov	r22, r18
     2a6:	29 81       	ldd	r18, Y+1	; 0x01
     2a8:	22 2f       	mov	r18, r18
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	a9 01       	movw	r20, r18
     2ae:	47 70       	andi	r20, 0x07	; 7
     2b0:	55 27       	eor	r21, r21
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
     2b8:	22 0f       	add	r18, r18
     2ba:	33 1f       	adc	r19, r19
     2bc:	4a 95       	dec	r20
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
     2c0:	26 27       	eor	r18, r22
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
			break;
     2c6:	00 00       	nop

		default :
			break;
	}
}
     2c8:	00 00       	nop
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <Dio_getPinVal>:

Std_Return Dio_getPinVal(u8 CopyPinNum)
{
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	00 d0       	rcall	.+0      	; 0x2da <Dio_getPinVal+0x6>
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     2e0:	19 82       	std	Y+1, r1	; 0x01
	Ret = GET_BIT(*Arr_Pin[CopyPinNum / 8 ],CopyPinNum % 8 );
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	86 95       	lsr	r24
     2e6:	86 95       	lsr	r24
     2e8:	86 95       	lsr	r24
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	80 59       	subi	r24, 0x90	; 144
     2f4:	9f 4f       	sbci	r25, 0xFF	; 255
     2f6:	fc 01       	movw	r30, r24
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	fc 01       	movw	r30, r24
     2fe:	80 81       	ld	r24, Z
     300:	88 2f       	mov	r24, r24
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2a 81       	ldd	r18, Y+2	; 0x02
     306:	22 2f       	mov	r18, r18
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	27 70       	andi	r18, 0x07	; 7
     30c:	33 27       	eor	r19, r19
     30e:	02 c0       	rjmp	.+4      	; 0x314 <Dio_getPinVal+0x40>
     310:	95 95       	asr	r25
     312:	87 95       	ror	r24
     314:	2a 95       	dec	r18
     316:	e2 f7       	brpl	.-8      	; 0x310 <Dio_getPinVal+0x3c>
     318:	81 70       	andi	r24, 0x01	; 1
     31a:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     31c:	89 81       	ldd	r24, Y+1	; 0x01
}
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <Dio_setPortDir>:



/* -------------------- Section : Ports Functions Definaions -------------------- */
void Dio_setPortDir(u8 CopyPortNum,u8 CopyPinDir)
{
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	00 d0       	rcall	.+0      	; 0x32e <Dio_setPortDir+0x6>
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_DDr[CopyPortNum] = CopyPinDir;
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	80 5a       	subi	r24, 0xA0	; 160
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	fc 01       	movw	r30, r24
     346:	80 81       	ld	r24, Z
     348:	91 81       	ldd	r25, Z+1	; 0x01
     34a:	2a 81       	ldd	r18, Y+2	; 0x02
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
}
     350:	00 00       	nop
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <Dio_setPortVal>:

void Dio_setPortVal(u8 CopyPortNum,u8 CopyPinVal)
{
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	00 d0       	rcall	.+0      	; 0x362 <Dio_setPortVal+0x6>
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	89 83       	std	Y+1, r24	; 0x01
     368:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_Port[CopyPortNum] = CopyPinVal;
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	88 2f       	mov	r24, r24
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	88 59       	subi	r24, 0x98	; 152
     376:	9f 4f       	sbci	r25, 0xFF	; 255
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	91 81       	ldd	r25, Z+1	; 0x01
     37e:	2a 81       	ldd	r18, Y+2	; 0x02
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
}
     384:	00 00       	nop
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <Dio_getPortVal>:
Std_Return Dio_getPortVal(u8 CopyPortNum)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <Dio_getPortVal+0x6>
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     39c:	19 82       	std	Y+1, r1	; 0x01
	Ret = *Arr_Pin[CopyPortNum];
     39e:	8a 81       	ldd	r24, Y+2	; 0x02
     3a0:	88 2f       	mov	r24, r24
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	80 59       	subi	r24, 0x90	; 144
     3aa:	9f 4f       	sbci	r25, 0xFF	; 255
     3ac:	fc 01       	movw	r30, r24
     3ae:	80 81       	ld	r24, Z
     3b0:	91 81       	ldd	r25, Z+1	; 0x01
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <Led_On_PortLeds_Button>:
 *@ Param1 : CopyPortOutNum : Led Port Number
 *@ Param2 : CopyBottonPin : Button  On Pin Number
 *@ Param3 : CopyBottonPin : Button Off Pin Number
 */
void Led_On_PortLeds_Button(u8 CopyPortOutNum , u8 CopyButtonPin_On , u8 CopyButtonPin_Off )
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <Led_On_PortLeds_Button+0x6>
     3ca:	1f 92       	push	r1
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	6a 83       	std	Y+2, r22	; 0x02
     3d4:	4b 83       	std	Y+3, r20	; 0x03
		/* ===== Port of Leds Declaration ===== */
		Dio_setPortDir(CopyPortOutNum,Direction_Port_Output);
     3d6:	6f ef       	ldi	r22, 0xFF	; 255
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	0e 94 94 01 	call	0x328	; 0x328 <Dio_setPortDir>

		/* ===== Pin of Buttons Declaration ===== */
		Dio_setPinDir(CopyButtonPin_On , Direction_Pin_Input);
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
		Dio_setPinDir(CopyButtonPin_Off , Direction_Pin_Input);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ea:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

		/* ========== If Button Pressed Led Is On ========== */
		if(Dio_getPinVal(CopyButtonPin_On) == Status_Pin_Low)
     3ee:	8a 81       	ldd	r24, Y+2	; 0x02
     3f0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
     3f4:	88 23       	and	r24, r24
     3f6:	21 f4       	brne	.+8      	; 0x400 <__DATA_REGION_LENGTH__>
		{
			Dio_setPortVal(CopyPortOutNum, Status_Port_High);
     3f8:	6f ef       	ldi	r22, 0xFF	; 255
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	0e 94 ae 01 	call	0x35c	; 0x35c <Dio_setPortVal>
		}

		/* ========== If Button Pressed Led Is Off ========== */
		if(Dio_getPinVal(CopyButtonPin_Off) == Status_Pin_Low)
     400:	8b 81       	ldd	r24, Y+3	; 0x03
     402:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
     406:	88 23       	and	r24, r24
     408:	21 f4       	brne	.+8      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
		{
			Dio_setPortVal(CopyPortOutNum, Status_Port_Low);
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	0e 94 ae 01 	call	0x35c	; 0x35c <Dio_setPortVal>
		}

}
     412:	00 00       	nop
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <Led_On_OneLed_Button>:
 *@ Param1 : CopyPinOutNum : Led Pin Number
 *@ Param2 : CopyBottonPin : Button  On Pin Number
 *@ Param3 : CopyBottonPin : Button Off Pin Number
 */
void Led_On_OneLed_Button(u8 CopyPinOutNum ,u8 CopyButtonPin_On , u8 CopyButtonPin_Off)
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	00 d0       	rcall	.+0      	; 0x426 <Led_On_OneLed_Button+0x6>
     426:	1f 92       	push	r1
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	89 83       	std	Y+1, r24	; 0x01
     42e:	6a 83       	std	Y+2, r22	; 0x02
     430:	4b 83       	std	Y+3, r20	; 0x03
	/* ===== Pin of Led Declaration ===== */
	Dio_setPinDir(CopyPinOutNum , Direction_Pin_Output);
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	/* ===== Pins of Buttons Declaration ===== */
	Dio_setPinDir(CopyButtonPin_On , Direction_Pin_Input);
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(CopyButtonPin_Off , Direction_Pin_Input);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8b 81       	ldd	r24, Y+3	; 0x03
     446:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	/* ========== If Button Pressed Led Is On ========== */
	if(Dio_getPinVal(CopyButtonPin_On) == Status_Pin_Low)
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
     450:	88 23       	and	r24, r24
     452:	21 f4       	brne	.+8      	; 0x45c <Led_On_OneLed_Button+0x3c>
	{
		Dio_setPinVal(CopyPinOutNum , Status_Pin_High);
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	}

	/* ========== If Button Pressed Led Is Off ========== */
	if(Dio_getPinVal(CopyButtonPin_Off) == Status_Pin_Low)
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
     462:	88 23       	and	r24, r24
     464:	21 f4       	brne	.+8      	; 0x46e <__stack+0xf>
	{
		Dio_setPortVal(CopyPinOutNum, Status_Port_Low);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	0e 94 ae 01 	call	0x35c	; 0x35c <Dio_setPortVal>
	}
}
     46e:	00 00       	nop
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <LCD_8_INIT>:
/************************************************************************************************************************/


/********** SECTION : Functions Definitions 8 Bit Mode **********/
void LCD_8_INIT(LCD_8_MODE CopyLCD)
{
     47c:	ef 92       	push	r14
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	c7 54       	subi	r28, 0x47	; 71
     48c:	d1 09       	sbc	r29, r1
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	f8 94       	cli
     492:	de bf       	out	0x3e, r29	; 62
     494:	0f be       	out	0x3f, r0	; 63
     496:	cd bf       	out	0x3d, r28	; 61
     498:	0e af       	std	Y+62, r16	; 0x3e
     49a:	1f af       	std	Y+63, r17	; 0x3f
     49c:	fe 01       	movw	r30, r28
     49e:	e0 5c       	subi	r30, 0xC0	; 192
     4a0:	ff 4f       	sbci	r31, 0xFF	; 255
     4a2:	20 83       	st	Z, r18
     4a4:	fe 01       	movw	r30, r28
     4a6:	ef 5b       	subi	r30, 0xBF	; 191
     4a8:	ff 4f       	sbci	r31, 0xFF	; 255
     4aa:	30 83       	st	Z, r19
     4ac:	9e 01       	movw	r18, r28
     4ae:	2e 5b       	subi	r18, 0xBE	; 190
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
     4b2:	f9 01       	movw	r30, r18
     4b4:	40 83       	st	Z, r20
     4b6:	9e 01       	movw	r18, r28
     4b8:	2d 5b       	subi	r18, 0xBD	; 189
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	f9 01       	movw	r30, r18
     4be:	50 83       	st	Z, r21
     4c0:	9e 01       	movw	r18, r28
     4c2:	2c 5b       	subi	r18, 0xBC	; 188
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	f9 01       	movw	r30, r18
     4c8:	60 83       	st	Z, r22
     4ca:	9e 01       	movw	r18, r28
     4cc:	2b 5b       	subi	r18, 0xBB	; 187
     4ce:	3f 4f       	sbci	r19, 0xFF	; 255
     4d0:	f9 01       	movw	r30, r18
     4d2:	70 83       	st	Z, r23
     4d4:	9e 01       	movw	r18, r28
     4d6:	2a 5b       	subi	r18, 0xBA	; 186
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	f9 01       	movw	r30, r18
     4dc:	80 83       	st	Z, r24
     4de:	9e 01       	movw	r18, r28
     4e0:	29 5b       	subi	r18, 0xB9	; 185
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	f9 01       	movw	r30, r18
     4e6:	90 83       	st	Z, r25
	u8 Counter = Initial_Counter;
     4e8:	19 82       	std	Y+1, r1	; 0x01
	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
     4ea:	8f ad       	ldd	r24, Y+63	; 0x3f
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);
     4f2:	8e ad       	ldd	r24, Y+62	; 0x3e
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	for (Counter = Initial_Counter;  Counter < 8; Counter++)
     4fa:	19 82       	std	Y+1, r1	; 0x01
     4fc:	10 c0       	rjmp	.+32     	; 0x51e <LCD_8_INIT+0xa2>
	{
		Dio_setPinDir(CopyLCD.port[Counter], Direction_Pin_Output);
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	9e 01       	movw	r18, r28
     506:	20 5c       	subi	r18, 0xC0	; 192
     508:	3f 4f       	sbci	r19, 0xFF	; 255
     50a:	82 0f       	add	r24, r18
     50c:	93 1f       	adc	r25, r19
     50e:	fc 01       	movw	r30, r24
     510:	80 81       	ld	r24, Z
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
void LCD_8_INIT(LCD_8_MODE CopyLCD)
{
	u8 Counter = Initial_Counter;
	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);
	for (Counter = Initial_Counter;  Counter < 8; Counter++)
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	8f 5f       	subi	r24, 0xFF	; 255
     51c:	89 83       	std	Y+1, r24	; 0x01
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	88 30       	cpi	r24, 0x08	; 8
     522:	68 f3       	brcs	.-38     	; 0x4fe <LCD_8_INIT+0x82>
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	a0 ea       	ldi	r26, 0xA0	; 160
     52a:	b1 e4       	ldi	r27, 0x41	; 65
     52c:	8a 83       	std	Y+2, r24	; 0x02
     52e:	9b 83       	std	Y+3, r25	; 0x03
     530:	ac 83       	std	Y+4, r26	; 0x04
     532:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	4a e7       	ldi	r20, 0x7A	; 122
     53a:	53 e4       	ldi	r21, 0x43	; 67
     53c:	6a 81       	ldd	r22, Y+2	; 0x02
     53e:	7b 81       	ldd	r23, Y+3	; 0x03
     540:	8c 81       	ldd	r24, Y+4	; 0x04
     542:	9d 81       	ldd	r25, Y+5	; 0x05
     544:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	8c ab       	std	Y+52, r24	; 0x34
     54e:	9d ab       	std	Y+53, r25	; 0x35
     550:	ae ab       	std	Y+54, r26	; 0x36
     552:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e8       	ldi	r20, 0x80	; 128
     55a:	5f e3       	ldi	r21, 0x3F	; 63
     55c:	6c a9       	ldd	r22, Y+52	; 0x34
     55e:	7d a9       	ldd	r23, Y+53	; 0x35
     560:	8e a9       	ldd	r24, Y+54	; 0x36
     562:	9f a9       	ldd	r25, Y+55	; 0x37
     564:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
     568:	88 23       	and	r24, r24
     56a:	2c f4       	brge	.+10     	; 0x576 <LCD_8_INIT+0xfa>
		__ticks = 1;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	99 af       	std	Y+57, r25	; 0x39
     572:	88 af       	std	Y+56, r24	; 0x38
     574:	3f c0       	rjmp	.+126    	; 0x5f4 <LCD_8_INIT+0x178>
	else if (__tmp > 65535)
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	3f ef       	ldi	r19, 0xFF	; 255
     57a:	4f e7       	ldi	r20, 0x7F	; 127
     57c:	57 e4       	ldi	r21, 0x47	; 71
     57e:	6c a9       	ldd	r22, Y+52	; 0x34
     580:	7d a9       	ldd	r23, Y+53	; 0x35
     582:	8e a9       	ldd	r24, Y+54	; 0x36
     584:	9f a9       	ldd	r25, Y+55	; 0x37
     586:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
     58a:	18 16       	cp	r1, r24
     58c:	4c f5       	brge	.+82     	; 0x5e0 <LCD_8_INIT+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e2       	ldi	r20, 0x20	; 32
     594:	51 e4       	ldi	r21, 0x41	; 65
     596:	6a 81       	ldd	r22, Y+2	; 0x02
     598:	7b 81       	ldd	r23, Y+3	; 0x03
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	9d 81       	ldd	r25, Y+5	; 0x05
     59e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
     5a2:	dc 01       	movw	r26, r24
     5a4:	cb 01       	movw	r24, r22
     5a6:	bc 01       	movw	r22, r24
     5a8:	cd 01       	movw	r24, r26
     5aa:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	99 af       	std	Y+57, r25	; 0x39
     5b4:	88 af       	std	Y+56, r24	; 0x38
     5b6:	0f c0       	rjmp	.+30     	; 0x5d6 <LCD_8_INIT+0x15a>
     5b8:	89 e1       	ldi	r24, 0x19	; 25
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	9b af       	std	Y+59, r25	; 0x3b
     5be:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5c0:	8a ad       	ldd	r24, Y+58	; 0x3a
     5c2:	9b ad       	ldd	r25, Y+59	; 0x3b
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LCD_8_INIT+0x148>
     5c8:	9b af       	std	Y+59, r25	; 0x3b
     5ca:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5cc:	88 ad       	ldd	r24, Y+56	; 0x38
     5ce:	99 ad       	ldd	r25, Y+57	; 0x39
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	99 af       	std	Y+57, r25	; 0x39
     5d4:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5d6:	88 ad       	ldd	r24, Y+56	; 0x38
     5d8:	99 ad       	ldd	r25, Y+57	; 0x39
     5da:	89 2b       	or	r24, r25
     5dc:	69 f7       	brne	.-38     	; 0x5b8 <LCD_8_INIT+0x13c>
     5de:	14 c0       	rjmp	.+40     	; 0x608 <LCD_8_INIT+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e0:	6c a9       	ldd	r22, Y+52	; 0x34
     5e2:	7d a9       	ldd	r23, Y+53	; 0x35
     5e4:	8e a9       	ldd	r24, Y+54	; 0x36
     5e6:	9f a9       	ldd	r25, Y+55	; 0x37
     5e8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	99 af       	std	Y+57, r25	; 0x39
     5f2:	88 af       	std	Y+56, r24	; 0x38
     5f4:	88 ad       	ldd	r24, Y+56	; 0x38
     5f6:	99 ad       	ldd	r25, Y+57	; 0x39
     5f8:	9d af       	std	Y+61, r25	; 0x3d
     5fa:	8c af       	std	Y+60, r24	; 0x3c
     5fc:	8c ad       	ldd	r24, Y+60	; 0x3c
     5fe:	9d ad       	ldd	r25, Y+61	; 0x3d
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <LCD_8_INIT+0x184>
     604:	9d af       	std	Y+61, r25	; 0x3d
     606:	8c af       	std	Y+60, r24	; 0x3c
	{
		Dio_setPinDir(CopyLCD.port[Counter], Direction_Pin_Output);
	}
	_delay_ms(20);
	LCD_8_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     608:	0f 2e       	mov	r0, r31
     60a:	f8 e3       	ldi	r31, 0x38	; 56
     60c:	ef 2e       	mov	r14, r31
     60e:	f0 2d       	mov	r31, r0
     610:	0e ad       	ldd	r16, Y+62	; 0x3e
     612:	1f ad       	ldd	r17, Y+63	; 0x3f
     614:	ce 01       	movw	r24, r28
     616:	80 5c       	subi	r24, 0xC0	; 192
     618:	9f 4f       	sbci	r25, 0xFF	; 255
     61a:	fc 01       	movw	r30, r24
     61c:	20 81       	ld	r18, Z
     61e:	ce 01       	movw	r24, r28
     620:	8f 5b       	subi	r24, 0xBF	; 191
     622:	9f 4f       	sbci	r25, 0xFF	; 255
     624:	fc 01       	movw	r30, r24
     626:	30 81       	ld	r19, Z
     628:	ce 01       	movw	r24, r28
     62a:	8e 5b       	subi	r24, 0xBE	; 190
     62c:	9f 4f       	sbci	r25, 0xFF	; 255
     62e:	fc 01       	movw	r30, r24
     630:	40 81       	ld	r20, Z
     632:	ce 01       	movw	r24, r28
     634:	8d 5b       	subi	r24, 0xBD	; 189
     636:	9f 4f       	sbci	r25, 0xFF	; 255
     638:	fc 01       	movw	r30, r24
     63a:	50 81       	ld	r21, Z
     63c:	ce 01       	movw	r24, r28
     63e:	8c 5b       	subi	r24, 0xBC	; 188
     640:	9f 4f       	sbci	r25, 0xFF	; 255
     642:	fc 01       	movw	r30, r24
     644:	60 81       	ld	r22, Z
     646:	ce 01       	movw	r24, r28
     648:	8b 5b       	subi	r24, 0xBB	; 187
     64a:	9f 4f       	sbci	r25, 0xFF	; 255
     64c:	fc 01       	movw	r30, r24
     64e:	70 81       	ld	r23, Z
     650:	ce 01       	movw	r24, r28
     652:	8a 5b       	subi	r24, 0xBA	; 186
     654:	9f 4f       	sbci	r25, 0xFF	; 255
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	fe 01       	movw	r30, r28
     65c:	e9 5b       	subi	r30, 0xB9	; 185
     65e:	ff 4f       	sbci	r31, 0xFF	; 255
     660:	90 81       	ld	r25, Z
     662:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	a0 ea       	ldi	r26, 0xA0	; 160
     66c:	b0 e4       	ldi	r27, 0x40	; 64
     66e:	8e 83       	std	Y+6, r24	; 0x06
     670:	9f 83       	std	Y+7, r25	; 0x07
     672:	a8 87       	std	Y+8, r26	; 0x08
     674:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	4a e7       	ldi	r20, 0x7A	; 122
     67c:	53 e4       	ldi	r21, 0x43	; 67
     67e:	6e 81       	ldd	r22, Y+6	; 0x06
     680:	7f 81       	ldd	r23, Y+7	; 0x07
     682:	88 85       	ldd	r24, Y+8	; 0x08
     684:	99 85       	ldd	r25, Y+9	; 0x09
     686:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	8a a7       	std	Y+42, r24	; 0x2a
     690:	9b a7       	std	Y+43, r25	; 0x2b
     692:	ac a7       	std	Y+44, r26	; 0x2c
     694:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e8       	ldi	r20, 0x80	; 128
     69c:	5f e3       	ldi	r21, 0x3F	; 63
     69e:	6a a5       	ldd	r22, Y+42	; 0x2a
     6a0:	7b a5       	ldd	r23, Y+43	; 0x2b
     6a2:	8c a5       	ldd	r24, Y+44	; 0x2c
     6a4:	9d a5       	ldd	r25, Y+45	; 0x2d
     6a6:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
     6aa:	88 23       	and	r24, r24
     6ac:	2c f4       	brge	.+10     	; 0x6b8 <LCD_8_INIT+0x23c>
		__ticks = 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	9f a7       	std	Y+47, r25	; 0x2f
     6b4:	8e a7       	std	Y+46, r24	; 0x2e
     6b6:	3f c0       	rjmp	.+126    	; 0x736 <LCD_8_INIT+0x2ba>
	else if (__tmp > 65535)
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	3f ef       	ldi	r19, 0xFF	; 255
     6bc:	4f e7       	ldi	r20, 0x7F	; 127
     6be:	57 e4       	ldi	r21, 0x47	; 71
     6c0:	6a a5       	ldd	r22, Y+42	; 0x2a
     6c2:	7b a5       	ldd	r23, Y+43	; 0x2b
     6c4:	8c a5       	ldd	r24, Y+44	; 0x2c
     6c6:	9d a5       	ldd	r25, Y+45	; 0x2d
     6c8:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
     6cc:	18 16       	cp	r1, r24
     6ce:	4c f5       	brge	.+82     	; 0x722 <LCD_8_INIT+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e2       	ldi	r20, 0x20	; 32
     6d6:	51 e4       	ldi	r21, 0x41	; 65
     6d8:	6e 81       	ldd	r22, Y+6	; 0x06
     6da:	7f 81       	ldd	r23, Y+7	; 0x07
     6dc:	88 85       	ldd	r24, Y+8	; 0x08
     6de:	99 85       	ldd	r25, Y+9	; 0x09
     6e0:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	bc 01       	movw	r22, r24
     6ea:	cd 01       	movw	r24, r26
     6ec:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	9f a7       	std	Y+47, r25	; 0x2f
     6f6:	8e a7       	std	Y+46, r24	; 0x2e
     6f8:	0f c0       	rjmp	.+30     	; 0x718 <LCD_8_INIT+0x29c>
     6fa:	89 e1       	ldi	r24, 0x19	; 25
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	99 ab       	std	Y+49, r25	; 0x31
     700:	88 ab       	std	Y+48, r24	; 0x30
     702:	88 a9       	ldd	r24, Y+48	; 0x30
     704:	99 a9       	ldd	r25, Y+49	; 0x31
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <LCD_8_INIT+0x28a>
     70a:	99 ab       	std	Y+49, r25	; 0x31
     70c:	88 ab       	std	Y+48, r24	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     70e:	8e a5       	ldd	r24, Y+46	; 0x2e
     710:	9f a5       	ldd	r25, Y+47	; 0x2f
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	9f a7       	std	Y+47, r25	; 0x2f
     716:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     718:	8e a5       	ldd	r24, Y+46	; 0x2e
     71a:	9f a5       	ldd	r25, Y+47	; 0x2f
     71c:	89 2b       	or	r24, r25
     71e:	69 f7       	brne	.-38     	; 0x6fa <LCD_8_INIT+0x27e>
     720:	14 c0       	rjmp	.+40     	; 0x74a <LCD_8_INIT+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     722:	6a a5       	ldd	r22, Y+42	; 0x2a
     724:	7b a5       	ldd	r23, Y+43	; 0x2b
     726:	8c a5       	ldd	r24, Y+44	; 0x2c
     728:	9d a5       	ldd	r25, Y+45	; 0x2d
     72a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	9f a7       	std	Y+47, r25	; 0x2f
     734:	8e a7       	std	Y+46, r24	; 0x2e
     736:	8e a5       	ldd	r24, Y+46	; 0x2e
     738:	9f a5       	ldd	r25, Y+47	; 0x2f
     73a:	9b ab       	std	Y+51, r25	; 0x33
     73c:	8a ab       	std	Y+50, r24	; 0x32
     73e:	8a a9       	ldd	r24, Y+50	; 0x32
     740:	9b a9       	ldd	r25, Y+51	; 0x33
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <LCD_8_INIT+0x2c6>
     746:	9b ab       	std	Y+51, r25	; 0x33
     748:	8a ab       	std	Y+50, r24	; 0x32
	_delay_ms(5);
	LCD_8_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     74a:	0f 2e       	mov	r0, r31
     74c:	f8 e3       	ldi	r31, 0x38	; 56
     74e:	ef 2e       	mov	r14, r31
     750:	f0 2d       	mov	r31, r0
     752:	0e ad       	ldd	r16, Y+62	; 0x3e
     754:	1f ad       	ldd	r17, Y+63	; 0x3f
     756:	ce 01       	movw	r24, r28
     758:	80 5c       	subi	r24, 0xC0	; 192
     75a:	9f 4f       	sbci	r25, 0xFF	; 255
     75c:	fc 01       	movw	r30, r24
     75e:	20 81       	ld	r18, Z
     760:	ce 01       	movw	r24, r28
     762:	8f 5b       	subi	r24, 0xBF	; 191
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	fc 01       	movw	r30, r24
     768:	30 81       	ld	r19, Z
     76a:	ce 01       	movw	r24, r28
     76c:	8e 5b       	subi	r24, 0xBE	; 190
     76e:	9f 4f       	sbci	r25, 0xFF	; 255
     770:	fc 01       	movw	r30, r24
     772:	40 81       	ld	r20, Z
     774:	ce 01       	movw	r24, r28
     776:	8d 5b       	subi	r24, 0xBD	; 189
     778:	9f 4f       	sbci	r25, 0xFF	; 255
     77a:	fc 01       	movw	r30, r24
     77c:	50 81       	ld	r21, Z
     77e:	ce 01       	movw	r24, r28
     780:	8c 5b       	subi	r24, 0xBC	; 188
     782:	9f 4f       	sbci	r25, 0xFF	; 255
     784:	fc 01       	movw	r30, r24
     786:	60 81       	ld	r22, Z
     788:	ce 01       	movw	r24, r28
     78a:	8b 5b       	subi	r24, 0xBB	; 187
     78c:	9f 4f       	sbci	r25, 0xFF	; 255
     78e:	fc 01       	movw	r30, r24
     790:	70 81       	ld	r23, Z
     792:	ce 01       	movw	r24, r28
     794:	8a 5b       	subi	r24, 0xBA	; 186
     796:	9f 4f       	sbci	r25, 0xFF	; 255
     798:	fc 01       	movw	r30, r24
     79a:	80 81       	ld	r24, Z
     79c:	fe 01       	movw	r30, r28
     79e:	e9 5b       	subi	r30, 0xB9	; 185
     7a0:	ff 4f       	sbci	r31, 0xFF	; 255
     7a2:	90 81       	ld	r25, Z
     7a4:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	a6 e1       	ldi	r26, 0x16	; 22
     7ae:	b3 e4       	ldi	r27, 0x43	; 67
     7b0:	8a 87       	std	Y+10, r24	; 0x0a
     7b2:	9b 87       	std	Y+11, r25	; 0x0b
     7b4:	ac 87       	std	Y+12, r26	; 0x0c
     7b6:	bd 87       	std	Y+13, r27	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     7b8:	2b ea       	ldi	r18, 0xAB	; 171
     7ba:	3a ea       	ldi	r19, 0xAA	; 170
     7bc:	4a ea       	ldi	r20, 0xAA	; 170
     7be:	5e e3       	ldi	r21, 0x3E	; 62
     7c0:	6a 85       	ldd	r22, Y+10	; 0x0a
     7c2:	7b 85       	ldd	r23, Y+11	; 0x0b
     7c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c6:	9d 85       	ldd	r25, Y+13	; 0x0d
     7c8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
     7cc:	dc 01       	movw	r26, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	8e 87       	std	Y+14, r24	; 0x0e
     7d2:	9f 87       	std	Y+15, r25	; 0x0f
     7d4:	a8 8b       	std	Y+16, r26	; 0x10
     7d6:	b9 8b       	std	Y+17, r27	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e8       	ldi	r20, 0x80	; 128
     7de:	5e e3       	ldi	r21, 0x3E	; 62
     7e0:	6a 85       	ldd	r22, Y+10	; 0x0a
     7e2:	7b 85       	ldd	r23, Y+11	; 0x0b
     7e4:	8c 85       	ldd	r24, Y+12	; 0x0c
     7e6:	9d 85       	ldd	r25, Y+13	; 0x0d
     7e8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
     7f0:	8a 8b       	std	Y+18, r24	; 0x12
     7f2:	9b 8b       	std	Y+19, r25	; 0x13
     7f4:	ac 8b       	std	Y+20, r26	; 0x14
     7f6:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 e8       	ldi	r20, 0x80	; 128
     7fe:	5f e3       	ldi	r21, 0x3F	; 63
     800:	6e 85       	ldd	r22, Y+14	; 0x0e
     802:	7f 85       	ldd	r23, Y+15	; 0x0f
     804:	88 89       	ldd	r24, Y+16	; 0x10
     806:	99 89       	ldd	r25, Y+17	; 0x11
     808:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
     80c:	88 23       	and	r24, r24
     80e:	1c f4       	brge	.+6      	; 0x816 <LCD_8_INIT+0x39a>
		__ticks = 1;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	8e 8b       	std	Y+22, r24	; 0x16
     814:	b2 c0       	rjmp	.+356    	; 0x97a <LCD_8_INIT+0x4fe>
	else if (__tmp2 > 65535)
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	4f e7       	ldi	r20, 0x7F	; 127
     81c:	57 e4       	ldi	r21, 0x47	; 71
     81e:	6a 89       	ldd	r22, Y+18	; 0x12
     820:	7b 89       	ldd	r23, Y+19	; 0x13
     822:	8c 89       	ldd	r24, Y+20	; 0x14
     824:	9d 89       	ldd	r25, Y+21	; 0x15
     826:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
     82a:	18 16       	cp	r1, r24
     82c:	0c f0       	brlt	.+2      	; 0x830 <LCD_8_INIT+0x3b4>
     82e:	7b c0       	rjmp	.+246    	; 0x926 <LCD_8_INIT+0x4aa>
	{
		_delay_ms(__us / 1000.0);
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	4a e7       	ldi	r20, 0x7A	; 122
     836:	54 e4       	ldi	r21, 0x44	; 68
     838:	6a 85       	ldd	r22, Y+10	; 0x0a
     83a:	7b 85       	ldd	r23, Y+11	; 0x0b
     83c:	8c 85       	ldd	r24, Y+12	; 0x0c
     83e:	9d 85       	ldd	r25, Y+13	; 0x0d
     840:	0e 94 df 14 	call	0x29be	; 0x29be <__divsf3>
     844:	dc 01       	movw	r26, r24
     846:	cb 01       	movw	r24, r22
     848:	8f 8b       	std	Y+23, r24	; 0x17
     84a:	98 8f       	std	Y+24, r25	; 0x18
     84c:	a9 8f       	std	Y+25, r26	; 0x19
     84e:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	4a e7       	ldi	r20, 0x7A	; 122
     856:	53 e4       	ldi	r21, 0x43	; 67
     858:	6f 89       	ldd	r22, Y+23	; 0x17
     85a:	78 8d       	ldd	r23, Y+24	; 0x18
     85c:	89 8d       	ldd	r24, Y+25	; 0x19
     85e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     860:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8b 8f       	std	Y+27, r24	; 0x1b
     86a:	9c 8f       	std	Y+28, r25	; 0x1c
     86c:	ad 8f       	std	Y+29, r26	; 0x1d
     86e:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e8       	ldi	r20, 0x80	; 128
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	6b 8d       	ldd	r22, Y+27	; 0x1b
     87a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     87c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     87e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     880:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
     884:	88 23       	and	r24, r24
     886:	2c f4       	brge	.+10     	; 0x892 <LCD_8_INIT+0x416>
		__ticks = 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	98 a3       	std	Y+32, r25	; 0x20
     88e:	8f 8f       	std	Y+31, r24	; 0x1f
     890:	3f c0       	rjmp	.+126    	; 0x910 <LCD_8_INIT+0x494>
	else if (__tmp > 65535)
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	3f ef       	ldi	r19, 0xFF	; 255
     896:	4f e7       	ldi	r20, 0x7F	; 127
     898:	57 e4       	ldi	r21, 0x47	; 71
     89a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     89c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     89e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8a2:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	4c f5       	brge	.+82     	; 0x8fc <LCD_8_INIT+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e2       	ldi	r20, 0x20	; 32
     8b0:	51 e4       	ldi	r21, 0x41	; 65
     8b2:	6f 89       	ldd	r22, Y+23	; 0x17
     8b4:	78 8d       	ldd	r23, Y+24	; 0x18
     8b6:	89 8d       	ldd	r24, Y+25	; 0x19
     8b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8ba:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	bc 01       	movw	r22, r24
     8c4:	cd 01       	movw	r24, r26
     8c6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	98 a3       	std	Y+32, r25	; 0x20
     8d0:	8f 8f       	std	Y+31, r24	; 0x1f
     8d2:	0f c0       	rjmp	.+30     	; 0x8f2 <LCD_8_INIT+0x476>
     8d4:	89 e1       	ldi	r24, 0x19	; 25
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	9a a3       	std	Y+34, r25	; 0x22
     8da:	89 a3       	std	Y+33, r24	; 0x21
     8dc:	89 a1       	ldd	r24, Y+33	; 0x21
     8de:	9a a1       	ldd	r25, Y+34	; 0x22
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <LCD_8_INIT+0x464>
     8e4:	9a a3       	std	Y+34, r25	; 0x22
     8e6:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ea:	98 a1       	ldd	r25, Y+32	; 0x20
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	98 a3       	std	Y+32, r25	; 0x20
     8f0:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8f4:	98 a1       	ldd	r25, Y+32	; 0x20
     8f6:	89 2b       	or	r24, r25
     8f8:	69 f7       	brne	.-38     	; 0x8d4 <LCD_8_INIT+0x458>
     8fa:	3f c0       	rjmp	.+126    	; 0x97a <LCD_8_INIT+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8fc:	6b 8d       	ldd	r22, Y+27	; 0x1b
     8fe:	7c 8d       	ldd	r23, Y+28	; 0x1c
     900:	8d 8d       	ldd	r24, Y+29	; 0x1d
     902:	9e 8d       	ldd	r25, Y+30	; 0x1e
     904:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	98 a3       	std	Y+32, r25	; 0x20
     90e:	8f 8f       	std	Y+31, r24	; 0x1f
     910:	8f 8d       	ldd	r24, Y+31	; 0x1f
     912:	98 a1       	ldd	r25, Y+32	; 0x20
     914:	9c a3       	std	Y+36, r25	; 0x24
     916:	8b a3       	std	Y+35, r24	; 0x23
     918:	8b a1       	ldd	r24, Y+35	; 0x23
     91a:	9c a1       	ldd	r25, Y+36	; 0x24
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <LCD_8_INIT+0x4a0>
     920:	9c a3       	std	Y+36, r25	; 0x24
     922:	8b a3       	std	Y+35, r24	; 0x23
     924:	2a c0       	rjmp	.+84     	; 0x97a <LCD_8_INIT+0x4fe>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	4f e7       	ldi	r20, 0x7F	; 127
     92c:	53 e4       	ldi	r21, 0x43	; 67
     92e:	6e 85       	ldd	r22, Y+14	; 0x0e
     930:	7f 85       	ldd	r23, Y+15	; 0x0f
     932:	88 89       	ldd	r24, Y+16	; 0x10
     934:	99 89       	ldd	r25, Y+17	; 0x11
     936:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
     93a:	18 16       	cp	r1, r24
     93c:	ac f4       	brge	.+42     	; 0x968 <LCD_8_INIT+0x4ec>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     93e:	6a 89       	ldd	r22, Y+18	; 0x12
     940:	7b 89       	ldd	r23, Y+19	; 0x13
     942:	8c 89       	ldd	r24, Y+20	; 0x14
     944:	9d 89       	ldd	r25, Y+21	; 0x15
     946:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
     94a:	dc 01       	movw	r26, r24
     94c:	cb 01       	movw	r24, r22
     94e:	9e a3       	std	Y+38, r25	; 0x26
     950:	8d a3       	std	Y+37, r24	; 0x25
     952:	8d a1       	ldd	r24, Y+37	; 0x25
     954:	9e a1       	ldd	r25, Y+38	; 0x26
     956:	98 a7       	std	Y+40, r25	; 0x28
     958:	8f a3       	std	Y+39, r24	; 0x27
     95a:	8f a1       	ldd	r24, Y+39	; 0x27
     95c:	98 a5       	ldd	r25, Y+40	; 0x28
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	f1 f7       	brne	.-4      	; 0x95e <LCD_8_INIT+0x4e2>
     962:	98 a7       	std	Y+40, r25	; 0x28
     964:	8f a3       	std	Y+39, r24	; 0x27
     966:	0f c0       	rjmp	.+30     	; 0x986 <LCD_8_INIT+0x50a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     968:	6e 85       	ldd	r22, Y+14	; 0x0e
     96a:	7f 85       	ldd	r23, Y+15	; 0x0f
     96c:	88 89       	ldd	r24, Y+16	; 0x10
     96e:	99 89       	ldd	r25, Y+17	; 0x11
     970:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	8e 8b       	std	Y+22, r24	; 0x16
     97a:	8e 89       	ldd	r24, Y+22	; 0x16
     97c:	89 a7       	std	Y+41, r24	; 0x29
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     97e:	89 a5       	ldd	r24, Y+41	; 0x29
     980:	8a 95       	dec	r24
     982:	f1 f7       	brne	.-4      	; 0x980 <LCD_8_INIT+0x504>
     984:	89 a7       	std	Y+41, r24	; 0x29
	_delay_us(150);
	LCD_8_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     986:	0f 2e       	mov	r0, r31
     988:	f8 e3       	ldi	r31, 0x38	; 56
     98a:	ef 2e       	mov	r14, r31
     98c:	f0 2d       	mov	r31, r0
     98e:	0e ad       	ldd	r16, Y+62	; 0x3e
     990:	1f ad       	ldd	r17, Y+63	; 0x3f
     992:	ce 01       	movw	r24, r28
     994:	80 5c       	subi	r24, 0xC0	; 192
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	fc 01       	movw	r30, r24
     99a:	20 81       	ld	r18, Z
     99c:	ce 01       	movw	r24, r28
     99e:	8f 5b       	subi	r24, 0xBF	; 191
     9a0:	9f 4f       	sbci	r25, 0xFF	; 255
     9a2:	fc 01       	movw	r30, r24
     9a4:	30 81       	ld	r19, Z
     9a6:	ce 01       	movw	r24, r28
     9a8:	8e 5b       	subi	r24, 0xBE	; 190
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	fc 01       	movw	r30, r24
     9ae:	40 81       	ld	r20, Z
     9b0:	ce 01       	movw	r24, r28
     9b2:	8d 5b       	subi	r24, 0xBD	; 189
     9b4:	9f 4f       	sbci	r25, 0xFF	; 255
     9b6:	fc 01       	movw	r30, r24
     9b8:	50 81       	ld	r21, Z
     9ba:	ce 01       	movw	r24, r28
     9bc:	8c 5b       	subi	r24, 0xBC	; 188
     9be:	9f 4f       	sbci	r25, 0xFF	; 255
     9c0:	fc 01       	movw	r30, r24
     9c2:	60 81       	ld	r22, Z
     9c4:	ce 01       	movw	r24, r28
     9c6:	8b 5b       	subi	r24, 0xBB	; 187
     9c8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ca:	fc 01       	movw	r30, r24
     9cc:	70 81       	ld	r23, Z
     9ce:	ce 01       	movw	r24, r28
     9d0:	8a 5b       	subi	r24, 0xBA	; 186
     9d2:	9f 4f       	sbci	r25, 0xFF	; 255
     9d4:	fc 01       	movw	r30, r24
     9d6:	80 81       	ld	r24, Z
     9d8:	fe 01       	movw	r30, r28
     9da:	e9 5b       	subi	r30, 0xB9	; 185
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	90 81       	ld	r25, Z
     9e0:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
	LCD_8_CMD_Write(CopyLCD, _LCD_Clear_Dis);
     9e4:	ee 24       	eor	r14, r14
     9e6:	e3 94       	inc	r14
     9e8:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ea:	1f ad       	ldd	r17, Y+63	; 0x3f
     9ec:	ce 01       	movw	r24, r28
     9ee:	80 5c       	subi	r24, 0xC0	; 192
     9f0:	9f 4f       	sbci	r25, 0xFF	; 255
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 81       	ld	r18, Z
     9f6:	ce 01       	movw	r24, r28
     9f8:	8f 5b       	subi	r24, 0xBF	; 191
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	fc 01       	movw	r30, r24
     9fe:	30 81       	ld	r19, Z
     a00:	ce 01       	movw	r24, r28
     a02:	8e 5b       	subi	r24, 0xBE	; 190
     a04:	9f 4f       	sbci	r25, 0xFF	; 255
     a06:	fc 01       	movw	r30, r24
     a08:	40 81       	ld	r20, Z
     a0a:	ce 01       	movw	r24, r28
     a0c:	8d 5b       	subi	r24, 0xBD	; 189
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	fc 01       	movw	r30, r24
     a12:	50 81       	ld	r21, Z
     a14:	ce 01       	movw	r24, r28
     a16:	8c 5b       	subi	r24, 0xBC	; 188
     a18:	9f 4f       	sbci	r25, 0xFF	; 255
     a1a:	fc 01       	movw	r30, r24
     a1c:	60 81       	ld	r22, Z
     a1e:	ce 01       	movw	r24, r28
     a20:	8b 5b       	subi	r24, 0xBB	; 187
     a22:	9f 4f       	sbci	r25, 0xFF	; 255
     a24:	fc 01       	movw	r30, r24
     a26:	70 81       	ld	r23, Z
     a28:	ce 01       	movw	r24, r28
     a2a:	8a 5b       	subi	r24, 0xBA	; 186
     a2c:	9f 4f       	sbci	r25, 0xFF	; 255
     a2e:	fc 01       	movw	r30, r24
     a30:	80 81       	ld	r24, Z
     a32:	fe 01       	movw	r30, r28
     a34:	e9 5b       	subi	r30, 0xB9	; 185
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	90 81       	ld	r25, Z
     a3a:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
	LCD_8_CMD_Write(CopyLCD, _LCD_Return_Home);
     a3e:	68 94       	set
     a40:	ee 24       	eor	r14, r14
     a42:	e1 f8       	bld	r14, 1
     a44:	0e ad       	ldd	r16, Y+62	; 0x3e
     a46:	1f ad       	ldd	r17, Y+63	; 0x3f
     a48:	ce 01       	movw	r24, r28
     a4a:	80 5c       	subi	r24, 0xC0	; 192
     a4c:	9f 4f       	sbci	r25, 0xFF	; 255
     a4e:	fc 01       	movw	r30, r24
     a50:	20 81       	ld	r18, Z
     a52:	ce 01       	movw	r24, r28
     a54:	8f 5b       	subi	r24, 0xBF	; 191
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	fc 01       	movw	r30, r24
     a5a:	30 81       	ld	r19, Z
     a5c:	ce 01       	movw	r24, r28
     a5e:	8e 5b       	subi	r24, 0xBE	; 190
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	fc 01       	movw	r30, r24
     a64:	40 81       	ld	r20, Z
     a66:	ce 01       	movw	r24, r28
     a68:	8d 5b       	subi	r24, 0xBD	; 189
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	fc 01       	movw	r30, r24
     a6e:	50 81       	ld	r21, Z
     a70:	ce 01       	movw	r24, r28
     a72:	8c 5b       	subi	r24, 0xBC	; 188
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	fc 01       	movw	r30, r24
     a78:	60 81       	ld	r22, Z
     a7a:	ce 01       	movw	r24, r28
     a7c:	8b 5b       	subi	r24, 0xBB	; 187
     a7e:	9f 4f       	sbci	r25, 0xFF	; 255
     a80:	fc 01       	movw	r30, r24
     a82:	70 81       	ld	r23, Z
     a84:	ce 01       	movw	r24, r28
     a86:	8a 5b       	subi	r24, 0xBA	; 186
     a88:	9f 4f       	sbci	r25, 0xFF	; 255
     a8a:	fc 01       	movw	r30, r24
     a8c:	80 81       	ld	r24, Z
     a8e:	fe 01       	movw	r30, r28
     a90:	e9 5b       	subi	r30, 0xB9	; 185
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	90 81       	ld	r25, Z
     a96:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
	LCD_8_CMD_Write(CopyLCD, _LCD_Entery_INC);
     a9a:	0f 2e       	mov	r0, r31
     a9c:	f6 e0       	ldi	r31, 0x06	; 6
     a9e:	ef 2e       	mov	r14, r31
     aa0:	f0 2d       	mov	r31, r0
     aa2:	0e ad       	ldd	r16, Y+62	; 0x3e
     aa4:	1f ad       	ldd	r17, Y+63	; 0x3f
     aa6:	ce 01       	movw	r24, r28
     aa8:	80 5c       	subi	r24, 0xC0	; 192
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	fc 01       	movw	r30, r24
     aae:	20 81       	ld	r18, Z
     ab0:	ce 01       	movw	r24, r28
     ab2:	8f 5b       	subi	r24, 0xBF	; 191
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	fc 01       	movw	r30, r24
     ab8:	30 81       	ld	r19, Z
     aba:	ce 01       	movw	r24, r28
     abc:	8e 5b       	subi	r24, 0xBE	; 190
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	fc 01       	movw	r30, r24
     ac2:	40 81       	ld	r20, Z
     ac4:	ce 01       	movw	r24, r28
     ac6:	8d 5b       	subi	r24, 0xBD	; 189
     ac8:	9f 4f       	sbci	r25, 0xFF	; 255
     aca:	fc 01       	movw	r30, r24
     acc:	50 81       	ld	r21, Z
     ace:	ce 01       	movw	r24, r28
     ad0:	8c 5b       	subi	r24, 0xBC	; 188
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
     ad4:	fc 01       	movw	r30, r24
     ad6:	60 81       	ld	r22, Z
     ad8:	ce 01       	movw	r24, r28
     ada:	8b 5b       	subi	r24, 0xBB	; 187
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	fc 01       	movw	r30, r24
     ae0:	70 81       	ld	r23, Z
     ae2:	ce 01       	movw	r24, r28
     ae4:	8a 5b       	subi	r24, 0xBA	; 186
     ae6:	9f 4f       	sbci	r25, 0xFF	; 255
     ae8:	fc 01       	movw	r30, r24
     aea:	80 81       	ld	r24, Z
     aec:	fe 01       	movw	r30, r28
     aee:	e9 5b       	subi	r30, 0xB9	; 185
     af0:	ff 4f       	sbci	r31, 0xFF	; 255
     af2:	90 81       	ld	r25, Z
     af4:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
	LCD_8_CMD_Write(CopyLCD, _LCD_Dis_ON);
     af8:	0f 2e       	mov	r0, r31
     afa:	fc e0       	ldi	r31, 0x0C	; 12
     afc:	ef 2e       	mov	r14, r31
     afe:	f0 2d       	mov	r31, r0
     b00:	0e ad       	ldd	r16, Y+62	; 0x3e
     b02:	1f ad       	ldd	r17, Y+63	; 0x3f
     b04:	ce 01       	movw	r24, r28
     b06:	80 5c       	subi	r24, 0xC0	; 192
     b08:	9f 4f       	sbci	r25, 0xFF	; 255
     b0a:	fc 01       	movw	r30, r24
     b0c:	20 81       	ld	r18, Z
     b0e:	ce 01       	movw	r24, r28
     b10:	8f 5b       	subi	r24, 0xBF	; 191
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	fc 01       	movw	r30, r24
     b16:	30 81       	ld	r19, Z
     b18:	ce 01       	movw	r24, r28
     b1a:	8e 5b       	subi	r24, 0xBE	; 190
     b1c:	9f 4f       	sbci	r25, 0xFF	; 255
     b1e:	fc 01       	movw	r30, r24
     b20:	40 81       	ld	r20, Z
     b22:	ce 01       	movw	r24, r28
     b24:	8d 5b       	subi	r24, 0xBD	; 189
     b26:	9f 4f       	sbci	r25, 0xFF	; 255
     b28:	fc 01       	movw	r30, r24
     b2a:	50 81       	ld	r21, Z
     b2c:	ce 01       	movw	r24, r28
     b2e:	8c 5b       	subi	r24, 0xBC	; 188
     b30:	9f 4f       	sbci	r25, 0xFF	; 255
     b32:	fc 01       	movw	r30, r24
     b34:	60 81       	ld	r22, Z
     b36:	ce 01       	movw	r24, r28
     b38:	8b 5b       	subi	r24, 0xBB	; 187
     b3a:	9f 4f       	sbci	r25, 0xFF	; 255
     b3c:	fc 01       	movw	r30, r24
     b3e:	70 81       	ld	r23, Z
     b40:	ce 01       	movw	r24, r28
     b42:	8a 5b       	subi	r24, 0xBA	; 186
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	fe 01       	movw	r30, r28
     b4c:	e9 5b       	subi	r30, 0xB9	; 185
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	90 81       	ld	r25, Z
     b52:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
	LCD_8_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     b56:	0f 2e       	mov	r0, r31
     b58:	f8 e3       	ldi	r31, 0x38	; 56
     b5a:	ef 2e       	mov	r14, r31
     b5c:	f0 2d       	mov	r31, r0
     b5e:	0e ad       	ldd	r16, Y+62	; 0x3e
     b60:	1f ad       	ldd	r17, Y+63	; 0x3f
     b62:	ce 01       	movw	r24, r28
     b64:	80 5c       	subi	r24, 0xC0	; 192
     b66:	9f 4f       	sbci	r25, 0xFF	; 255
     b68:	fc 01       	movw	r30, r24
     b6a:	20 81       	ld	r18, Z
     b6c:	ce 01       	movw	r24, r28
     b6e:	8f 5b       	subi	r24, 0xBF	; 191
     b70:	9f 4f       	sbci	r25, 0xFF	; 255
     b72:	fc 01       	movw	r30, r24
     b74:	30 81       	ld	r19, Z
     b76:	ce 01       	movw	r24, r28
     b78:	8e 5b       	subi	r24, 0xBE	; 190
     b7a:	9f 4f       	sbci	r25, 0xFF	; 255
     b7c:	fc 01       	movw	r30, r24
     b7e:	40 81       	ld	r20, Z
     b80:	ce 01       	movw	r24, r28
     b82:	8d 5b       	subi	r24, 0xBD	; 189
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	fc 01       	movw	r30, r24
     b88:	50 81       	ld	r21, Z
     b8a:	ce 01       	movw	r24, r28
     b8c:	8c 5b       	subi	r24, 0xBC	; 188
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	fc 01       	movw	r30, r24
     b92:	60 81       	ld	r22, Z
     b94:	ce 01       	movw	r24, r28
     b96:	8b 5b       	subi	r24, 0xBB	; 187
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	fc 01       	movw	r30, r24
     b9c:	70 81       	ld	r23, Z
     b9e:	ce 01       	movw	r24, r28
     ba0:	8a 5b       	subi	r24, 0xBA	; 186
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	fc 01       	movw	r30, r24
     ba6:	80 81       	ld	r24, Z
     ba8:	fe 01       	movw	r30, r28
     baa:	e9 5b       	subi	r30, 0xB9	; 185
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	90 81       	ld	r25, Z
     bb0:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
	LCD_8_CMD_Write(CopyLCD, 0x80);
     bb4:	68 94       	set
     bb6:	ee 24       	eor	r14, r14
     bb8:	e7 f8       	bld	r14, 7
     bba:	0e ad       	ldd	r16, Y+62	; 0x3e
     bbc:	1f ad       	ldd	r17, Y+63	; 0x3f
     bbe:	ce 01       	movw	r24, r28
     bc0:	80 5c       	subi	r24, 0xC0	; 192
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 81       	ld	r18, Z
     bc8:	ce 01       	movw	r24, r28
     bca:	8f 5b       	subi	r24, 0xBF	; 191
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	fc 01       	movw	r30, r24
     bd0:	30 81       	ld	r19, Z
     bd2:	ce 01       	movw	r24, r28
     bd4:	8e 5b       	subi	r24, 0xBE	; 190
     bd6:	9f 4f       	sbci	r25, 0xFF	; 255
     bd8:	fc 01       	movw	r30, r24
     bda:	40 81       	ld	r20, Z
     bdc:	ce 01       	movw	r24, r28
     bde:	8d 5b       	subi	r24, 0xBD	; 189
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	fc 01       	movw	r30, r24
     be4:	50 81       	ld	r21, Z
     be6:	ce 01       	movw	r24, r28
     be8:	8c 5b       	subi	r24, 0xBC	; 188
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	fc 01       	movw	r30, r24
     bee:	60 81       	ld	r22, Z
     bf0:	ce 01       	movw	r24, r28
     bf2:	8b 5b       	subi	r24, 0xBB	; 187
     bf4:	9f 4f       	sbci	r25, 0xFF	; 255
     bf6:	fc 01       	movw	r30, r24
     bf8:	70 81       	ld	r23, Z
     bfa:	ce 01       	movw	r24, r28
     bfc:	8a 5b       	subi	r24, 0xBA	; 186
     bfe:	9f 4f       	sbci	r25, 0xFF	; 255
     c00:	fc 01       	movw	r30, r24
     c02:	80 81       	ld	r24, Z
     c04:	fe 01       	movw	r30, r28
     c06:	e9 5b       	subi	r30, 0xB9	; 185
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	90 81       	ld	r25, Z
     c0c:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
}
     c10:	00 00       	nop
     c12:	c9 5b       	subi	r28, 0xB9	; 185
     c14:	df 4f       	sbci	r29, 0xFF	; 255
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ef 90       	pop	r14
     c2a:	08 95       	ret

00000c2c <LCD_8_CMD_Write>:

void LCD_8_CMD_Write(LCD_8_MODE CopyLCD , u8 CopyCMD)
{
     c2c:	ef 92       	push	r14
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	2c 97       	sbiw	r28, 0x0c	; 12
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	0a 83       	std	Y+2, r16	; 0x02
     c48:	1b 83       	std	Y+3, r17	; 0x03
     c4a:	2c 83       	std	Y+4, r18	; 0x04
     c4c:	3d 83       	std	Y+5, r19	; 0x05
     c4e:	4e 83       	std	Y+6, r20	; 0x06
     c50:	5f 83       	std	Y+7, r21	; 0x07
     c52:	68 87       	std	Y+8, r22	; 0x08
     c54:	79 87       	std	Y+9, r23	; 0x09
     c56:	8a 87       	std	Y+10, r24	; 0x0a
     c58:	9b 87       	std	Y+11, r25	; 0x0b
     c5a:	ec 86       	std	Y+12, r14	; 0x0c
	u8 Counter = Initial_Counter;
     c5c:	19 82       	std	Y+1, r1	; 0x01

	Dio_setPinVal(CopyLCD.RS , Status_Pin_Low);
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	for(Counter = Initial_Counter; Counter < 8 ; Counter++)
     c66:	19 82       	std	Y+1, r1	; 0x01
     c68:	1d c0       	rjmp	.+58     	; 0xca4 <LCD_8_CMD_Write+0x78>
	{
		Dio_setPinVal(CopyLCD.port[Counter], ((CopyCMD >> Counter) & (u8)0x01));
     c6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	29 81       	ldd	r18, Y+1	; 0x01
     c72:	22 2f       	mov	r18, r18
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <LCD_8_CMD_Write+0x50>
     c78:	95 95       	asr	r25
     c7a:	87 95       	ror	r24
     c7c:	2a 95       	dec	r18
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <LCD_8_CMD_Write+0x4c>
     c80:	48 2f       	mov	r20, r24
     c82:	41 70       	andi	r20, 0x01	; 1
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	9e 01       	movw	r18, r28
     c8c:	2c 5f       	subi	r18, 0xFC	; 252
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	fc 01       	movw	r30, r24
     c96:	80 81       	ld	r24, Z
     c98:	64 2f       	mov	r22, r20
     c9a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
void LCD_8_CMD_Write(LCD_8_MODE CopyLCD , u8 CopyCMD)
{
	u8 Counter = Initial_Counter;

	Dio_setPinVal(CopyLCD.RS , Status_Pin_Low);
	for(Counter = Initial_Counter; Counter < 8 ; Counter++)
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	88 30       	cpi	r24, 0x08	; 8
     ca8:	00 f3       	brcs	.-64     	; 0xc6a <LCD_8_CMD_Write+0x3e>
	{
		Dio_setPinVal(CopyLCD.port[Counter], ((CopyCMD >> Counter) & (u8)0x01));
	}
	LCD_8_SendEnable_Signal(CopyLCD);
     caa:	0a 81       	ldd	r16, Y+2	; 0x02
     cac:	1b 81       	ldd	r17, Y+3	; 0x03
     cae:	2c 81       	ldd	r18, Y+4	; 0x04
     cb0:	3d 81       	ldd	r19, Y+5	; 0x05
     cb2:	4e 81       	ldd	r20, Y+6	; 0x06
     cb4:	5f 81       	ldd	r21, Y+7	; 0x07
     cb6:	68 85       	ldd	r22, Y+8	; 0x08
     cb8:	79 85       	ldd	r23, Y+9	; 0x09
     cba:	8a 85       	ldd	r24, Y+10	; 0x0a
     cbc:	9b 85       	ldd	r25, Y+11	; 0x0b
     cbe:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <LCD_8_SendEnable_Signal>
}
     cc2:	00 00       	nop
     cc4:	2c 96       	adiw	r28, 0x0c	; 12
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ef 90       	pop	r14
     cda:	08 95       	ret

00000cdc <LCD_8_Char_Write>:

void LCD_8_Char_Write(LCD_8_MODE CopyLCD , u8 CopyChar)
{
     cdc:	ef 92       	push	r14
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	2c 97       	sbiw	r28, 0x0c	; 12
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	0a 83       	std	Y+2, r16	; 0x02
     cf8:	1b 83       	std	Y+3, r17	; 0x03
     cfa:	2c 83       	std	Y+4, r18	; 0x04
     cfc:	3d 83       	std	Y+5, r19	; 0x05
     cfe:	4e 83       	std	Y+6, r20	; 0x06
     d00:	5f 83       	std	Y+7, r21	; 0x07
     d02:	68 87       	std	Y+8, r22	; 0x08
     d04:	79 87       	std	Y+9, r23	; 0x09
     d06:	8a 87       	std	Y+10, r24	; 0x0a
     d08:	9b 87       	std	Y+11, r25	; 0x0b
     d0a:	ec 86       	std	Y+12, r14	; 0x0c
	u8 Counter = Initial_Counter;
     d0c:	19 82       	std	Y+1, r1	; 0x01

	Dio_setPinVal(CopyLCD.RS , Status_Pin_High);
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	for(Counter = Initial_Counter; Counter < 8 ; Counter++)
     d16:	19 82       	std	Y+1, r1	; 0x01
     d18:	1d c0       	rjmp	.+58     	; 0xd54 <LCD_8_Char_Write+0x78>
	{
		Dio_setPinVal(CopyLCD.port[Counter], ((CopyChar >> Counter) & (u8)0x01));
     d1a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	29 81       	ldd	r18, Y+1	; 0x01
     d22:	22 2f       	mov	r18, r18
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <LCD_8_Char_Write+0x50>
     d28:	95 95       	asr	r25
     d2a:	87 95       	ror	r24
     d2c:	2a 95       	dec	r18
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <LCD_8_Char_Write+0x4c>
     d30:	48 2f       	mov	r20, r24
     d32:	41 70       	andi	r20, 0x01	; 1
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9e 01       	movw	r18, r28
     d3c:	2c 5f       	subi	r18, 0xFC	; 252
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	fc 01       	movw	r30, r24
     d46:	80 81       	ld	r24, Z
     d48:	64 2f       	mov	r22, r20
     d4a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
void LCD_8_Char_Write(LCD_8_MODE CopyLCD , u8 CopyChar)
{
	u8 Counter = Initial_Counter;

	Dio_setPinVal(CopyLCD.RS , Status_Pin_High);
	for(Counter = Initial_Counter; Counter < 8 ; Counter++)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	8f 5f       	subi	r24, 0xFF	; 255
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	88 30       	cpi	r24, 0x08	; 8
     d58:	00 f3       	brcs	.-64     	; 0xd1a <LCD_8_Char_Write+0x3e>
	{
		Dio_setPinVal(CopyLCD.port[Counter], ((CopyChar >> Counter) & (u8)0x01));
	}
	LCD_8_SendEnable_Signal(CopyLCD);
     d5a:	0a 81       	ldd	r16, Y+2	; 0x02
     d5c:	1b 81       	ldd	r17, Y+3	; 0x03
     d5e:	2c 81       	ldd	r18, Y+4	; 0x04
     d60:	3d 81       	ldd	r19, Y+5	; 0x05
     d62:	4e 81       	ldd	r20, Y+6	; 0x06
     d64:	5f 81       	ldd	r21, Y+7	; 0x07
     d66:	68 85       	ldd	r22, Y+8	; 0x08
     d68:	79 85       	ldd	r23, Y+9	; 0x09
     d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d6e:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <LCD_8_SendEnable_Signal>
}
     d72:	00 00       	nop
     d74:	2c 96       	adiw	r28, 0x0c	; 12
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ef 90       	pop	r14
     d8a:	08 95       	ret

00000d8c <LCD_8_Char_Postion>:

void LCD_8_Char_Postion(LCD_8_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 CopyChar)
{
     d8c:	af 92       	push	r10
     d8e:	cf 92       	push	r12
     d90:	ef 92       	push	r14
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	2d 97       	sbiw	r28, 0x0d	; 13
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	09 83       	std	Y+1, r16	; 0x01
     dac:	1a 83       	std	Y+2, r17	; 0x02
     dae:	2b 83       	std	Y+3, r18	; 0x03
     db0:	3c 83       	std	Y+4, r19	; 0x04
     db2:	4d 83       	std	Y+5, r20	; 0x05
     db4:	5e 83       	std	Y+6, r21	; 0x06
     db6:	6f 83       	std	Y+7, r22	; 0x07
     db8:	78 87       	std	Y+8, r23	; 0x08
     dba:	89 87       	std	Y+9, r24	; 0x09
     dbc:	9a 87       	std	Y+10, r25	; 0x0a
     dbe:	eb 86       	std	Y+11, r14	; 0x0b
     dc0:	cc 86       	std	Y+12, r12	; 0x0c
     dc2:	ad 86       	std	Y+13, r10	; 0x0d
	LCD_8_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
     dc4:	cc 84       	ldd	r12, Y+12	; 0x0c
     dc6:	eb 84       	ldd	r14, Y+11	; 0x0b
     dc8:	09 81       	ldd	r16, Y+1	; 0x01
     dca:	1a 81       	ldd	r17, Y+2	; 0x02
     dcc:	2b 81       	ldd	r18, Y+3	; 0x03
     dce:	3c 81       	ldd	r19, Y+4	; 0x04
     dd0:	4d 81       	ldd	r20, Y+5	; 0x05
     dd2:	5e 81       	ldd	r21, Y+6	; 0x06
     dd4:	6f 81       	ldd	r22, Y+7	; 0x07
     dd6:	78 85       	ldd	r23, Y+8	; 0x08
     dd8:	89 85       	ldd	r24, Y+9	; 0x09
     dda:	9a 85       	ldd	r25, Y+10	; 0x0a
     ddc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_8_SetCursor_Position>
	LCD_8_Char_Write(CopyLCD , CopyChar);
     de0:	ed 84       	ldd	r14, Y+13	; 0x0d
     de2:	09 81       	ldd	r16, Y+1	; 0x01
     de4:	1a 81       	ldd	r17, Y+2	; 0x02
     de6:	2b 81       	ldd	r18, Y+3	; 0x03
     de8:	3c 81       	ldd	r19, Y+4	; 0x04
     dea:	4d 81       	ldd	r20, Y+5	; 0x05
     dec:	5e 81       	ldd	r21, Y+6	; 0x06
     dee:	6f 81       	ldd	r22, Y+7	; 0x07
     df0:	78 85       	ldd	r23, Y+8	; 0x08
     df2:	89 85       	ldd	r24, Y+9	; 0x09
     df4:	9a 85       	ldd	r25, Y+10	; 0x0a
     df6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCD_8_Char_Write>
}
     dfa:	00 00       	nop
     dfc:	2d 96       	adiw	r28, 0x0d	; 13
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ef 90       	pop	r14
     e12:	cf 90       	pop	r12
     e14:	af 90       	pop	r10
     e16:	08 95       	ret

00000e18 <LCD_8_String_Write>:

void LCD_8_String_Write(LCD_8_MODE CopyLCD , u8 *CopySTR)
{
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	2c 97       	sbiw	r28, 0x0c	; 12
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	09 83       	std	Y+1, r16	; 0x01
     e36:	1a 83       	std	Y+2, r17	; 0x02
     e38:	2b 83       	std	Y+3, r18	; 0x03
     e3a:	3c 83       	std	Y+4, r19	; 0x04
     e3c:	4d 83       	std	Y+5, r20	; 0x05
     e3e:	5e 83       	std	Y+6, r21	; 0x06
     e40:	6f 83       	std	Y+7, r22	; 0x07
     e42:	78 87       	std	Y+8, r23	; 0x08
     e44:	89 87       	std	Y+9, r24	; 0x09
     e46:	9a 87       	std	Y+10, r25	; 0x0a
     e48:	fc 86       	std	Y+12, r15	; 0x0c
     e4a:	eb 86       	std	Y+11, r14	; 0x0b
	while(*CopySTR)
     e4c:	16 c0       	rjmp	.+44     	; 0xe7a <LCD_8_String_Write+0x62>
	{
		LCD_8_Char_Write(CopyLCD, *CopySTR++);
     e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e50:	9c 85       	ldd	r25, Y+12	; 0x0c
     e52:	9c 01       	movw	r18, r24
     e54:	2f 5f       	subi	r18, 0xFF	; 255
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
     e58:	3c 87       	std	Y+12, r19	; 0x0c
     e5a:	2b 87       	std	Y+11, r18	; 0x0b
     e5c:	fc 01       	movw	r30, r24
     e5e:	80 81       	ld	r24, Z
     e60:	e8 2e       	mov	r14, r24
     e62:	09 81       	ldd	r16, Y+1	; 0x01
     e64:	1a 81       	ldd	r17, Y+2	; 0x02
     e66:	2b 81       	ldd	r18, Y+3	; 0x03
     e68:	3c 81       	ldd	r19, Y+4	; 0x04
     e6a:	4d 81       	ldd	r20, Y+5	; 0x05
     e6c:	5e 81       	ldd	r21, Y+6	; 0x06
     e6e:	6f 81       	ldd	r22, Y+7	; 0x07
     e70:	78 85       	ldd	r23, Y+8	; 0x08
     e72:	89 85       	ldd	r24, Y+9	; 0x09
     e74:	9a 85       	ldd	r25, Y+10	; 0x0a
     e76:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCD_8_Char_Write>
	LCD_8_Char_Write(CopyLCD , CopyChar);
}

void LCD_8_String_Write(LCD_8_MODE CopyLCD , u8 *CopySTR)
{
	while(*CopySTR)
     e7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e7e:	fc 01       	movw	r30, r24
     e80:	80 81       	ld	r24, Z
     e82:	88 23       	and	r24, r24
     e84:	21 f7       	brne	.-56     	; 0xe4e <LCD_8_String_Write+0x36>
	{
		LCD_8_Char_Write(CopyLCD, *CopySTR++);
	}
}
     e86:	00 00       	nop
     e88:	2c 96       	adiw	r28, 0x0c	; 12
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	08 95       	ret

00000ea2 <LCD_8_STR_Write_Postion>:
void LCD_8_STR_Write_Postion(LCD_8_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	ef 92       	push	r14
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	2e 97       	sbiw	r28, 0x0e	; 14
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	09 83       	std	Y+1, r16	; 0x01
     ec4:	1a 83       	std	Y+2, r17	; 0x02
     ec6:	2b 83       	std	Y+3, r18	; 0x03
     ec8:	3c 83       	std	Y+4, r19	; 0x04
     eca:	4d 83       	std	Y+5, r20	; 0x05
     ecc:	5e 83       	std	Y+6, r21	; 0x06
     ece:	6f 83       	std	Y+7, r22	; 0x07
     ed0:	78 87       	std	Y+8, r23	; 0x08
     ed2:	89 87       	std	Y+9, r24	; 0x09
     ed4:	9a 87       	std	Y+10, r25	; 0x0a
     ed6:	eb 86       	std	Y+11, r14	; 0x0b
     ed8:	cc 86       	std	Y+12, r12	; 0x0c
     eda:	be 86       	std	Y+14, r11	; 0x0e
     edc:	ad 86       	std	Y+13, r10	; 0x0d
	LCD_8_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
     ede:	cc 84       	ldd	r12, Y+12	; 0x0c
     ee0:	eb 84       	ldd	r14, Y+11	; 0x0b
     ee2:	09 81       	ldd	r16, Y+1	; 0x01
     ee4:	1a 81       	ldd	r17, Y+2	; 0x02
     ee6:	2b 81       	ldd	r18, Y+3	; 0x03
     ee8:	3c 81       	ldd	r19, Y+4	; 0x04
     eea:	4d 81       	ldd	r20, Y+5	; 0x05
     eec:	5e 81       	ldd	r21, Y+6	; 0x06
     eee:	6f 81       	ldd	r22, Y+7	; 0x07
     ef0:	78 85       	ldd	r23, Y+8	; 0x08
     ef2:	89 85       	ldd	r24, Y+9	; 0x09
     ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_8_SetCursor_Position>
	while(*CopySTR)
     efa:	16 c0       	rjmp	.+44     	; 0xf28 <LCD_8_STR_Write_Postion+0x86>
	{
		LCD_8_Char_Write(CopyLCD, *CopySTR++);
     efc:	8d 85       	ldd	r24, Y+13	; 0x0d
     efe:	9e 85       	ldd	r25, Y+14	; 0x0e
     f00:	9c 01       	movw	r18, r24
     f02:	2f 5f       	subi	r18, 0xFF	; 255
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	3e 87       	std	Y+14, r19	; 0x0e
     f08:	2d 87       	std	Y+13, r18	; 0x0d
     f0a:	fc 01       	movw	r30, r24
     f0c:	80 81       	ld	r24, Z
     f0e:	e8 2e       	mov	r14, r24
     f10:	09 81       	ldd	r16, Y+1	; 0x01
     f12:	1a 81       	ldd	r17, Y+2	; 0x02
     f14:	2b 81       	ldd	r18, Y+3	; 0x03
     f16:	3c 81       	ldd	r19, Y+4	; 0x04
     f18:	4d 81       	ldd	r20, Y+5	; 0x05
     f1a:	5e 81       	ldd	r21, Y+6	; 0x06
     f1c:	6f 81       	ldd	r22, Y+7	; 0x07
     f1e:	78 85       	ldd	r23, Y+8	; 0x08
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCD_8_Char_Write>
	}
}
void LCD_8_STR_Write_Postion(LCD_8_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
	LCD_8_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
	while(*CopySTR)
     f28:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2c:	fc 01       	movw	r30, r24
     f2e:	80 81       	ld	r24, Z
     f30:	88 23       	and	r24, r24
     f32:	21 f7       	brne	.-56     	; 0xefc <LCD_8_STR_Write_Postion+0x5a>
	{
		LCD_8_Char_Write(CopyLCD, *CopySTR++);
	}
}
     f34:	00 00       	nop
     f36:	2e 96       	adiw	r28, 0x0e	; 14
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ef 90       	pop	r14
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	08 95       	ret

00000f54 <LCD_4_INIT>:
/************************************************************************************************************************/


/********** SECTION : Functions Definitions 4 Bit Mode **********/
void LCD_4_INIT(LCD_4_MODE CopyLCD)
{
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	c3 54       	subi	r28, 0x43	; 67
     f5e:	d1 09       	sbc	r29, r1
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	4e af       	std	Y+62, r20	; 0x3e
     f6c:	5f af       	std	Y+63, r21	; 0x3f
     f6e:	9e 01       	movw	r18, r28
     f70:	20 5c       	subi	r18, 0xC0	; 192
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	f9 01       	movw	r30, r18
     f76:	60 83       	st	Z, r22
     f78:	9e 01       	movw	r18, r28
     f7a:	2f 5b       	subi	r18, 0xBF	; 191
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	f9 01       	movw	r30, r18
     f80:	70 83       	st	Z, r23
     f82:	9e 01       	movw	r18, r28
     f84:	2e 5b       	subi	r18, 0xBE	; 190
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	f9 01       	movw	r30, r18
     f8a:	80 83       	st	Z, r24
     f8c:	9e 01       	movw	r18, r28
     f8e:	2d 5b       	subi	r18, 0xBD	; 189
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	f9 01       	movw	r30, r18
     f94:	90 83       	st	Z, r25
	u8 Counter = Initial_Counter;
     f96:	19 82       	std	Y+1, r1	; 0x01

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
     f98:	8f ad       	ldd	r24, Y+63	; 0x3f
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);
     fa0:	8e ad       	ldd	r24, Y+62	; 0x3e
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     fa8:	19 82       	std	Y+1, r1	; 0x01
     faa:	10 c0       	rjmp	.+32     	; 0xfcc <LCD_4_INIT+0x78>
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9e 01       	movw	r18, r28
     fb4:	20 5c       	subi	r18, 0xC0	; 192
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	fc 01       	movw	r30, r24
     fbe:	80 81       	ld	r24, Z
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	u8 Counter = Initial_Counter;

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	68 f3       	brcs	.-38     	; 0xfac <LCD_4_INIT+0x58>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a0 ea       	ldi	r26, 0xA0	; 160
     fd8:	b1 e4       	ldi	r27, 0x41	; 65
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	9b 83       	std	Y+3, r25	; 0x03
     fde:	ac 83       	std	Y+4, r26	; 0x04
     fe0:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	53 e4       	ldi	r21, 0x43	; 67
     fea:	6a 81       	ldd	r22, Y+2	; 0x02
     fec:	7b 81       	ldd	r23, Y+3	; 0x03
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	9d 81       	ldd	r25, Y+5	; 0x05
     ff2:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	8c ab       	std	Y+52, r24	; 0x34
     ffc:	9d ab       	std	Y+53, r25	; 0x35
     ffe:	ae ab       	std	Y+54, r26	; 0x36
    1000:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	6c a9       	ldd	r22, Y+52	; 0x34
    100c:	7d a9       	ldd	r23, Y+53	; 0x35
    100e:	8e a9       	ldd	r24, Y+54	; 0x36
    1010:	9f a9       	ldd	r25, Y+55	; 0x37
    1012:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
    1016:	88 23       	and	r24, r24
    1018:	2c f4       	brge	.+10     	; 0x1024 <LCD_4_INIT+0xd0>
		__ticks = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	99 af       	std	Y+57, r25	; 0x39
    1020:	88 af       	std	Y+56, r24	; 0x38
    1022:	3f c0       	rjmp	.+126    	; 0x10a2 <LCD_4_INIT+0x14e>
	else if (__tmp > 65535)
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	6c a9       	ldd	r22, Y+52	; 0x34
    102e:	7d a9       	ldd	r23, Y+53	; 0x35
    1030:	8e a9       	ldd	r24, Y+54	; 0x36
    1032:	9f a9       	ldd	r25, Y+55	; 0x37
    1034:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    1038:	18 16       	cp	r1, r24
    103a:	4c f5       	brge	.+82     	; 0x108e <LCD_4_INIT+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	6a 81       	ldd	r22, Y+2	; 0x02
    1046:	7b 81       	ldd	r23, Y+3	; 0x03
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	99 af       	std	Y+57, r25	; 0x39
    1062:	88 af       	std	Y+56, r24	; 0x38
    1064:	0f c0       	rjmp	.+30     	; 0x1084 <LCD_4_INIT+0x130>
    1066:	89 e1       	ldi	r24, 0x19	; 25
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9b af       	std	Y+59, r25	; 0x3b
    106c:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    106e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1070:	9b ad       	ldd	r25, Y+59	; 0x3b
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <LCD_4_INIT+0x11e>
    1076:	9b af       	std	Y+59, r25	; 0x3b
    1078:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107a:	88 ad       	ldd	r24, Y+56	; 0x38
    107c:	99 ad       	ldd	r25, Y+57	; 0x39
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	99 af       	std	Y+57, r25	; 0x39
    1082:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1084:	88 ad       	ldd	r24, Y+56	; 0x38
    1086:	99 ad       	ldd	r25, Y+57	; 0x39
    1088:	89 2b       	or	r24, r25
    108a:	69 f7       	brne	.-38     	; 0x1066 <LCD_4_INIT+0x112>
    108c:	14 c0       	rjmp	.+40     	; 0x10b6 <LCD_4_INIT+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108e:	6c a9       	ldd	r22, Y+52	; 0x34
    1090:	7d a9       	ldd	r23, Y+53	; 0x35
    1092:	8e a9       	ldd	r24, Y+54	; 0x36
    1094:	9f a9       	ldd	r25, Y+55	; 0x37
    1096:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	99 af       	std	Y+57, r25	; 0x39
    10a0:	88 af       	std	Y+56, r24	; 0x38
    10a2:	88 ad       	ldd	r24, Y+56	; 0x38
    10a4:	99 ad       	ldd	r25, Y+57	; 0x39
    10a6:	9d af       	std	Y+61, r25	; 0x3d
    10a8:	8c af       	std	Y+60, r24	; 0x3c
    10aa:	8c ad       	ldd	r24, Y+60	; 0x3c
    10ac:	9d ad       	ldd	r25, Y+61	; 0x3d
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <LCD_4_INIT+0x15a>
    10b2:	9d af       	std	Y+61, r25	; 0x3d
    10b4:	8c af       	std	Y+60, r24	; 0x3c
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
	}
	_delay_ms(20);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
    10b6:	28 e3       	ldi	r18, 0x38	; 56
    10b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    10ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    10bc:	ce 01       	movw	r24, r28
    10be:	80 5c       	subi	r24, 0xC0	; 192
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	fc 01       	movw	r30, r24
    10c4:	60 81       	ld	r22, Z
    10c6:	ce 01       	movw	r24, r28
    10c8:	8f 5b       	subi	r24, 0xBF	; 191
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	fc 01       	movw	r30, r24
    10ce:	70 81       	ld	r23, Z
    10d0:	ce 01       	movw	r24, r28
    10d2:	8e 5b       	subi	r24, 0xBE	; 190
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	fc 01       	movw	r30, r24
    10d8:	80 81       	ld	r24, Z
    10da:	fe 01       	movw	r30, r28
    10dc:	ed 5b       	subi	r30, 0xBD	; 189
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	90 81       	ld	r25, Z
    10e2:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 ea       	ldi	r26, 0xA0	; 160
    10ec:	b0 e4       	ldi	r27, 0x40	; 64
    10ee:	8e 83       	std	Y+6, r24	; 0x06
    10f0:	9f 83       	std	Y+7, r25	; 0x07
    10f2:	a8 87       	std	Y+8, r26	; 0x08
    10f4:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	4a e7       	ldi	r20, 0x7A	; 122
    10fc:	53 e4       	ldi	r21, 0x43	; 67
    10fe:	6e 81       	ldd	r22, Y+6	; 0x06
    1100:	7f 81       	ldd	r23, Y+7	; 0x07
    1102:	88 85       	ldd	r24, Y+8	; 0x08
    1104:	99 85       	ldd	r25, Y+9	; 0x09
    1106:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	8a a7       	std	Y+42, r24	; 0x2a
    1110:	9b a7       	std	Y+43, r25	; 0x2b
    1112:	ac a7       	std	Y+44, r26	; 0x2c
    1114:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	5f e3       	ldi	r21, 0x3F	; 63
    111e:	6a a5       	ldd	r22, Y+42	; 0x2a
    1120:	7b a5       	ldd	r23, Y+43	; 0x2b
    1122:	8c a5       	ldd	r24, Y+44	; 0x2c
    1124:	9d a5       	ldd	r25, Y+45	; 0x2d
    1126:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
    112a:	88 23       	and	r24, r24
    112c:	2c f4       	brge	.+10     	; 0x1138 <LCD_4_INIT+0x1e4>
		__ticks = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9f a7       	std	Y+47, r25	; 0x2f
    1134:	8e a7       	std	Y+46, r24	; 0x2e
    1136:	3f c0       	rjmp	.+126    	; 0x11b6 <LCD_4_INIT+0x262>
	else if (__tmp > 65535)
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	6a a5       	ldd	r22, Y+42	; 0x2a
    1142:	7b a5       	ldd	r23, Y+43	; 0x2b
    1144:	8c a5       	ldd	r24, Y+44	; 0x2c
    1146:	9d a5       	ldd	r25, Y+45	; 0x2d
    1148:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    114c:	18 16       	cp	r1, r24
    114e:	4c f5       	brge	.+82     	; 0x11a2 <LCD_4_INIT+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	6e 81       	ldd	r22, Y+6	; 0x06
    115a:	7f 81       	ldd	r23, Y+7	; 0x07
    115c:	88 85       	ldd	r24, Y+8	; 0x08
    115e:	99 85       	ldd	r25, Y+9	; 0x09
    1160:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9f a7       	std	Y+47, r25	; 0x2f
    1176:	8e a7       	std	Y+46, r24	; 0x2e
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <LCD_4_INIT+0x244>
    117a:	89 e1       	ldi	r24, 0x19	; 25
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	99 ab       	std	Y+49, r25	; 0x31
    1180:	88 ab       	std	Y+48, r24	; 0x30
    1182:	88 a9       	ldd	r24, Y+48	; 0x30
    1184:	99 a9       	ldd	r25, Y+49	; 0x31
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_4_INIT+0x232>
    118a:	99 ab       	std	Y+49, r25	; 0x31
    118c:	88 ab       	std	Y+48, r24	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1190:	9f a5       	ldd	r25, Y+47	; 0x2f
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	9f a7       	std	Y+47, r25	; 0x2f
    1196:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1198:	8e a5       	ldd	r24, Y+46	; 0x2e
    119a:	9f a5       	ldd	r25, Y+47	; 0x2f
    119c:	89 2b       	or	r24, r25
    119e:	69 f7       	brne	.-38     	; 0x117a <LCD_4_INIT+0x226>
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <LCD_4_INIT+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a2:	6a a5       	ldd	r22, Y+42	; 0x2a
    11a4:	7b a5       	ldd	r23, Y+43	; 0x2b
    11a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    11a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    11aa:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9f a7       	std	Y+47, r25	; 0x2f
    11b4:	8e a7       	std	Y+46, r24	; 0x2e
    11b6:	8e a5       	ldd	r24, Y+46	; 0x2e
    11b8:	9f a5       	ldd	r25, Y+47	; 0x2f
    11ba:	9b ab       	std	Y+51, r25	; 0x33
    11bc:	8a ab       	std	Y+50, r24	; 0x32
    11be:	8a a9       	ldd	r24, Y+50	; 0x32
    11c0:	9b a9       	ldd	r25, Y+51	; 0x33
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <LCD_4_INIT+0x26e>
    11c6:	9b ab       	std	Y+51, r25	; 0x33
    11c8:	8a ab       	std	Y+50, r24	; 0x32
	_delay_ms(5);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
    11ca:	28 e3       	ldi	r18, 0x38	; 56
    11cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    11ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    11d0:	ce 01       	movw	r24, r28
    11d2:	80 5c       	subi	r24, 0xC0	; 192
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	fc 01       	movw	r30, r24
    11d8:	60 81       	ld	r22, Z
    11da:	ce 01       	movw	r24, r28
    11dc:	8f 5b       	subi	r24, 0xBF	; 191
    11de:	9f 4f       	sbci	r25, 0xFF	; 255
    11e0:	fc 01       	movw	r30, r24
    11e2:	70 81       	ld	r23, Z
    11e4:	ce 01       	movw	r24, r28
    11e6:	8e 5b       	subi	r24, 0xBE	; 190
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	fe 01       	movw	r30, r28
    11f0:	ed 5b       	subi	r30, 0xBD	; 189
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	90 81       	ld	r25, Z
    11f6:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a6 e1       	ldi	r26, 0x16	; 22
    1200:	b3 e4       	ldi	r27, 0x43	; 67
    1202:	8a 87       	std	Y+10, r24	; 0x0a
    1204:	9b 87       	std	Y+11, r25	; 0x0b
    1206:	ac 87       	std	Y+12, r26	; 0x0c
    1208:	bd 87       	std	Y+13, r27	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    120a:	2b ea       	ldi	r18, 0xAB	; 171
    120c:	3a ea       	ldi	r19, 0xAA	; 170
    120e:	4a ea       	ldi	r20, 0xAA	; 170
    1210:	5e e3       	ldi	r21, 0x3E	; 62
    1212:	6a 85       	ldd	r22, Y+10	; 0x0a
    1214:	7b 85       	ldd	r23, Y+11	; 0x0b
    1216:	8c 85       	ldd	r24, Y+12	; 0x0c
    1218:	9d 85       	ldd	r25, Y+13	; 0x0d
    121a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	8e 87       	std	Y+14, r24	; 0x0e
    1224:	9f 87       	std	Y+15, r25	; 0x0f
    1226:	a8 8b       	std	Y+16, r26	; 0x10
    1228:	b9 8b       	std	Y+17, r27	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e8       	ldi	r20, 0x80	; 128
    1230:	5e e3       	ldi	r21, 0x3E	; 62
    1232:	6a 85       	ldd	r22, Y+10	; 0x0a
    1234:	7b 85       	ldd	r23, Y+11	; 0x0b
    1236:	8c 85       	ldd	r24, Y+12	; 0x0c
    1238:	9d 85       	ldd	r25, Y+13	; 0x0d
    123a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8a 8b       	std	Y+18, r24	; 0x12
    1244:	9b 8b       	std	Y+19, r25	; 0x13
    1246:	ac 8b       	std	Y+20, r26	; 0x14
    1248:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e8       	ldi	r20, 0x80	; 128
    1250:	5f e3       	ldi	r21, 0x3F	; 63
    1252:	6e 85       	ldd	r22, Y+14	; 0x0e
    1254:	7f 85       	ldd	r23, Y+15	; 0x0f
    1256:	88 89       	ldd	r24, Y+16	; 0x10
    1258:	99 89       	ldd	r25, Y+17	; 0x11
    125a:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
    125e:	88 23       	and	r24, r24
    1260:	1c f4       	brge	.+6      	; 0x1268 <LCD_4_INIT+0x314>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	8e 8b       	std	Y+22, r24	; 0x16
    1266:	b2 c0       	rjmp	.+356    	; 0x13cc <LCD_4_INIT+0x478>
	else if (__tmp2 > 65535)
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	6a 89       	ldd	r22, Y+18	; 0x12
    1272:	7b 89       	ldd	r23, Y+19	; 0x13
    1274:	8c 89       	ldd	r24, Y+20	; 0x14
    1276:	9d 89       	ldd	r25, Y+21	; 0x15
    1278:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    127c:	18 16       	cp	r1, r24
    127e:	0c f0       	brlt	.+2      	; 0x1282 <LCD_4_INIT+0x32e>
    1280:	7b c0       	rjmp	.+246    	; 0x1378 <LCD_4_INIT+0x424>
	{
		_delay_ms(__us / 1000.0);
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a e7       	ldi	r20, 0x7A	; 122
    1288:	54 e4       	ldi	r21, 0x44	; 68
    128a:	6a 85       	ldd	r22, Y+10	; 0x0a
    128c:	7b 85       	ldd	r23, Y+11	; 0x0b
    128e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1290:	9d 85       	ldd	r25, Y+13	; 0x0d
    1292:	0e 94 df 14 	call	0x29be	; 0x29be <__divsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	8f 8b       	std	Y+23, r24	; 0x17
    129c:	98 8f       	std	Y+24, r25	; 0x18
    129e:	a9 8f       	std	Y+25, r26	; 0x19
    12a0:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	4a e7       	ldi	r20, 0x7A	; 122
    12a8:	53 e4       	ldi	r21, 0x43	; 67
    12aa:	6f 89       	ldd	r22, Y+23	; 0x17
    12ac:	78 8d       	ldd	r23, Y+24	; 0x18
    12ae:	89 8d       	ldd	r24, Y+25	; 0x19
    12b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12b2:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	8b 8f       	std	Y+27, r24	; 0x1b
    12bc:	9c 8f       	std	Y+28, r25	; 0x1c
    12be:	ad 8f       	std	Y+29, r26	; 0x1d
    12c0:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e8       	ldi	r20, 0x80	; 128
    12c8:	5f e3       	ldi	r21, 0x3F	; 63
    12ca:	6b 8d       	ldd	r22, Y+27	; 0x1b
    12cc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    12ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12d2:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
    12d6:	88 23       	and	r24, r24
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <LCD_4_INIT+0x390>
		__ticks = 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	98 a3       	std	Y+32, r25	; 0x20
    12e0:	8f 8f       	std	Y+31, r24	; 0x1f
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <LCD_4_INIT+0x40e>
	else if (__tmp > 65535)
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	3f ef       	ldi	r19, 0xFF	; 255
    12e8:	4f e7       	ldi	r20, 0x7F	; 127
    12ea:	57 e4       	ldi	r21, 0x47	; 71
    12ec:	6b 8d       	ldd	r22, Y+27	; 0x1b
    12ee:	7c 8d       	ldd	r23, Y+28	; 0x1c
    12f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12f4:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	4c f5       	brge	.+82     	; 0x134e <LCD_4_INIT+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e2       	ldi	r20, 0x20	; 32
    1302:	51 e4       	ldi	r21, 0x41	; 65
    1304:	6f 89       	ldd	r22, Y+23	; 0x17
    1306:	78 8d       	ldd	r23, Y+24	; 0x18
    1308:	89 8d       	ldd	r24, Y+25	; 0x19
    130a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    130c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	bc 01       	movw	r22, r24
    1316:	cd 01       	movw	r24, r26
    1318:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	98 a3       	std	Y+32, r25	; 0x20
    1322:	8f 8f       	std	Y+31, r24	; 0x1f
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <LCD_4_INIT+0x3f0>
    1326:	89 e1       	ldi	r24, 0x19	; 25
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9a a3       	std	Y+34, r25	; 0x22
    132c:	89 a3       	std	Y+33, r24	; 0x21
    132e:	89 a1       	ldd	r24, Y+33	; 0x21
    1330:	9a a1       	ldd	r25, Y+34	; 0x22
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <LCD_4_INIT+0x3de>
    1336:	9a a3       	std	Y+34, r25	; 0x22
    1338:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    133c:	98 a1       	ldd	r25, Y+32	; 0x20
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	98 a3       	std	Y+32, r25	; 0x20
    1342:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1344:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1346:	98 a1       	ldd	r25, Y+32	; 0x20
    1348:	89 2b       	or	r24, r25
    134a:	69 f7       	brne	.-38     	; 0x1326 <LCD_4_INIT+0x3d2>
    134c:	3f c0       	rjmp	.+126    	; 0x13cc <LCD_4_INIT+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1350:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1352:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1354:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1356:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	98 a3       	std	Y+32, r25	; 0x20
    1360:	8f 8f       	std	Y+31, r24	; 0x1f
    1362:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1364:	98 a1       	ldd	r25, Y+32	; 0x20
    1366:	9c a3       	std	Y+36, r25	; 0x24
    1368:	8b a3       	std	Y+35, r24	; 0x23
    136a:	8b a1       	ldd	r24, Y+35	; 0x23
    136c:	9c a1       	ldd	r25, Y+36	; 0x24
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_4_INIT+0x41a>
    1372:	9c a3       	std	Y+36, r25	; 0x24
    1374:	8b a3       	std	Y+35, r24	; 0x23
    1376:	2a c0       	rjmp	.+84     	; 0x13cc <LCD_4_INIT+0x478>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	53 e4       	ldi	r21, 0x43	; 67
    1380:	6e 85       	ldd	r22, Y+14	; 0x0e
    1382:	7f 85       	ldd	r23, Y+15	; 0x0f
    1384:	88 89       	ldd	r24, Y+16	; 0x10
    1386:	99 89       	ldd	r25, Y+17	; 0x11
    1388:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    138c:	18 16       	cp	r1, r24
    138e:	ac f4       	brge	.+42     	; 0x13ba <LCD_4_INIT+0x466>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1390:	6a 89       	ldd	r22, Y+18	; 0x12
    1392:	7b 89       	ldd	r23, Y+19	; 0x13
    1394:	8c 89       	ldd	r24, Y+20	; 0x14
    1396:	9d 89       	ldd	r25, Y+21	; 0x15
    1398:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9e a3       	std	Y+38, r25	; 0x26
    13a2:	8d a3       	std	Y+37, r24	; 0x25
    13a4:	8d a1       	ldd	r24, Y+37	; 0x25
    13a6:	9e a1       	ldd	r25, Y+38	; 0x26
    13a8:	98 a7       	std	Y+40, r25	; 0x28
    13aa:	8f a3       	std	Y+39, r24	; 0x27
    13ac:	8f a1       	ldd	r24, Y+39	; 0x27
    13ae:	98 a5       	ldd	r25, Y+40	; 0x28
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <LCD_4_INIT+0x45c>
    13b4:	98 a7       	std	Y+40, r25	; 0x28
    13b6:	8f a3       	std	Y+39, r24	; 0x27
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <LCD_4_INIT+0x484>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13ba:	6e 85       	ldd	r22, Y+14	; 0x0e
    13bc:	7f 85       	ldd	r23, Y+15	; 0x0f
    13be:	88 89       	ldd	r24, Y+16	; 0x10
    13c0:	99 89       	ldd	r25, Y+17	; 0x11
    13c2:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	8e 8b       	std	Y+22, r24	; 0x16
    13cc:	8e 89       	ldd	r24, Y+22	; 0x16
    13ce:	89 a7       	std	Y+41, r24	; 0x29
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13d0:	89 a5       	ldd	r24, Y+41	; 0x29
    13d2:	8a 95       	dec	r24
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LCD_4_INIT+0x47e>
    13d6:	89 a7       	std	Y+41, r24	; 0x29
	_delay_us(150);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
    13d8:	28 e3       	ldi	r18, 0x38	; 56
    13da:	4e ad       	ldd	r20, Y+62	; 0x3e
    13dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    13de:	ce 01       	movw	r24, r28
    13e0:	80 5c       	subi	r24, 0xC0	; 192
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	fc 01       	movw	r30, r24
    13e6:	60 81       	ld	r22, Z
    13e8:	ce 01       	movw	r24, r28
    13ea:	8f 5b       	subi	r24, 0xBF	; 191
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	fc 01       	movw	r30, r24
    13f0:	70 81       	ld	r23, Z
    13f2:	ce 01       	movw	r24, r28
    13f4:	8e 5b       	subi	r24, 0xBE	; 190
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	fc 01       	movw	r30, r24
    13fa:	80 81       	ld	r24, Z
    13fc:	fe 01       	movw	r30, r28
    13fe:	ed 5b       	subi	r30, 0xBD	; 189
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	90 81       	ld	r25, Z
    1404:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Clear_Dis);
    1408:	21 e0       	ldi	r18, 0x01	; 1
    140a:	4e ad       	ldd	r20, Y+62	; 0x3e
    140c:	5f ad       	ldd	r21, Y+63	; 0x3f
    140e:	ce 01       	movw	r24, r28
    1410:	80 5c       	subi	r24, 0xC0	; 192
    1412:	9f 4f       	sbci	r25, 0xFF	; 255
    1414:	fc 01       	movw	r30, r24
    1416:	60 81       	ld	r22, Z
    1418:	ce 01       	movw	r24, r28
    141a:	8f 5b       	subi	r24, 0xBF	; 191
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	fc 01       	movw	r30, r24
    1420:	70 81       	ld	r23, Z
    1422:	ce 01       	movw	r24, r28
    1424:	8e 5b       	subi	r24, 0xBE	; 190
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	fc 01       	movw	r30, r24
    142a:	80 81       	ld	r24, Z
    142c:	fe 01       	movw	r30, r28
    142e:	ed 5b       	subi	r30, 0xBD	; 189
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	90 81       	ld	r25, Z
    1434:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Return_Home);
    1438:	22 e0       	ldi	r18, 0x02	; 2
    143a:	4e ad       	ldd	r20, Y+62	; 0x3e
    143c:	5f ad       	ldd	r21, Y+63	; 0x3f
    143e:	ce 01       	movw	r24, r28
    1440:	80 5c       	subi	r24, 0xC0	; 192
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	fc 01       	movw	r30, r24
    1446:	60 81       	ld	r22, Z
    1448:	ce 01       	movw	r24, r28
    144a:	8f 5b       	subi	r24, 0xBF	; 191
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	fc 01       	movw	r30, r24
    1450:	70 81       	ld	r23, Z
    1452:	ce 01       	movw	r24, r28
    1454:	8e 5b       	subi	r24, 0xBE	; 190
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	fc 01       	movw	r30, r24
    145a:	80 81       	ld	r24, Z
    145c:	fe 01       	movw	r30, r28
    145e:	ed 5b       	subi	r30, 0xBD	; 189
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	90 81       	ld	r25, Z
    1464:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Entery_INC);
    1468:	26 e0       	ldi	r18, 0x06	; 6
    146a:	4e ad       	ldd	r20, Y+62	; 0x3e
    146c:	5f ad       	ldd	r21, Y+63	; 0x3f
    146e:	ce 01       	movw	r24, r28
    1470:	80 5c       	subi	r24, 0xC0	; 192
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	fc 01       	movw	r30, r24
    1476:	60 81       	ld	r22, Z
    1478:	ce 01       	movw	r24, r28
    147a:	8f 5b       	subi	r24, 0xBF	; 191
    147c:	9f 4f       	sbci	r25, 0xFF	; 255
    147e:	fc 01       	movw	r30, r24
    1480:	70 81       	ld	r23, Z
    1482:	ce 01       	movw	r24, r28
    1484:	8e 5b       	subi	r24, 0xBE	; 190
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	fc 01       	movw	r30, r24
    148a:	80 81       	ld	r24, Z
    148c:	fe 01       	movw	r30, r28
    148e:	ed 5b       	subi	r30, 0xBD	; 189
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	90 81       	ld	r25, Z
    1494:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Dis_ON);
    1498:	2c e0       	ldi	r18, 0x0C	; 12
    149a:	4e ad       	ldd	r20, Y+62	; 0x3e
    149c:	5f ad       	ldd	r21, Y+63	; 0x3f
    149e:	ce 01       	movw	r24, r28
    14a0:	80 5c       	subi	r24, 0xC0	; 192
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	fc 01       	movw	r30, r24
    14a6:	60 81       	ld	r22, Z
    14a8:	ce 01       	movw	r24, r28
    14aa:	8f 5b       	subi	r24, 0xBF	; 191
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	fc 01       	movw	r30, r24
    14b0:	70 81       	ld	r23, Z
    14b2:	ce 01       	movw	r24, r28
    14b4:	8e 5b       	subi	r24, 0xBE	; 190
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	fc 01       	movw	r30, r24
    14ba:	80 81       	ld	r24, Z
    14bc:	fe 01       	movw	r30, r28
    14be:	ed 5b       	subi	r30, 0xBD	; 189
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	90 81       	ld	r25, Z
    14c4:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_4_Bit_Mode);
    14c8:	28 e2       	ldi	r18, 0x28	; 40
    14ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    14cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    14ce:	ce 01       	movw	r24, r28
    14d0:	80 5c       	subi	r24, 0xC0	; 192
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	fc 01       	movw	r30, r24
    14d6:	60 81       	ld	r22, Z
    14d8:	ce 01       	movw	r24, r28
    14da:	8f 5b       	subi	r24, 0xBF	; 191
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	fc 01       	movw	r30, r24
    14e0:	70 81       	ld	r23, Z
    14e2:	ce 01       	movw	r24, r28
    14e4:	8e 5b       	subi	r24, 0xBE	; 190
    14e6:	9f 4f       	sbci	r25, 0xFF	; 255
    14e8:	fc 01       	movw	r30, r24
    14ea:	80 81       	ld	r24, Z
    14ec:	fe 01       	movw	r30, r28
    14ee:	ed 5b       	subi	r30, 0xBD	; 189
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	90 81       	ld	r25, Z
    14f4:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, 0x80);
    14f8:	20 e8       	ldi	r18, 0x80	; 128
    14fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    14fe:	ce 01       	movw	r24, r28
    1500:	80 5c       	subi	r24, 0xC0	; 192
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	fc 01       	movw	r30, r24
    1506:	60 81       	ld	r22, Z
    1508:	ce 01       	movw	r24, r28
    150a:	8f 5b       	subi	r24, 0xBF	; 191
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	fc 01       	movw	r30, r24
    1510:	70 81       	ld	r23, Z
    1512:	ce 01       	movw	r24, r28
    1514:	8e 5b       	subi	r24, 0xBE	; 190
    1516:	9f 4f       	sbci	r25, 0xFF	; 255
    1518:	fc 01       	movw	r30, r24
    151a:	80 81       	ld	r24, Z
    151c:	fe 01       	movw	r30, r28
    151e:	ed 5b       	subi	r30, 0xBD	; 189
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	90 81       	ld	r25, Z
    1524:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
}
    1528:	00 00       	nop
    152a:	cd 5b       	subi	r28, 0xBD	; 189
    152c:	df 4f       	sbci	r29, 0xFF	; 255
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <LCD_4_CMD_Write>:

void LCD_4_CMD_Write(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	27 97       	sbiw	r28, 0x07	; 7
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	49 83       	std	Y+1, r20	; 0x01
    1554:	5a 83       	std	Y+2, r21	; 0x02
    1556:	6b 83       	std	Y+3, r22	; 0x03
    1558:	7c 83       	std	Y+4, r23	; 0x04
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_Low);
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyCMD >> 4);
    1568:	8f 81       	ldd	r24, Y+7	; 0x07
    156a:	82 95       	swap	r24
    156c:	8f 70       	andi	r24, 0x0F	; 15
    156e:	28 2f       	mov	r18, r24
    1570:	49 81       	ldd	r20, Y+1	; 0x01
    1572:	5a 81       	ldd	r21, Y+2	; 0x02
    1574:	6b 81       	ldd	r22, Y+3	; 0x03
    1576:	7c 81       	ldd	r23, Y+4	; 0x04
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    1580:	49 81       	ldd	r20, Y+1	; 0x01
    1582:	5a 81       	ldd	r21, Y+2	; 0x02
    1584:	6b 81       	ldd	r22, Y+3	; 0x03
    1586:	7c 81       	ldd	r23, Y+4	; 0x04
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyCMD);
    1590:	2f 81       	ldd	r18, Y+7	; 0x07
    1592:	49 81       	ldd	r20, Y+1	; 0x01
    1594:	5a 81       	ldd	r21, Y+2	; 0x02
    1596:	6b 81       	ldd	r22, Y+3	; 0x03
    1598:	7c 81       	ldd	r23, Y+4	; 0x04
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    15a2:	49 81       	ldd	r20, Y+1	; 0x01
    15a4:	5a 81       	ldd	r21, Y+2	; 0x02
    15a6:	6b 81       	ldd	r22, Y+3	; 0x03
    15a8:	7c 81       	ldd	r23, Y+4	; 0x04
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_4_SendEnable_Signal>
}
    15b2:	00 00       	nop
    15b4:	27 96       	adiw	r28, 0x07	; 7
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <LCD_4_Char_Write>:

void LCD_4_Char_Write(LCD_4_MODE CopyLCD , u8 CopyChar)
{
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	27 97       	sbiw	r28, 0x07	; 7
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	49 83       	std	Y+1, r20	; 0x01
    15dc:	5a 83       	std	Y+2, r21	; 0x02
    15de:	6b 83       	std	Y+3, r22	; 0x03
    15e0:	7c 83       	std	Y+4, r23	; 0x04
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_High);
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyChar >> 4);
    15f0:	8f 81       	ldd	r24, Y+7	; 0x07
    15f2:	82 95       	swap	r24
    15f4:	8f 70       	andi	r24, 0x0F	; 15
    15f6:	28 2f       	mov	r18, r24
    15f8:	49 81       	ldd	r20, Y+1	; 0x01
    15fa:	5a 81       	ldd	r21, Y+2	; 0x02
    15fc:	6b 81       	ldd	r22, Y+3	; 0x03
    15fe:	7c 81       	ldd	r23, Y+4	; 0x04
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    1608:	49 81       	ldd	r20, Y+1	; 0x01
    160a:	5a 81       	ldd	r21, Y+2	; 0x02
    160c:	6b 81       	ldd	r22, Y+3	; 0x03
    160e:	7c 81       	ldd	r23, Y+4	; 0x04
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyChar);
    1618:	2f 81       	ldd	r18, Y+7	; 0x07
    161a:	49 81       	ldd	r20, Y+1	; 0x01
    161c:	5a 81       	ldd	r21, Y+2	; 0x02
    161e:	6b 81       	ldd	r22, Y+3	; 0x03
    1620:	7c 81       	ldd	r23, Y+4	; 0x04
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    162a:	49 81       	ldd	r20, Y+1	; 0x01
    162c:	5a 81       	ldd	r21, Y+2	; 0x02
    162e:	6b 81       	ldd	r22, Y+3	; 0x03
    1630:	7c 81       	ldd	r23, Y+4	; 0x04
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_4_SendEnable_Signal>
}
    163a:	00 00       	nop
    163c:	27 96       	adiw	r28, 0x07	; 7
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret

0000164e <LCD_4_Char_Postion>:

void LCD_4_Char_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 CopyChar)
{
    164e:	ef 92       	push	r14
    1650:	0f 93       	push	r16
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	29 97       	sbiw	r28, 0x09	; 9
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	49 83       	std	Y+1, r20	; 0x01
    1668:	5a 83       	std	Y+2, r21	; 0x02
    166a:	6b 83       	std	Y+3, r22	; 0x03
    166c:	7c 83       	std	Y+4, r23	; 0x04
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	2f 83       	std	Y+7, r18	; 0x07
    1674:	08 87       	std	Y+8, r16	; 0x08
    1676:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
    1678:	08 85       	ldd	r16, Y+8	; 0x08
    167a:	2f 81       	ldd	r18, Y+7	; 0x07
    167c:	49 81       	ldd	r20, Y+1	; 0x01
    167e:	5a 81       	ldd	r21, Y+2	; 0x02
    1680:	6b 81       	ldd	r22, Y+3	; 0x03
    1682:	7c 81       	ldd	r23, Y+4	; 0x04
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_4_SetCursor_Position>
	LCD_4_Char_Write(CopyLCD , CopyChar);
    168c:	29 85       	ldd	r18, Y+9	; 0x09
    168e:	49 81       	ldd	r20, Y+1	; 0x01
    1690:	5a 81       	ldd	r21, Y+2	; 0x02
    1692:	6b 81       	ldd	r22, Y+3	; 0x03
    1694:	7c 81       	ldd	r23, Y+4	; 0x04
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <LCD_4_Char_Write>
}
    169e:	00 00       	nop
    16a0:	29 96       	adiw	r28, 0x09	; 9
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	0f 91       	pop	r16
    16b2:	ef 90       	pop	r14
    16b4:	08 95       	ret

000016b6 <LCD_4_Str_Write>:

void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	28 97       	sbiw	r28, 0x08	; 8
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	49 83       	std	Y+1, r20	; 0x01
    16cc:	5a 83       	std	Y+2, r21	; 0x02
    16ce:	6b 83       	std	Y+3, r22	; 0x03
    16d0:	7c 83       	std	Y+4, r23	; 0x04
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	38 87       	std	Y+8, r19	; 0x08
    16d8:	2f 83       	std	Y+7, r18	; 0x07
	while(*CopySTR)
    16da:	12 c0       	rjmp	.+36     	; 0x1700 <LCD_4_Str_Write+0x4a>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
    16dc:	8f 81       	ldd	r24, Y+7	; 0x07
    16de:	98 85       	ldd	r25, Y+8	; 0x08
    16e0:	9c 01       	movw	r18, r24
    16e2:	2f 5f       	subi	r18, 0xFF	; 255
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	38 87       	std	Y+8, r19	; 0x08
    16e8:	2f 83       	std	Y+7, r18	; 0x07
    16ea:	fc 01       	movw	r30, r24
    16ec:	80 81       	ld	r24, Z
    16ee:	28 2f       	mov	r18, r24
    16f0:	49 81       	ldd	r20, Y+1	; 0x01
    16f2:	5a 81       	ldd	r21, Y+2	; 0x02
    16f4:	6b 81       	ldd	r22, Y+3	; 0x03
    16f6:	7c 81       	ldd	r23, Y+4	; 0x04
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <LCD_4_Char_Write>
	LCD_4_Char_Write(CopyLCD , CopyChar);
}

void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
	while(*CopySTR)
    1700:	8f 81       	ldd	r24, Y+7	; 0x07
    1702:	98 85       	ldd	r25, Y+8	; 0x08
    1704:	fc 01       	movw	r30, r24
    1706:	80 81       	ld	r24, Z
    1708:	88 23       	and	r24, r24
    170a:	41 f7       	brne	.-48     	; 0x16dc <LCD_4_Str_Write+0x26>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
    170c:	00 00       	nop
    170e:	28 96       	adiw	r28, 0x08	; 8
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <LCD_4_STR_Postion>:

void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	2a 97       	sbiw	r28, 0x0a	; 10
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	49 83       	std	Y+1, r20	; 0x01
    173c:	5a 83       	std	Y+2, r21	; 0x02
    173e:	6b 83       	std	Y+3, r22	; 0x03
    1740:	7c 83       	std	Y+4, r23	; 0x04
    1742:	8d 83       	std	Y+5, r24	; 0x05
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	2f 83       	std	Y+7, r18	; 0x07
    1748:	08 87       	std	Y+8, r16	; 0x08
    174a:	fa 86       	std	Y+10, r15	; 0x0a
    174c:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
    174e:	08 85       	ldd	r16, Y+8	; 0x08
    1750:	2f 81       	ldd	r18, Y+7	; 0x07
    1752:	49 81       	ldd	r20, Y+1	; 0x01
    1754:	5a 81       	ldd	r21, Y+2	; 0x02
    1756:	6b 81       	ldd	r22, Y+3	; 0x03
    1758:	7c 81       	ldd	r23, Y+4	; 0x04
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_4_SetCursor_Position>
	while(*CopySTR)
    1762:	12 c0       	rjmp	.+36     	; 0x1788 <LCD_4_STR_Postion+0x68>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	9c 01       	movw	r18, r24
    176a:	2f 5f       	subi	r18, 0xFF	; 255
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	3a 87       	std	Y+10, r19	; 0x0a
    1770:	29 87       	std	Y+9, r18	; 0x09
    1772:	fc 01       	movw	r30, r24
    1774:	80 81       	ld	r24, Z
    1776:	28 2f       	mov	r18, r24
    1778:	49 81       	ldd	r20, Y+1	; 0x01
    177a:	5a 81       	ldd	r21, Y+2	; 0x02
    177c:	6b 81       	ldd	r22, Y+3	; 0x03
    177e:	7c 81       	ldd	r23, Y+4	; 0x04
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <LCD_4_Char_Write>
}

void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
	while(*CopySTR)
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	9a 85       	ldd	r25, Y+10	; 0x0a
    178c:	fc 01       	movw	r30, r24
    178e:	80 81       	ld	r24, Z
    1790:	88 23       	and	r24, r24
    1792:	41 f7       	brne	.-48     	; 0x1764 <LCD_4_STR_Postion+0x44>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
    1794:	00 00       	nop
    1796:	2a 96       	adiw	r28, 0x0a	; 10
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	08 95       	ret

000017ae <Convert_u8_to_String>:
/************************************************************************************************************************/

/********** SECTION : Functions Declarations Convert **********/

void Convert_u8_to_String(u8 CopyValueu8 , u8 *CopySTR)
{
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <Convert_u8_to_String+0x6>
    17b4:	1f 92       	push	r1
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	7b 83       	std	Y+3, r23	; 0x03
    17be:	6a 83       	std	Y+2, r22	; 0x02
	memset(CopySTR , '\0' , 4);
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	44 e0       	ldi	r20, 0x04	; 4
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	0e 94 67 16 	call	0x2cce	; 0x2cce <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	29 2f       	mov	r18, r25
    17d8:	2f 93       	push	r18
    17da:	8f 93       	push	r24
    17dc:	80 eb       	ldi	r24, 0xB0	; 176
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	89 2f       	mov	r24, r25
    17e2:	8f 93       	push	r24
    17e4:	80 eb       	ldi	r24, 0xB0	; 176
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	8f 93       	push	r24
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	8f 93       	push	r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	8f 93       	push	r24
    17f2:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sprintf>
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
}
    1802:	00 00       	nop
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <Convert_u16_to_String>:
void Convert_u16_to_String(u16 CopyValueu8 , u8 *CopySTR)
{
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	00 d0       	rcall	.+0      	; 0x1816 <Convert_u16_to_String+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <Convert_u16_to_String+0x8>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	7c 83       	std	Y+4, r23	; 0x04
    1822:	6b 83       	std	Y+3, r22	; 0x03
	memset(CopySTR , '\0' , 6);
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	46 e0       	ldi	r20, 0x06	; 6
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	0e 94 67 16 	call	0x2cce	; 0x2cce <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	8f 93       	push	r24
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	8f 93       	push	r24
    183c:	80 eb       	ldi	r24, 0xB0	; 176
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	89 2f       	mov	r24, r25
    1842:	8f 93       	push	r24
    1844:	80 eb       	ldi	r24, 0xB0	; 176
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	8f 93       	push	r24
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	8f 93       	push	r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	8f 93       	push	r24
    1852:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sprintf>
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
}
    1862:	00 00       	nop
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <Convert_u32_to_String>:
void Convert_u32_to_String(u32 CopyValueu8 , u8 *CopySTR)
{
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	00 d0       	rcall	.+0      	; 0x1878 <Convert_u32_to_String+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <Convert_u32_to_String+0x8>
    187a:	00 d0       	rcall	.+0      	; 0x187c <Convert_u32_to_String+0xa>
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	69 83       	std	Y+1, r22	; 0x01
    1882:	7a 83       	std	Y+2, r23	; 0x02
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	9c 83       	std	Y+4, r25	; 0x04
    1888:	5e 83       	std	Y+6, r21	; 0x06
    188a:	4d 83       	std	Y+5, r20	; 0x05
	memset(CopySTR , '\0' , 11);
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	4b e0       	ldi	r20, 0x0B	; 11
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	0e 94 67 16 	call	0x2cce	; 0x2cce <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	8f 93       	push	r24
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	8f 93       	push	r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	8f 93       	push	r24
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	8f 93       	push	r24
    18ac:	80 eb       	ldi	r24, 0xB0	; 176
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	89 2f       	mov	r24, r25
    18b2:	8f 93       	push	r24
    18b4:	80 eb       	ldi	r24, 0xB0	; 176
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	8f 93       	push	r24
    18ba:	8e 81       	ldd	r24, Y+6	; 0x06
    18bc:	8f 93       	push	r24
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	8f 93       	push	r24
    18c2:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sprintf>
    18c6:	8d b7       	in	r24, 0x3d	; 61
    18c8:	9e b7       	in	r25, 0x3e	; 62
    18ca:	08 96       	adiw	r24, 0x08	; 8
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
}
    18d6:	00 00       	nop
    18d8:	26 96       	adiw	r28, 0x06	; 6
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <LCD_4_GetData>:
/************************************************************************************************************************/


/********** SECTION : Static Functions **********/
static void LCD_4_GetData(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	27 97       	sbiw	r28, 0x07	; 7
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	49 83       	std	Y+1, r20	; 0x01
    1900:	5a 83       	std	Y+2, r21	; 0x02
    1902:	6b 83       	std	Y+3, r22	; 0x03
    1904:	7c 83       	std	Y+4, r23	; 0x04
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.Port[0] , (CopyCMD >> 0) & (u8)0x01);
    190c:	8f 81       	ldd	r24, Y+7	; 0x07
    190e:	98 2f       	mov	r25, r24
    1910:	91 70       	andi	r25, 0x01	; 1
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	69 2f       	mov	r22, r25
    1916:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[1] , (CopyCMD >> 1) & (u8)0x01);
    191a:	8f 81       	ldd	r24, Y+7	; 0x07
    191c:	86 95       	lsr	r24
    191e:	98 2f       	mov	r25, r24
    1920:	91 70       	andi	r25, 0x01	; 1
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	69 2f       	mov	r22, r25
    1926:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[2] , (CopyCMD >> 2) & (u8)0x01);
    192a:	8f 81       	ldd	r24, Y+7	; 0x07
    192c:	86 95       	lsr	r24
    192e:	86 95       	lsr	r24
    1930:	98 2f       	mov	r25, r24
    1932:	91 70       	andi	r25, 0x01	; 1
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	69 2f       	mov	r22, r25
    1938:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[3] , (CopyCMD >> 3) & (u8)0x01);
    193c:	8f 81       	ldd	r24, Y+7	; 0x07
    193e:	86 95       	lsr	r24
    1940:	86 95       	lsr	r24
    1942:	86 95       	lsr	r24
    1944:	98 2f       	mov	r25, r24
    1946:	91 70       	andi	r25, 0x01	; 1
    1948:	8e 81       	ldd	r24, Y+6	; 0x06
    194a:	69 2f       	mov	r22, r25
    194c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
}
    1950:	00 00       	nop
    1952:	27 96       	adiw	r28, 0x07	; 7
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	08 95       	ret

00001964 <LCD_4_SendEnable_Signal>:

static void LCD_4_SendEnable_Signal(LCD_4_MODE CopyLCD)
{
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	a6 97       	sbiw	r28, 0x26	; 38
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	49 a3       	std	Y+33, r20	; 0x21
    197a:	5a a3       	std	Y+34, r21	; 0x22
    197c:	6b a3       	std	Y+35, r22	; 0x23
    197e:	7c a3       	std	Y+36, r23	; 0x24
    1980:	8d a3       	std	Y+37, r24	; 0x25
    1982:	9e a3       	std	Y+38, r25	; 0x26
	Dio_setPinVal(CopyLCD.E,Status_Pin_High);
    1984:	8a a1       	ldd	r24, Y+34	; 0x22
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 ea       	ldi	r26, 0xA0	; 160
    1992:	b0 e4       	ldi	r27, 0x40	; 64
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	ab 83       	std	Y+3, r26	; 0x03
    199a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    199c:	2b ea       	ldi	r18, 0xAB	; 171
    199e:	3a ea       	ldi	r19, 0xAA	; 170
    19a0:	4a ea       	ldi	r20, 0xAA	; 170
    19a2:	5e e3       	ldi	r21, 0x3E	; 62
    19a4:	69 81       	ldd	r22, Y+1	; 0x01
    19a6:	7a 81       	ldd	r23, Y+2	; 0x02
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	af 83       	std	Y+7, r26	; 0x07
    19ba:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	5e e3       	ldi	r21, 0x3E	; 62
    19c4:	69 81       	ldd	r22, Y+1	; 0x01
    19c6:	7a 81       	ldd	r23, Y+2	; 0x02
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	89 87       	std	Y+9, r24	; 0x09
    19d6:	9a 87       	std	Y+10, r25	; 0x0a
    19d8:	ab 87       	std	Y+11, r26	; 0x0b
    19da:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	5f e3       	ldi	r21, 0x3F	; 63
    19e4:	6d 81       	ldd	r22, Y+5	; 0x05
    19e6:	7e 81       	ldd	r23, Y+6	; 0x06
    19e8:	8f 81       	ldd	r24, Y+7	; 0x07
    19ea:	98 85       	ldd	r25, Y+8	; 0x08
    19ec:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	1c f4       	brge	.+6      	; 0x19fa <LCD_4_SendEnable_Signal+0x96>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	8d 87       	std	Y+13, r24	; 0x0d
    19f8:	b2 c0       	rjmp	.+356    	; 0x1b5e <LCD_4_SendEnable_Signal+0x1fa>
	else if (__tmp2 > 65535)
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	3f ef       	ldi	r19, 0xFF	; 255
    19fe:	4f e7       	ldi	r20, 0x7F	; 127
    1a00:	57 e4       	ldi	r21, 0x47	; 71
    1a02:	69 85       	ldd	r22, Y+9	; 0x09
    1a04:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a06:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a08:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a0a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    1a0e:	18 16       	cp	r1, r24
    1a10:	0c f0       	brlt	.+2      	; 0x1a14 <LCD_4_SendEnable_Signal+0xb0>
    1a12:	7b c0       	rjmp	.+246    	; 0x1b0a <LCD_4_SendEnable_Signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a e7       	ldi	r20, 0x7A	; 122
    1a1a:	54 e4       	ldi	r21, 0x44	; 68
    1a1c:	69 81       	ldd	r22, Y+1	; 0x01
    1a1e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	0e 94 df 14 	call	0x29be	; 0x29be <__divsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	8e 87       	std	Y+14, r24	; 0x0e
    1a2e:	9f 87       	std	Y+15, r25	; 0x0f
    1a30:	a8 8b       	std	Y+16, r26	; 0x10
    1a32:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a e7       	ldi	r20, 0x7A	; 122
    1a3a:	53 e4       	ldi	r21, 0x43	; 67
    1a3c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a3e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a40:	88 89       	ldd	r24, Y+16	; 0x10
    1a42:	99 89       	ldd	r25, Y+17	; 0x11
    1a44:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8a 8b       	std	Y+18, r24	; 0x12
    1a4e:	9b 8b       	std	Y+19, r25	; 0x13
    1a50:	ac 8b       	std	Y+20, r26	; 0x14
    1a52:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	6a 89       	ldd	r22, Y+18	; 0x12
    1a5e:	7b 89       	ldd	r23, Y+19	; 0x13
    1a60:	8c 89       	ldd	r24, Y+20	; 0x14
    1a62:	9d 89       	ldd	r25, Y+21	; 0x15
    1a64:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <LCD_4_SendEnable_Signal+0x112>
		__ticks = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9f 8b       	std	Y+23, r25	; 0x17
    1a72:	8e 8b       	std	Y+22, r24	; 0x16
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <LCD_4_SendEnable_Signal+0x190>
	else if (__tmp > 65535)
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	57 e4       	ldi	r21, 0x47	; 71
    1a7e:	6a 89       	ldd	r22, Y+18	; 0x12
    1a80:	7b 89       	ldd	r23, Y+19	; 0x13
    1a82:	8c 89       	ldd	r24, Y+20	; 0x14
    1a84:	9d 89       	ldd	r25, Y+21	; 0x15
    1a86:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	4c f5       	brge	.+82     	; 0x1ae0 <LCD_4_SendEnable_Signal+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e2       	ldi	r20, 0x20	; 32
    1a94:	51 e4       	ldi	r21, 0x41	; 65
    1a96:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a98:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a9a:	88 89       	ldd	r24, Y+16	; 0x10
    1a9c:	99 89       	ldd	r25, Y+17	; 0x11
    1a9e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9f 8b       	std	Y+23, r25	; 0x17
    1ab4:	8e 8b       	std	Y+22, r24	; 0x16
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <LCD_4_SendEnable_Signal+0x172>
    1ab8:	89 e1       	ldi	r24, 0x19	; 25
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	99 8f       	std	Y+25, r25	; 0x19
    1abe:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ac0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ac2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <LCD_4_SendEnable_Signal+0x160>
    1ac8:	99 8f       	std	Y+25, r25	; 0x19
    1aca:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	8e 89       	ldd	r24, Y+22	; 0x16
    1ace:	9f 89       	ldd	r25, Y+23	; 0x17
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9f 8b       	std	Y+23, r25	; 0x17
    1ad4:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	8e 89       	ldd	r24, Y+22	; 0x16
    1ad8:	9f 89       	ldd	r25, Y+23	; 0x17
    1ada:	89 2b       	or	r24, r25
    1adc:	69 f7       	brne	.-38     	; 0x1ab8 <LCD_4_SendEnable_Signal+0x154>
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <LCD_4_SendEnable_Signal+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	6a 89       	ldd	r22, Y+18	; 0x12
    1ae2:	7b 89       	ldd	r23, Y+19	; 0x13
    1ae4:	8c 89       	ldd	r24, Y+20	; 0x14
    1ae6:	9d 89       	ldd	r25, Y+21	; 0x15
    1ae8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9f 8b       	std	Y+23, r25	; 0x17
    1af2:	8e 8b       	std	Y+22, r24	; 0x16
    1af4:	8e 89       	ldd	r24, Y+22	; 0x16
    1af6:	9f 89       	ldd	r25, Y+23	; 0x17
    1af8:	9b 8f       	std	Y+27, r25	; 0x1b
    1afa:	8a 8f       	std	Y+26, r24	; 0x1a
    1afc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1afe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_4_SendEnable_Signal+0x19c>
    1b04:	9b 8f       	std	Y+27, r25	; 0x1b
    1b06:	8a 8f       	std	Y+26, r24	; 0x1a
    1b08:	2a c0       	rjmp	.+84     	; 0x1b5e <LCD_4_SendEnable_Signal+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	53 e4       	ldi	r21, 0x43	; 67
    1b12:	6d 81       	ldd	r22, Y+5	; 0x05
    1b14:	7e 81       	ldd	r23, Y+6	; 0x06
    1b16:	8f 81       	ldd	r24, Y+7	; 0x07
    1b18:	98 85       	ldd	r25, Y+8	; 0x08
    1b1a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	ac f4       	brge	.+42     	; 0x1b4c <LCD_4_SendEnable_Signal+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1b22:	69 85       	ldd	r22, Y+9	; 0x09
    1b24:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b26:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b28:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b2a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9d 8f       	std	Y+29, r25	; 0x1d
    1b34:	8c 8f       	std	Y+28, r24	; 0x1c
    1b36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b38:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b3a:	9f 8f       	std	Y+31, r25	; 0x1f
    1b3c:	8e 8f       	std	Y+30, r24	; 0x1e
    1b3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_4_SendEnable_Signal+0x1de>
    1b46:	9f 8f       	std	Y+31, r25	; 0x1f
    1b48:	8e 8f       	std	Y+30, r24	; 0x1e
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <LCD_4_SendEnable_Signal+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b4c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b4e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b50:	8f 81       	ldd	r24, Y+7	; 0x07
    1b52:	98 85       	ldd	r25, Y+8	; 0x08
    1b54:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8d 87       	std	Y+13, r24	; 0x0d
    1b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b60:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b62:	88 a1       	ldd	r24, Y+32	; 0x20
    1b64:	8a 95       	dec	r24
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LCD_4_SendEnable_Signal+0x200>
    1b68:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(5);
	Dio_setPinVal(CopyLCD.E, Status_Pin_Low);
    1b6a:	8a a1       	ldd	r24, Y+34	; 0x22
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
}
    1b72:	00 00       	nop
    1b74:	a6 96       	adiw	r28, 0x26	; 38
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	08 95       	ret

00001b86 <LCD_8_SendEnable_Signal>:

static void LCD_8_SendEnable_Signal(LCD_8_MODE CopyLCD)
{
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	68 97       	sbiw	r28, 0x18	; 24
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	0f 87       	std	Y+15, r16	; 0x0f
    1ba0:	18 8b       	std	Y+16, r17	; 0x10
    1ba2:	29 8b       	std	Y+17, r18	; 0x11
    1ba4:	3a 8b       	std	Y+18, r19	; 0x12
    1ba6:	4b 8b       	std	Y+19, r20	; 0x13
    1ba8:	5c 8b       	std	Y+20, r21	; 0x14
    1baa:	6d 8b       	std	Y+21, r22	; 0x15
    1bac:	7e 8b       	std	Y+22, r23	; 0x16
    1bae:	8f 8b       	std	Y+23, r24	; 0x17
    1bb0:	98 8f       	std	Y+24, r25	; 0x18
	Dio_setPinVal(CopyLCD.E,Status_Pin_High);
    1bb2:	88 89       	ldd	r24, Y+16	; 0x10
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 ea       	ldi	r26, 0xA0	; 160
    1bc0:	b0 e4       	ldi	r27, 0x40	; 64
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	ab 83       	std	Y+3, r26	; 0x03
    1bc8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4a e7       	ldi	r20, 0x7A	; 122
    1bd0:	53 e4       	ldi	r21, 0x43	; 67
    1bd2:	69 81       	ldd	r22, Y+1	; 0x01
    1bd4:	7a 81       	ldd	r23, Y+2	; 0x02
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	af 83       	std	Y+7, r26	; 0x07
    1be8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e8       	ldi	r20, 0x80	; 128
    1bf0:	5f e3       	ldi	r21, 0x3F	; 63
    1bf2:	6d 81       	ldd	r22, Y+5	; 0x05
    1bf4:	7e 81       	ldd	r23, Y+6	; 0x06
    1bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf8:	98 85       	ldd	r25, Y+8	; 0x08
    1bfa:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_8_SendEnable_Signal+0x86>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9a 87       	std	Y+10, r25	; 0x0a
    1c08:	89 87       	std	Y+9, r24	; 0x09
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_8_SendEnable_Signal+0x104>
	else if (__tmp > 65535)
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	3f ef       	ldi	r19, 0xFF	; 255
    1c10:	4f e7       	ldi	r20, 0x7F	; 127
    1c12:	57 e4       	ldi	r21, 0x47	; 71
    1c14:	6d 81       	ldd	r22, Y+5	; 0x05
    1c16:	7e 81       	ldd	r23, Y+6	; 0x06
    1c18:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1a:	98 85       	ldd	r25, Y+8	; 0x08
    1c1c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_8_SendEnable_Signal+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e2       	ldi	r20, 0x20	; 32
    1c2a:	51 e4       	ldi	r21, 0x41	; 65
    1c2c:	69 81       	ldd	r22, Y+1	; 0x01
    1c2e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9a 87       	std	Y+10, r25	; 0x0a
    1c4a:	89 87       	std	Y+9, r24	; 0x09
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_8_SendEnable_Signal+0xe6>
    1c4e:	89 e1       	ldi	r24, 0x19	; 25
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9c 87       	std	Y+12, r25	; 0x0c
    1c54:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c56:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c58:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_8_SendEnable_Signal+0xd4>
    1c5e:	9c 87       	std	Y+12, r25	; 0x0c
    1c60:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	89 85       	ldd	r24, Y+9	; 0x09
    1c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9a 87       	std	Y+10, r25	; 0x0a
    1c6a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	89 2b       	or	r24, r25
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_8_SendEnable_Signal+0xc8>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <LCD_8_SendEnable_Signal+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6d 81       	ldd	r22, Y+5	; 0x05
    1c78:	7e 81       	ldd	r23, Y+6	; 0x06
    1c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7c:	98 85       	ldd	r25, Y+8	; 0x08
    1c7e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9a 87       	std	Y+10, r25	; 0x0a
    1c88:	89 87       	std	Y+9, r24	; 0x09
    1c8a:	89 85       	ldd	r24, Y+9	; 0x09
    1c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8e:	9e 87       	std	Y+14, r25	; 0x0e
    1c90:	8d 87       	std	Y+13, r24	; 0x0d
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_8_SendEnable_Signal+0x110>
    1c9a:	9e 87       	std	Y+14, r25	; 0x0e
    1c9c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(5);
	Dio_setPinVal(CopyLCD.E, Status_Pin_Low);
    1c9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
}
    1ca6:	00 00       	nop
    1ca8:	68 96       	adiw	r28, 0x18	; 24
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	08 95       	ret

00001cbe <LCD_8_SetCursor_Position>:

static void LCD_8_SetCursor_Position(LCD_8_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
    1cbe:	cf 92       	push	r12
    1cc0:	ef 92       	push	r14
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	2c 97       	sbiw	r28, 0x0c	; 12
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	09 83       	std	Y+1, r16	; 0x01
    1cdc:	1a 83       	std	Y+2, r17	; 0x02
    1cde:	2b 83       	std	Y+3, r18	; 0x03
    1ce0:	3c 83       	std	Y+4, r19	; 0x04
    1ce2:	4d 83       	std	Y+5, r20	; 0x05
    1ce4:	5e 83       	std	Y+6, r21	; 0x06
    1ce6:	6f 83       	std	Y+7, r22	; 0x07
    1ce8:	78 87       	std	Y+8, r23	; 0x08
    1cea:	89 87       	std	Y+9, r24	; 0x09
    1cec:	9a 87       	std	Y+10, r25	; 0x0a
    1cee:	eb 86       	std	Y+11, r14	; 0x0b
    1cf0:	cc 86       	std	Y+12, r12	; 0x0c
	CopyCoulmn--;
    1cf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cf4:	81 50       	subi	r24, 0x01	; 1
    1cf6:	8c 87       	std	Y+12, r24	; 0x0c
	switch (CopyRow) {
    1cf8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	82 30       	cpi	r24, 0x02	; 2
    1d00:	91 05       	cpc	r25, r1
    1d02:	e1 f0       	breq	.+56     	; 0x1d3c <LCD_8_SetCursor_Position+0x7e>
    1d04:	83 30       	cpi	r24, 0x03	; 3
    1d06:	91 05       	cpc	r25, r1
    1d08:	1c f4       	brge	.+6      	; 0x1d10 <LCD_8_SetCursor_Position+0x52>
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	39 f0       	breq	.+14     	; 0x1d1c <LCD_8_SetCursor_Position+0x5e>
		case Row_1 : LCD_8_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_8_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_8_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_8_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    1d0e:	46 c0       	rjmp	.+140    	; 0x1d9c <LCD_8_SetCursor_Position+0xde>
}

static void LCD_8_SetCursor_Position(LCD_8_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	91 05       	cpc	r25, r1
    1d14:	19 f1       	breq	.+70     	; 0x1d5c <LCD_8_SetCursor_Position+0x9e>
    1d16:	04 97       	sbiw	r24, 0x04	; 4
    1d18:	89 f1       	breq	.+98     	; 0x1d7c <LCD_8_SetCursor_Position+0xbe>
		case Row_1 : LCD_8_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_8_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_8_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_8_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    1d1a:	40 c0       	rjmp	.+128    	; 0x1d9c <LCD_8_SetCursor_Position+0xde>

static void LCD_8_SetCursor_Position(LCD_8_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
		case Row_1 : LCD_8_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
    1d1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d1e:	80 58       	subi	r24, 0x80	; 128
    1d20:	e8 2e       	mov	r14, r24
    1d22:	09 81       	ldd	r16, Y+1	; 0x01
    1d24:	1a 81       	ldd	r17, Y+2	; 0x02
    1d26:	2b 81       	ldd	r18, Y+3	; 0x03
    1d28:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d2c:	5e 81       	ldd	r21, Y+6	; 0x06
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
    1d3a:	30 c0       	rjmp	.+96     	; 0x1d9c <LCD_8_SetCursor_Position+0xde>
		case Row_2 : LCD_8_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
    1d3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d3e:	80 54       	subi	r24, 0x40	; 64
    1d40:	e8 2e       	mov	r14, r24
    1d42:	09 81       	ldd	r16, Y+1	; 0x01
    1d44:	1a 81       	ldd	r17, Y+2	; 0x02
    1d46:	2b 81       	ldd	r18, Y+3	; 0x03
    1d48:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d4c:	5e 81       	ldd	r21, Y+6	; 0x06
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
    1d5a:	20 c0       	rjmp	.+64     	; 0x1d9c <LCD_8_SetCursor_Position+0xde>
		case Row_3 : LCD_8_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
    1d5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d5e:	8c 56       	subi	r24, 0x6C	; 108
    1d60:	e8 2e       	mov	r14, r24
    1d62:	09 81       	ldd	r16, Y+1	; 0x01
    1d64:	1a 81       	ldd	r17, Y+2	; 0x02
    1d66:	2b 81       	ldd	r18, Y+3	; 0x03
    1d68:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d6c:	5e 81       	ldd	r21, Y+6	; 0x06
    1d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d70:	78 85       	ldd	r23, Y+8	; 0x08
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
    1d7a:	10 c0       	rjmp	.+32     	; 0x1d9c <LCD_8_SetCursor_Position+0xde>
		case Row_4 : LCD_8_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
    1d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d7e:	8c 52       	subi	r24, 0x2C	; 44
    1d80:	e8 2e       	mov	r14, r24
    1d82:	09 81       	ldd	r16, Y+1	; 0x01
    1d84:	1a 81       	ldd	r17, Y+2	; 0x02
    1d86:	2b 81       	ldd	r18, Y+3	; 0x03
    1d88:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d8c:	5e 81       	ldd	r21, Y+6	; 0x06
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d96:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_8_CMD_Write>
    1d9a:	00 00       	nop
		default: break;
	}
}
    1d9c:	00 00       	nop
    1d9e:	2c 96       	adiw	r28, 0x0c	; 12
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ef 90       	pop	r14
    1db4:	cf 90       	pop	r12
    1db6:	08 95       	ret

00001db8 <LCD_4_SetCursor_Position>:

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
    1db8:	0f 93       	push	r16
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	28 97       	sbiw	r28, 0x08	; 8
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	49 83       	std	Y+1, r20	; 0x01
    1dd0:	5a 83       	std	Y+2, r21	; 0x02
    1dd2:	6b 83       	std	Y+3, r22	; 0x03
    1dd4:	7c 83       	std	Y+4, r23	; 0x04
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	2f 83       	std	Y+7, r18	; 0x07
    1ddc:	08 87       	std	Y+8, r16	; 0x08
	CopyCoulmn--;
    1dde:	88 85       	ldd	r24, Y+8	; 0x08
    1de0:	81 50       	subi	r24, 0x01	; 1
    1de2:	88 87       	std	Y+8, r24	; 0x08
	switch (CopyRow) {
    1de4:	8f 81       	ldd	r24, Y+7	; 0x07
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	91 05       	cpc	r25, r1
    1dee:	c1 f0       	breq	.+48     	; 0x1e20 <LCD_4_SetCursor_Position+0x68>
    1df0:	83 30       	cpi	r24, 0x03	; 3
    1df2:	91 05       	cpc	r25, r1
    1df4:	1c f4       	brge	.+6      	; 0x1dfc <LCD_4_SetCursor_Position+0x44>
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	39 f0       	breq	.+14     	; 0x1e08 <LCD_4_SetCursor_Position+0x50>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    1dfa:	36 c0       	rjmp	.+108    	; 0x1e68 <LCD_4_SetCursor_Position+0xb0>
}

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
    1dfc:	83 30       	cpi	r24, 0x03	; 3
    1dfe:	91 05       	cpc	r25, r1
    1e00:	d9 f0       	breq	.+54     	; 0x1e38 <LCD_4_SetCursor_Position+0x80>
    1e02:	04 97       	sbiw	r24, 0x04	; 4
    1e04:	29 f1       	breq	.+74     	; 0x1e50 <LCD_4_SetCursor_Position+0x98>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    1e06:	30 c0       	rjmp	.+96     	; 0x1e68 <LCD_4_SetCursor_Position+0xb0>

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
    1e08:	88 85       	ldd	r24, Y+8	; 0x08
    1e0a:	80 58       	subi	r24, 0x80	; 128
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	49 81       	ldd	r20, Y+1	; 0x01
    1e10:	5a 81       	ldd	r21, Y+2	; 0x02
    1e12:	6b 81       	ldd	r22, Y+3	; 0x03
    1e14:	7c 81       	ldd	r23, Y+4	; 0x04
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
    1e1e:	24 c0       	rjmp	.+72     	; 0x1e68 <LCD_4_SetCursor_Position+0xb0>
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
    1e20:	88 85       	ldd	r24, Y+8	; 0x08
    1e22:	80 54       	subi	r24, 0x40	; 64
    1e24:	28 2f       	mov	r18, r24
    1e26:	49 81       	ldd	r20, Y+1	; 0x01
    1e28:	5a 81       	ldd	r21, Y+2	; 0x02
    1e2a:	6b 81       	ldd	r22, Y+3	; 0x03
    1e2c:	7c 81       	ldd	r23, Y+4	; 0x04
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
    1e36:	18 c0       	rjmp	.+48     	; 0x1e68 <LCD_4_SetCursor_Position+0xb0>
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
    1e38:	88 85       	ldd	r24, Y+8	; 0x08
    1e3a:	8c 56       	subi	r24, 0x6C	; 108
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	49 81       	ldd	r20, Y+1	; 0x01
    1e40:	5a 81       	ldd	r21, Y+2	; 0x02
    1e42:	6b 81       	ldd	r22, Y+3	; 0x03
    1e44:	7c 81       	ldd	r23, Y+4	; 0x04
    1e46:	8d 81       	ldd	r24, Y+5	; 0x05
    1e48:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4a:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
    1e4e:	0c c0       	rjmp	.+24     	; 0x1e68 <LCD_4_SetCursor_Position+0xb0>
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
    1e50:	88 85       	ldd	r24, Y+8	; 0x08
    1e52:	8c 52       	subi	r24, 0x2C	; 44
    1e54:	28 2f       	mov	r18, r24
    1e56:	49 81       	ldd	r20, Y+1	; 0x01
    1e58:	5a 81       	ldd	r21, Y+2	; 0x02
    1e5a:	6b 81       	ldd	r22, Y+3	; 0x03
    1e5c:	7c 81       	ldd	r23, Y+4	; 0x04
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_4_CMD_Write>
    1e66:	00 00       	nop
		default: break;
	}
}
    1e68:	00 00       	nop
    1e6a:	28 96       	adiw	r28, 0x08	; 8
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	0f 91       	pop	r16
    1e7c:	08 95       	ret

00001e7e <KeyPad_Init>:
/********** SECTION : Includes **********/
#include "KeyPad_Init.h"

/********** SECTION : Functions Definitions **********/
void KeyPad_Init(KeyPad CopyKeyPad)
{
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	2a 97       	sbiw	r28, 0x0a	; 10
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	2b 83       	std	Y+3, r18	; 0x03
    1e94:	3c 83       	std	Y+4, r19	; 0x04
    1e96:	4d 83       	std	Y+5, r20	; 0x05
    1e98:	5e 83       	std	Y+6, r21	; 0x06
    1e9a:	6f 83       	std	Y+7, r22	; 0x07
    1e9c:	78 87       	std	Y+8, r23	; 0x08
    1e9e:	89 87       	std	Y+9, r24	; 0x09
    1ea0:	9a 87       	std	Y+10, r25	; 0x0a
	u8 Rows_Counter = Initial_Counter ;
    1ea2:	19 82       	std	Y+1, r1	; 0x01
	u8 Columns_Counter = Initial_Counter;
    1ea4:	1a 82       	std	Y+2, r1	; 0x02

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    1ea6:	19 82       	std	Y+1, r1	; 0x01
    1ea8:	10 c0       	rjmp	.+32     	; 0x1eca <KeyPad_Init+0x4c>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9e 01       	movw	r18, r28
    1eb2:	2d 5f       	subi	r18, 0xFD	; 253
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	82 0f       	add	r24, r18
    1eb8:	93 1f       	adc	r25, r19
    1eba:	fc 01       	movw	r30, r24
    1ebc:	80 81       	ld	r24, Z
    1ebe:	61 e0       	ldi	r22, 0x01	; 1
    1ec0:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
void KeyPad_Init(KeyPad CopyKeyPad)
{
	u8 Rows_Counter = Initial_Counter ;
	u8 Columns_Counter = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	84 30       	cpi	r24, 0x04	; 4
    1ece:	68 f3       	brcs	.-38     	; 0x1eaa <KeyPad_Init+0x2c>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
	}

	for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
    1ed2:	10 c0       	rjmp	.+32     	; 0x1ef4 <KeyPad_Init+0x76>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Coulmn[Columns_Counter],Direction_Pin_Input);
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9e 01       	movw	r18, r28
    1edc:	29 5f       	subi	r18, 0xF9	; 249
    1ede:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee0:	82 0f       	add	r24, r18
    1ee2:	93 1f       	adc	r25, r19
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	80 81       	ld	r24, Z
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
	}

	for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	84 30       	cpi	r24, 0x04	; 4
    1ef8:	68 f3       	brcs	.-38     	; 0x1ed4 <KeyPad_Init+0x56>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Coulmn[Columns_Counter],Direction_Pin_Input);
	}
}
    1efa:	00 00       	nop
    1efc:	2a 96       	adiw	r28, 0x0a	; 10
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret

00001f0e <KeyPad_getValue>:

void KeyPad_getValue(KeyPad CopyKeyPad, u8 CopyValue)
{
    1f0e:	0f 93       	push	r16
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	6b 97       	sbiw	r28, 0x1b	; 27
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	2b 8b       	std	Y+19, r18	; 0x13
    1f26:	3c 8b       	std	Y+20, r19	; 0x14
    1f28:	4d 8b       	std	Y+21, r20	; 0x15
    1f2a:	5e 8b       	std	Y+22, r21	; 0x16
    1f2c:	6f 8b       	std	Y+23, r22	; 0x17
    1f2e:	78 8f       	std	Y+24, r23	; 0x18
    1f30:	89 8f       	std	Y+25, r24	; 0x19
    1f32:	9a 8f       	std	Y+26, r25	; 0x1a
    1f34:	0b 8f       	std	Y+27, r16	; 0x1b
	u8 Rows_Counter = Initial_Counter ;
    1f36:	19 82       	std	Y+1, r1	; 0x01
	u8 Columns_Counter = Initial_Counter;
    1f38:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter_1 = Initial_Counter;
    1f3a:	1b 82       	std	Y+3, r1	; 0x03
	u8 Logic_Value = Initial_Counter;
    1f3c:	1c 82       	std	Y+4, r1	; 0x04

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    1f3e:	19 82       	std	Y+1, r1	; 0x01
    1f40:	c0 c0       	rjmp	.+384    	; 0x20c2 <KeyPad_getValue+0x1b4>
	{
		for(Counter_1 = Initial_Counter ; Counter_1 < KeyPad_Rows ; Counter_1++)
    1f42:	1b 82       	std	Y+3, r1	; 0x03
    1f44:	10 c0       	rjmp	.+32     	; 0x1f66 <KeyPad_getValue+0x58>
		{
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9e 01       	movw	r18, r28
    1f4e:	2d 5e       	subi	r18, 0xED	; 237
    1f50:	3f 4f       	sbci	r19, 0xFF	; 255
    1f52:	82 0f       	add	r24, r18
    1f54:	93 1f       	adc	r25, r19
    1f56:	fc 01       	movw	r30, r24
    1f58:	80 81       	ld	r24, Z
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	u8 Counter_1 = Initial_Counter;
	u8 Logic_Value = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
	{
		for(Counter_1 = Initial_Counter ; Counter_1 < KeyPad_Rows ; Counter_1++)
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	8b 83       	std	Y+3, r24	; 0x03
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	84 30       	cpi	r24, 0x04	; 4
    1f6a:	68 f3       	brcs	.-38     	; 0x1f46 <KeyPad_getValue+0x38>
		{
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
		}

		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_High);
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9e 01       	movw	r18, r28
    1f74:	2d 5e       	subi	r18, 0xED	; 237
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
    1f78:	82 0f       	add	r24, r18
    1f7a:	93 1f       	adc	r25, r19
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	80 81       	ld	r24, Z
    1f80:	61 e0       	ldi	r22, 0x01	; 1
    1f82:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e2       	ldi	r26, 0x20	; 32
    1f8c:	b1 e4       	ldi	r27, 0x41	; 65
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	af 83       	std	Y+7, r26	; 0x07
    1f94:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a e7       	ldi	r20, 0x7A	; 122
    1f9c:	53 e4       	ldi	r21, 0x43	; 67
    1f9e:	6d 81       	ldd	r22, Y+5	; 0x05
    1fa0:	7e 81       	ldd	r23, Y+6	; 0x06
    1fa2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa4:	98 85       	ldd	r25, Y+8	; 0x08
    1fa6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	89 87       	std	Y+9, r24	; 0x09
    1fb0:	9a 87       	std	Y+10, r25	; 0x0a
    1fb2:	ab 87       	std	Y+11, r26	; 0x0b
    1fb4:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	69 85       	ldd	r22, Y+9	; 0x09
    1fc0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fc6:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__cmpsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <KeyPad_getValue+0xca>
		__ticks = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9e 87       	std	Y+14, r25	; 0x0e
    1fd4:	8d 87       	std	Y+13, r24	; 0x0d
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <KeyPad_getValue+0x148>
	else if (__tmp > 65535)
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	69 85       	ldd	r22, Y+9	; 0x09
    1fe2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fe4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fe6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fe8:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	4c f5       	brge	.+82     	; 0x2042 <KeyPad_getValue+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	6d 81       	ldd	r22, Y+5	; 0x05
    1ffa:	7e 81       	ldd	r23, Y+6	; 0x06
    1ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffe:	98 85       	ldd	r25, Y+8	; 0x08
    2000:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9e 87       	std	Y+14, r25	; 0x0e
    2016:	8d 87       	std	Y+13, r24	; 0x0d
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <KeyPad_getValue+0x12a>
    201a:	89 e1       	ldi	r24, 0x19	; 25
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	98 8b       	std	Y+16, r25	; 0x10
    2020:	8f 87       	std	Y+15, r24	; 0x0f
    2022:	8f 85       	ldd	r24, Y+15	; 0x0f
    2024:	98 89       	ldd	r25, Y+16	; 0x10
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <KeyPad_getValue+0x118>
    202a:	98 8b       	std	Y+16, r25	; 0x10
    202c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2030:	9e 85       	ldd	r25, Y+14	; 0x0e
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	9e 87       	std	Y+14, r25	; 0x0e
    2036:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	89 2b       	or	r24, r25
    203e:	69 f7       	brne	.-38     	; 0x201a <KeyPad_getValue+0x10c>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <KeyPad_getValue+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	69 85       	ldd	r22, Y+9	; 0x09
    2044:	7a 85       	ldd	r23, Y+10	; 0x0a
    2046:	8b 85       	ldd	r24, Y+11	; 0x0b
    2048:	9c 85       	ldd	r25, Y+12	; 0x0c
    204a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9e 87       	std	Y+14, r25	; 0x0e
    2054:	8d 87       	std	Y+13, r24	; 0x0d
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	9e 85       	ldd	r25, Y+14	; 0x0e
    205a:	9a 8b       	std	Y+18, r25	; 0x12
    205c:	89 8b       	std	Y+17, r24	; 0x11
    205e:	89 89       	ldd	r24, Y+17	; 0x11
    2060:	9a 89       	ldd	r25, Y+18	; 0x12
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <KeyPad_getValue+0x154>
    2066:	9a 8b       	std	Y+18, r25	; 0x12
    2068:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(10);

		for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    206a:	1a 82       	std	Y+2, r1	; 0x02
    206c:	24 c0       	rjmp	.+72     	; 0x20b6 <KeyPad_getValue+0x1a8>
		{
			Logic_Value = Dio_getPinVal(CopyKeyPad.Pins_Coulmn[Columns_Counter]);
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9e 01       	movw	r18, r28
    2076:	29 5e       	subi	r18, 0xE9	; 233
    2078:	3f 4f       	sbci	r19, 0xFF	; 255
    207a:	82 0f       	add	r24, r18
    207c:	93 1f       	adc	r25, r19
    207e:	fc 01       	movw	r30, r24
    2080:	80 81       	ld	r24, Z
    2082:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
    2086:	8c 83       	std	Y+4, r24	; 0x04
			if(Logic_Value == Status_Pin_High)
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	89 f4       	brne	.+34     	; 0x20b0 <KeyPad_getValue+0x1a2>
			{
				CopyValue = Keypad_Buttons[Rows_Counter][Columns_Counter];
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	22 0f       	add	r18, r18
    209c:	33 1f       	adc	r19, r19
    209e:	22 0f       	add	r18, r18
    20a0:	33 1f       	adc	r19, r19
    20a2:	82 0f       	add	r24, r18
    20a4:	93 1f       	adc	r25, r19
    20a6:	80 57       	subi	r24, 0x70	; 112
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	fc 01       	movw	r30, r24
    20ac:	80 81       	ld	r24, Z
    20ae:	8b 8f       	std	Y+27, r24	; 0x1b
		}

		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_High);
		_delay_ms(10);

		for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	8a 83       	std	Y+2, r24	; 0x02
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	84 30       	cpi	r24, 0x04	; 4
    20ba:	c8 f2       	brcs	.-78     	; 0x206e <KeyPad_getValue+0x160>
	u8 Rows_Counter = Initial_Counter ;
	u8 Columns_Counter = Initial_Counter;
	u8 Counter_1 = Initial_Counter;
	u8 Logic_Value = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	8f 5f       	subi	r24, 0xFF	; 255
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	84 30       	cpi	r24, 0x04	; 4
    20c6:	08 f4       	brcc	.+2      	; 0x20ca <KeyPad_getValue+0x1bc>
    20c8:	3c cf       	rjmp	.-392    	; 0x1f42 <KeyPad_getValue+0x34>
			{
				CopyValue = Keypad_Buttons[Rows_Counter][Columns_Counter];
			}
		}
	}
}
    20ca:	00 00       	nop
    20cc:	6b 96       	adiw	r28, 0x1b	; 27
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	0f 91       	pop	r16
    20de:	08 95       	ret

000020e0 <App_Init>:
/********** SECTION : Globale Variable **********/


/********** SECTION : Functions setUp Definitions **********/
void App_Init(void)
{
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62

}
    20e8:	00 00       	nop
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	08 95       	ret

000020f0 <App_Loop>:

/********** SECTION : Functions Loop Definitions **********/
void App_Loop(void)
{
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62

}
    20f8:	00 00       	nop
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	08 95       	ret

00002100 <Motor_Init>:
#include "../../Mcal/DIO/dio_Init.h"
#include "Dc_Motor_Init.h"


void Motor_Init(void)
{
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
	Dio_setPinDir(m1.ENA, Direction_Pin_Output);
    2108:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <m1+0x2>
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m1.IN1, Direction_Pin_Output);
    2112:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <m1>
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m1.IN2, Direction_Pin_Output);
    211c:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <m1+0x1>
    2120:	61 e0       	ldi	r22, 0x01	; 1
    2122:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	Dio_setPinDir(m2.ENB, Direction_Pin_Output);
    2126:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <m2+0x2>
    212a:	61 e0       	ldi	r22, 0x01	; 1
    212c:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m2.IN3, Direction_Pin_Output);
    2130:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <m2>
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m2.IN4, Direction_Pin_Output);
    213a:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <m2+0x1>
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
}
    2144:	00 00       	nop
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	08 95       	ret

0000214c <Motor_Forward>:


void Motor_Forward(u8 CopyMotorNum)
{
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	1f 92       	push	r1
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	89 83       	std	Y+1, r24	; 0x01
	switch(CopyMotorNum)
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	82 30       	cpi	r24, 0x02	; 2
    2160:	91 05       	cpc	r25, r1
    2162:	c1 f0       	breq	.+48     	; 0x2194 <Motor_Forward+0x48>
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	91 05       	cpc	r25, r1
    2168:	39 f1       	breq	.+78     	; 0x21b8 <Motor_Forward+0x6c>
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	09 f0       	breq	.+2      	; 0x2170 <Motor_Forward+0x24>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
		Dio_setPinVal(m2.IN3, Status_Pin_High);
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
		break;
	}
}
    216e:	47 c0       	rjmp	.+142    	; 0x21fe <Motor_Forward+0xb2>
void Motor_Forward(u8 CopyMotorNum)
{
	switch(CopyMotorNum)
	{
	case Motor_1:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    2170:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <m1+0x3>
    2174:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <m1+0x2>
    2178:	69 2f       	mov	r22, r25
    217a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_High);
    217e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <m1>
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    2188:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <m1+0x1>
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    2192:	35 c0       	rjmp	.+106    	; 0x21fe <Motor_Forward+0xb2>
	case Motor_2:
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    2194:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <m2+0x3>
    2198:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <m2+0x2>
    219c:	69 2f       	mov	r22, r25
    219e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_High);
    21a2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <m2>
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    21ac:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <m2+0x1>
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    21b6:	23 c0       	rjmp	.+70     	; 0x21fe <Motor_Forward+0xb2>
	case Motors:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    21b8:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <m1+0x3>
    21bc:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <m1+0x2>
    21c0:	69 2f       	mov	r22, r25
    21c2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    21c6:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <m2+0x3>
    21ca:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <m2+0x2>
    21ce:	69 2f       	mov	r22, r25
    21d0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_High);
    21d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <m1>
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    21de:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <m1+0x1>
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_High);
    21e8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <m2>
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    21f2:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <m2+0x1>
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    21fc:	00 00       	nop
	}
}
    21fe:	00 00       	nop
    2200:	0f 90       	pop	r0
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	08 95       	ret

00002208 <Motor_Reverse>:

void Motor_Reverse(u8 CopyMotorNum)
{
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	1f 92       	push	r1
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	89 83       	std	Y+1, r24	; 0x01
	switch(CopyMotorNum)
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	91 05       	cpc	r25, r1
    221e:	c1 f0       	breq	.+48     	; 0x2250 <Motor_Reverse+0x48>
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	91 05       	cpc	r25, r1
    2224:	39 f1       	breq	.+78     	; 0x2274 <Motor_Reverse+0x6c>
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	09 f0       	breq	.+2      	; 0x222c <Motor_Reverse+0x24>
		Dio_setPinVal(m1.IN2, Status_Pin_High);
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
		Dio_setPinVal(m2.IN4, Status_Pin_High);
		break;
	}
}
    222a:	47 c0       	rjmp	.+142    	; 0x22ba <Motor_Reverse+0xb2>
void Motor_Reverse(u8 CopyMotorNum)
{
	switch(CopyMotorNum)
	{
	case Motor_1:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    222c:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <m1+0x3>
    2230:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <m1+0x2>
    2234:	69 2f       	mov	r22, r25
    2236:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    223a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <m1>
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_High);
    2244:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <m1+0x1>
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    224e:	35 c0       	rjmp	.+106    	; 0x22ba <Motor_Reverse+0xb2>
	case Motor_2:
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    2250:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <m2+0x3>
    2254:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <m2+0x2>
    2258:	69 2f       	mov	r22, r25
    225a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    225e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <m2>
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_High);
    2268:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <m2+0x1>
    226c:	61 e0       	ldi	r22, 0x01	; 1
    226e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    2272:	23 c0       	rjmp	.+70     	; 0x22ba <Motor_Reverse+0xb2>
	case Motors:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    2274:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <m1+0x3>
    2278:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <m1+0x2>
    227c:	69 2f       	mov	r22, r25
    227e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    2282:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <m2+0x3>
    2286:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <m2+0x2>
    228a:	69 2f       	mov	r22, r25
    228c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    2290:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <m1>
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_High);
    229a:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <m1+0x1>
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    22a4:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <m2>
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_High);
    22ae:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <m2+0x1>
    22b2:	61 e0       	ldi	r22, 0x01	; 1
    22b4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    22b8:	00 00       	nop
	}
}
    22ba:	00 00       	nop
    22bc:	0f 90       	pop	r0
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	08 95       	ret

000022c4 <Motor_Off>:


void Motor_Off(u8 CopyMotorNum)
{
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	1f 92       	push	r1
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	89 83       	std	Y+1, r24	; 0x01
	switch(CopyMotorNum)
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	82 30       	cpi	r24, 0x02	; 2
    22d8:	91 05       	cpc	r25, r1
    22da:	c1 f0       	breq	.+48     	; 0x230c <Motor_Off+0x48>
    22dc:	83 30       	cpi	r24, 0x03	; 3
    22de:	91 05       	cpc	r25, r1
    22e0:	39 f1       	breq	.+78     	; 0x2330 <Motor_Off+0x6c>
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <Motor_Off+0x24>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
		break;
	}
}
    22e6:	47 c0       	rjmp	.+142    	; 0x2376 <Motor_Off+0xb2>
void Motor_Off(u8 CopyMotorNum)
{
	switch(CopyMotorNum)
	{
	case Motor_1:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    22e8:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <m1+0x3>
    22ec:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <m1+0x2>
    22f0:	69 2f       	mov	r22, r25
    22f2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    22f6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <m1>
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    2300:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <m1+0x1>
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    230a:	35 c0       	rjmp	.+106    	; 0x2376 <Motor_Off+0xb2>
	case Motor_2:
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    230c:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <m2+0x3>
    2310:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <m2+0x2>
    2314:	69 2f       	mov	r22, r25
    2316:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    231a:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <m2>
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    2324:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <m2+0x1>
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    232e:	23 c0       	rjmp	.+70     	; 0x2376 <Motor_Off+0xb2>
	case Motors:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    2330:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <m1+0x3>
    2334:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <m1+0x2>
    2338:	69 2f       	mov	r22, r25
    233a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    233e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <m2+0x3>
    2342:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <m2+0x2>
    2346:	69 2f       	mov	r22, r25
    2348:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    234c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <m1>
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    2356:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <m1+0x1>
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    2360:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <m2>
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    236a:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <m2+0x1>
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    2374:	00 00       	nop
	}
}
    2376:	00 00       	nop
    2378:	0f 90       	pop	r0
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <Bcd_7segInit>:
 *      Author: ziad
 */
#include "bcd_Init.h"

void Bcd_7segInit(BCD Copy7seg)
{
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	00 d0       	rcall	.+0      	; 0x2386 <Bcd_7segInit+0x6>
    2386:	00 d0       	rcall	.+0      	; 0x2388 <Bcd_7segInit+0x8>
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	69 83       	std	Y+1, r22	; 0x01
    238e:	7a 83       	std	Y+2, r23	; 0x02
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	9c 83       	std	Y+4, r25	; 0x04
	Dio_setPinDir(Copy7seg.Pin_1, Direction_Pin_Output);
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	61 e0       	ldi	r22, 0x01	; 1
    2398:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_2, Direction_Pin_Output);
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_3, Direction_Pin_Output);
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_4, Direction_Pin_Output);
    23ac:	8c 81       	ldd	r24, Y+4	; 0x04
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
}
    23b4:	00 00       	nop
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	08 95       	ret

000023c4 <Bcd_7segWriteNum>:

void Bcd_7segWriteNum(BCD Copy7segNum , u8 CopyNumber)
{
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <Bcd_7segWriteNum+0x6>
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <Bcd_7segWriteNum+0x8>
    23cc:	1f 92       	push	r1
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	69 83       	std	Y+1, r22	; 0x01
    23d4:	7a 83       	std	Y+2, r23	; 0x02
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    23d8:	9c 83       	std	Y+4, r25	; 0x04
    23da:	4d 83       	std	Y+5, r20	; 0x05
	switch (CopyNumber) {
    23dc:	8d 81       	ldd	r24, Y+5	; 0x05
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	09 2e       	mov	r0, r25
    23e4:	00 0c       	add	r0, r0
    23e6:	aa 0b       	sbc	r26, r26
    23e8:	bb 0b       	sbc	r27, r27
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	29 e0       	ldi	r18, 0x09	; 9
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	84 1b       	sub	r24, r20
    23f4:	95 0b       	sbc	r25, r21
    23f6:	28 17       	cp	r18, r24
    23f8:	39 07       	cpc	r19, r25
    23fa:	08 f4       	brcc	.+2      	; 0x23fe <Bcd_7segWriteNum+0x3a>
    23fc:	af c0       	rjmp	.+350    	; 0x255c <Bcd_7segWriteNum+0x198>
    23fe:	86 5d       	subi	r24, 0xD6	; 214
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	fc 01       	movw	r30, r24
    2404:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__tablejump2__>
		case 0:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2420:	8c 81       	ldd	r24, Y+4	; 0x04
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    2428:	9a c0       	rjmp	.+308    	; 0x255e <Bcd_7segWriteNum+0x19a>
		case 1:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	61 e0       	ldi	r22, 0x01	; 1
    242e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    244a:	89 c0       	rjmp	.+274    	; 0x255e <Bcd_7segWriteNum+0x19a>
		case 2:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	61 e0       	ldi	r22, 0x01	; 1
    2458:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    246c:	78 c0       	rjmp	.+240    	; 0x255e <Bcd_7segWriteNum+0x19a>
		case 3:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	61 e0       	ldi	r22, 0x01	; 1
    2472:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	61 e0       	ldi	r22, 0x01	; 1
    247a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    248e:	67 c0       	rjmp	.+206    	; 0x255e <Bcd_7segWriteNum+0x19a>
		case 4:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	60 e0       	ldi	r22, 0x00	; 0
    2494:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    24a8:	8c 81       	ldd	r24, Y+4	; 0x04
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    24b0:	56 c0       	rjmp	.+172    	; 0x255e <Bcd_7segWriteNum+0x19a>
		case 5:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	61 e0       	ldi	r22, 0x01	; 1
    24c6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    24ca:	8c 81       	ldd	r24, Y+4	; 0x04
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    24d2:	45 c0       	rjmp	.+138    	; 0x255e <Bcd_7segWriteNum+0x19a>
		case 6:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	61 e0       	ldi	r22, 0x01	; 1
    24e0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	61 e0       	ldi	r22, 0x01	; 1
    24e8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    24f4:	34 c0       	rjmp	.+104    	; 0x255e <Bcd_7segWriteNum+0x19a>
		case 7:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	61 e0       	ldi	r22, 0x01	; 1
    24fa:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    250e:	8c 81       	ldd	r24, Y+4	; 0x04
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    2516:	23 c0       	rjmp	.+70     	; 0x255e <Bcd_7segWriteNum+0x19a>
		case 8:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    2538:	12 c0       	rjmp	.+36     	; 0x255e <Bcd_7segWriteNum+0x19a>
		case 9:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	61 e0       	ldi	r22, 0x01	; 1
    253e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	61 e0       	ldi	r22, 0x01	; 1
    2556:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    255a:	01 c0       	rjmp	.+2      	; 0x255e <Bcd_7segWriteNum+0x19a>
		default:
			break;
    255c:	00 00       	nop
	}
}
    255e:	00 00       	nop
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	08 95       	ret

00002570 <Bcd_MPX_2Enable>:

void Bcd_MPX_2Enable(MPX_2_Enables CopyPinsEnable, u8 CopyCommonType, u8 CopyStatus)
{
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	00 d0       	rcall	.+0      	; 0x2576 <Bcd_MPX_2Enable+0x6>
    2576:	00 d0       	rcall	.+0      	; 0x2578 <Bcd_MPX_2Enable+0x8>
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	6b 83       	std	Y+3, r22	; 0x03
    2582:	4c 83       	std	Y+4, r20	; 0x04
	if(CopyStatus == Enable){
    2584:	8c 81       	ldd	r24, Y+4	; 0x04
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	d1 f4       	brne	.+52     	; 0x25be <Bcd_MPX_2Enable+0x4e>
		switch (CopyCommonType) {
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	61 f0       	breq	.+24     	; 0x25ac <Bcd_MPX_2Enable+0x3c>
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	09 f0       	breq	.+2      	; 0x259a <Bcd_MPX_2Enable+0x2a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
				break;
			default:
				break;
    2598:	2f c0       	rjmp	.+94     	; 0x25f8 <Bcd_MPX_2Enable+0x88>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	61 e0       	ldi	r22, 0x01	; 1
    25a6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    25aa:	26 c0       	rjmp	.+76     	; 0x25f8 <Bcd_MPX_2Enable+0x88>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    25bc:	1d c0       	rjmp	.+58     	; 0x25f8 <Bcd_MPX_2Enable+0x88>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable){
    25be:	8c 81       	ldd	r24, Y+4	; 0x04
    25c0:	88 23       	and	r24, r24
    25c2:	d1 f4       	brne	.+52     	; 0x25f8 <Bcd_MPX_2Enable+0x88>
		switch (CopyCommonType) {
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	61 f0       	breq	.+24     	; 0x25e6 <Bcd_MPX_2Enable+0x76>
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <Bcd_MPX_2Enable+0x64>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
				break;
			default:
				break;
    25d2:	12 c0       	rjmp	.+36     	; 0x25f8 <Bcd_MPX_2Enable+0x88>
	}
	else if (CopyStatus == Disable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    25e4:	09 c0       	rjmp	.+18     	; 0x25f8 <Bcd_MPX_2Enable+0x88>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	61 e0       	ldi	r22, 0x01	; 1
    25ea:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    25f6:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    25f8:	00 00       	nop
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	08 95       	ret

00002608 <Bcd_MPX_4Enable>:
void Bcd_MPX_4Enable(MPX_4_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	00 d0       	rcall	.+0      	; 0x260e <Bcd_MPX_4Enable+0x6>
    260e:	00 d0       	rcall	.+0      	; 0x2610 <Bcd_MPX_4Enable+0x8>
    2610:	00 d0       	rcall	.+0      	; 0x2612 <Bcd_MPX_4Enable+0xa>
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	69 83       	std	Y+1, r22	; 0x01
    2618:	7a 83       	std	Y+2, r23	; 0x02
    261a:	8b 83       	std	Y+3, r24	; 0x03
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	4d 83       	std	Y+5, r20	; 0x05
    2620:	2e 83       	std	Y+6, r18	; 0x06
	if(CopyStatus == Enable){
    2622:	8e 81       	ldd	r24, Y+6	; 0x06
    2624:	81 30       	cpi	r24, 0x01	; 1
    2626:	51 f5       	brne	.+84     	; 0x267c <Bcd_MPX_4Enable+0x74>
		switch (CopyCommonType) {
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	88 2f       	mov	r24, r24
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	a1 f0       	breq	.+40     	; 0x265a <Bcd_MPX_4Enable+0x52>
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	09 f0       	breq	.+2      	; 0x2638 <Bcd_MPX_4Enable+0x30>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				break;
			default:
				break;
    2636:	4f c0       	rjmp	.+158    	; 0x26d6 <Bcd_MPX_4Enable+0xce>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	61 e0       	ldi	r22, 0x01	; 1
    263c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	61 e0       	ldi	r22, 0x01	; 1
    264c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
    2652:	61 e0       	ldi	r22, 0x01	; 1
    2654:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    2658:	3e c0       	rjmp	.+124    	; 0x26d6 <Bcd_MPX_4Enable+0xce>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2662:	8a 81       	ldd	r24, Y+2	; 0x02
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    267a:	2d c0       	rjmp	.+90     	; 0x26d6 <Bcd_MPX_4Enable+0xce>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    267c:	8e 81       	ldd	r24, Y+6	; 0x06
    267e:	88 23       	and	r24, r24
    2680:	51 f5       	brne	.+84     	; 0x26d6 <Bcd_MPX_4Enable+0xce>
	{
		switch (CopyCommonType) {
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	a1 f0       	breq	.+40     	; 0x26b4 <Bcd_MPX_4Enable+0xac>
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	09 f0       	breq	.+2      	; 0x2692 <Bcd_MPX_4Enable+0x8a>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				break;
			default:
				break;
    2690:	22 c0       	rjmp	.+68     	; 0x26d6 <Bcd_MPX_4Enable+0xce>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    26aa:	8c 81       	ldd	r24, Y+4	; 0x04
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    26b2:	11 c0       	rjmp	.+34     	; 0x26d6 <Bcd_MPX_4Enable+0xce>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	61 e0       	ldi	r22, 0x01	; 1
    26c0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	61 e0       	ldi	r22, 0x01	; 1
    26c8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    26cc:	8c 81       	ldd	r24, Y+4	; 0x04
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    26d4:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    26d6:	00 00       	nop
    26d8:	26 96       	adiw	r28, 0x06	; 6
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	08 95       	ret

000026ea <Bcd_MPX_6Enable>:
void Bcd_MPX_6Enable(MPX_6_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    26ea:	0f 93       	push	r16
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	28 97       	sbiw	r28, 0x08	; 8
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	49 83       	std	Y+1, r20	; 0x01
    2702:	5a 83       	std	Y+2, r21	; 0x02
    2704:	6b 83       	std	Y+3, r22	; 0x03
    2706:	7c 83       	std	Y+4, r23	; 0x04
    2708:	8d 83       	std	Y+5, r24	; 0x05
    270a:	9e 83       	std	Y+6, r25	; 0x06
    270c:	2f 83       	std	Y+7, r18	; 0x07
    270e:	08 87       	std	Y+8, r16	; 0x08
	if(CopyStatus == Enable){
    2710:	88 85       	ldd	r24, Y+8	; 0x08
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	d1 f5       	brne	.+116    	; 0x278a <Bcd_MPX_6Enable+0xa0>
		switch (CopyCommonType) {
    2716:	8f 81       	ldd	r24, Y+7	; 0x07
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	e1 f0       	breq	.+56     	; 0x2758 <Bcd_MPX_6Enable+0x6e>
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	09 f0       	breq	.+2      	; 0x2726 <Bcd_MPX_6Enable+0x3c>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				break;
			default:
				break;
    2724:	6f c0       	rjmp	.+222    	; 0x2804 <Bcd_MPX_6Enable+0x11a>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	61 e0       	ldi	r22, 0x01	; 1
    273a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	61 e0       	ldi	r22, 0x01	; 1
    2742:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    274e:	8e 81       	ldd	r24, Y+6	; 0x06
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    2756:	56 c0       	rjmp	.+172    	; 0x2804 <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    2770:	8c 81       	ldd	r24, Y+4	; 0x04
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    2780:	8e 81       	ldd	r24, Y+6	; 0x06
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    2788:	3d c0       	rjmp	.+122    	; 0x2804 <Bcd_MPX_6Enable+0x11a>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    278a:	88 85       	ldd	r24, Y+8	; 0x08
    278c:	88 23       	and	r24, r24
    278e:	d1 f5       	brne	.+116    	; 0x2804 <Bcd_MPX_6Enable+0x11a>
	{
		switch (CopyCommonType) {
    2790:	8f 81       	ldd	r24, Y+7	; 0x07
    2792:	88 2f       	mov	r24, r24
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	e1 f0       	breq	.+56     	; 0x27d2 <Bcd_MPX_6Enable+0xe8>
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	09 f0       	breq	.+2      	; 0x27a0 <Bcd_MPX_6Enable+0xb6>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				break;
			default:
				break;
    279e:	32 c0       	rjmp	.+100    	; 0x2804 <Bcd_MPX_6Enable+0x11a>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    27c0:	8d 81       	ldd	r24, Y+5	; 0x05
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    27c8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    27d0:	19 c0       	rjmp	.+50     	; 0x2804 <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	61 e0       	ldi	r22, 0x01	; 1
    27d6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	61 e0       	ldi	r22, 0x01	; 1
    27de:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	61 e0       	ldi	r22, 0x01	; 1
    27e6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    27ea:	8c 81       	ldd	r24, Y+4	; 0x04
    27ec:	61 e0       	ldi	r22, 0x01	; 1
    27ee:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    27fa:	8e 81       	ldd	r24, Y+6	; 0x06
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    2802:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    2804:	00 00       	nop
    2806:	28 96       	adiw	r28, 0x08	; 8
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	0f 91       	pop	r16
    2818:	08 95       	ret

0000281a <Bcd_MPX_8Enable>:
void Bcd_MPX_8Enable(MPX_8_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    281a:	ef 92       	push	r14
    281c:	0f 93       	push	r16
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	2a 97       	sbiw	r28, 0x0a	; 10
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	29 83       	std	Y+1, r18	; 0x01
    2834:	3a 83       	std	Y+2, r19	; 0x02
    2836:	4b 83       	std	Y+3, r20	; 0x03
    2838:	5c 83       	std	Y+4, r21	; 0x04
    283a:	6d 83       	std	Y+5, r22	; 0x05
    283c:	7e 83       	std	Y+6, r23	; 0x06
    283e:	8f 83       	std	Y+7, r24	; 0x07
    2840:	98 87       	std	Y+8, r25	; 0x08
    2842:	09 87       	std	Y+9, r16	; 0x09
    2844:	ea 86       	std	Y+10, r14	; 0x0a
	if(CopyStatus == Enable){
    2846:	8a 85       	ldd	r24, Y+10	; 0x0a
    2848:	81 30       	cpi	r24, 0x01	; 1
    284a:	09 f0       	breq	.+2      	; 0x284e <Bcd_MPX_8Enable+0x34>
    284c:	4a c0       	rjmp	.+148    	; 0x28e2 <Bcd_MPX_8Enable+0xc8>
		switch (CopyCommonType) {
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	88 2f       	mov	r24, r24
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	21 f1       	breq	.+72     	; 0x28a0 <Bcd_MPX_8Enable+0x86>
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	09 f0       	breq	.+2      	; 0x285e <Bcd_MPX_8Enable+0x44>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
				break;
			default:
				break;
    285c:	90 c0       	rjmp	.+288    	; 0x297e <Bcd_MPX_8Enable+0x164>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	61 e0       	ldi	r22, 0x01	; 1
    2862:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	61 e0       	ldi	r22, 0x01	; 1
    286a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	61 e0       	ldi	r22, 0x01	; 1
    2872:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2876:	8c 81       	ldd	r24, Y+4	; 0x04
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    287e:	8d 81       	ldd	r24, Y+5	; 0x05
    2880:	61 e0       	ldi	r22, 0x01	; 1
    2882:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    2886:	8e 81       	ldd	r24, Y+6	; 0x06
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
    288e:	8f 81       	ldd	r24, Y+7	; 0x07
    2890:	61 e0       	ldi	r22, 0x01	; 1
    2892:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
    2896:	88 85       	ldd	r24, Y+8	; 0x08
    2898:	61 e0       	ldi	r22, 0x01	; 1
    289a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    289e:	6f c0       	rjmp	.+222    	; 0x297e <Bcd_MPX_8Enable+0x164>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	60 e0       	ldi	r22, 0x00	; 0
    28b4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    28b8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    28c8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
    28d0:	8f 81       	ldd	r24, Y+7	; 0x07
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
    28d8:	88 85       	ldd	r24, Y+8	; 0x08
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    28e0:	4e c0       	rjmp	.+156    	; 0x297e <Bcd_MPX_8Enable+0x164>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    28e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e4:	88 23       	and	r24, r24
    28e6:	09 f0       	breq	.+2      	; 0x28ea <Bcd_MPX_8Enable+0xd0>
    28e8:	4a c0       	rjmp	.+148    	; 0x297e <Bcd_MPX_8Enable+0x164>
	{
		switch (CopyCommonType) {
    28ea:	89 85       	ldd	r24, Y+9	; 0x09
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	21 f1       	breq	.+72     	; 0x293c <Bcd_MPX_8Enable+0x122>
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	09 f0       	breq	.+2      	; 0x28fa <Bcd_MPX_8Enable+0xe0>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
				break;
			default:
				break;
    28f8:	42 c0       	rjmp	.+132    	; 0x297e <Bcd_MPX_8Enable+0x164>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    2912:	8c 81       	ldd	r24, Y+4	; 0x04
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    2922:	8e 81       	ldd	r24, Y+6	; 0x06
    2924:	60 e0       	ldi	r22, 0x00	; 0
    2926:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
    292a:	8f 81       	ldd	r24, Y+7	; 0x07
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
    2932:	88 85       	ldd	r24, Y+8	; 0x08
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    293a:	21 c0       	rjmp	.+66     	; 0x297e <Bcd_MPX_8Enable+0x164>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	61 e0       	ldi	r22, 0x01	; 1
    2940:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	61 e0       	ldi	r22, 0x01	; 1
    2948:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	61 e0       	ldi	r22, 0x01	; 1
    2950:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2954:	8c 81       	ldd	r24, Y+4	; 0x04
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    2964:	8e 81       	ldd	r24, Y+6	; 0x06
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
    296c:	8f 81       	ldd	r24, Y+7	; 0x07
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
    2974:	88 85       	ldd	r24, Y+8	; 0x08
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    297c:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    297e:	00 00       	nop
    2980:	2a 96       	adiw	r28, 0x0a	; 10
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	0f 91       	pop	r16
    2992:	ef 90       	pop	r14
    2994:	08 95       	ret

00002996 <main>:
/********** SECTION : Includes **********/
#include "Main_Init.h"

/********** SECTION : Main Function **********/
int main (void)
{
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    299e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <App_Init>

	while(1)
	{
		App_Loop();
    29a2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <App_Loop>
	}
    29a6:	fd cf       	rjmp	.-6      	; 0x29a2 <main+0xc>

000029a8 <__tablejump2__>:
    29a8:	ee 0f       	add	r30, r30
    29aa:	ff 1f       	adc	r31, r31
    29ac:	05 90       	lpm	r0, Z+
    29ae:	f4 91       	lpm	r31, Z
    29b0:	e0 2d       	mov	r30, r0
    29b2:	09 94       	ijmp

000029b4 <__cmpsf2>:
    29b4:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__fp_cmp>
    29b8:	08 f4       	brcc	.+2      	; 0x29bc <__cmpsf2+0x8>
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	08 95       	ret

000029be <__divsf3>:
    29be:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divsf3x>
    29c2:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__fp_round>
    29c6:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__fp_pscB>
    29ca:	58 f0       	brcs	.+22     	; 0x29e2 <__divsf3+0x24>
    29cc:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__fp_pscA>
    29d0:	40 f0       	brcs	.+16     	; 0x29e2 <__divsf3+0x24>
    29d2:	29 f4       	brne	.+10     	; 0x29de <__divsf3+0x20>
    29d4:	5f 3f       	cpi	r21, 0xFF	; 255
    29d6:	29 f0       	breq	.+10     	; 0x29e2 <__divsf3+0x24>
    29d8:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_inf>
    29dc:	51 11       	cpse	r21, r1
    29de:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_szero>
    29e2:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__fp_nan>

000029e6 <__divsf3x>:
    29e6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__fp_split3>
    29ea:	68 f3       	brcs	.-38     	; 0x29c6 <__divsf3+0x8>

000029ec <__divsf3_pse>:
    29ec:	99 23       	and	r25, r25
    29ee:	b1 f3       	breq	.-20     	; 0x29dc <__divsf3+0x1e>
    29f0:	55 23       	and	r21, r21
    29f2:	91 f3       	breq	.-28     	; 0x29d8 <__divsf3+0x1a>
    29f4:	95 1b       	sub	r25, r21
    29f6:	55 0b       	sbc	r21, r21
    29f8:	bb 27       	eor	r27, r27
    29fa:	aa 27       	eor	r26, r26
    29fc:	62 17       	cp	r22, r18
    29fe:	73 07       	cpc	r23, r19
    2a00:	84 07       	cpc	r24, r20
    2a02:	38 f0       	brcs	.+14     	; 0x2a12 <__divsf3_pse+0x26>
    2a04:	9f 5f       	subi	r25, 0xFF	; 255
    2a06:	5f 4f       	sbci	r21, 0xFF	; 255
    2a08:	22 0f       	add	r18, r18
    2a0a:	33 1f       	adc	r19, r19
    2a0c:	44 1f       	adc	r20, r20
    2a0e:	aa 1f       	adc	r26, r26
    2a10:	a9 f3       	breq	.-22     	; 0x29fc <__divsf3_pse+0x10>
    2a12:	35 d0       	rcall	.+106    	; 0x2a7e <__divsf3_pse+0x92>
    2a14:	0e 2e       	mov	r0, r30
    2a16:	3a f0       	brmi	.+14     	; 0x2a26 <__divsf3_pse+0x3a>
    2a18:	e0 e8       	ldi	r30, 0x80	; 128
    2a1a:	32 d0       	rcall	.+100    	; 0x2a80 <__divsf3_pse+0x94>
    2a1c:	91 50       	subi	r25, 0x01	; 1
    2a1e:	50 40       	sbci	r21, 0x00	; 0
    2a20:	e6 95       	lsr	r30
    2a22:	00 1c       	adc	r0, r0
    2a24:	ca f7       	brpl	.-14     	; 0x2a18 <__divsf3_pse+0x2c>
    2a26:	2b d0       	rcall	.+86     	; 0x2a7e <__divsf3_pse+0x92>
    2a28:	fe 2f       	mov	r31, r30
    2a2a:	29 d0       	rcall	.+82     	; 0x2a7e <__divsf3_pse+0x92>
    2a2c:	66 0f       	add	r22, r22
    2a2e:	77 1f       	adc	r23, r23
    2a30:	88 1f       	adc	r24, r24
    2a32:	bb 1f       	adc	r27, r27
    2a34:	26 17       	cp	r18, r22
    2a36:	37 07       	cpc	r19, r23
    2a38:	48 07       	cpc	r20, r24
    2a3a:	ab 07       	cpc	r26, r27
    2a3c:	b0 e8       	ldi	r27, 0x80	; 128
    2a3e:	09 f0       	breq	.+2      	; 0x2a42 <__divsf3_pse+0x56>
    2a40:	bb 0b       	sbc	r27, r27
    2a42:	80 2d       	mov	r24, r0
    2a44:	bf 01       	movw	r22, r30
    2a46:	ff 27       	eor	r31, r31
    2a48:	93 58       	subi	r25, 0x83	; 131
    2a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4c:	3a f0       	brmi	.+14     	; 0x2a5c <__divsf3_pse+0x70>
    2a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a50:	51 05       	cpc	r21, r1
    2a52:	78 f0       	brcs	.+30     	; 0x2a72 <__divsf3_pse+0x86>
    2a54:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_inf>
    2a58:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_szero>
    2a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a5e:	e4 f3       	brlt	.-8      	; 0x2a58 <__divsf3_pse+0x6c>
    2a60:	98 3e       	cpi	r25, 0xE8	; 232
    2a62:	d4 f3       	brlt	.-12     	; 0x2a58 <__divsf3_pse+0x6c>
    2a64:	86 95       	lsr	r24
    2a66:	77 95       	ror	r23
    2a68:	67 95       	ror	r22
    2a6a:	b7 95       	ror	r27
    2a6c:	f7 95       	ror	r31
    2a6e:	9f 5f       	subi	r25, 0xFF	; 255
    2a70:	c9 f7       	brne	.-14     	; 0x2a64 <__divsf3_pse+0x78>
    2a72:	88 0f       	add	r24, r24
    2a74:	91 1d       	adc	r25, r1
    2a76:	96 95       	lsr	r25
    2a78:	87 95       	ror	r24
    2a7a:	97 f9       	bld	r25, 7
    2a7c:	08 95       	ret
    2a7e:	e1 e0       	ldi	r30, 0x01	; 1
    2a80:	66 0f       	add	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	88 1f       	adc	r24, r24
    2a86:	bb 1f       	adc	r27, r27
    2a88:	62 17       	cp	r22, r18
    2a8a:	73 07       	cpc	r23, r19
    2a8c:	84 07       	cpc	r24, r20
    2a8e:	ba 07       	cpc	r27, r26
    2a90:	20 f0       	brcs	.+8      	; 0x2a9a <__divsf3_pse+0xae>
    2a92:	62 1b       	sub	r22, r18
    2a94:	73 0b       	sbc	r23, r19
    2a96:	84 0b       	sbc	r24, r20
    2a98:	ba 0b       	sbc	r27, r26
    2a9a:	ee 1f       	adc	r30, r30
    2a9c:	88 f7       	brcc	.-30     	; 0x2a80 <__divsf3_pse+0x94>
    2a9e:	e0 95       	com	r30
    2aa0:	08 95       	ret

00002aa2 <__fixunssfsi>:
    2aa2:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__fp_splitA>
    2aa6:	88 f0       	brcs	.+34     	; 0x2aca <__fixunssfsi+0x28>
    2aa8:	9f 57       	subi	r25, 0x7F	; 127
    2aaa:	98 f0       	brcs	.+38     	; 0x2ad2 <__fixunssfsi+0x30>
    2aac:	b9 2f       	mov	r27, r25
    2aae:	99 27       	eor	r25, r25
    2ab0:	b7 51       	subi	r27, 0x17	; 23
    2ab2:	b0 f0       	brcs	.+44     	; 0x2ae0 <__fixunssfsi+0x3e>
    2ab4:	e1 f0       	breq	.+56     	; 0x2aee <__fixunssfsi+0x4c>
    2ab6:	66 0f       	add	r22, r22
    2ab8:	77 1f       	adc	r23, r23
    2aba:	88 1f       	adc	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	1a f0       	brmi	.+6      	; 0x2ac6 <__fixunssfsi+0x24>
    2ac0:	ba 95       	dec	r27
    2ac2:	c9 f7       	brne	.-14     	; 0x2ab6 <__fixunssfsi+0x14>
    2ac4:	14 c0       	rjmp	.+40     	; 0x2aee <__fixunssfsi+0x4c>
    2ac6:	b1 30       	cpi	r27, 0x01	; 1
    2ac8:	91 f0       	breq	.+36     	; 0x2aee <__fixunssfsi+0x4c>
    2aca:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__fp_zero>
    2ace:	b1 e0       	ldi	r27, 0x01	; 1
    2ad0:	08 95       	ret
    2ad2:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__fp_zero>
    2ad6:	67 2f       	mov	r22, r23
    2ad8:	78 2f       	mov	r23, r24
    2ada:	88 27       	eor	r24, r24
    2adc:	b8 5f       	subi	r27, 0xF8	; 248
    2ade:	39 f0       	breq	.+14     	; 0x2aee <__fixunssfsi+0x4c>
    2ae0:	b9 3f       	cpi	r27, 0xF9	; 249
    2ae2:	cc f3       	brlt	.-14     	; 0x2ad6 <__fixunssfsi+0x34>
    2ae4:	86 95       	lsr	r24
    2ae6:	77 95       	ror	r23
    2ae8:	67 95       	ror	r22
    2aea:	b3 95       	inc	r27
    2aec:	d9 f7       	brne	.-10     	; 0x2ae4 <__fixunssfsi+0x42>
    2aee:	3e f4       	brtc	.+14     	; 0x2afe <__fixunssfsi+0x5c>
    2af0:	90 95       	com	r25
    2af2:	80 95       	com	r24
    2af4:	70 95       	com	r23
    2af6:	61 95       	neg	r22
    2af8:	7f 4f       	sbci	r23, 0xFF	; 255
    2afa:	8f 4f       	sbci	r24, 0xFF	; 255
    2afc:	9f 4f       	sbci	r25, 0xFF	; 255
    2afe:	08 95       	ret

00002b00 <__fp_cmp>:
    2b00:	99 0f       	add	r25, r25
    2b02:	00 08       	sbc	r0, r0
    2b04:	55 0f       	add	r21, r21
    2b06:	aa 0b       	sbc	r26, r26
    2b08:	e0 e8       	ldi	r30, 0x80	; 128
    2b0a:	fe ef       	ldi	r31, 0xFE	; 254
    2b0c:	16 16       	cp	r1, r22
    2b0e:	17 06       	cpc	r1, r23
    2b10:	e8 07       	cpc	r30, r24
    2b12:	f9 07       	cpc	r31, r25
    2b14:	c0 f0       	brcs	.+48     	; 0x2b46 <__fp_cmp+0x46>
    2b16:	12 16       	cp	r1, r18
    2b18:	13 06       	cpc	r1, r19
    2b1a:	e4 07       	cpc	r30, r20
    2b1c:	f5 07       	cpc	r31, r21
    2b1e:	98 f0       	brcs	.+38     	; 0x2b46 <__fp_cmp+0x46>
    2b20:	62 1b       	sub	r22, r18
    2b22:	73 0b       	sbc	r23, r19
    2b24:	84 0b       	sbc	r24, r20
    2b26:	95 0b       	sbc	r25, r21
    2b28:	39 f4       	brne	.+14     	; 0x2b38 <__fp_cmp+0x38>
    2b2a:	0a 26       	eor	r0, r26
    2b2c:	61 f0       	breq	.+24     	; 0x2b46 <__fp_cmp+0x46>
    2b2e:	23 2b       	or	r18, r19
    2b30:	24 2b       	or	r18, r20
    2b32:	25 2b       	or	r18, r21
    2b34:	21 f4       	brne	.+8      	; 0x2b3e <__fp_cmp+0x3e>
    2b36:	08 95       	ret
    2b38:	0a 26       	eor	r0, r26
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <__fp_cmp+0x3e>
    2b3c:	a1 40       	sbci	r26, 0x01	; 1
    2b3e:	a6 95       	lsr	r26
    2b40:	8f ef       	ldi	r24, 0xFF	; 255
    2b42:	81 1d       	adc	r24, r1
    2b44:	81 1d       	adc	r24, r1
    2b46:	08 95       	ret

00002b48 <__fp_inf>:
    2b48:	97 f9       	bld	r25, 7
    2b4a:	9f 67       	ori	r25, 0x7F	; 127
    2b4c:	80 e8       	ldi	r24, 0x80	; 128
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	08 95       	ret

00002b54 <__fp_nan>:
    2b54:	9f ef       	ldi	r25, 0xFF	; 255
    2b56:	80 ec       	ldi	r24, 0xC0	; 192
    2b58:	08 95       	ret

00002b5a <__fp_pscA>:
    2b5a:	00 24       	eor	r0, r0
    2b5c:	0a 94       	dec	r0
    2b5e:	16 16       	cp	r1, r22
    2b60:	17 06       	cpc	r1, r23
    2b62:	18 06       	cpc	r1, r24
    2b64:	09 06       	cpc	r0, r25
    2b66:	08 95       	ret

00002b68 <__fp_pscB>:
    2b68:	00 24       	eor	r0, r0
    2b6a:	0a 94       	dec	r0
    2b6c:	12 16       	cp	r1, r18
    2b6e:	13 06       	cpc	r1, r19
    2b70:	14 06       	cpc	r1, r20
    2b72:	05 06       	cpc	r0, r21
    2b74:	08 95       	ret

00002b76 <__fp_round>:
    2b76:	09 2e       	mov	r0, r25
    2b78:	03 94       	inc	r0
    2b7a:	00 0c       	add	r0, r0
    2b7c:	11 f4       	brne	.+4      	; 0x2b82 <__fp_round+0xc>
    2b7e:	88 23       	and	r24, r24
    2b80:	52 f0       	brmi	.+20     	; 0x2b96 <__fp_round+0x20>
    2b82:	bb 0f       	add	r27, r27
    2b84:	40 f4       	brcc	.+16     	; 0x2b96 <__fp_round+0x20>
    2b86:	bf 2b       	or	r27, r31
    2b88:	11 f4       	brne	.+4      	; 0x2b8e <__fp_round+0x18>
    2b8a:	60 ff       	sbrs	r22, 0
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <__fp_round+0x20>
    2b8e:	6f 5f       	subi	r22, 0xFF	; 255
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	8f 4f       	sbci	r24, 0xFF	; 255
    2b94:	9f 4f       	sbci	r25, 0xFF	; 255
    2b96:	08 95       	ret

00002b98 <__fp_split3>:
    2b98:	57 fd       	sbrc	r21, 7
    2b9a:	90 58       	subi	r25, 0x80	; 128
    2b9c:	44 0f       	add	r20, r20
    2b9e:	55 1f       	adc	r21, r21
    2ba0:	59 f0       	breq	.+22     	; 0x2bb8 <__fp_splitA+0x10>
    2ba2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ba4:	71 f0       	breq	.+28     	; 0x2bc2 <__fp_splitA+0x1a>
    2ba6:	47 95       	ror	r20

00002ba8 <__fp_splitA>:
    2ba8:	88 0f       	add	r24, r24
    2baa:	97 fb       	bst	r25, 7
    2bac:	99 1f       	adc	r25, r25
    2bae:	61 f0       	breq	.+24     	; 0x2bc8 <__fp_splitA+0x20>
    2bb0:	9f 3f       	cpi	r25, 0xFF	; 255
    2bb2:	79 f0       	breq	.+30     	; 0x2bd2 <__fp_splitA+0x2a>
    2bb4:	87 95       	ror	r24
    2bb6:	08 95       	ret
    2bb8:	12 16       	cp	r1, r18
    2bba:	13 06       	cpc	r1, r19
    2bbc:	14 06       	cpc	r1, r20
    2bbe:	55 1f       	adc	r21, r21
    2bc0:	f2 cf       	rjmp	.-28     	; 0x2ba6 <__fp_split3+0xe>
    2bc2:	46 95       	lsr	r20
    2bc4:	f1 df       	rcall	.-30     	; 0x2ba8 <__fp_splitA>
    2bc6:	08 c0       	rjmp	.+16     	; 0x2bd8 <__fp_splitA+0x30>
    2bc8:	16 16       	cp	r1, r22
    2bca:	17 06       	cpc	r1, r23
    2bcc:	18 06       	cpc	r1, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	f1 cf       	rjmp	.-30     	; 0x2bb4 <__fp_splitA+0xc>
    2bd2:	86 95       	lsr	r24
    2bd4:	71 05       	cpc	r23, r1
    2bd6:	61 05       	cpc	r22, r1
    2bd8:	08 94       	sec
    2bda:	08 95       	ret

00002bdc <__fp_zero>:
    2bdc:	e8 94       	clt

00002bde <__fp_szero>:
    2bde:	bb 27       	eor	r27, r27
    2be0:	66 27       	eor	r22, r22
    2be2:	77 27       	eor	r23, r23
    2be4:	cb 01       	movw	r24, r22
    2be6:	97 f9       	bld	r25, 7
    2be8:	08 95       	ret

00002bea <__gesf2>:
    2bea:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__fp_cmp>
    2bee:	08 f4       	brcc	.+2      	; 0x2bf2 <__gesf2+0x8>
    2bf0:	8f ef       	ldi	r24, 0xFF	; 255
    2bf2:	08 95       	ret

00002bf4 <__mulsf3>:
    2bf4:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__mulsf3x>
    2bf8:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__fp_round>
    2bfc:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__fp_pscA>
    2c00:	38 f0       	brcs	.+14     	; 0x2c10 <__mulsf3+0x1c>
    2c02:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__fp_pscB>
    2c06:	20 f0       	brcs	.+8      	; 0x2c10 <__mulsf3+0x1c>
    2c08:	95 23       	and	r25, r21
    2c0a:	11 f0       	breq	.+4      	; 0x2c10 <__mulsf3+0x1c>
    2c0c:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_inf>
    2c10:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__fp_nan>
    2c14:	11 24       	eor	r1, r1
    2c16:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_szero>

00002c1a <__mulsf3x>:
    2c1a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__fp_split3>
    2c1e:	70 f3       	brcs	.-36     	; 0x2bfc <__mulsf3+0x8>

00002c20 <__mulsf3_pse>:
    2c20:	95 9f       	mul	r25, r21
    2c22:	c1 f3       	breq	.-16     	; 0x2c14 <__mulsf3+0x20>
    2c24:	95 0f       	add	r25, r21
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	55 1f       	adc	r21, r21
    2c2a:	62 9f       	mul	r22, r18
    2c2c:	f0 01       	movw	r30, r0
    2c2e:	72 9f       	mul	r23, r18
    2c30:	bb 27       	eor	r27, r27
    2c32:	f0 0d       	add	r31, r0
    2c34:	b1 1d       	adc	r27, r1
    2c36:	63 9f       	mul	r22, r19
    2c38:	aa 27       	eor	r26, r26
    2c3a:	f0 0d       	add	r31, r0
    2c3c:	b1 1d       	adc	r27, r1
    2c3e:	aa 1f       	adc	r26, r26
    2c40:	64 9f       	mul	r22, r20
    2c42:	66 27       	eor	r22, r22
    2c44:	b0 0d       	add	r27, r0
    2c46:	a1 1d       	adc	r26, r1
    2c48:	66 1f       	adc	r22, r22
    2c4a:	82 9f       	mul	r24, r18
    2c4c:	22 27       	eor	r18, r18
    2c4e:	b0 0d       	add	r27, r0
    2c50:	a1 1d       	adc	r26, r1
    2c52:	62 1f       	adc	r22, r18
    2c54:	73 9f       	mul	r23, r19
    2c56:	b0 0d       	add	r27, r0
    2c58:	a1 1d       	adc	r26, r1
    2c5a:	62 1f       	adc	r22, r18
    2c5c:	83 9f       	mul	r24, r19
    2c5e:	a0 0d       	add	r26, r0
    2c60:	61 1d       	adc	r22, r1
    2c62:	22 1f       	adc	r18, r18
    2c64:	74 9f       	mul	r23, r20
    2c66:	33 27       	eor	r19, r19
    2c68:	a0 0d       	add	r26, r0
    2c6a:	61 1d       	adc	r22, r1
    2c6c:	23 1f       	adc	r18, r19
    2c6e:	84 9f       	mul	r24, r20
    2c70:	60 0d       	add	r22, r0
    2c72:	21 1d       	adc	r18, r1
    2c74:	82 2f       	mov	r24, r18
    2c76:	76 2f       	mov	r23, r22
    2c78:	6a 2f       	mov	r22, r26
    2c7a:	11 24       	eor	r1, r1
    2c7c:	9f 57       	subi	r25, 0x7F	; 127
    2c7e:	50 40       	sbci	r21, 0x00	; 0
    2c80:	9a f0       	brmi	.+38     	; 0x2ca8 <__mulsf3_pse+0x88>
    2c82:	f1 f0       	breq	.+60     	; 0x2cc0 <__mulsf3_pse+0xa0>
    2c84:	88 23       	and	r24, r24
    2c86:	4a f0       	brmi	.+18     	; 0x2c9a <__mulsf3_pse+0x7a>
    2c88:	ee 0f       	add	r30, r30
    2c8a:	ff 1f       	adc	r31, r31
    2c8c:	bb 1f       	adc	r27, r27
    2c8e:	66 1f       	adc	r22, r22
    2c90:	77 1f       	adc	r23, r23
    2c92:	88 1f       	adc	r24, r24
    2c94:	91 50       	subi	r25, 0x01	; 1
    2c96:	50 40       	sbci	r21, 0x00	; 0
    2c98:	a9 f7       	brne	.-22     	; 0x2c84 <__mulsf3_pse+0x64>
    2c9a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c9c:	51 05       	cpc	r21, r1
    2c9e:	80 f0       	brcs	.+32     	; 0x2cc0 <__mulsf3_pse+0xa0>
    2ca0:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_inf>
    2ca4:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_szero>
    2ca8:	5f 3f       	cpi	r21, 0xFF	; 255
    2caa:	e4 f3       	brlt	.-8      	; 0x2ca4 <__mulsf3_pse+0x84>
    2cac:	98 3e       	cpi	r25, 0xE8	; 232
    2cae:	d4 f3       	brlt	.-12     	; 0x2ca4 <__mulsf3_pse+0x84>
    2cb0:	86 95       	lsr	r24
    2cb2:	77 95       	ror	r23
    2cb4:	67 95       	ror	r22
    2cb6:	b7 95       	ror	r27
    2cb8:	f7 95       	ror	r31
    2cba:	e7 95       	ror	r30
    2cbc:	9f 5f       	subi	r25, 0xFF	; 255
    2cbe:	c1 f7       	brne	.-16     	; 0x2cb0 <__mulsf3_pse+0x90>
    2cc0:	fe 2b       	or	r31, r30
    2cc2:	88 0f       	add	r24, r24
    2cc4:	91 1d       	adc	r25, r1
    2cc6:	96 95       	lsr	r25
    2cc8:	87 95       	ror	r24
    2cca:	97 f9       	bld	r25, 7
    2ccc:	08 95       	ret

00002cce <memset>:
    2cce:	dc 01       	movw	r26, r24
    2cd0:	01 c0       	rjmp	.+2      	; 0x2cd4 <memset+0x6>
    2cd2:	6d 93       	st	X+, r22
    2cd4:	41 50       	subi	r20, 0x01	; 1
    2cd6:	50 40       	sbci	r21, 0x00	; 0
    2cd8:	e0 f7       	brcc	.-8      	; 0x2cd2 <memset+0x4>
    2cda:	08 95       	ret

00002cdc <sprintf>:
    2cdc:	ae e0       	ldi	r26, 0x0E	; 14
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	e4 e7       	ldi	r30, 0x74	; 116
    2ce2:	f6 e1       	ldi	r31, 0x16	; 22
    2ce4:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x1c>
    2ce8:	0d 89       	ldd	r16, Y+21	; 0x15
    2cea:	1e 89       	ldd	r17, Y+22	; 0x16
    2cec:	86 e0       	ldi	r24, 0x06	; 6
    2cee:	8c 83       	std	Y+4, r24	; 0x04
    2cf0:	1a 83       	std	Y+2, r17	; 0x02
    2cf2:	09 83       	std	Y+1, r16	; 0x01
    2cf4:	8f ef       	ldi	r24, 0xFF	; 255
    2cf6:	9f e7       	ldi	r25, 0x7F	; 127
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
    2cfc:	ae 01       	movw	r20, r28
    2cfe:	47 5e       	subi	r20, 0xE7	; 231
    2d00:	5f 4f       	sbci	r21, 0xFF	; 255
    2d02:	6f 89       	ldd	r22, Y+23	; 0x17
    2d04:	78 8d       	ldd	r23, Y+24	; 0x18
    2d06:	ce 01       	movw	r24, r28
    2d08:	01 96       	adiw	r24, 0x01	; 1
    2d0a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <vfprintf>
    2d0e:	ef 81       	ldd	r30, Y+7	; 0x07
    2d10:	f8 85       	ldd	r31, Y+8	; 0x08
    2d12:	e0 0f       	add	r30, r16
    2d14:	f1 1f       	adc	r31, r17
    2d16:	10 82       	st	Z, r1
    2d18:	2e 96       	adiw	r28, 0x0e	; 14
    2d1a:	e4 e0       	ldi	r30, 0x04	; 4
    2d1c:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x1c>

00002d20 <vfprintf>:
    2d20:	ab e0       	ldi	r26, 0x0B	; 11
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e6 e9       	ldi	r30, 0x96	; 150
    2d26:	f6 e1       	ldi	r31, 0x16	; 22
    2d28:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__prologue_saves__>
    2d2c:	6c 01       	movw	r12, r24
    2d2e:	7b 01       	movw	r14, r22
    2d30:	8a 01       	movw	r16, r20
    2d32:	fc 01       	movw	r30, r24
    2d34:	17 82       	std	Z+7, r1	; 0x07
    2d36:	16 82       	std	Z+6, r1	; 0x06
    2d38:	83 81       	ldd	r24, Z+3	; 0x03
    2d3a:	81 ff       	sbrs	r24, 1
    2d3c:	cc c1       	rjmp	.+920    	; 0x30d6 <vfprintf+0x3b6>
    2d3e:	ce 01       	movw	r24, r28
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	3c 01       	movw	r6, r24
    2d44:	f6 01       	movw	r30, r12
    2d46:	93 81       	ldd	r25, Z+3	; 0x03
    2d48:	f7 01       	movw	r30, r14
    2d4a:	93 fd       	sbrc	r25, 3
    2d4c:	85 91       	lpm	r24, Z+
    2d4e:	93 ff       	sbrs	r25, 3
    2d50:	81 91       	ld	r24, Z+
    2d52:	7f 01       	movw	r14, r30
    2d54:	88 23       	and	r24, r24
    2d56:	09 f4       	brne	.+2      	; 0x2d5a <vfprintf+0x3a>
    2d58:	ba c1       	rjmp	.+884    	; 0x30ce <vfprintf+0x3ae>
    2d5a:	85 32       	cpi	r24, 0x25	; 37
    2d5c:	39 f4       	brne	.+14     	; 0x2d6c <vfprintf+0x4c>
    2d5e:	93 fd       	sbrc	r25, 3
    2d60:	85 91       	lpm	r24, Z+
    2d62:	93 ff       	sbrs	r25, 3
    2d64:	81 91       	ld	r24, Z+
    2d66:	7f 01       	movw	r14, r30
    2d68:	85 32       	cpi	r24, 0x25	; 37
    2d6a:	29 f4       	brne	.+10     	; 0x2d76 <vfprintf+0x56>
    2d6c:	b6 01       	movw	r22, r12
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2d74:	e7 cf       	rjmp	.-50     	; 0x2d44 <vfprintf+0x24>
    2d76:	91 2c       	mov	r9, r1
    2d78:	21 2c       	mov	r2, r1
    2d7a:	31 2c       	mov	r3, r1
    2d7c:	ff e1       	ldi	r31, 0x1F	; 31
    2d7e:	f3 15       	cp	r31, r3
    2d80:	d8 f0       	brcs	.+54     	; 0x2db8 <vfprintf+0x98>
    2d82:	8b 32       	cpi	r24, 0x2B	; 43
    2d84:	79 f0       	breq	.+30     	; 0x2da4 <vfprintf+0x84>
    2d86:	38 f4       	brcc	.+14     	; 0x2d96 <vfprintf+0x76>
    2d88:	80 32       	cpi	r24, 0x20	; 32
    2d8a:	79 f0       	breq	.+30     	; 0x2daa <vfprintf+0x8a>
    2d8c:	83 32       	cpi	r24, 0x23	; 35
    2d8e:	a1 f4       	brne	.+40     	; 0x2db8 <vfprintf+0x98>
    2d90:	23 2d       	mov	r18, r3
    2d92:	20 61       	ori	r18, 0x10	; 16
    2d94:	1d c0       	rjmp	.+58     	; 0x2dd0 <vfprintf+0xb0>
    2d96:	8d 32       	cpi	r24, 0x2D	; 45
    2d98:	61 f0       	breq	.+24     	; 0x2db2 <vfprintf+0x92>
    2d9a:	80 33       	cpi	r24, 0x30	; 48
    2d9c:	69 f4       	brne	.+26     	; 0x2db8 <vfprintf+0x98>
    2d9e:	23 2d       	mov	r18, r3
    2da0:	21 60       	ori	r18, 0x01	; 1
    2da2:	16 c0       	rjmp	.+44     	; 0x2dd0 <vfprintf+0xb0>
    2da4:	83 2d       	mov	r24, r3
    2da6:	82 60       	ori	r24, 0x02	; 2
    2da8:	38 2e       	mov	r3, r24
    2daa:	e3 2d       	mov	r30, r3
    2dac:	e4 60       	ori	r30, 0x04	; 4
    2dae:	3e 2e       	mov	r3, r30
    2db0:	2a c0       	rjmp	.+84     	; 0x2e06 <vfprintf+0xe6>
    2db2:	f3 2d       	mov	r31, r3
    2db4:	f8 60       	ori	r31, 0x08	; 8
    2db6:	1d c0       	rjmp	.+58     	; 0x2df2 <vfprintf+0xd2>
    2db8:	37 fc       	sbrc	r3, 7
    2dba:	2d c0       	rjmp	.+90     	; 0x2e16 <vfprintf+0xf6>
    2dbc:	20 ed       	ldi	r18, 0xD0	; 208
    2dbe:	28 0f       	add	r18, r24
    2dc0:	2a 30       	cpi	r18, 0x0A	; 10
    2dc2:	40 f0       	brcs	.+16     	; 0x2dd4 <vfprintf+0xb4>
    2dc4:	8e 32       	cpi	r24, 0x2E	; 46
    2dc6:	b9 f4       	brne	.+46     	; 0x2df6 <vfprintf+0xd6>
    2dc8:	36 fc       	sbrc	r3, 6
    2dca:	81 c1       	rjmp	.+770    	; 0x30ce <vfprintf+0x3ae>
    2dcc:	23 2d       	mov	r18, r3
    2dce:	20 64       	ori	r18, 0x40	; 64
    2dd0:	32 2e       	mov	r3, r18
    2dd2:	19 c0       	rjmp	.+50     	; 0x2e06 <vfprintf+0xe6>
    2dd4:	36 fe       	sbrs	r3, 6
    2dd6:	06 c0       	rjmp	.+12     	; 0x2de4 <vfprintf+0xc4>
    2dd8:	8a e0       	ldi	r24, 0x0A	; 10
    2dda:	98 9e       	mul	r9, r24
    2ddc:	20 0d       	add	r18, r0
    2dde:	11 24       	eor	r1, r1
    2de0:	92 2e       	mov	r9, r18
    2de2:	11 c0       	rjmp	.+34     	; 0x2e06 <vfprintf+0xe6>
    2de4:	ea e0       	ldi	r30, 0x0A	; 10
    2de6:	2e 9e       	mul	r2, r30
    2de8:	20 0d       	add	r18, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	22 2e       	mov	r2, r18
    2dee:	f3 2d       	mov	r31, r3
    2df0:	f0 62       	ori	r31, 0x20	; 32
    2df2:	3f 2e       	mov	r3, r31
    2df4:	08 c0       	rjmp	.+16     	; 0x2e06 <vfprintf+0xe6>
    2df6:	8c 36       	cpi	r24, 0x6C	; 108
    2df8:	21 f4       	brne	.+8      	; 0x2e02 <vfprintf+0xe2>
    2dfa:	83 2d       	mov	r24, r3
    2dfc:	80 68       	ori	r24, 0x80	; 128
    2dfe:	38 2e       	mov	r3, r24
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <vfprintf+0xe6>
    2e02:	88 36       	cpi	r24, 0x68	; 104
    2e04:	41 f4       	brne	.+16     	; 0x2e16 <vfprintf+0xf6>
    2e06:	f7 01       	movw	r30, r14
    2e08:	93 fd       	sbrc	r25, 3
    2e0a:	85 91       	lpm	r24, Z+
    2e0c:	93 ff       	sbrs	r25, 3
    2e0e:	81 91       	ld	r24, Z+
    2e10:	7f 01       	movw	r14, r30
    2e12:	81 11       	cpse	r24, r1
    2e14:	b3 cf       	rjmp	.-154    	; 0x2d7c <vfprintf+0x5c>
    2e16:	98 2f       	mov	r25, r24
    2e18:	9f 7d       	andi	r25, 0xDF	; 223
    2e1a:	95 54       	subi	r25, 0x45	; 69
    2e1c:	93 30       	cpi	r25, 0x03	; 3
    2e1e:	28 f4       	brcc	.+10     	; 0x2e2a <vfprintf+0x10a>
    2e20:	0c 5f       	subi	r16, 0xFC	; 252
    2e22:	1f 4f       	sbci	r17, 0xFF	; 255
    2e24:	9f e3       	ldi	r25, 0x3F	; 63
    2e26:	99 83       	std	Y+1, r25	; 0x01
    2e28:	0d c0       	rjmp	.+26     	; 0x2e44 <vfprintf+0x124>
    2e2a:	83 36       	cpi	r24, 0x63	; 99
    2e2c:	31 f0       	breq	.+12     	; 0x2e3a <vfprintf+0x11a>
    2e2e:	83 37       	cpi	r24, 0x73	; 115
    2e30:	71 f0       	breq	.+28     	; 0x2e4e <vfprintf+0x12e>
    2e32:	83 35       	cpi	r24, 0x53	; 83
    2e34:	09 f0       	breq	.+2      	; 0x2e38 <vfprintf+0x118>
    2e36:	59 c0       	rjmp	.+178    	; 0x2eea <vfprintf+0x1ca>
    2e38:	21 c0       	rjmp	.+66     	; 0x2e7c <vfprintf+0x15c>
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	80 81       	ld	r24, Z
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	0e 5f       	subi	r16, 0xFE	; 254
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	88 24       	eor	r8, r8
    2e46:	83 94       	inc	r8
    2e48:	91 2c       	mov	r9, r1
    2e4a:	53 01       	movw	r10, r6
    2e4c:	13 c0       	rjmp	.+38     	; 0x2e74 <vfprintf+0x154>
    2e4e:	28 01       	movw	r4, r16
    2e50:	f2 e0       	ldi	r31, 0x02	; 2
    2e52:	4f 0e       	add	r4, r31
    2e54:	51 1c       	adc	r5, r1
    2e56:	f8 01       	movw	r30, r16
    2e58:	a0 80       	ld	r10, Z
    2e5a:	b1 80       	ldd	r11, Z+1	; 0x01
    2e5c:	36 fe       	sbrs	r3, 6
    2e5e:	03 c0       	rjmp	.+6      	; 0x2e66 <vfprintf+0x146>
    2e60:	69 2d       	mov	r22, r9
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <vfprintf+0x14a>
    2e66:	6f ef       	ldi	r22, 0xFF	; 255
    2e68:	7f ef       	ldi	r23, 0xFF	; 255
    2e6a:	c5 01       	movw	r24, r10
    2e6c:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <strnlen>
    2e70:	4c 01       	movw	r8, r24
    2e72:	82 01       	movw	r16, r4
    2e74:	f3 2d       	mov	r31, r3
    2e76:	ff 77       	andi	r31, 0x7F	; 127
    2e78:	3f 2e       	mov	r3, r31
    2e7a:	16 c0       	rjmp	.+44     	; 0x2ea8 <vfprintf+0x188>
    2e7c:	28 01       	movw	r4, r16
    2e7e:	22 e0       	ldi	r18, 0x02	; 2
    2e80:	42 0e       	add	r4, r18
    2e82:	51 1c       	adc	r5, r1
    2e84:	f8 01       	movw	r30, r16
    2e86:	a0 80       	ld	r10, Z
    2e88:	b1 80       	ldd	r11, Z+1	; 0x01
    2e8a:	36 fe       	sbrs	r3, 6
    2e8c:	03 c0       	rjmp	.+6      	; 0x2e94 <vfprintf+0x174>
    2e8e:	69 2d       	mov	r22, r9
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <vfprintf+0x178>
    2e94:	6f ef       	ldi	r22, 0xFF	; 255
    2e96:	7f ef       	ldi	r23, 0xFF	; 255
    2e98:	c5 01       	movw	r24, r10
    2e9a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <strnlen_P>
    2e9e:	4c 01       	movw	r8, r24
    2ea0:	f3 2d       	mov	r31, r3
    2ea2:	f0 68       	ori	r31, 0x80	; 128
    2ea4:	3f 2e       	mov	r3, r31
    2ea6:	82 01       	movw	r16, r4
    2ea8:	33 fc       	sbrc	r3, 3
    2eaa:	1b c0       	rjmp	.+54     	; 0x2ee2 <vfprintf+0x1c2>
    2eac:	82 2d       	mov	r24, r2
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	88 16       	cp	r8, r24
    2eb2:	99 06       	cpc	r9, r25
    2eb4:	b0 f4       	brcc	.+44     	; 0x2ee2 <vfprintf+0x1c2>
    2eb6:	b6 01       	movw	r22, r12
    2eb8:	80 e2       	ldi	r24, 0x20	; 32
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2ec0:	2a 94       	dec	r2
    2ec2:	f4 cf       	rjmp	.-24     	; 0x2eac <vfprintf+0x18c>
    2ec4:	f5 01       	movw	r30, r10
    2ec6:	37 fc       	sbrc	r3, 7
    2ec8:	85 91       	lpm	r24, Z+
    2eca:	37 fe       	sbrs	r3, 7
    2ecc:	81 91       	ld	r24, Z+
    2ece:	5f 01       	movw	r10, r30
    2ed0:	b6 01       	movw	r22, r12
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2ed8:	21 10       	cpse	r2, r1
    2eda:	2a 94       	dec	r2
    2edc:	21 e0       	ldi	r18, 0x01	; 1
    2ede:	82 1a       	sub	r8, r18
    2ee0:	91 08       	sbc	r9, r1
    2ee2:	81 14       	cp	r8, r1
    2ee4:	91 04       	cpc	r9, r1
    2ee6:	71 f7       	brne	.-36     	; 0x2ec4 <vfprintf+0x1a4>
    2ee8:	e8 c0       	rjmp	.+464    	; 0x30ba <vfprintf+0x39a>
    2eea:	84 36       	cpi	r24, 0x64	; 100
    2eec:	11 f0       	breq	.+4      	; 0x2ef2 <vfprintf+0x1d2>
    2eee:	89 36       	cpi	r24, 0x69	; 105
    2ef0:	41 f5       	brne	.+80     	; 0x2f42 <vfprintf+0x222>
    2ef2:	f8 01       	movw	r30, r16
    2ef4:	37 fe       	sbrs	r3, 7
    2ef6:	07 c0       	rjmp	.+14     	; 0x2f06 <vfprintf+0x1e6>
    2ef8:	60 81       	ld	r22, Z
    2efa:	71 81       	ldd	r23, Z+1	; 0x01
    2efc:	82 81       	ldd	r24, Z+2	; 0x02
    2efe:	93 81       	ldd	r25, Z+3	; 0x03
    2f00:	0c 5f       	subi	r16, 0xFC	; 252
    2f02:	1f 4f       	sbci	r17, 0xFF	; 255
    2f04:	08 c0       	rjmp	.+16     	; 0x2f16 <vfprintf+0x1f6>
    2f06:	60 81       	ld	r22, Z
    2f08:	71 81       	ldd	r23, Z+1	; 0x01
    2f0a:	07 2e       	mov	r0, r23
    2f0c:	00 0c       	add	r0, r0
    2f0e:	88 0b       	sbc	r24, r24
    2f10:	99 0b       	sbc	r25, r25
    2f12:	0e 5f       	subi	r16, 0xFE	; 254
    2f14:	1f 4f       	sbci	r17, 0xFF	; 255
    2f16:	f3 2d       	mov	r31, r3
    2f18:	ff 76       	andi	r31, 0x6F	; 111
    2f1a:	3f 2e       	mov	r3, r31
    2f1c:	97 ff       	sbrs	r25, 7
    2f1e:	09 c0       	rjmp	.+18     	; 0x2f32 <vfprintf+0x212>
    2f20:	90 95       	com	r25
    2f22:	80 95       	com	r24
    2f24:	70 95       	com	r23
    2f26:	61 95       	neg	r22
    2f28:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2e:	f0 68       	ori	r31, 0x80	; 128
    2f30:	3f 2e       	mov	r3, r31
    2f32:	2a e0       	ldi	r18, 0x0A	; 10
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	a3 01       	movw	r20, r6
    2f38:	0e 94 c3 18 	call	0x3186	; 0x3186 <__ultoa_invert>
    2f3c:	88 2e       	mov	r8, r24
    2f3e:	86 18       	sub	r8, r6
    2f40:	45 c0       	rjmp	.+138    	; 0x2fcc <vfprintf+0x2ac>
    2f42:	85 37       	cpi	r24, 0x75	; 117
    2f44:	31 f4       	brne	.+12     	; 0x2f52 <vfprintf+0x232>
    2f46:	23 2d       	mov	r18, r3
    2f48:	2f 7e       	andi	r18, 0xEF	; 239
    2f4a:	b2 2e       	mov	r11, r18
    2f4c:	2a e0       	ldi	r18, 0x0A	; 10
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	25 c0       	rjmp	.+74     	; 0x2f9c <vfprintf+0x27c>
    2f52:	93 2d       	mov	r25, r3
    2f54:	99 7f       	andi	r25, 0xF9	; 249
    2f56:	b9 2e       	mov	r11, r25
    2f58:	8f 36       	cpi	r24, 0x6F	; 111
    2f5a:	c1 f0       	breq	.+48     	; 0x2f8c <vfprintf+0x26c>
    2f5c:	18 f4       	brcc	.+6      	; 0x2f64 <vfprintf+0x244>
    2f5e:	88 35       	cpi	r24, 0x58	; 88
    2f60:	79 f0       	breq	.+30     	; 0x2f80 <vfprintf+0x260>
    2f62:	b5 c0       	rjmp	.+362    	; 0x30ce <vfprintf+0x3ae>
    2f64:	80 37       	cpi	r24, 0x70	; 112
    2f66:	19 f0       	breq	.+6      	; 0x2f6e <vfprintf+0x24e>
    2f68:	88 37       	cpi	r24, 0x78	; 120
    2f6a:	21 f0       	breq	.+8      	; 0x2f74 <vfprintf+0x254>
    2f6c:	b0 c0       	rjmp	.+352    	; 0x30ce <vfprintf+0x3ae>
    2f6e:	e9 2f       	mov	r30, r25
    2f70:	e0 61       	ori	r30, 0x10	; 16
    2f72:	be 2e       	mov	r11, r30
    2f74:	b4 fe       	sbrs	r11, 4
    2f76:	0d c0       	rjmp	.+26     	; 0x2f92 <vfprintf+0x272>
    2f78:	fb 2d       	mov	r31, r11
    2f7a:	f4 60       	ori	r31, 0x04	; 4
    2f7c:	bf 2e       	mov	r11, r31
    2f7e:	09 c0       	rjmp	.+18     	; 0x2f92 <vfprintf+0x272>
    2f80:	34 fe       	sbrs	r3, 4
    2f82:	0a c0       	rjmp	.+20     	; 0x2f98 <vfprintf+0x278>
    2f84:	29 2f       	mov	r18, r25
    2f86:	26 60       	ori	r18, 0x06	; 6
    2f88:	b2 2e       	mov	r11, r18
    2f8a:	06 c0       	rjmp	.+12     	; 0x2f98 <vfprintf+0x278>
    2f8c:	28 e0       	ldi	r18, 0x08	; 8
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	05 c0       	rjmp	.+10     	; 0x2f9c <vfprintf+0x27c>
    2f92:	20 e1       	ldi	r18, 0x10	; 16
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <vfprintf+0x27c>
    2f98:	20 e1       	ldi	r18, 0x10	; 16
    2f9a:	32 e0       	ldi	r19, 0x02	; 2
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	b7 fe       	sbrs	r11, 7
    2fa0:	07 c0       	rjmp	.+14     	; 0x2fb0 <vfprintf+0x290>
    2fa2:	60 81       	ld	r22, Z
    2fa4:	71 81       	ldd	r23, Z+1	; 0x01
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	0c 5f       	subi	r16, 0xFC	; 252
    2fac:	1f 4f       	sbci	r17, 0xFF	; 255
    2fae:	06 c0       	rjmp	.+12     	; 0x2fbc <vfprintf+0x29c>
    2fb0:	60 81       	ld	r22, Z
    2fb2:	71 81       	ldd	r23, Z+1	; 0x01
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 5f       	subi	r16, 0xFE	; 254
    2fba:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbc:	a3 01       	movw	r20, r6
    2fbe:	0e 94 c3 18 	call	0x3186	; 0x3186 <__ultoa_invert>
    2fc2:	88 2e       	mov	r8, r24
    2fc4:	86 18       	sub	r8, r6
    2fc6:	fb 2d       	mov	r31, r11
    2fc8:	ff 77       	andi	r31, 0x7F	; 127
    2fca:	3f 2e       	mov	r3, r31
    2fcc:	36 fe       	sbrs	r3, 6
    2fce:	0d c0       	rjmp	.+26     	; 0x2fea <vfprintf+0x2ca>
    2fd0:	23 2d       	mov	r18, r3
    2fd2:	2e 7f       	andi	r18, 0xFE	; 254
    2fd4:	a2 2e       	mov	r10, r18
    2fd6:	89 14       	cp	r8, r9
    2fd8:	58 f4       	brcc	.+22     	; 0x2ff0 <vfprintf+0x2d0>
    2fda:	34 fe       	sbrs	r3, 4
    2fdc:	0b c0       	rjmp	.+22     	; 0x2ff4 <vfprintf+0x2d4>
    2fde:	32 fc       	sbrc	r3, 2
    2fe0:	09 c0       	rjmp	.+18     	; 0x2ff4 <vfprintf+0x2d4>
    2fe2:	83 2d       	mov	r24, r3
    2fe4:	8e 7e       	andi	r24, 0xEE	; 238
    2fe6:	a8 2e       	mov	r10, r24
    2fe8:	05 c0       	rjmp	.+10     	; 0x2ff4 <vfprintf+0x2d4>
    2fea:	b8 2c       	mov	r11, r8
    2fec:	a3 2c       	mov	r10, r3
    2fee:	03 c0       	rjmp	.+6      	; 0x2ff6 <vfprintf+0x2d6>
    2ff0:	b8 2c       	mov	r11, r8
    2ff2:	01 c0       	rjmp	.+2      	; 0x2ff6 <vfprintf+0x2d6>
    2ff4:	b9 2c       	mov	r11, r9
    2ff6:	a4 fe       	sbrs	r10, 4
    2ff8:	0f c0       	rjmp	.+30     	; 0x3018 <vfprintf+0x2f8>
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e8 0d       	add	r30, r8
    2ffe:	f1 1d       	adc	r31, r1
    3000:	80 81       	ld	r24, Z
    3002:	80 33       	cpi	r24, 0x30	; 48
    3004:	21 f4       	brne	.+8      	; 0x300e <vfprintf+0x2ee>
    3006:	9a 2d       	mov	r25, r10
    3008:	99 7e       	andi	r25, 0xE9	; 233
    300a:	a9 2e       	mov	r10, r25
    300c:	09 c0       	rjmp	.+18     	; 0x3020 <vfprintf+0x300>
    300e:	a2 fe       	sbrs	r10, 2
    3010:	06 c0       	rjmp	.+12     	; 0x301e <vfprintf+0x2fe>
    3012:	b3 94       	inc	r11
    3014:	b3 94       	inc	r11
    3016:	04 c0       	rjmp	.+8      	; 0x3020 <vfprintf+0x300>
    3018:	8a 2d       	mov	r24, r10
    301a:	86 78       	andi	r24, 0x86	; 134
    301c:	09 f0       	breq	.+2      	; 0x3020 <vfprintf+0x300>
    301e:	b3 94       	inc	r11
    3020:	a3 fc       	sbrc	r10, 3
    3022:	11 c0       	rjmp	.+34     	; 0x3046 <vfprintf+0x326>
    3024:	a0 fe       	sbrs	r10, 0
    3026:	06 c0       	rjmp	.+12     	; 0x3034 <vfprintf+0x314>
    3028:	b2 14       	cp	r11, r2
    302a:	88 f4       	brcc	.+34     	; 0x304e <vfprintf+0x32e>
    302c:	28 0c       	add	r2, r8
    302e:	92 2c       	mov	r9, r2
    3030:	9b 18       	sub	r9, r11
    3032:	0e c0       	rjmp	.+28     	; 0x3050 <vfprintf+0x330>
    3034:	b2 14       	cp	r11, r2
    3036:	60 f4       	brcc	.+24     	; 0x3050 <vfprintf+0x330>
    3038:	b6 01       	movw	r22, r12
    303a:	80 e2       	ldi	r24, 0x20	; 32
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    3042:	b3 94       	inc	r11
    3044:	f7 cf       	rjmp	.-18     	; 0x3034 <vfprintf+0x314>
    3046:	b2 14       	cp	r11, r2
    3048:	18 f4       	brcc	.+6      	; 0x3050 <vfprintf+0x330>
    304a:	2b 18       	sub	r2, r11
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <vfprintf+0x332>
    304e:	98 2c       	mov	r9, r8
    3050:	21 2c       	mov	r2, r1
    3052:	a4 fe       	sbrs	r10, 4
    3054:	10 c0       	rjmp	.+32     	; 0x3076 <vfprintf+0x356>
    3056:	b6 01       	movw	r22, r12
    3058:	80 e3       	ldi	r24, 0x30	; 48
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    3060:	a2 fe       	sbrs	r10, 2
    3062:	17 c0       	rjmp	.+46     	; 0x3092 <vfprintf+0x372>
    3064:	a1 fc       	sbrc	r10, 1
    3066:	03 c0       	rjmp	.+6      	; 0x306e <vfprintf+0x34e>
    3068:	88 e7       	ldi	r24, 0x78	; 120
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <vfprintf+0x352>
    306e:	88 e5       	ldi	r24, 0x58	; 88
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	b6 01       	movw	r22, r12
    3074:	0c c0       	rjmp	.+24     	; 0x308e <vfprintf+0x36e>
    3076:	8a 2d       	mov	r24, r10
    3078:	86 78       	andi	r24, 0x86	; 134
    307a:	59 f0       	breq	.+22     	; 0x3092 <vfprintf+0x372>
    307c:	a1 fe       	sbrs	r10, 1
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <vfprintf+0x364>
    3080:	8b e2       	ldi	r24, 0x2B	; 43
    3082:	01 c0       	rjmp	.+2      	; 0x3086 <vfprintf+0x366>
    3084:	80 e2       	ldi	r24, 0x20	; 32
    3086:	a7 fc       	sbrc	r10, 7
    3088:	8d e2       	ldi	r24, 0x2D	; 45
    308a:	b6 01       	movw	r22, r12
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    3092:	89 14       	cp	r8, r9
    3094:	38 f4       	brcc	.+14     	; 0x30a4 <vfprintf+0x384>
    3096:	b6 01       	movw	r22, r12
    3098:	80 e3       	ldi	r24, 0x30	; 48
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    30a0:	9a 94       	dec	r9
    30a2:	f7 cf       	rjmp	.-18     	; 0x3092 <vfprintf+0x372>
    30a4:	8a 94       	dec	r8
    30a6:	f3 01       	movw	r30, r6
    30a8:	e8 0d       	add	r30, r8
    30aa:	f1 1d       	adc	r31, r1
    30ac:	80 81       	ld	r24, Z
    30ae:	b6 01       	movw	r22, r12
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    30b6:	81 10       	cpse	r8, r1
    30b8:	f5 cf       	rjmp	.-22     	; 0x30a4 <vfprintf+0x384>
    30ba:	22 20       	and	r2, r2
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <vfprintf+0x3a0>
    30be:	42 ce       	rjmp	.-892    	; 0x2d44 <vfprintf+0x24>
    30c0:	b6 01       	movw	r22, r12
    30c2:	80 e2       	ldi	r24, 0x20	; 32
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    30ca:	2a 94       	dec	r2
    30cc:	f6 cf       	rjmp	.-20     	; 0x30ba <vfprintf+0x39a>
    30ce:	f6 01       	movw	r30, r12
    30d0:	86 81       	ldd	r24, Z+6	; 0x06
    30d2:	97 81       	ldd	r25, Z+7	; 0x07
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <vfprintf+0x3ba>
    30d6:	8f ef       	ldi	r24, 0xFF	; 255
    30d8:	9f ef       	ldi	r25, 0xFF	; 255
    30da:	2b 96       	adiw	r28, 0x0b	; 11
    30dc:	e2 e1       	ldi	r30, 0x12	; 18
    30de:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__epilogue_restores__>

000030e2 <strnlen_P>:
    30e2:	fc 01       	movw	r30, r24
    30e4:	05 90       	lpm	r0, Z+
    30e6:	61 50       	subi	r22, 0x01	; 1
    30e8:	70 40       	sbci	r23, 0x00	; 0
    30ea:	01 10       	cpse	r0, r1
    30ec:	d8 f7       	brcc	.-10     	; 0x30e4 <strnlen_P+0x2>
    30ee:	80 95       	com	r24
    30f0:	90 95       	com	r25
    30f2:	8e 0f       	add	r24, r30
    30f4:	9f 1f       	adc	r25, r31
    30f6:	08 95       	ret

000030f8 <strnlen>:
    30f8:	fc 01       	movw	r30, r24
    30fa:	61 50       	subi	r22, 0x01	; 1
    30fc:	70 40       	sbci	r23, 0x00	; 0
    30fe:	01 90       	ld	r0, Z+
    3100:	01 10       	cpse	r0, r1
    3102:	d8 f7       	brcc	.-10     	; 0x30fa <strnlen+0x2>
    3104:	80 95       	com	r24
    3106:	90 95       	com	r25
    3108:	8e 0f       	add	r24, r30
    310a:	9f 1f       	adc	r25, r31
    310c:	08 95       	ret

0000310e <fputc>:
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	fb 01       	movw	r30, r22
    3118:	23 81       	ldd	r18, Z+3	; 0x03
    311a:	21 fd       	sbrc	r18, 1
    311c:	03 c0       	rjmp	.+6      	; 0x3124 <fputc+0x16>
    311e:	8f ef       	ldi	r24, 0xFF	; 255
    3120:	9f ef       	ldi	r25, 0xFF	; 255
    3122:	2c c0       	rjmp	.+88     	; 0x317c <fputc+0x6e>
    3124:	22 ff       	sbrs	r18, 2
    3126:	16 c0       	rjmp	.+44     	; 0x3154 <fputc+0x46>
    3128:	46 81       	ldd	r20, Z+6	; 0x06
    312a:	57 81       	ldd	r21, Z+7	; 0x07
    312c:	24 81       	ldd	r18, Z+4	; 0x04
    312e:	35 81       	ldd	r19, Z+5	; 0x05
    3130:	42 17       	cp	r20, r18
    3132:	53 07       	cpc	r21, r19
    3134:	44 f4       	brge	.+16     	; 0x3146 <fputc+0x38>
    3136:	a0 81       	ld	r26, Z
    3138:	b1 81       	ldd	r27, Z+1	; 0x01
    313a:	9d 01       	movw	r18, r26
    313c:	2f 5f       	subi	r18, 0xFF	; 255
    313e:	3f 4f       	sbci	r19, 0xFF	; 255
    3140:	31 83       	std	Z+1, r19	; 0x01
    3142:	20 83       	st	Z, r18
    3144:	8c 93       	st	X, r24
    3146:	26 81       	ldd	r18, Z+6	; 0x06
    3148:	37 81       	ldd	r19, Z+7	; 0x07
    314a:	2f 5f       	subi	r18, 0xFF	; 255
    314c:	3f 4f       	sbci	r19, 0xFF	; 255
    314e:	37 83       	std	Z+7, r19	; 0x07
    3150:	26 83       	std	Z+6, r18	; 0x06
    3152:	14 c0       	rjmp	.+40     	; 0x317c <fputc+0x6e>
    3154:	8b 01       	movw	r16, r22
    3156:	ec 01       	movw	r28, r24
    3158:	fb 01       	movw	r30, r22
    315a:	00 84       	ldd	r0, Z+8	; 0x08
    315c:	f1 85       	ldd	r31, Z+9	; 0x09
    315e:	e0 2d       	mov	r30, r0
    3160:	09 95       	icall
    3162:	89 2b       	or	r24, r25
    3164:	e1 f6       	brne	.-72     	; 0x311e <fputc+0x10>
    3166:	d8 01       	movw	r26, r16
    3168:	16 96       	adiw	r26, 0x06	; 6
    316a:	8d 91       	ld	r24, X+
    316c:	9c 91       	ld	r25, X
    316e:	17 97       	sbiw	r26, 0x07	; 7
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	17 96       	adiw	r26, 0x07	; 7
    3174:	9c 93       	st	X, r25
    3176:	8e 93       	st	-X, r24
    3178:	16 97       	sbiw	r26, 0x06	; 6
    317a:	ce 01       	movw	r24, r28
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	08 95       	ret

00003186 <__ultoa_invert>:
    3186:	fa 01       	movw	r30, r20
    3188:	aa 27       	eor	r26, r26
    318a:	28 30       	cpi	r18, 0x08	; 8
    318c:	51 f1       	breq	.+84     	; 0x31e2 <__ultoa_invert+0x5c>
    318e:	20 31       	cpi	r18, 0x10	; 16
    3190:	81 f1       	breq	.+96     	; 0x31f2 <__ultoa_invert+0x6c>
    3192:	e8 94       	clt
    3194:	6f 93       	push	r22
    3196:	6e 7f       	andi	r22, 0xFE	; 254
    3198:	6e 5f       	subi	r22, 0xFE	; 254
    319a:	7f 4f       	sbci	r23, 0xFF	; 255
    319c:	8f 4f       	sbci	r24, 0xFF	; 255
    319e:	9f 4f       	sbci	r25, 0xFF	; 255
    31a0:	af 4f       	sbci	r26, 0xFF	; 255
    31a2:	b1 e0       	ldi	r27, 0x01	; 1
    31a4:	3e d0       	rcall	.+124    	; 0x3222 <__ultoa_invert+0x9c>
    31a6:	b4 e0       	ldi	r27, 0x04	; 4
    31a8:	3c d0       	rcall	.+120    	; 0x3222 <__ultoa_invert+0x9c>
    31aa:	67 0f       	add	r22, r23
    31ac:	78 1f       	adc	r23, r24
    31ae:	89 1f       	adc	r24, r25
    31b0:	9a 1f       	adc	r25, r26
    31b2:	a1 1d       	adc	r26, r1
    31b4:	68 0f       	add	r22, r24
    31b6:	79 1f       	adc	r23, r25
    31b8:	8a 1f       	adc	r24, r26
    31ba:	91 1d       	adc	r25, r1
    31bc:	a1 1d       	adc	r26, r1
    31be:	6a 0f       	add	r22, r26
    31c0:	71 1d       	adc	r23, r1
    31c2:	81 1d       	adc	r24, r1
    31c4:	91 1d       	adc	r25, r1
    31c6:	a1 1d       	adc	r26, r1
    31c8:	20 d0       	rcall	.+64     	; 0x320a <__ultoa_invert+0x84>
    31ca:	09 f4       	brne	.+2      	; 0x31ce <__ultoa_invert+0x48>
    31cc:	68 94       	set
    31ce:	3f 91       	pop	r19
    31d0:	2a e0       	ldi	r18, 0x0A	; 10
    31d2:	26 9f       	mul	r18, r22
    31d4:	11 24       	eor	r1, r1
    31d6:	30 19       	sub	r19, r0
    31d8:	30 5d       	subi	r19, 0xD0	; 208
    31da:	31 93       	st	Z+, r19
    31dc:	de f6       	brtc	.-74     	; 0x3194 <__ultoa_invert+0xe>
    31de:	cf 01       	movw	r24, r30
    31e0:	08 95       	ret
    31e2:	46 2f       	mov	r20, r22
    31e4:	47 70       	andi	r20, 0x07	; 7
    31e6:	40 5d       	subi	r20, 0xD0	; 208
    31e8:	41 93       	st	Z+, r20
    31ea:	b3 e0       	ldi	r27, 0x03	; 3
    31ec:	0f d0       	rcall	.+30     	; 0x320c <__ultoa_invert+0x86>
    31ee:	c9 f7       	brne	.-14     	; 0x31e2 <__ultoa_invert+0x5c>
    31f0:	f6 cf       	rjmp	.-20     	; 0x31de <__ultoa_invert+0x58>
    31f2:	46 2f       	mov	r20, r22
    31f4:	4f 70       	andi	r20, 0x0F	; 15
    31f6:	40 5d       	subi	r20, 0xD0	; 208
    31f8:	4a 33       	cpi	r20, 0x3A	; 58
    31fa:	18 f0       	brcs	.+6      	; 0x3202 <__ultoa_invert+0x7c>
    31fc:	49 5d       	subi	r20, 0xD9	; 217
    31fe:	31 fd       	sbrc	r19, 1
    3200:	40 52       	subi	r20, 0x20	; 32
    3202:	41 93       	st	Z+, r20
    3204:	02 d0       	rcall	.+4      	; 0x320a <__ultoa_invert+0x84>
    3206:	a9 f7       	brne	.-22     	; 0x31f2 <__ultoa_invert+0x6c>
    3208:	ea cf       	rjmp	.-44     	; 0x31de <__ultoa_invert+0x58>
    320a:	b4 e0       	ldi	r27, 0x04	; 4
    320c:	a6 95       	lsr	r26
    320e:	97 95       	ror	r25
    3210:	87 95       	ror	r24
    3212:	77 95       	ror	r23
    3214:	67 95       	ror	r22
    3216:	ba 95       	dec	r27
    3218:	c9 f7       	brne	.-14     	; 0x320c <__ultoa_invert+0x86>
    321a:	00 97       	sbiw	r24, 0x00	; 0
    321c:	61 05       	cpc	r22, r1
    321e:	71 05       	cpc	r23, r1
    3220:	08 95       	ret
    3222:	9b 01       	movw	r18, r22
    3224:	ac 01       	movw	r20, r24
    3226:	0a 2e       	mov	r0, r26
    3228:	06 94       	lsr	r0
    322a:	57 95       	ror	r21
    322c:	47 95       	ror	r20
    322e:	37 95       	ror	r19
    3230:	27 95       	ror	r18
    3232:	ba 95       	dec	r27
    3234:	c9 f7       	brne	.-14     	; 0x3228 <__ultoa_invert+0xa2>
    3236:	62 0f       	add	r22, r18
    3238:	73 1f       	adc	r23, r19
    323a:	84 1f       	adc	r24, r20
    323c:	95 1f       	adc	r25, r21
    323e:	a0 1d       	adc	r26, r0
    3240:	08 95       	ret

00003242 <__prologue_saves__>:
    3242:	2f 92       	push	r2
    3244:	3f 92       	push	r3
    3246:	4f 92       	push	r4
    3248:	5f 92       	push	r5
    324a:	6f 92       	push	r6
    324c:	7f 92       	push	r7
    324e:	8f 92       	push	r8
    3250:	9f 92       	push	r9
    3252:	af 92       	push	r10
    3254:	bf 92       	push	r11
    3256:	cf 92       	push	r12
    3258:	df 92       	push	r13
    325a:	ef 92       	push	r14
    325c:	ff 92       	push	r15
    325e:	0f 93       	push	r16
    3260:	1f 93       	push	r17
    3262:	cf 93       	push	r28
    3264:	df 93       	push	r29
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	ca 1b       	sub	r28, r26
    326c:	db 0b       	sbc	r29, r27
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
    3278:	09 94       	ijmp

0000327a <__epilogue_restores__>:
    327a:	2a 88       	ldd	r2, Y+18	; 0x12
    327c:	39 88       	ldd	r3, Y+17	; 0x11
    327e:	48 88       	ldd	r4, Y+16	; 0x10
    3280:	5f 84       	ldd	r5, Y+15	; 0x0f
    3282:	6e 84       	ldd	r6, Y+14	; 0x0e
    3284:	7d 84       	ldd	r7, Y+13	; 0x0d
    3286:	8c 84       	ldd	r8, Y+12	; 0x0c
    3288:	9b 84       	ldd	r9, Y+11	; 0x0b
    328a:	aa 84       	ldd	r10, Y+10	; 0x0a
    328c:	b9 84       	ldd	r11, Y+9	; 0x09
    328e:	c8 84       	ldd	r12, Y+8	; 0x08
    3290:	df 80       	ldd	r13, Y+7	; 0x07
    3292:	ee 80       	ldd	r14, Y+6	; 0x06
    3294:	fd 80       	ldd	r15, Y+5	; 0x05
    3296:	0c 81       	ldd	r16, Y+4	; 0x04
    3298:	1b 81       	ldd	r17, Y+3	; 0x03
    329a:	aa 81       	ldd	r26, Y+2	; 0x02
    329c:	b9 81       	ldd	r27, Y+1	; 0x01
    329e:	ce 0f       	add	r28, r30
    32a0:	d1 1d       	adc	r29, r1
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	ed 01       	movw	r28, r26
    32ae:	08 95       	ret

000032b0 <_exit>:
    32b0:	f8 94       	cli

000032b2 <__stop_program>:
    32b2:	ff cf       	rjmp	.-2      	; 0x32b2 <__stop_program>
