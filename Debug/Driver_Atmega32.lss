
Driver_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000025aa  0000261e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00005394  00000000  00000000  00002668  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000363a  00000000  00000000  000079fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000b036  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000b048  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  0000b5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000ba99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  0000bab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	7f 0b       	sbc	r23, r31
      56:	90 0b       	sbc	r25, r16
      58:	a1 0b       	sbc	r26, r17
      5a:	b2 0b       	sbc	r27, r18
      5c:	c3 0b       	sbc	r28, r19
      5e:	d4 0b       	sbc	r29, r20
      60:	e5 0b       	sbc	r30, r21
      62:	f6 0b       	sbc	r31, r22
      64:	07 0c       	add	r0, r7
      66:	18 0c       	add	r1, r8

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	10 e0       	ldi	r17, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	ea ea       	ldi	r30, 0xAA	; 170
      7c:	f5 e2       	ldi	r31, 0x25	; 37
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3a       	cpi	r26, 0xAA	; 170
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	20 e0       	ldi	r18, 0x00	; 0
      8c:	aa ea       	ldi	r26, 0xAA	; 170
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3a       	cpi	r26, 0xAA	; 170
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <main>
      9e:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Dio_setPinDir>:
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <Dio_setPinDir+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
      b2:	6a 83       	std	Y+2, r22	; 0x02
      b4:	8a 81       	ldd	r24, Y+2	; 0x02
      b6:	88 2f       	mov	r24, r24
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	00 97       	sbiw	r24, 0x00	; 0
      bc:	89 f1       	breq	.+98     	; 0x120 <Dio_setPinDir+0x7a>
      be:	01 97       	sbiw	r24, 0x01	; 1
      c0:	09 f0       	breq	.+2      	; 0xc4 <Dio_setPinDir+0x1e>
      c2:	5d c0       	rjmp	.+186    	; 0x17e <Dio_setPinDir+0xd8>
      c4:	89 81       	ldd	r24, Y+1	; 0x01
      c6:	86 95       	lsr	r24
      c8:	86 95       	lsr	r24
      ca:	86 95       	lsr	r24
      cc:	88 2f       	mov	r24, r24
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	88 0f       	add	r24, r24
      d2:	99 1f       	adc	r25, r25
      d4:	80 5a       	subi	r24, 0xA0	; 160
      d6:	9f 4f       	sbci	r25, 0xFF	; 255
      d8:	fc 01       	movw	r30, r24
      da:	80 81       	ld	r24, Z
      dc:	91 81       	ldd	r25, Z+1	; 0x01
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	26 95       	lsr	r18
      e2:	26 95       	lsr	r18
      e4:	26 95       	lsr	r18
      e6:	22 2f       	mov	r18, r18
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	20 5a       	subi	r18, 0xA0	; 160
      f0:	3f 4f       	sbci	r19, 0xFF	; 255
      f2:	f9 01       	movw	r30, r18
      f4:	20 81       	ld	r18, Z
      f6:	31 81       	ldd	r19, Z+1	; 0x01
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	62 2f       	mov	r22, r18
      fe:	29 81       	ldd	r18, Y+1	; 0x01
     100:	22 2f       	mov	r18, r18
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	a9 01       	movw	r20, r18
     106:	47 70       	andi	r20, 0x07	; 7
     108:	55 27       	eor	r21, r21
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	02 c0       	rjmp	.+4      	; 0x114 <Dio_setPinDir+0x6e>
     110:	22 0f       	add	r18, r18
     112:	33 1f       	adc	r19, r19
     114:	4a 95       	dec	r20
     116:	e2 f7       	brpl	.-8      	; 0x110 <Dio_setPinDir+0x6a>
     118:	26 2b       	or	r18, r22
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
     11e:	2f c0       	rjmp	.+94     	; 0x17e <Dio_setPinDir+0xd8>
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	86 95       	lsr	r24
     124:	86 95       	lsr	r24
     126:	86 95       	lsr	r24
     128:	88 2f       	mov	r24, r24
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	88 0f       	add	r24, r24
     12e:	99 1f       	adc	r25, r25
     130:	80 5a       	subi	r24, 0xA0	; 160
     132:	9f 4f       	sbci	r25, 0xFF	; 255
     134:	fc 01       	movw	r30, r24
     136:	80 81       	ld	r24, Z
     138:	91 81       	ldd	r25, Z+1	; 0x01
     13a:	29 81       	ldd	r18, Y+1	; 0x01
     13c:	26 95       	lsr	r18
     13e:	26 95       	lsr	r18
     140:	26 95       	lsr	r18
     142:	22 2f       	mov	r18, r18
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	22 0f       	add	r18, r18
     148:	33 1f       	adc	r19, r19
     14a:	20 5a       	subi	r18, 0xA0	; 160
     14c:	3f 4f       	sbci	r19, 0xFF	; 255
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	31 81       	ldd	r19, Z+1	; 0x01
     154:	f9 01       	movw	r30, r18
     156:	20 81       	ld	r18, Z
     158:	62 2f       	mov	r22, r18
     15a:	29 81       	ldd	r18, Y+1	; 0x01
     15c:	22 2f       	mov	r18, r18
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	a9 01       	movw	r20, r18
     162:	47 70       	andi	r20, 0x07	; 7
     164:	55 27       	eor	r21, r21
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <Dio_setPinDir+0xca>
     16c:	22 0f       	add	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	4a 95       	dec	r20
     172:	e2 f7       	brpl	.-8      	; 0x16c <Dio_setPinDir+0xc6>
     174:	20 95       	com	r18
     176:	26 23       	and	r18, r22
     178:	fc 01       	movw	r30, r24
     17a:	20 83       	st	Z, r18
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <Dio_setPinVal>:
			break;
	}
}

void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	00 d0       	rcall	.+0      	; 0x190 <Dio_setPinVal+0x6>
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyPinVal)
     198:	8a 81       	ldd	r24, Y+2	; 0x02
     19a:	88 2f       	mov	r24, r24
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	91 05       	cpc	r25, r1
     1a2:	39 f0       	breq	.+14     	; 0x1b2 <Dio_setPinVal+0x28>
     1a4:	82 30       	cpi	r24, 0x02	; 2
     1a6:	91 05       	cpc	r25, r1
     1a8:	09 f4       	brne	.+2      	; 0x1ac <Dio_setPinVal+0x22>
     1aa:	60 c0       	rjmp	.+192    	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
     1ac:	89 2b       	or	r24, r25
     1ae:	79 f1       	breq	.+94     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
			break;

		default :
			break;
     1b0:	8b c0       	rjmp	.+278    	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
	switch (CopyPinVal)
	{
		case Status_Pin_High:
				SET_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	86 95       	lsr	r24
     1b6:	86 95       	lsr	r24
     1b8:	86 95       	lsr	r24
     1ba:	88 2f       	mov	r24, r24
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	88 59       	subi	r24, 0x98	; 152
     1c4:	9f 4f       	sbci	r25, 0xFF	; 255
     1c6:	fc 01       	movw	r30, r24
     1c8:	80 81       	ld	r24, Z
     1ca:	91 81       	ldd	r25, Z+1	; 0x01
     1cc:	29 81       	ldd	r18, Y+1	; 0x01
     1ce:	26 95       	lsr	r18
     1d0:	26 95       	lsr	r18
     1d2:	26 95       	lsr	r18
     1d4:	22 2f       	mov	r18, r18
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	22 0f       	add	r18, r18
     1da:	33 1f       	adc	r19, r19
     1dc:	28 59       	subi	r18, 0x98	; 152
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
     1e0:	f9 01       	movw	r30, r18
     1e2:	20 81       	ld	r18, Z
     1e4:	31 81       	ldd	r19, Z+1	; 0x01
     1e6:	f9 01       	movw	r30, r18
     1e8:	20 81       	ld	r18, Z
     1ea:	62 2f       	mov	r22, r18
     1ec:	29 81       	ldd	r18, Y+1	; 0x01
     1ee:	22 2f       	mov	r18, r18
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	a9 01       	movw	r20, r18
     1f4:	47 70       	andi	r20, 0x07	; 7
     1f6:	55 27       	eor	r21, r21
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     1fe:	22 0f       	add	r18, r18
     200:	33 1f       	adc	r19, r19
     202:	4a 95       	dec	r20
     204:	e2 f7       	brpl	.-8      	; 0x1fe <Dio_setPinVal+0x74>
     206:	26 2b       	or	r18, r22
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18
			break;
     20c:	5d c0       	rjmp	.+186    	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>

		case Status_Pin_Low:
				CLR_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	86 95       	lsr	r24
     212:	86 95       	lsr	r24
     214:	86 95       	lsr	r24
     216:	88 2f       	mov	r24, r24
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	88 59       	subi	r24, 0x98	; 152
     220:	9f 4f       	sbci	r25, 0xFF	; 255
     222:	fc 01       	movw	r30, r24
     224:	80 81       	ld	r24, Z
     226:	91 81       	ldd	r25, Z+1	; 0x01
     228:	29 81       	ldd	r18, Y+1	; 0x01
     22a:	26 95       	lsr	r18
     22c:	26 95       	lsr	r18
     22e:	26 95       	lsr	r18
     230:	22 2f       	mov	r18, r18
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	22 0f       	add	r18, r18
     236:	33 1f       	adc	r19, r19
     238:	28 59       	subi	r18, 0x98	; 152
     23a:	3f 4f       	sbci	r19, 0xFF	; 255
     23c:	f9 01       	movw	r30, r18
     23e:	20 81       	ld	r18, Z
     240:	31 81       	ldd	r19, Z+1	; 0x01
     242:	f9 01       	movw	r30, r18
     244:	20 81       	ld	r18, Z
     246:	62 2f       	mov	r22, r18
     248:	29 81       	ldd	r18, Y+1	; 0x01
     24a:	22 2f       	mov	r18, r18
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	a9 01       	movw	r20, r18
     250:	47 70       	andi	r20, 0x07	; 7
     252:	55 27       	eor	r21, r21
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	02 c0       	rjmp	.+4      	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	4a 95       	dec	r20
     260:	e2 f7       	brpl	.-8      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
     262:	20 95       	com	r18
     264:	26 23       	and	r18, r22
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
			break;
     26a:	2e c0       	rjmp	.+92     	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>

		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	86 95       	lsr	r24
     270:	86 95       	lsr	r24
     272:	86 95       	lsr	r24
     274:	88 2f       	mov	r24, r24
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	88 59       	subi	r24, 0x98	; 152
     27e:	9f 4f       	sbci	r25, 0xFF	; 255
     280:	fc 01       	movw	r30, r24
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	29 81       	ldd	r18, Y+1	; 0x01
     288:	26 95       	lsr	r18
     28a:	26 95       	lsr	r18
     28c:	26 95       	lsr	r18
     28e:	22 2f       	mov	r18, r18
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	22 0f       	add	r18, r18
     294:	33 1f       	adc	r19, r19
     296:	28 59       	subi	r18, 0x98	; 152
     298:	3f 4f       	sbci	r19, 0xFF	; 255
     29a:	f9 01       	movw	r30, r18
     29c:	20 81       	ld	r18, Z
     29e:	31 81       	ldd	r19, Z+1	; 0x01
     2a0:	f9 01       	movw	r30, r18
     2a2:	20 81       	ld	r18, Z
     2a4:	62 2f       	mov	r22, r18
     2a6:	29 81       	ldd	r18, Y+1	; 0x01
     2a8:	22 2f       	mov	r18, r18
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	a9 01       	movw	r20, r18
     2ae:	47 70       	andi	r20, 0x07	; 7
     2b0:	55 27       	eor	r21, r21
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
     2b8:	22 0f       	add	r18, r18
     2ba:	33 1f       	adc	r19, r19
     2bc:	4a 95       	dec	r20
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
     2c0:	26 27       	eor	r18, r22
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
			break;
     2c6:	00 00       	nop

		default :
			break;
	}
}
     2c8:	00 00       	nop
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <Dio_getPinVal>:

Std_Return Dio_getPinVal(u8 CopyPinNum)
{
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	00 d0       	rcall	.+0      	; 0x2da <Dio_getPinVal+0x6>
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     2e0:	19 82       	std	Y+1, r1	; 0x01
	Ret = GET_BIT(*Arr_Pin[CopyPinNum / 8 ],CopyPinNum % 8 );
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	86 95       	lsr	r24
     2e6:	86 95       	lsr	r24
     2e8:	86 95       	lsr	r24
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	80 59       	subi	r24, 0x90	; 144
     2f4:	9f 4f       	sbci	r25, 0xFF	; 255
     2f6:	fc 01       	movw	r30, r24
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	fc 01       	movw	r30, r24
     2fe:	80 81       	ld	r24, Z
     300:	88 2f       	mov	r24, r24
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2a 81       	ldd	r18, Y+2	; 0x02
     306:	22 2f       	mov	r18, r18
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	27 70       	andi	r18, 0x07	; 7
     30c:	33 27       	eor	r19, r19
     30e:	02 c0       	rjmp	.+4      	; 0x314 <Dio_getPinVal+0x40>
     310:	95 95       	asr	r25
     312:	87 95       	ror	r24
     314:	2a 95       	dec	r18
     316:	e2 f7       	brpl	.-8      	; 0x310 <Dio_getPinVal+0x3c>
     318:	81 70       	andi	r24, 0x01	; 1
     31a:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     31c:	89 81       	ldd	r24, Y+1	; 0x01
}
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <Dio_setPortDir>:



/* -------------------- Section : Ports Functions Definaions -------------------- */
void Dio_setPortDir(u8 CopyPortNum,u8 CopyPinDir)
{
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	00 d0       	rcall	.+0      	; 0x32e <Dio_setPortDir+0x6>
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_DDr[CopyPortNum] = CopyPinDir;
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	80 5a       	subi	r24, 0xA0	; 160
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	fc 01       	movw	r30, r24
     346:	80 81       	ld	r24, Z
     348:	91 81       	ldd	r25, Z+1	; 0x01
     34a:	2a 81       	ldd	r18, Y+2	; 0x02
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
}
     350:	00 00       	nop
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <Dio_setPortVal>:

void Dio_setPortVal(u8 CopyPortNum,u8 CopyPinVal)
{
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	00 d0       	rcall	.+0      	; 0x362 <Dio_setPortVal+0x6>
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	89 83       	std	Y+1, r24	; 0x01
     368:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_Port[CopyPortNum] = CopyPinVal;
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	88 2f       	mov	r24, r24
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	88 59       	subi	r24, 0x98	; 152
     376:	9f 4f       	sbci	r25, 0xFF	; 255
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	91 81       	ldd	r25, Z+1	; 0x01
     37e:	2a 81       	ldd	r18, Y+2	; 0x02
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
}
     384:	00 00       	nop
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <Dio_getPortVal>:
Std_Return Dio_getPortVal(u8 CopyPortNum)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <Dio_getPortVal+0x6>
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     39c:	19 82       	std	Y+1, r1	; 0x01
	Ret = *Arr_Pin[CopyPortNum];
     39e:	8a 81       	ldd	r24, Y+2	; 0x02
     3a0:	88 2f       	mov	r24, r24
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	80 59       	subi	r24, 0x90	; 144
     3aa:	9f 4f       	sbci	r25, 0xFF	; 255
     3ac:	fc 01       	movw	r30, r24
     3ae:	80 81       	ld	r24, Z
     3b0:	91 81       	ldd	r25, Z+1	; 0x01
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <Led_On_PortLeds_Button>:
 *@ Param1 : CopyPortOutNum : Led Port Number
 *@ Param2 : CopyBottonPin : Button  On Pin Number
 *@ Param3 : CopyBottonPin : Button Off Pin Number
 */
void Led_On_PortLeds_Button(u8 CopyPortOutNum , u8 CopyButtonPin_On , u8 CopyButtonPin_Off )
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <Led_On_PortLeds_Button+0x6>
     3ca:	1f 92       	push	r1
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	6a 83       	std	Y+2, r22	; 0x02
     3d4:	4b 83       	std	Y+3, r20	; 0x03
		/* ===== Port of Leds Declaration ===== */
		Dio_setPortDir(CopyPortOutNum,Direction_Port_Output);
     3d6:	6f ef       	ldi	r22, 0xFF	; 255
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	0e 94 94 01 	call	0x328	; 0x328 <Dio_setPortDir>

		/* ===== Pin of Buttons Declaration ===== */
		Dio_setPinDir(CopyButtonPin_On , Direction_Pin_Input);
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
		Dio_setPinDir(CopyButtonPin_Off , Direction_Pin_Input);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ea:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

		/* ========== If Button Pressed Led Is On ========== */
		if(Dio_getPinVal(CopyButtonPin_On) == Status_Pin_Low)
     3ee:	8a 81       	ldd	r24, Y+2	; 0x02
     3f0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
     3f4:	88 23       	and	r24, r24
     3f6:	21 f4       	brne	.+8      	; 0x400 <__DATA_REGION_LENGTH__>
		{
			Dio_setPortVal(CopyPortOutNum, Status_Port_High);
     3f8:	6f ef       	ldi	r22, 0xFF	; 255
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	0e 94 ae 01 	call	0x35c	; 0x35c <Dio_setPortVal>
		}

		/* ========== If Button Pressed Led Is Off ========== */
		if(Dio_getPinVal(CopyButtonPin_Off) == Status_Pin_Low)
     400:	8b 81       	ldd	r24, Y+3	; 0x03
     402:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
     406:	88 23       	and	r24, r24
     408:	21 f4       	brne	.+8      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
		{
			Dio_setPortVal(CopyPortOutNum, Status_Port_Low);
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	0e 94 ae 01 	call	0x35c	; 0x35c <Dio_setPortVal>
		}

}
     412:	00 00       	nop
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <Led_On_OneLed_Button>:
 *@ Param1 : CopyPinOutNum : Led Pin Number
 *@ Param2 : CopyBottonPin : Button  On Pin Number
 *@ Param3 : CopyBottonPin : Button Off Pin Number
 */
void Led_On_OneLed_Button(u8 CopyPinOutNum ,u8 CopyButtonPin_On , u8 CopyButtonPin_Off)
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	00 d0       	rcall	.+0      	; 0x426 <Led_On_OneLed_Button+0x6>
     426:	1f 92       	push	r1
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	89 83       	std	Y+1, r24	; 0x01
     42e:	6a 83       	std	Y+2, r22	; 0x02
     430:	4b 83       	std	Y+3, r20	; 0x03
	/* ===== Pin of Led Declaration ===== */
	Dio_setPinDir(CopyPinOutNum , Direction_Pin_Output);
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	/* ===== Pins of Buttons Declaration ===== */
	Dio_setPinDir(CopyButtonPin_On , Direction_Pin_Input);
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(CopyButtonPin_Off , Direction_Pin_Input);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8b 81       	ldd	r24, Y+3	; 0x03
     446:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	/* ========== If Button Pressed Led Is On ========== */
	if(Dio_getPinVal(CopyButtonPin_On) == Status_Pin_Low)
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
     450:	88 23       	and	r24, r24
     452:	21 f4       	brne	.+8      	; 0x45c <Led_On_OneLed_Button+0x3c>
	{
		Dio_setPinVal(CopyPinOutNum , Status_Pin_High);
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	}

	/* ========== If Button Pressed Led Is Off ========== */
	if(Dio_getPinVal(CopyButtonPin_Off) == Status_Pin_Low)
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
     462:	88 23       	and	r24, r24
     464:	21 f4       	brne	.+8      	; 0x46e <__stack+0xf>
	{
		Dio_setPortVal(CopyPinOutNum, Status_Port_Low);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	0e 94 ae 01 	call	0x35c	; 0x35c <Dio_setPortVal>
	}
}
     46e:	00 00       	nop
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <LCD_4_INIT>:

/********** SECTION : Functions Definitions 4 Bit Mode **********/
#elif _LCD_Mood == _LCD_4_Bit_Mood

void LCD_4_INIT(LCD_4_MODE CopyLCD)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	c3 54       	subi	r28, 0x43	; 67
     486:	d1 09       	sbc	r29, r1
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
     492:	4e af       	std	Y+62, r20	; 0x3e
     494:	5f af       	std	Y+63, r21	; 0x3f
     496:	9e 01       	movw	r18, r28
     498:	20 5c       	subi	r18, 0xC0	; 192
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	f9 01       	movw	r30, r18
     49e:	60 83       	st	Z, r22
     4a0:	9e 01       	movw	r18, r28
     4a2:	2f 5b       	subi	r18, 0xBF	; 191
     4a4:	3f 4f       	sbci	r19, 0xFF	; 255
     4a6:	f9 01       	movw	r30, r18
     4a8:	70 83       	st	Z, r23
     4aa:	9e 01       	movw	r18, r28
     4ac:	2e 5b       	subi	r18, 0xBE	; 190
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	f9 01       	movw	r30, r18
     4b2:	80 83       	st	Z, r24
     4b4:	9e 01       	movw	r18, r28
     4b6:	2d 5b       	subi	r18, 0xBD	; 189
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	f9 01       	movw	r30, r18
     4bc:	90 83       	st	Z, r25
	u8 Counter = Initial_Counter;
     4be:	19 82       	std	Y+1, r1	; 0x01

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
     4c0:	8f ad       	ldd	r24, Y+63	; 0x3f
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);
     4c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     4d0:	19 82       	std	Y+1, r1	; 0x01
     4d2:	10 c0       	rjmp	.+32     	; 0x4f4 <LCD_4_INIT+0x78>
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	9e 01       	movw	r18, r28
     4dc:	20 5c       	subi	r18, 0xC0	; 192
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	82 0f       	add	r24, r18
     4e2:	93 1f       	adc	r25, r19
     4e4:	fc 01       	movw	r30, r24
     4e6:	80 81       	ld	r24, Z
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	u8 Counter = Initial_Counter;

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	84 30       	cpi	r24, 0x04	; 4
     4f8:	68 f3       	brcs	.-38     	; 0x4d4 <LCD_4_INIT+0x58>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	a0 ea       	ldi	r26, 0xA0	; 160
     500:	b1 e4       	ldi	r27, 0x41	; 65
     502:	8a 83       	std	Y+2, r24	; 0x02
     504:	9b 83       	std	Y+3, r25	; 0x03
     506:	ac 83       	std	Y+4, r26	; 0x04
     508:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	4a e7       	ldi	r20, 0x7A	; 122
     510:	53 e4       	ldi	r21, 0x43	; 67
     512:	6a 81       	ldd	r22, Y+2	; 0x02
     514:	7b 81       	ldd	r23, Y+3	; 0x03
     516:	8c 81       	ldd	r24, Y+4	; 0x04
     518:	9d 81       	ldd	r25, Y+5	; 0x05
     51a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	8c ab       	std	Y+52, r24	; 0x34
     524:	9d ab       	std	Y+53, r25	; 0x35
     526:	ae ab       	std	Y+54, r26	; 0x36
     528:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e8       	ldi	r20, 0x80	; 128
     530:	5f e3       	ldi	r21, 0x3F	; 63
     532:	6c a9       	ldd	r22, Y+52	; 0x34
     534:	7d a9       	ldd	r23, Y+53	; 0x35
     536:	8e a9       	ldd	r24, Y+54	; 0x36
     538:	9f a9       	ldd	r25, Y+55	; 0x37
     53a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__cmpsf2>
     53e:	88 23       	and	r24, r24
     540:	2c f4       	brge	.+10     	; 0x54c <LCD_4_INIT+0xd0>
		__ticks = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	99 af       	std	Y+57, r25	; 0x39
     548:	88 af       	std	Y+56, r24	; 0x38
     54a:	3f c0       	rjmp	.+126    	; 0x5ca <LCD_4_INIT+0x14e>
	else if (__tmp > 65535)
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	3f ef       	ldi	r19, 0xFF	; 255
     550:	4f e7       	ldi	r20, 0x7F	; 127
     552:	57 e4       	ldi	r21, 0x47	; 71
     554:	6c a9       	ldd	r22, Y+52	; 0x34
     556:	7d a9       	ldd	r23, Y+53	; 0x35
     558:	8e a9       	ldd	r24, Y+54	; 0x36
     55a:	9f a9       	ldd	r25, Y+55	; 0x37
     55c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__gesf2>
     560:	18 16       	cp	r1, r24
     562:	4c f5       	brge	.+82     	; 0x5b6 <LCD_4_INIT+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	6a 81       	ldd	r22, Y+2	; 0x02
     56e:	7b 81       	ldd	r23, Y+3	; 0x03
     570:	8c 81       	ldd	r24, Y+4	; 0x04
     572:	9d 81       	ldd	r25, Y+5	; 0x05
     574:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	bc 01       	movw	r22, r24
     57e:	cd 01       	movw	r24, r26
     580:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     584:	dc 01       	movw	r26, r24
     586:	cb 01       	movw	r24, r22
     588:	99 af       	std	Y+57, r25	; 0x39
     58a:	88 af       	std	Y+56, r24	; 0x38
     58c:	0f c0       	rjmp	.+30     	; 0x5ac <LCD_4_INIT+0x130>
     58e:	89 e1       	ldi	r24, 0x19	; 25
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	9b af       	std	Y+59, r25	; 0x3b
     594:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     596:	8a ad       	ldd	r24, Y+58	; 0x3a
     598:	9b ad       	ldd	r25, Y+59	; 0x3b
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <LCD_4_INIT+0x11e>
     59e:	9b af       	std	Y+59, r25	; 0x3b
     5a0:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a2:	88 ad       	ldd	r24, Y+56	; 0x38
     5a4:	99 ad       	ldd	r25, Y+57	; 0x39
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	99 af       	std	Y+57, r25	; 0x39
     5aa:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ac:	88 ad       	ldd	r24, Y+56	; 0x38
     5ae:	99 ad       	ldd	r25, Y+57	; 0x39
     5b0:	89 2b       	or	r24, r25
     5b2:	69 f7       	brne	.-38     	; 0x58e <LCD_4_INIT+0x112>
     5b4:	14 c0       	rjmp	.+40     	; 0x5de <LCD_4_INIT+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b6:	6c a9       	ldd	r22, Y+52	; 0x34
     5b8:	7d a9       	ldd	r23, Y+53	; 0x35
     5ba:	8e a9       	ldd	r24, Y+54	; 0x36
     5bc:	9f a9       	ldd	r25, Y+55	; 0x37
     5be:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	99 af       	std	Y+57, r25	; 0x39
     5c8:	88 af       	std	Y+56, r24	; 0x38
     5ca:	88 ad       	ldd	r24, Y+56	; 0x38
     5cc:	99 ad       	ldd	r25, Y+57	; 0x39
     5ce:	9d af       	std	Y+61, r25	; 0x3d
     5d0:	8c af       	std	Y+60, r24	; 0x3c
     5d2:	8c ad       	ldd	r24, Y+60	; 0x3c
     5d4:	9d ad       	ldd	r25, Y+61	; 0x3d
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <LCD_4_INIT+0x15a>
     5da:	9d af       	std	Y+61, r25	; 0x3d
     5dc:	8c af       	std	Y+60, r24	; 0x3c
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
	}
	_delay_ms(20);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     5de:	28 e3       	ldi	r18, 0x38	; 56
     5e0:	4e ad       	ldd	r20, Y+62	; 0x3e
     5e2:	5f ad       	ldd	r21, Y+63	; 0x3f
     5e4:	ce 01       	movw	r24, r28
     5e6:	80 5c       	subi	r24, 0xC0	; 192
     5e8:	9f 4f       	sbci	r25, 0xFF	; 255
     5ea:	fc 01       	movw	r30, r24
     5ec:	60 81       	ld	r22, Z
     5ee:	ce 01       	movw	r24, r28
     5f0:	8f 5b       	subi	r24, 0xBF	; 191
     5f2:	9f 4f       	sbci	r25, 0xFF	; 255
     5f4:	fc 01       	movw	r30, r24
     5f6:	70 81       	ld	r23, Z
     5f8:	ce 01       	movw	r24, r28
     5fa:	8e 5b       	subi	r24, 0xBE	; 190
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	fc 01       	movw	r30, r24
     600:	80 81       	ld	r24, Z
     602:	fe 01       	movw	r30, r28
     604:	ed 5b       	subi	r30, 0xBD	; 189
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	90 81       	ld	r25, Z
     60a:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	a0 ea       	ldi	r26, 0xA0	; 160
     614:	b0 e4       	ldi	r27, 0x40	; 64
     616:	8e 83       	std	Y+6, r24	; 0x06
     618:	9f 83       	std	Y+7, r25	; 0x07
     61a:	a8 87       	std	Y+8, r26	; 0x08
     61c:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	4a e7       	ldi	r20, 0x7A	; 122
     624:	53 e4       	ldi	r21, 0x43	; 67
     626:	6e 81       	ldd	r22, Y+6	; 0x06
     628:	7f 81       	ldd	r23, Y+7	; 0x07
     62a:	88 85       	ldd	r24, Y+8	; 0x08
     62c:	99 85       	ldd	r25, Y+9	; 0x09
     62e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	8a a7       	std	Y+42, r24	; 0x2a
     638:	9b a7       	std	Y+43, r25	; 0x2b
     63a:	ac a7       	std	Y+44, r26	; 0x2c
     63c:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e8       	ldi	r20, 0x80	; 128
     644:	5f e3       	ldi	r21, 0x3F	; 63
     646:	6a a5       	ldd	r22, Y+42	; 0x2a
     648:	7b a5       	ldd	r23, Y+43	; 0x2b
     64a:	8c a5       	ldd	r24, Y+44	; 0x2c
     64c:	9d a5       	ldd	r25, Y+45	; 0x2d
     64e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__cmpsf2>
     652:	88 23       	and	r24, r24
     654:	2c f4       	brge	.+10     	; 0x660 <LCD_4_INIT+0x1e4>
		__ticks = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	9f a7       	std	Y+47, r25	; 0x2f
     65c:	8e a7       	std	Y+46, r24	; 0x2e
     65e:	3f c0       	rjmp	.+126    	; 0x6de <LCD_4_INIT+0x262>
	else if (__tmp > 65535)
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	3f ef       	ldi	r19, 0xFF	; 255
     664:	4f e7       	ldi	r20, 0x7F	; 127
     666:	57 e4       	ldi	r21, 0x47	; 71
     668:	6a a5       	ldd	r22, Y+42	; 0x2a
     66a:	7b a5       	ldd	r23, Y+43	; 0x2b
     66c:	8c a5       	ldd	r24, Y+44	; 0x2c
     66e:	9d a5       	ldd	r25, Y+45	; 0x2d
     670:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	4c f5       	brge	.+82     	; 0x6ca <LCD_4_INIT+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 e2       	ldi	r20, 0x20	; 32
     67e:	51 e4       	ldi	r21, 0x41	; 65
     680:	6e 81       	ldd	r22, Y+6	; 0x06
     682:	7f 81       	ldd	r23, Y+7	; 0x07
     684:	88 85       	ldd	r24, Y+8	; 0x08
     686:	99 85       	ldd	r25, Y+9	; 0x09
     688:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	bc 01       	movw	r22, r24
     692:	cd 01       	movw	r24, r26
     694:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	9f a7       	std	Y+47, r25	; 0x2f
     69e:	8e a7       	std	Y+46, r24	; 0x2e
     6a0:	0f c0       	rjmp	.+30     	; 0x6c0 <LCD_4_INIT+0x244>
     6a2:	89 e1       	ldi	r24, 0x19	; 25
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	99 ab       	std	Y+49, r25	; 0x31
     6a8:	88 ab       	std	Y+48, r24	; 0x30
     6aa:	88 a9       	ldd	r24, Y+48	; 0x30
     6ac:	99 a9       	ldd	r25, Y+49	; 0x31
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <LCD_4_INIT+0x232>
     6b2:	99 ab       	std	Y+49, r25	; 0x31
     6b4:	88 ab       	std	Y+48, r24	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b6:	8e a5       	ldd	r24, Y+46	; 0x2e
     6b8:	9f a5       	ldd	r25, Y+47	; 0x2f
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	9f a7       	std	Y+47, r25	; 0x2f
     6be:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c0:	8e a5       	ldd	r24, Y+46	; 0x2e
     6c2:	9f a5       	ldd	r25, Y+47	; 0x2f
     6c4:	89 2b       	or	r24, r25
     6c6:	69 f7       	brne	.-38     	; 0x6a2 <LCD_4_INIT+0x226>
     6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <LCD_4_INIT+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ca:	6a a5       	ldd	r22, Y+42	; 0x2a
     6cc:	7b a5       	ldd	r23, Y+43	; 0x2b
     6ce:	8c a5       	ldd	r24, Y+44	; 0x2c
     6d0:	9d a5       	ldd	r25, Y+45	; 0x2d
     6d2:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9f a7       	std	Y+47, r25	; 0x2f
     6dc:	8e a7       	std	Y+46, r24	; 0x2e
     6de:	8e a5       	ldd	r24, Y+46	; 0x2e
     6e0:	9f a5       	ldd	r25, Y+47	; 0x2f
     6e2:	9b ab       	std	Y+51, r25	; 0x33
     6e4:	8a ab       	std	Y+50, r24	; 0x32
     6e6:	8a a9       	ldd	r24, Y+50	; 0x32
     6e8:	9b a9       	ldd	r25, Y+51	; 0x33
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_4_INIT+0x26e>
     6ee:	9b ab       	std	Y+51, r25	; 0x33
     6f0:	8a ab       	std	Y+50, r24	; 0x32
	_delay_ms(5);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     6f2:	28 e3       	ldi	r18, 0x38	; 56
     6f4:	4e ad       	ldd	r20, Y+62	; 0x3e
     6f6:	5f ad       	ldd	r21, Y+63	; 0x3f
     6f8:	ce 01       	movw	r24, r28
     6fa:	80 5c       	subi	r24, 0xC0	; 192
     6fc:	9f 4f       	sbci	r25, 0xFF	; 255
     6fe:	fc 01       	movw	r30, r24
     700:	60 81       	ld	r22, Z
     702:	ce 01       	movw	r24, r28
     704:	8f 5b       	subi	r24, 0xBF	; 191
     706:	9f 4f       	sbci	r25, 0xFF	; 255
     708:	fc 01       	movw	r30, r24
     70a:	70 81       	ld	r23, Z
     70c:	ce 01       	movw	r24, r28
     70e:	8e 5b       	subi	r24, 0xBE	; 190
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	fe 01       	movw	r30, r28
     718:	ed 5b       	subi	r30, 0xBD	; 189
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	90 81       	ld	r25, Z
     71e:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	a6 e1       	ldi	r26, 0x16	; 22
     728:	b3 e4       	ldi	r27, 0x43	; 67
     72a:	8a 87       	std	Y+10, r24	; 0x0a
     72c:	9b 87       	std	Y+11, r25	; 0x0b
     72e:	ac 87       	std	Y+12, r26	; 0x0c
     730:	bd 87       	std	Y+13, r27	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     732:	2b ea       	ldi	r18, 0xAB	; 171
     734:	3a ea       	ldi	r19, 0xAA	; 170
     736:	4a ea       	ldi	r20, 0xAA	; 170
     738:	5e e3       	ldi	r21, 0x3E	; 62
     73a:	6a 85       	ldd	r22, Y+10	; 0x0a
     73c:	7b 85       	ldd	r23, Y+11	; 0x0b
     73e:	8c 85       	ldd	r24, Y+12	; 0x0c
     740:	9d 85       	ldd	r25, Y+13	; 0x0d
     742:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	8e 87       	std	Y+14, r24	; 0x0e
     74c:	9f 87       	std	Y+15, r25	; 0x0f
     74e:	a8 8b       	std	Y+16, r26	; 0x10
     750:	b9 8b       	std	Y+17, r27	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	40 e8       	ldi	r20, 0x80	; 128
     758:	5e e3       	ldi	r21, 0x3E	; 62
     75a:	6a 85       	ldd	r22, Y+10	; 0x0a
     75c:	7b 85       	ldd	r23, Y+11	; 0x0b
     75e:	8c 85       	ldd	r24, Y+12	; 0x0c
     760:	9d 85       	ldd	r25, Y+13	; 0x0d
     762:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	8a 8b       	std	Y+18, r24	; 0x12
     76c:	9b 8b       	std	Y+19, r25	; 0x13
     76e:	ac 8b       	std	Y+20, r26	; 0x14
     770:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e8       	ldi	r20, 0x80	; 128
     778:	5f e3       	ldi	r21, 0x3F	; 63
     77a:	6e 85       	ldd	r22, Y+14	; 0x0e
     77c:	7f 85       	ldd	r23, Y+15	; 0x0f
     77e:	88 89       	ldd	r24, Y+16	; 0x10
     780:	99 89       	ldd	r25, Y+17	; 0x11
     782:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__cmpsf2>
     786:	88 23       	and	r24, r24
     788:	1c f4       	brge	.+6      	; 0x790 <LCD_4_INIT+0x314>
		__ticks = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	8e 8b       	std	Y+22, r24	; 0x16
     78e:	b2 c0       	rjmp	.+356    	; 0x8f4 <LCD_4_INIT+0x478>
	else if (__tmp2 > 65535)
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	3f ef       	ldi	r19, 0xFF	; 255
     794:	4f e7       	ldi	r20, 0x7F	; 127
     796:	57 e4       	ldi	r21, 0x47	; 71
     798:	6a 89       	ldd	r22, Y+18	; 0x12
     79a:	7b 89       	ldd	r23, Y+19	; 0x13
     79c:	8c 89       	ldd	r24, Y+20	; 0x14
     79e:	9d 89       	ldd	r25, Y+21	; 0x15
     7a0:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__gesf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	0c f0       	brlt	.+2      	; 0x7aa <LCD_4_INIT+0x32e>
     7a8:	7b c0       	rjmp	.+246    	; 0x8a0 <LCD_4_INIT+0x424>
	{
		_delay_ms(__us / 1000.0);
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	4a e7       	ldi	r20, 0x7A	; 122
     7b0:	54 e4       	ldi	r21, 0x44	; 68
     7b2:	6a 85       	ldd	r22, Y+10	; 0x0a
     7b4:	7b 85       	ldd	r23, Y+11	; 0x0b
     7b6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b8:	9d 85       	ldd	r25, Y+13	; 0x0d
     7ba:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__divsf3>
     7be:	dc 01       	movw	r26, r24
     7c0:	cb 01       	movw	r24, r22
     7c2:	8f 8b       	std	Y+23, r24	; 0x17
     7c4:	98 8f       	std	Y+24, r25	; 0x18
     7c6:	a9 8f       	std	Y+25, r26	; 0x19
     7c8:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	4a e7       	ldi	r20, 0x7A	; 122
     7d0:	53 e4       	ldi	r21, 0x43	; 67
     7d2:	6f 89       	ldd	r22, Y+23	; 0x17
     7d4:	78 8d       	ldd	r23, Y+24	; 0x18
     7d6:	89 8d       	ldd	r24, Y+25	; 0x19
     7d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7da:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     7de:	dc 01       	movw	r26, r24
     7e0:	cb 01       	movw	r24, r22
     7e2:	8b 8f       	std	Y+27, r24	; 0x1b
     7e4:	9c 8f       	std	Y+28, r25	; 0x1c
     7e6:	ad 8f       	std	Y+29, r26	; 0x1d
     7e8:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e8       	ldi	r20, 0x80	; 128
     7f0:	5f e3       	ldi	r21, 0x3F	; 63
     7f2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     7f4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     7f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     7fa:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__cmpsf2>
     7fe:	88 23       	and	r24, r24
     800:	2c f4       	brge	.+10     	; 0x80c <LCD_4_INIT+0x390>
		__ticks = 1;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	98 a3       	std	Y+32, r25	; 0x20
     808:	8f 8f       	std	Y+31, r24	; 0x1f
     80a:	3f c0       	rjmp	.+126    	; 0x88a <LCD_4_INIT+0x40e>
	else if (__tmp > 65535)
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	3f ef       	ldi	r19, 0xFF	; 255
     810:	4f e7       	ldi	r20, 0x7F	; 127
     812:	57 e4       	ldi	r21, 0x47	; 71
     814:	6b 8d       	ldd	r22, Y+27	; 0x1b
     816:	7c 8d       	ldd	r23, Y+28	; 0x1c
     818:	8d 8d       	ldd	r24, Y+29	; 0x1d
     81a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     81c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__gesf2>
     820:	18 16       	cp	r1, r24
     822:	4c f5       	brge	.+82     	; 0x876 <LCD_4_INIT+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e2       	ldi	r20, 0x20	; 32
     82a:	51 e4       	ldi	r21, 0x41	; 65
     82c:	6f 89       	ldd	r22, Y+23	; 0x17
     82e:	78 8d       	ldd	r23, Y+24	; 0x18
     830:	89 8d       	ldd	r24, Y+25	; 0x19
     832:	9a 8d       	ldd	r25, Y+26	; 0x1a
     834:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     844:	dc 01       	movw	r26, r24
     846:	cb 01       	movw	r24, r22
     848:	98 a3       	std	Y+32, r25	; 0x20
     84a:	8f 8f       	std	Y+31, r24	; 0x1f
     84c:	0f c0       	rjmp	.+30     	; 0x86c <LCD_4_INIT+0x3f0>
     84e:	89 e1       	ldi	r24, 0x19	; 25
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	9a a3       	std	Y+34, r25	; 0x22
     854:	89 a3       	std	Y+33, r24	; 0x21
     856:	89 a1       	ldd	r24, Y+33	; 0x21
     858:	9a a1       	ldd	r25, Y+34	; 0x22
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_4_INIT+0x3de>
     85e:	9a a3       	std	Y+34, r25	; 0x22
     860:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     862:	8f 8d       	ldd	r24, Y+31	; 0x1f
     864:	98 a1       	ldd	r25, Y+32	; 0x20
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	98 a3       	std	Y+32, r25	; 0x20
     86a:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     86c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     86e:	98 a1       	ldd	r25, Y+32	; 0x20
     870:	89 2b       	or	r24, r25
     872:	69 f7       	brne	.-38     	; 0x84e <LCD_4_INIT+0x3d2>
     874:	3f c0       	rjmp	.+126    	; 0x8f4 <LCD_4_INIT+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     876:	6b 8d       	ldd	r22, Y+27	; 0x1b
     878:	7c 8d       	ldd	r23, Y+28	; 0x1c
     87a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     87c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     87e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	98 a3       	std	Y+32, r25	; 0x20
     888:	8f 8f       	std	Y+31, r24	; 0x1f
     88a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     88c:	98 a1       	ldd	r25, Y+32	; 0x20
     88e:	9c a3       	std	Y+36, r25	; 0x24
     890:	8b a3       	std	Y+35, r24	; 0x23
     892:	8b a1       	ldd	r24, Y+35	; 0x23
     894:	9c a1       	ldd	r25, Y+36	; 0x24
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <LCD_4_INIT+0x41a>
     89a:	9c a3       	std	Y+36, r25	; 0x24
     89c:	8b a3       	std	Y+35, r24	; 0x23
     89e:	2a c0       	rjmp	.+84     	; 0x8f4 <LCD_4_INIT+0x478>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	4f e7       	ldi	r20, 0x7F	; 127
     8a6:	53 e4       	ldi	r21, 0x43	; 67
     8a8:	6e 85       	ldd	r22, Y+14	; 0x0e
     8aa:	7f 85       	ldd	r23, Y+15	; 0x0f
     8ac:	88 89       	ldd	r24, Y+16	; 0x10
     8ae:	99 89       	ldd	r25, Y+17	; 0x11
     8b0:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__gesf2>
     8b4:	18 16       	cp	r1, r24
     8b6:	ac f4       	brge	.+42     	; 0x8e2 <LCD_4_INIT+0x466>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     8b8:	6a 89       	ldd	r22, Y+18	; 0x12
     8ba:	7b 89       	ldd	r23, Y+19	; 0x13
     8bc:	8c 89       	ldd	r24, Y+20	; 0x14
     8be:	9d 89       	ldd	r25, Y+21	; 0x15
     8c0:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     8c4:	dc 01       	movw	r26, r24
     8c6:	cb 01       	movw	r24, r22
     8c8:	9e a3       	std	Y+38, r25	; 0x26
     8ca:	8d a3       	std	Y+37, r24	; 0x25
     8cc:	8d a1       	ldd	r24, Y+37	; 0x25
     8ce:	9e a1       	ldd	r25, Y+38	; 0x26
     8d0:	98 a7       	std	Y+40, r25	; 0x28
     8d2:	8f a3       	std	Y+39, r24	; 0x27
     8d4:	8f a1       	ldd	r24, Y+39	; 0x27
     8d6:	98 a5       	ldd	r25, Y+40	; 0x28
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <LCD_4_INIT+0x45c>
     8dc:	98 a7       	std	Y+40, r25	; 0x28
     8de:	8f a3       	std	Y+39, r24	; 0x27
     8e0:	0f c0       	rjmp	.+30     	; 0x900 <LCD_4_INIT+0x484>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8e2:	6e 85       	ldd	r22, Y+14	; 0x0e
     8e4:	7f 85       	ldd	r23, Y+15	; 0x0f
     8e6:	88 89       	ldd	r24, Y+16	; 0x10
     8e8:	99 89       	ldd	r25, Y+17	; 0x11
     8ea:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	8e 8b       	std	Y+22, r24	; 0x16
     8f4:	8e 89       	ldd	r24, Y+22	; 0x16
     8f6:	89 a7       	std	Y+41, r24	; 0x29
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8f8:	89 a5       	ldd	r24, Y+41	; 0x29
     8fa:	8a 95       	dec	r24
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <LCD_4_INIT+0x47e>
     8fe:	89 a7       	std	Y+41, r24	; 0x29
	_delay_us(150);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     900:	28 e3       	ldi	r18, 0x38	; 56
     902:	4e ad       	ldd	r20, Y+62	; 0x3e
     904:	5f ad       	ldd	r21, Y+63	; 0x3f
     906:	ce 01       	movw	r24, r28
     908:	80 5c       	subi	r24, 0xC0	; 192
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	fc 01       	movw	r30, r24
     90e:	60 81       	ld	r22, Z
     910:	ce 01       	movw	r24, r28
     912:	8f 5b       	subi	r24, 0xBF	; 191
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	fc 01       	movw	r30, r24
     918:	70 81       	ld	r23, Z
     91a:	ce 01       	movw	r24, r28
     91c:	8e 5b       	subi	r24, 0xBE	; 190
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	fe 01       	movw	r30, r28
     926:	ed 5b       	subi	r30, 0xBD	; 189
     928:	ff 4f       	sbci	r31, 0xFF	; 255
     92a:	90 81       	ld	r25, Z
     92c:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Clear_Dis);
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	4e ad       	ldd	r20, Y+62	; 0x3e
     934:	5f ad       	ldd	r21, Y+63	; 0x3f
     936:	ce 01       	movw	r24, r28
     938:	80 5c       	subi	r24, 0xC0	; 192
     93a:	9f 4f       	sbci	r25, 0xFF	; 255
     93c:	fc 01       	movw	r30, r24
     93e:	60 81       	ld	r22, Z
     940:	ce 01       	movw	r24, r28
     942:	8f 5b       	subi	r24, 0xBF	; 191
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	fc 01       	movw	r30, r24
     948:	70 81       	ld	r23, Z
     94a:	ce 01       	movw	r24, r28
     94c:	8e 5b       	subi	r24, 0xBE	; 190
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	fe 01       	movw	r30, r28
     956:	ed 5b       	subi	r30, 0xBD	; 189
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	90 81       	ld	r25, Z
     95c:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Return_Home);
     960:	22 e0       	ldi	r18, 0x02	; 2
     962:	4e ad       	ldd	r20, Y+62	; 0x3e
     964:	5f ad       	ldd	r21, Y+63	; 0x3f
     966:	ce 01       	movw	r24, r28
     968:	80 5c       	subi	r24, 0xC0	; 192
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	fc 01       	movw	r30, r24
     96e:	60 81       	ld	r22, Z
     970:	ce 01       	movw	r24, r28
     972:	8f 5b       	subi	r24, 0xBF	; 191
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	fc 01       	movw	r30, r24
     978:	70 81       	ld	r23, Z
     97a:	ce 01       	movw	r24, r28
     97c:	8e 5b       	subi	r24, 0xBE	; 190
     97e:	9f 4f       	sbci	r25, 0xFF	; 255
     980:	fc 01       	movw	r30, r24
     982:	80 81       	ld	r24, Z
     984:	fe 01       	movw	r30, r28
     986:	ed 5b       	subi	r30, 0xBD	; 189
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	90 81       	ld	r25, Z
     98c:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Entery_INC);
     990:	26 e0       	ldi	r18, 0x06	; 6
     992:	4e ad       	ldd	r20, Y+62	; 0x3e
     994:	5f ad       	ldd	r21, Y+63	; 0x3f
     996:	ce 01       	movw	r24, r28
     998:	80 5c       	subi	r24, 0xC0	; 192
     99a:	9f 4f       	sbci	r25, 0xFF	; 255
     99c:	fc 01       	movw	r30, r24
     99e:	60 81       	ld	r22, Z
     9a0:	ce 01       	movw	r24, r28
     9a2:	8f 5b       	subi	r24, 0xBF	; 191
     9a4:	9f 4f       	sbci	r25, 0xFF	; 255
     9a6:	fc 01       	movw	r30, r24
     9a8:	70 81       	ld	r23, Z
     9aa:	ce 01       	movw	r24, r28
     9ac:	8e 5b       	subi	r24, 0xBE	; 190
     9ae:	9f 4f       	sbci	r25, 0xFF	; 255
     9b0:	fc 01       	movw	r30, r24
     9b2:	80 81       	ld	r24, Z
     9b4:	fe 01       	movw	r30, r28
     9b6:	ed 5b       	subi	r30, 0xBD	; 189
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	90 81       	ld	r25, Z
     9bc:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Dis_ON);
     9c0:	2c e0       	ldi	r18, 0x0C	; 12
     9c2:	4e ad       	ldd	r20, Y+62	; 0x3e
     9c4:	5f ad       	ldd	r21, Y+63	; 0x3f
     9c6:	ce 01       	movw	r24, r28
     9c8:	80 5c       	subi	r24, 0xC0	; 192
     9ca:	9f 4f       	sbci	r25, 0xFF	; 255
     9cc:	fc 01       	movw	r30, r24
     9ce:	60 81       	ld	r22, Z
     9d0:	ce 01       	movw	r24, r28
     9d2:	8f 5b       	subi	r24, 0xBF	; 191
     9d4:	9f 4f       	sbci	r25, 0xFF	; 255
     9d6:	fc 01       	movw	r30, r24
     9d8:	70 81       	ld	r23, Z
     9da:	ce 01       	movw	r24, r28
     9dc:	8e 5b       	subi	r24, 0xBE	; 190
     9de:	9f 4f       	sbci	r25, 0xFF	; 255
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	fe 01       	movw	r30, r28
     9e6:	ed 5b       	subi	r30, 0xBD	; 189
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ea:	90 81       	ld	r25, Z
     9ec:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_4_Bit_Mode);
     9f0:	28 e2       	ldi	r18, 0x28	; 40
     9f2:	4e ad       	ldd	r20, Y+62	; 0x3e
     9f4:	5f ad       	ldd	r21, Y+63	; 0x3f
     9f6:	ce 01       	movw	r24, r28
     9f8:	80 5c       	subi	r24, 0xC0	; 192
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	fc 01       	movw	r30, r24
     9fe:	60 81       	ld	r22, Z
     a00:	ce 01       	movw	r24, r28
     a02:	8f 5b       	subi	r24, 0xBF	; 191
     a04:	9f 4f       	sbci	r25, 0xFF	; 255
     a06:	fc 01       	movw	r30, r24
     a08:	70 81       	ld	r23, Z
     a0a:	ce 01       	movw	r24, r28
     a0c:	8e 5b       	subi	r24, 0xBE	; 190
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	fe 01       	movw	r30, r28
     a16:	ed 5b       	subi	r30, 0xBD	; 189
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	90 81       	ld	r25, Z
     a1c:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, 0x80);
     a20:	20 e8       	ldi	r18, 0x80	; 128
     a22:	4e ad       	ldd	r20, Y+62	; 0x3e
     a24:	5f ad       	ldd	r21, Y+63	; 0x3f
     a26:	ce 01       	movw	r24, r28
     a28:	80 5c       	subi	r24, 0xC0	; 192
     a2a:	9f 4f       	sbci	r25, 0xFF	; 255
     a2c:	fc 01       	movw	r30, r24
     a2e:	60 81       	ld	r22, Z
     a30:	ce 01       	movw	r24, r28
     a32:	8f 5b       	subi	r24, 0xBF	; 191
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	fc 01       	movw	r30, r24
     a38:	70 81       	ld	r23, Z
     a3a:	ce 01       	movw	r24, r28
     a3c:	8e 5b       	subi	r24, 0xBE	; 190
     a3e:	9f 4f       	sbci	r25, 0xFF	; 255
     a40:	fc 01       	movw	r30, r24
     a42:	80 81       	ld	r24, Z
     a44:	fe 01       	movw	r30, r28
     a46:	ed 5b       	subi	r30, 0xBD	; 189
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	90 81       	ld	r25, Z
     a4c:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
}
     a50:	00 00       	nop
     a52:	cd 5b       	subi	r28, 0xBD	; 189
     a54:	df 4f       	sbci	r29, 0xFF	; 255
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <LCD_4_CMD_Write>:

void LCD_4_CMD_Write(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	27 97       	sbiw	r28, 0x07	; 7
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	cd bf       	out	0x3d, r28	; 61
     a7a:	49 83       	std	Y+1, r20	; 0x01
     a7c:	5a 83       	std	Y+2, r21	; 0x02
     a7e:	6b 83       	std	Y+3, r22	; 0x03
     a80:	7c 83       	std	Y+4, r23	; 0x04
     a82:	8d 83       	std	Y+5, r24	; 0x05
     a84:	9e 83       	std	Y+6, r25	; 0x06
     a86:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_Low);
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyCMD >> 4);
     a90:	8f 81       	ldd	r24, Y+7	; 0x07
     a92:	82 95       	swap	r24
     a94:	8f 70       	andi	r24, 0x0F	; 15
     a96:	28 2f       	mov	r18, r24
     a98:	49 81       	ldd	r20, Y+1	; 0x01
     a9a:	5a 81       	ldd	r21, Y+2	; 0x02
     a9c:	6b 81       	ldd	r22, Y+3	; 0x03
     a9e:	7c 81       	ldd	r23, Y+4	; 0x04
     aa0:	8d 81       	ldd	r24, Y+5	; 0x05
     aa2:	9e 81       	ldd	r25, Y+6	; 0x06
     aa4:	0e 94 09 07 	call	0xe12	; 0xe12 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
     aa8:	49 81       	ldd	r20, Y+1	; 0x01
     aaa:	5a 81       	ldd	r21, Y+2	; 0x02
     aac:	6b 81       	ldd	r22, Y+3	; 0x03
     aae:	7c 81       	ldd	r23, Y+4	; 0x04
     ab0:	8d 81       	ldd	r24, Y+5	; 0x05
     ab2:	9e 81       	ldd	r25, Y+6	; 0x06
     ab4:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyCMD);
     ab8:	2f 81       	ldd	r18, Y+7	; 0x07
     aba:	49 81       	ldd	r20, Y+1	; 0x01
     abc:	5a 81       	ldd	r21, Y+2	; 0x02
     abe:	6b 81       	ldd	r22, Y+3	; 0x03
     ac0:	7c 81       	ldd	r23, Y+4	; 0x04
     ac2:	8d 81       	ldd	r24, Y+5	; 0x05
     ac4:	9e 81       	ldd	r25, Y+6	; 0x06
     ac6:	0e 94 09 07 	call	0xe12	; 0xe12 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
     aca:	49 81       	ldd	r20, Y+1	; 0x01
     acc:	5a 81       	ldd	r21, Y+2	; 0x02
     ace:	6b 81       	ldd	r22, Y+3	; 0x03
     ad0:	7c 81       	ldd	r23, Y+4	; 0x04
     ad2:	8d 81       	ldd	r24, Y+5	; 0x05
     ad4:	9e 81       	ldd	r25, Y+6	; 0x06
     ad6:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_4_SendEnable_Signal>
}
     ada:	00 00       	nop
     adc:	27 96       	adiw	r28, 0x07	; 7
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <LCD_4_Char_Write>:

void LCD_4_Char_Write(LCD_4_MODE CopyLCD , u8 CopyChar)
{
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	27 97       	sbiw	r28, 0x07	; 7
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	49 83       	std	Y+1, r20	; 0x01
     b04:	5a 83       	std	Y+2, r21	; 0x02
     b06:	6b 83       	std	Y+3, r22	; 0x03
     b08:	7c 83       	std	Y+4, r23	; 0x04
     b0a:	8d 83       	std	Y+5, r24	; 0x05
     b0c:	9e 83       	std	Y+6, r25	; 0x06
     b0e:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_High);
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyChar >> 4);
     b18:	8f 81       	ldd	r24, Y+7	; 0x07
     b1a:	82 95       	swap	r24
     b1c:	8f 70       	andi	r24, 0x0F	; 15
     b1e:	28 2f       	mov	r18, r24
     b20:	49 81       	ldd	r20, Y+1	; 0x01
     b22:	5a 81       	ldd	r21, Y+2	; 0x02
     b24:	6b 81       	ldd	r22, Y+3	; 0x03
     b26:	7c 81       	ldd	r23, Y+4	; 0x04
     b28:	8d 81       	ldd	r24, Y+5	; 0x05
     b2a:	9e 81       	ldd	r25, Y+6	; 0x06
     b2c:	0e 94 09 07 	call	0xe12	; 0xe12 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
     b30:	49 81       	ldd	r20, Y+1	; 0x01
     b32:	5a 81       	ldd	r21, Y+2	; 0x02
     b34:	6b 81       	ldd	r22, Y+3	; 0x03
     b36:	7c 81       	ldd	r23, Y+4	; 0x04
     b38:	8d 81       	ldd	r24, Y+5	; 0x05
     b3a:	9e 81       	ldd	r25, Y+6	; 0x06
     b3c:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyChar);
     b40:	2f 81       	ldd	r18, Y+7	; 0x07
     b42:	49 81       	ldd	r20, Y+1	; 0x01
     b44:	5a 81       	ldd	r21, Y+2	; 0x02
     b46:	6b 81       	ldd	r22, Y+3	; 0x03
     b48:	7c 81       	ldd	r23, Y+4	; 0x04
     b4a:	8d 81       	ldd	r24, Y+5	; 0x05
     b4c:	9e 81       	ldd	r25, Y+6	; 0x06
     b4e:	0e 94 09 07 	call	0xe12	; 0xe12 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
     b52:	49 81       	ldd	r20, Y+1	; 0x01
     b54:	5a 81       	ldd	r21, Y+2	; 0x02
     b56:	6b 81       	ldd	r22, Y+3	; 0x03
     b58:	7c 81       	ldd	r23, Y+4	; 0x04
     b5a:	8d 81       	ldd	r24, Y+5	; 0x05
     b5c:	9e 81       	ldd	r25, Y+6	; 0x06
     b5e:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_4_SendEnable_Signal>
}
     b62:	00 00       	nop
     b64:	27 96       	adiw	r28, 0x07	; 7
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <LCD_4_Char_Postion>:

void LCD_4_Char_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 CopyChar)
{
     b76:	ef 92       	push	r14
     b78:	0f 93       	push	r16
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	29 97       	sbiw	r28, 0x09	; 9
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	49 83       	std	Y+1, r20	; 0x01
     b90:	5a 83       	std	Y+2, r21	; 0x02
     b92:	6b 83       	std	Y+3, r22	; 0x03
     b94:	7c 83       	std	Y+4, r23	; 0x04
     b96:	8d 83       	std	Y+5, r24	; 0x05
     b98:	9e 83       	std	Y+6, r25	; 0x06
     b9a:	2f 83       	std	Y+7, r18	; 0x07
     b9c:	08 87       	std	Y+8, r16	; 0x08
     b9e:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
     ba0:	08 85       	ldd	r16, Y+8	; 0x08
     ba2:	2f 81       	ldd	r18, Y+7	; 0x07
     ba4:	49 81       	ldd	r20, Y+1	; 0x01
     ba6:	5a 81       	ldd	r21, Y+2	; 0x02
     ba8:	6b 81       	ldd	r22, Y+3	; 0x03
     baa:	7c 81       	ldd	r23, Y+4	; 0x04
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	9e 81       	ldd	r25, Y+6	; 0x06
     bb0:	0e 94 57 08 	call	0x10ae	; 0x10ae <LCD_4_SetCursor_Position>
	LCD_4_Char_Write(CopyLCD , CopyChar);
     bb4:	29 85       	ldd	r18, Y+9	; 0x09
     bb6:	49 81       	ldd	r20, Y+1	; 0x01
     bb8:	5a 81       	ldd	r21, Y+2	; 0x02
     bba:	6b 81       	ldd	r22, Y+3	; 0x03
     bbc:	7c 81       	ldd	r23, Y+4	; 0x04
     bbe:	8d 81       	ldd	r24, Y+5	; 0x05
     bc0:	9e 81       	ldd	r25, Y+6	; 0x06
     bc2:	0e 94 77 05 	call	0xaee	; 0xaee <LCD_4_Char_Write>
}
     bc6:	00 00       	nop
     bc8:	29 96       	adiw	r28, 0x09	; 9
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	0f 91       	pop	r16
     bda:	ef 90       	pop	r14
     bdc:	08 95       	ret

00000bde <LCD_4_Str_Write>:

void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	28 97       	sbiw	r28, 0x08	; 8
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	49 83       	std	Y+1, r20	; 0x01
     bf4:	5a 83       	std	Y+2, r21	; 0x02
     bf6:	6b 83       	std	Y+3, r22	; 0x03
     bf8:	7c 83       	std	Y+4, r23	; 0x04
     bfa:	8d 83       	std	Y+5, r24	; 0x05
     bfc:	9e 83       	std	Y+6, r25	; 0x06
     bfe:	38 87       	std	Y+8, r19	; 0x08
     c00:	2f 83       	std	Y+7, r18	; 0x07
	while(*CopySTR)
     c02:	12 c0       	rjmp	.+36     	; 0xc28 <LCD_4_Str_Write+0x4a>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
     c04:	8f 81       	ldd	r24, Y+7	; 0x07
     c06:	98 85       	ldd	r25, Y+8	; 0x08
     c08:	9c 01       	movw	r18, r24
     c0a:	2f 5f       	subi	r18, 0xFF	; 255
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	38 87       	std	Y+8, r19	; 0x08
     c10:	2f 83       	std	Y+7, r18	; 0x07
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	28 2f       	mov	r18, r24
     c18:	49 81       	ldd	r20, Y+1	; 0x01
     c1a:	5a 81       	ldd	r21, Y+2	; 0x02
     c1c:	6b 81       	ldd	r22, Y+3	; 0x03
     c1e:	7c 81       	ldd	r23, Y+4	; 0x04
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	0e 94 77 05 	call	0xaee	; 0xaee <LCD_4_Char_Write>
	LCD_4_Char_Write(CopyLCD , CopyChar);
}

void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
	while(*CopySTR)
     c28:	8f 81       	ldd	r24, Y+7	; 0x07
     c2a:	98 85       	ldd	r25, Y+8	; 0x08
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	88 23       	and	r24, r24
     c32:	41 f7       	brne	.-48     	; 0xc04 <LCD_4_Str_Write+0x26>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
     c34:	00 00       	nop
     c36:	28 96       	adiw	r28, 0x08	; 8
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <LCD_4_STR_Postion>:

void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	2a 97       	sbiw	r28, 0x0a	; 10
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	49 83       	std	Y+1, r20	; 0x01
     c64:	5a 83       	std	Y+2, r21	; 0x02
     c66:	6b 83       	std	Y+3, r22	; 0x03
     c68:	7c 83       	std	Y+4, r23	; 0x04
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	2f 83       	std	Y+7, r18	; 0x07
     c70:	08 87       	std	Y+8, r16	; 0x08
     c72:	fa 86       	std	Y+10, r15	; 0x0a
     c74:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
     c76:	08 85       	ldd	r16, Y+8	; 0x08
     c78:	2f 81       	ldd	r18, Y+7	; 0x07
     c7a:	49 81       	ldd	r20, Y+1	; 0x01
     c7c:	5a 81       	ldd	r21, Y+2	; 0x02
     c7e:	6b 81       	ldd	r22, Y+3	; 0x03
     c80:	7c 81       	ldd	r23, Y+4	; 0x04
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	9e 81       	ldd	r25, Y+6	; 0x06
     c86:	0e 94 57 08 	call	0x10ae	; 0x10ae <LCD_4_SetCursor_Position>
	while(*CopySTR)
     c8a:	12 c0       	rjmp	.+36     	; 0xcb0 <LCD_4_STR_Postion+0x68>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
     c8c:	89 85       	ldd	r24, Y+9	; 0x09
     c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c90:	9c 01       	movw	r18, r24
     c92:	2f 5f       	subi	r18, 0xFF	; 255
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	3a 87       	std	Y+10, r19	; 0x0a
     c98:	29 87       	std	Y+9, r18	; 0x09
     c9a:	fc 01       	movw	r30, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	28 2f       	mov	r18, r24
     ca0:	49 81       	ldd	r20, Y+1	; 0x01
     ca2:	5a 81       	ldd	r21, Y+2	; 0x02
     ca4:	6b 81       	ldd	r22, Y+3	; 0x03
     ca6:	7c 81       	ldd	r23, Y+4	; 0x04
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	9e 81       	ldd	r25, Y+6	; 0x06
     cac:	0e 94 77 05 	call	0xaee	; 0xaee <LCD_4_Char_Write>
}

void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
	while(*CopySTR)
     cb0:	89 85       	ldd	r24, Y+9	; 0x09
     cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb4:	fc 01       	movw	r30, r24
     cb6:	80 81       	ld	r24, Z
     cb8:	88 23       	and	r24, r24
     cba:	41 f7       	brne	.-48     	; 0xc8c <LCD_4_STR_Postion+0x44>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
     cbc:	00 00       	nop
     cbe:	2a 96       	adiw	r28, 0x0a	; 10
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	08 95       	ret

00000cd6 <Convert_u8_to_String>:
/************************************************************************************************************************/

/********** SECTION : Functions Declarations Convert **********/

void Convert_u8_to_String(u8 CopyValueu8 , u8 *CopySTR)
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	00 d0       	rcall	.+0      	; 0xcdc <Convert_u8_to_String+0x6>
     cdc:	1f 92       	push	r1
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	7b 83       	std	Y+3, r23	; 0x03
     ce6:	6a 83       	std	Y+2, r22	; 0x02
	memset(CopySTR , '\0' , 4);
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	9b 81       	ldd	r25, Y+3	; 0x03
     cec:	44 e0       	ldi	r20, 0x04	; 4
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	29 2f       	mov	r18, r25
     d00:	2f 93       	push	r18
     d02:	8f 93       	push	r24
     d04:	86 ea       	ldi	r24, 0xA6	; 166
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	89 2f       	mov	r24, r25
     d0a:	8f 93       	push	r24
     d0c:	86 ea       	ldi	r24, 0xA6	; 166
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	8f 93       	push	r24
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	8f 93       	push	r24
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	8f 93       	push	r24
     d1a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sprintf>
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
}
     d2a:	00 00       	nop
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <Convert_u16_to_String>:
void Convert_u16_to_String(u16 CopyValueu8 , u8 *CopySTR)
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <Convert_u16_to_String+0x6>
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <Convert_u16_to_String+0x8>
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	7c 83       	std	Y+4, r23	; 0x04
     d4a:	6b 83       	std	Y+3, r22	; 0x03
	memset(CopySTR , '\0' , 6);
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	46 e0       	ldi	r20, 0x06	; 6
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	8f 93       	push	r24
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	8f 93       	push	r24
     d64:	86 ea       	ldi	r24, 0xA6	; 166
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	89 2f       	mov	r24, r25
     d6a:	8f 93       	push	r24
     d6c:	86 ea       	ldi	r24, 0xA6	; 166
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	8f 93       	push	r24
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	8f 93       	push	r24
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	8f 93       	push	r24
     d7a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sprintf>
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
}
     d8a:	00 00       	nop
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <Convert_u32_to_String>:
void Convert_u32_to_String(u32 CopyValueu8 , u8 *CopySTR)
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <Convert_u32_to_String+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <Convert_u32_to_String+0x8>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <Convert_u32_to_String+0xa>
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	69 83       	std	Y+1, r22	; 0x01
     daa:	7a 83       	std	Y+2, r23	; 0x02
     dac:	8b 83       	std	Y+3, r24	; 0x03
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	5e 83       	std	Y+6, r21	; 0x06
     db2:	4d 83       	std	Y+5, r20	; 0x05
	memset(CopySTR , '\0' , 11);
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	4b e0       	ldi	r20, 0x0B	; 11
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	8f 93       	push	r24
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	8f 93       	push	r24
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	8f 93       	push	r24
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	8f 93       	push	r24
     dd4:	86 ea       	ldi	r24, 0xA6	; 166
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	89 2f       	mov	r24, r25
     dda:	8f 93       	push	r24
     ddc:	86 ea       	ldi	r24, 0xA6	; 166
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	8f 93       	push	r24
     de2:	8e 81       	ldd	r24, Y+6	; 0x06
     de4:	8f 93       	push	r24
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	8f 93       	push	r24
     dea:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sprintf>
     dee:	8d b7       	in	r24, 0x3d	; 61
     df0:	9e b7       	in	r25, 0x3e	; 62
     df2:	08 96       	adiw	r24, 0x08	; 8
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
}
     dfe:	00 00       	nop
     e00:	26 96       	adiw	r28, 0x06	; 6
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <LCD_4_GetData>:

/********** SECTION : Static Functions **********/
#if _LCD_Mood ==  _LCD_4_Bit_Mood

static void LCD_4_GetData(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	27 97       	sbiw	r28, 0x07	; 7
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	49 83       	std	Y+1, r20	; 0x01
     e28:	5a 83       	std	Y+2, r21	; 0x02
     e2a:	6b 83       	std	Y+3, r22	; 0x03
     e2c:	7c 83       	std	Y+4, r23	; 0x04
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.Port[0] , (CopyCMD >> 0) & (u8)0x01);
     e34:	8f 81       	ldd	r24, Y+7	; 0x07
     e36:	98 2f       	mov	r25, r24
     e38:	91 70       	andi	r25, 0x01	; 1
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	69 2f       	mov	r22, r25
     e3e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[1] , (CopyCMD >> 1) & (u8)0x01);
     e42:	8f 81       	ldd	r24, Y+7	; 0x07
     e44:	86 95       	lsr	r24
     e46:	98 2f       	mov	r25, r24
     e48:	91 70       	andi	r25, 0x01	; 1
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	69 2f       	mov	r22, r25
     e4e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[2] , (CopyCMD >> 2) & (u8)0x01);
     e52:	8f 81       	ldd	r24, Y+7	; 0x07
     e54:	86 95       	lsr	r24
     e56:	86 95       	lsr	r24
     e58:	98 2f       	mov	r25, r24
     e5a:	91 70       	andi	r25, 0x01	; 1
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	69 2f       	mov	r22, r25
     e60:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[3] , (CopyCMD >> 3) & (u8)0x01);
     e64:	8f 81       	ldd	r24, Y+7	; 0x07
     e66:	86 95       	lsr	r24
     e68:	86 95       	lsr	r24
     e6a:	86 95       	lsr	r24
     e6c:	98 2f       	mov	r25, r24
     e6e:	91 70       	andi	r25, 0x01	; 1
     e70:	8e 81       	ldd	r24, Y+6	; 0x06
     e72:	69 2f       	mov	r22, r25
     e74:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
}
     e78:	00 00       	nop
     e7a:	27 96       	adiw	r28, 0x07	; 7
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <LCD_4_SendEnable_Signal>:

static void LCD_4_SendEnable_Signal(LCD_4_MODE CopyLCD)
{
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	a6 97       	sbiw	r28, 0x26	; 38
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	49 a3       	std	Y+33, r20	; 0x21
     ea2:	5a a3       	std	Y+34, r21	; 0x22
     ea4:	6b a3       	std	Y+35, r22	; 0x23
     ea6:	7c a3       	std	Y+36, r23	; 0x24
     ea8:	8d a3       	std	Y+37, r24	; 0x25
     eaa:	9e a3       	std	Y+38, r25	; 0x26
	Dio_setPinVal(CopyLCD.E,Status_Pin_High);
     eac:	8a a1       	ldd	r24, Y+34	; 0x22
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	a0 ea       	ldi	r26, 0xA0	; 160
     eba:	b0 e4       	ldi	r27, 0x40	; 64
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	ab 83       	std	Y+3, r26	; 0x03
     ec2:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     ec4:	2b ea       	ldi	r18, 0xAB	; 171
     ec6:	3a ea       	ldi	r19, 0xAA	; 170
     ec8:	4a ea       	ldi	r20, 0xAA	; 170
     eca:	5e e3       	ldi	r21, 0x3E	; 62
     ecc:	69 81       	ldd	r22, Y+1	; 0x01
     ece:	7a 81       	ldd	r23, Y+2	; 0x02
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	9e 83       	std	Y+6, r25	; 0x06
     ee0:	af 83       	std	Y+7, r26	; 0x07
     ee2:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	5e e3       	ldi	r21, 0x3E	; 62
     eec:	69 81       	ldd	r22, Y+1	; 0x01
     eee:	7a 81       	ldd	r23, Y+2	; 0x02
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	89 87       	std	Y+9, r24	; 0x09
     efe:	9a 87       	std	Y+10, r25	; 0x0a
     f00:	ab 87       	std	Y+11, r26	; 0x0b
     f02:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e8       	ldi	r20, 0x80	; 128
     f0a:	5f e3       	ldi	r21, 0x3F	; 63
     f0c:	6d 81       	ldd	r22, Y+5	; 0x05
     f0e:	7e 81       	ldd	r23, Y+6	; 0x06
     f10:	8f 81       	ldd	r24, Y+7	; 0x07
     f12:	98 85       	ldd	r25, Y+8	; 0x08
     f14:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__cmpsf2>
     f18:	88 23       	and	r24, r24
     f1a:	1c f4       	brge	.+6      	; 0xf22 <LCD_4_SendEnable_Signal+0x96>
		__ticks = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	8d 87       	std	Y+13, r24	; 0x0d
     f20:	b2 c0       	rjmp	.+356    	; 0x1086 <LCD_4_SendEnable_Signal+0x1fa>
	else if (__tmp2 > 65535)
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	4f e7       	ldi	r20, 0x7F	; 127
     f28:	57 e4       	ldi	r21, 0x47	; 71
     f2a:	69 85       	ldd	r22, Y+9	; 0x09
     f2c:	7a 85       	ldd	r23, Y+10	; 0x0a
     f2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f30:	9c 85       	ldd	r25, Y+12	; 0x0c
     f32:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__gesf2>
     f36:	18 16       	cp	r1, r24
     f38:	0c f0       	brlt	.+2      	; 0xf3c <LCD_4_SendEnable_Signal+0xb0>
     f3a:	7b c0       	rjmp	.+246    	; 0x1032 <LCD_4_SendEnable_Signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	4a e7       	ldi	r20, 0x7A	; 122
     f42:	54 e4       	ldi	r21, 0x44	; 68
     f44:	69 81       	ldd	r22, Y+1	; 0x01
     f46:	7a 81       	ldd	r23, Y+2	; 0x02
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__divsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	8e 87       	std	Y+14, r24	; 0x0e
     f56:	9f 87       	std	Y+15, r25	; 0x0f
     f58:	a8 8b       	std	Y+16, r26	; 0x10
     f5a:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4a e7       	ldi	r20, 0x7A	; 122
     f62:	53 e4       	ldi	r21, 0x43	; 67
     f64:	6e 85       	ldd	r22, Y+14	; 0x0e
     f66:	7f 85       	ldd	r23, Y+15	; 0x0f
     f68:	88 89       	ldd	r24, Y+16	; 0x10
     f6a:	99 89       	ldd	r25, Y+17	; 0x11
     f6c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8a 8b       	std	Y+18, r24	; 0x12
     f76:	9b 8b       	std	Y+19, r25	; 0x13
     f78:	ac 8b       	std	Y+20, r26	; 0x14
     f7a:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	6a 89       	ldd	r22, Y+18	; 0x12
     f86:	7b 89       	ldd	r23, Y+19	; 0x13
     f88:	8c 89       	ldd	r24, Y+20	; 0x14
     f8a:	9d 89       	ldd	r25, Y+21	; 0x15
     f8c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__cmpsf2>
     f90:	88 23       	and	r24, r24
     f92:	2c f4       	brge	.+10     	; 0xf9e <LCD_4_SendEnable_Signal+0x112>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9f 8b       	std	Y+23, r25	; 0x17
     f9a:	8e 8b       	std	Y+22, r24	; 0x16
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <LCD_4_SendEnable_Signal+0x190>
	else if (__tmp > 65535)
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	3f ef       	ldi	r19, 0xFF	; 255
     fa2:	4f e7       	ldi	r20, 0x7F	; 127
     fa4:	57 e4       	ldi	r21, 0x47	; 71
     fa6:	6a 89       	ldd	r22, Y+18	; 0x12
     fa8:	7b 89       	ldd	r23, Y+19	; 0x13
     faa:	8c 89       	ldd	r24, Y+20	; 0x14
     fac:	9d 89       	ldd	r25, Y+21	; 0x15
     fae:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__gesf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f5       	brge	.+82     	; 0x1008 <LCD_4_SendEnable_Signal+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	51 e4       	ldi	r21, 0x41	; 65
     fbe:	6e 85       	ldd	r22, Y+14	; 0x0e
     fc0:	7f 85       	ldd	r23, Y+15	; 0x0f
     fc2:	88 89       	ldd	r24, Y+16	; 0x10
     fc4:	99 89       	ldd	r25, Y+17	; 0x11
     fc6:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9f 8b       	std	Y+23, r25	; 0x17
     fdc:	8e 8b       	std	Y+22, r24	; 0x16
     fde:	0f c0       	rjmp	.+30     	; 0xffe <LCD_4_SendEnable_Signal+0x172>
     fe0:	89 e1       	ldi	r24, 0x19	; 25
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	99 8f       	std	Y+25, r25	; 0x19
     fe6:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe8:	88 8d       	ldd	r24, Y+24	; 0x18
     fea:	99 8d       	ldd	r25, Y+25	; 0x19
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <LCD_4_SendEnable_Signal+0x160>
     ff0:	99 8f       	std	Y+25, r25	; 0x19
     ff2:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	8e 89       	ldd	r24, Y+22	; 0x16
     ff6:	9f 89       	ldd	r25, Y+23	; 0x17
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	9f 8b       	std	Y+23, r25	; 0x17
     ffc:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	8e 89       	ldd	r24, Y+22	; 0x16
    1000:	9f 89       	ldd	r25, Y+23	; 0x17
    1002:	89 2b       	or	r24, r25
    1004:	69 f7       	brne	.-38     	; 0xfe0 <LCD_4_SendEnable_Signal+0x154>
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <LCD_4_SendEnable_Signal+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	6a 89       	ldd	r22, Y+18	; 0x12
    100a:	7b 89       	ldd	r23, Y+19	; 0x13
    100c:	8c 89       	ldd	r24, Y+20	; 0x14
    100e:	9d 89       	ldd	r25, Y+21	; 0x15
    1010:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9f 8b       	std	Y+23, r25	; 0x17
    101a:	8e 8b       	std	Y+22, r24	; 0x16
    101c:	8e 89       	ldd	r24, Y+22	; 0x16
    101e:	9f 89       	ldd	r25, Y+23	; 0x17
    1020:	9b 8f       	std	Y+27, r25	; 0x1b
    1022:	8a 8f       	std	Y+26, r24	; 0x1a
    1024:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1026:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <LCD_4_SendEnable_Signal+0x19c>
    102c:	9b 8f       	std	Y+27, r25	; 0x1b
    102e:	8a 8f       	std	Y+26, r24	; 0x1a
    1030:	2a c0       	rjmp	.+84     	; 0x1086 <LCD_4_SendEnable_Signal+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	4f e7       	ldi	r20, 0x7F	; 127
    1038:	53 e4       	ldi	r21, 0x43	; 67
    103a:	6d 81       	ldd	r22, Y+5	; 0x05
    103c:	7e 81       	ldd	r23, Y+6	; 0x06
    103e:	8f 81       	ldd	r24, Y+7	; 0x07
    1040:	98 85       	ldd	r25, Y+8	; 0x08
    1042:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__gesf2>
    1046:	18 16       	cp	r1, r24
    1048:	ac f4       	brge	.+42     	; 0x1074 <LCD_4_SendEnable_Signal+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    104a:	69 85       	ldd	r22, Y+9	; 0x09
    104c:	7a 85       	ldd	r23, Y+10	; 0x0a
    104e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1050:	9c 85       	ldd	r25, Y+12	; 0x0c
    1052:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9d 8f       	std	Y+29, r25	; 0x1d
    105c:	8c 8f       	std	Y+28, r24	; 0x1c
    105e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1060:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1062:	9f 8f       	std	Y+31, r25	; 0x1f
    1064:	8e 8f       	std	Y+30, r24	; 0x1e
    1066:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1068:	9f 8d       	ldd	r25, Y+31	; 0x1f
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <LCD_4_SendEnable_Signal+0x1de>
    106e:	9f 8f       	std	Y+31, r25	; 0x1f
    1070:	8e 8f       	std	Y+30, r24	; 0x1e
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <LCD_4_SendEnable_Signal+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1074:	6d 81       	ldd	r22, Y+5	; 0x05
    1076:	7e 81       	ldd	r23, Y+6	; 0x06
    1078:	8f 81       	ldd	r24, Y+7	; 0x07
    107a:	98 85       	ldd	r25, Y+8	; 0x08
    107c:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8d 87       	std	Y+13, r24	; 0x0d
    1086:	8d 85       	ldd	r24, Y+13	; 0x0d
    1088:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    108a:	88 a1       	ldd	r24, Y+32	; 0x20
    108c:	8a 95       	dec	r24
    108e:	f1 f7       	brne	.-4      	; 0x108c <LCD_4_SendEnable_Signal+0x200>
    1090:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(5);
	Dio_setPinVal(CopyLCD.E, Status_Pin_Low);
    1092:	8a a1       	ldd	r24, Y+34	; 0x22
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
}
    109a:	00 00       	nop
    109c:	a6 96       	adiw	r28, 0x26	; 38
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	08 95       	ret

000010ae <LCD_4_SetCursor_Position>:

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
    10ae:	0f 93       	push	r16
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	28 97       	sbiw	r28, 0x08	; 8
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	49 83       	std	Y+1, r20	; 0x01
    10c6:	5a 83       	std	Y+2, r21	; 0x02
    10c8:	6b 83       	std	Y+3, r22	; 0x03
    10ca:	7c 83       	std	Y+4, r23	; 0x04
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	2f 83       	std	Y+7, r18	; 0x07
    10d2:	08 87       	std	Y+8, r16	; 0x08
	CopyCoulmn--;
    10d4:	88 85       	ldd	r24, Y+8	; 0x08
    10d6:	81 50       	subi	r24, 0x01	; 1
    10d8:	88 87       	std	Y+8, r24	; 0x08
	switch (CopyRow) {
    10da:	8f 81       	ldd	r24, Y+7	; 0x07
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	91 05       	cpc	r25, r1
    10e4:	c1 f0       	breq	.+48     	; 0x1116 <LCD_4_SetCursor_Position+0x68>
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	91 05       	cpc	r25, r1
    10ea:	1c f4       	brge	.+6      	; 0x10f2 <LCD_4_SetCursor_Position+0x44>
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	39 f0       	breq	.+14     	; 0x10fe <LCD_4_SetCursor_Position+0x50>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    10f0:	36 c0       	rjmp	.+108    	; 0x115e <LCD_4_SetCursor_Position+0xb0>
}

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
    10f2:	83 30       	cpi	r24, 0x03	; 3
    10f4:	91 05       	cpc	r25, r1
    10f6:	d9 f0       	breq	.+54     	; 0x112e <LCD_4_SetCursor_Position+0x80>
    10f8:	04 97       	sbiw	r24, 0x04	; 4
    10fa:	29 f1       	breq	.+74     	; 0x1146 <LCD_4_SetCursor_Position+0x98>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
		default: break;
    10fc:	30 c0       	rjmp	.+96     	; 0x115e <LCD_4_SetCursor_Position+0xb0>

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
    10fe:	88 85       	ldd	r24, Y+8	; 0x08
    1100:	80 58       	subi	r24, 0x80	; 128
    1102:	28 2f       	mov	r18, r24
    1104:	49 81       	ldd	r20, Y+1	; 0x01
    1106:	5a 81       	ldd	r21, Y+2	; 0x02
    1108:	6b 81       	ldd	r22, Y+3	; 0x03
    110a:	7c 81       	ldd	r23, Y+4	; 0x04
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
    1114:	24 c0       	rjmp	.+72     	; 0x115e <LCD_4_SetCursor_Position+0xb0>
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
    1116:	88 85       	ldd	r24, Y+8	; 0x08
    1118:	80 54       	subi	r24, 0x40	; 64
    111a:	28 2f       	mov	r18, r24
    111c:	49 81       	ldd	r20, Y+1	; 0x01
    111e:	5a 81       	ldd	r21, Y+2	; 0x02
    1120:	6b 81       	ldd	r22, Y+3	; 0x03
    1122:	7c 81       	ldd	r23, Y+4	; 0x04
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	9e 81       	ldd	r25, Y+6	; 0x06
    1128:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
    112c:	18 c0       	rjmp	.+48     	; 0x115e <LCD_4_SetCursor_Position+0xb0>
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x94 + CopyCoulmn)); break;
    112e:	88 85       	ldd	r24, Y+8	; 0x08
    1130:	8c 56       	subi	r24, 0x6C	; 108
    1132:	28 2f       	mov	r18, r24
    1134:	49 81       	ldd	r20, Y+1	; 0x01
    1136:	5a 81       	ldd	r21, Y+2	; 0x02
    1138:	6b 81       	ldd	r22, Y+3	; 0x03
    113a:	7c 81       	ldd	r23, Y+4	; 0x04
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
    1144:	0c c0       	rjmp	.+24     	; 0x115e <LCD_4_SetCursor_Position+0xb0>
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd4 + CopyCoulmn)); break;
    1146:	88 85       	ldd	r24, Y+8	; 0x08
    1148:	8c 52       	subi	r24, 0x2C	; 44
    114a:	28 2f       	mov	r18, r24
    114c:	49 81       	ldd	r20, Y+1	; 0x01
    114e:	5a 81       	ldd	r21, Y+2	; 0x02
    1150:	6b 81       	ldd	r22, Y+3	; 0x03
    1152:	7c 81       	ldd	r23, Y+4	; 0x04
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_4_CMD_Write>
    115c:	00 00       	nop
		default: break;
	}
}
    115e:	00 00       	nop
    1160:	28 96       	adiw	r28, 0x08	; 8
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <KeyPad_Init>:
/********** SECTION : Includes **********/
#include "KeyPad_Init.h"

/********** SECTION : Functions Definitions **********/
void KeyPad_Init(KeyPad CopyKeyPad)
{
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	2a 97       	sbiw	r28, 0x0a	; 10
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	2b 83       	std	Y+3, r18	; 0x03
    118a:	3c 83       	std	Y+4, r19	; 0x04
    118c:	4d 83       	std	Y+5, r20	; 0x05
    118e:	5e 83       	std	Y+6, r21	; 0x06
    1190:	6f 83       	std	Y+7, r22	; 0x07
    1192:	78 87       	std	Y+8, r23	; 0x08
    1194:	89 87       	std	Y+9, r24	; 0x09
    1196:	9a 87       	std	Y+10, r25	; 0x0a
	u8 Rows_Counter = Initial_Counter ;
    1198:	19 82       	std	Y+1, r1	; 0x01
	u8 Columns_Counter = Initial_Counter;
    119a:	1a 82       	std	Y+2, r1	; 0x02

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    119c:	19 82       	std	Y+1, r1	; 0x01
    119e:	10 c0       	rjmp	.+32     	; 0x11c0 <KeyPad_Init+0x4c>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9e 01       	movw	r18, r28
    11a8:	2d 5f       	subi	r18, 0xFD	; 253
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	fc 01       	movw	r30, r24
    11b2:	80 81       	ld	r24, Z
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
void KeyPad_Init(KeyPad CopyKeyPad)
{
	u8 Rows_Counter = Initial_Counter ;
	u8 Columns_Counter = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	84 30       	cpi	r24, 0x04	; 4
    11c4:	68 f3       	brcs	.-38     	; 0x11a0 <KeyPad_Init+0x2c>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
	}

	for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    11c6:	1a 82       	std	Y+2, r1	; 0x02
    11c8:	10 c0       	rjmp	.+32     	; 0x11ea <KeyPad_Init+0x76>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Coulmn[Columns_Counter],Direction_Pin_Input);
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9e 01       	movw	r18, r28
    11d2:	29 5f       	subi	r18, 0xF9	; 249
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	82 0f       	add	r24, r18
    11d8:	93 1f       	adc	r25, r19
    11da:	fc 01       	movw	r30, r24
    11dc:	80 81       	ld	r24, Z
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
	}

	for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	8a 83       	std	Y+2, r24	; 0x02
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	68 f3       	brcs	.-38     	; 0x11ca <KeyPad_Init+0x56>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Coulmn[Columns_Counter],Direction_Pin_Input);
	}
}
    11f0:	00 00       	nop
    11f2:	2a 96       	adiw	r28, 0x0a	; 10
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <KeyPad_getValue>:

void KeyPad_getValue(KeyPad CopyKeyPad, u8 CopyValue)
{
    1204:	0f 93       	push	r16
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	6b 97       	sbiw	r28, 0x1b	; 27
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	2b 8b       	std	Y+19, r18	; 0x13
    121c:	3c 8b       	std	Y+20, r19	; 0x14
    121e:	4d 8b       	std	Y+21, r20	; 0x15
    1220:	5e 8b       	std	Y+22, r21	; 0x16
    1222:	6f 8b       	std	Y+23, r22	; 0x17
    1224:	78 8f       	std	Y+24, r23	; 0x18
    1226:	89 8f       	std	Y+25, r24	; 0x19
    1228:	9a 8f       	std	Y+26, r25	; 0x1a
    122a:	0b 8f       	std	Y+27, r16	; 0x1b
	u8 Rows_Counter = Initial_Counter ;
    122c:	19 82       	std	Y+1, r1	; 0x01
	u8 Columns_Counter = Initial_Counter;
    122e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter_1 = Initial_Counter;
    1230:	1b 82       	std	Y+3, r1	; 0x03
	u8 Logic_Value = Initial_Counter;
    1232:	1c 82       	std	Y+4, r1	; 0x04

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    1234:	19 82       	std	Y+1, r1	; 0x01
    1236:	c0 c0       	rjmp	.+384    	; 0x13b8 <KeyPad_getValue+0x1b4>
	{
		for(Counter_1 = Initial_Counter ; Counter_1 < KeyPad_Rows ; Counter_1++)
    1238:	1b 82       	std	Y+3, r1	; 0x03
    123a:	10 c0       	rjmp	.+32     	; 0x125c <KeyPad_getValue+0x58>
		{
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9e 01       	movw	r18, r28
    1244:	2d 5e       	subi	r18, 0xED	; 237
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	82 0f       	add	r24, r18
    124a:	93 1f       	adc	r25, r19
    124c:	fc 01       	movw	r30, r24
    124e:	80 81       	ld	r24, Z
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
	u8 Counter_1 = Initial_Counter;
	u8 Logic_Value = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
	{
		for(Counter_1 = Initial_Counter ; Counter_1 < KeyPad_Rows ; Counter_1++)
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	8b 83       	std	Y+3, r24	; 0x03
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	84 30       	cpi	r24, 0x04	; 4
    1260:	68 f3       	brcs	.-38     	; 0x123c <KeyPad_getValue+0x38>
		{
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
		}

		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_High);
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9e 01       	movw	r18, r28
    126a:	2d 5e       	subi	r18, 0xED	; 237
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	fc 01       	movw	r30, r24
    1274:	80 81       	ld	r24, Z
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a0 e2       	ldi	r26, 0x20	; 32
    1282:	b1 e4       	ldi	r27, 0x41	; 65
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	9e 83       	std	Y+6, r25	; 0x06
    1288:	af 83       	std	Y+7, r26	; 0x07
    128a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a e7       	ldi	r20, 0x7A	; 122
    1292:	53 e4       	ldi	r21, 0x43	; 67
    1294:	6d 81       	ldd	r22, Y+5	; 0x05
    1296:	7e 81       	ldd	r23, Y+6	; 0x06
    1298:	8f 81       	ldd	r24, Y+7	; 0x07
    129a:	98 85       	ldd	r25, Y+8	; 0x08
    129c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	89 87       	std	Y+9, r24	; 0x09
    12a6:	9a 87       	std	Y+10, r25	; 0x0a
    12a8:	ab 87       	std	Y+11, r26	; 0x0b
    12aa:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	69 85       	ldd	r22, Y+9	; 0x09
    12b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    12b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    12bc:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__cmpsf2>
    12c0:	88 23       	and	r24, r24
    12c2:	2c f4       	brge	.+10     	; 0x12ce <KeyPad_getValue+0xca>
		__ticks = 1;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9e 87       	std	Y+14, r25	; 0x0e
    12ca:	8d 87       	std	Y+13, r24	; 0x0d
    12cc:	3f c0       	rjmp	.+126    	; 0x134c <KeyPad_getValue+0x148>
	else if (__tmp > 65535)
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	69 85       	ldd	r22, Y+9	; 0x09
    12d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    12da:	8b 85       	ldd	r24, Y+11	; 0x0b
    12dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    12de:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__gesf2>
    12e2:	18 16       	cp	r1, r24
    12e4:	4c f5       	brge	.+82     	; 0x1338 <KeyPad_getValue+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	6d 81       	ldd	r22, Y+5	; 0x05
    12f0:	7e 81       	ldd	r23, Y+6	; 0x06
    12f2:	8f 81       	ldd	r24, Y+7	; 0x07
    12f4:	98 85       	ldd	r25, Y+8	; 0x08
    12f6:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	9e 87       	std	Y+14, r25	; 0x0e
    130c:	8d 87       	std	Y+13, r24	; 0x0d
    130e:	0f c0       	rjmp	.+30     	; 0x132e <KeyPad_getValue+0x12a>
    1310:	89 e1       	ldi	r24, 0x19	; 25
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	98 8b       	std	Y+16, r25	; 0x10
    1316:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1318:	8f 85       	ldd	r24, Y+15	; 0x0f
    131a:	98 89       	ldd	r25, Y+16	; 0x10
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <KeyPad_getValue+0x118>
    1320:	98 8b       	std	Y+16, r25	; 0x10
    1322:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1324:	8d 85       	ldd	r24, Y+13	; 0x0d
    1326:	9e 85       	ldd	r25, Y+14	; 0x0e
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	9e 87       	std	Y+14, r25	; 0x0e
    132c:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1330:	9e 85       	ldd	r25, Y+14	; 0x0e
    1332:	89 2b       	or	r24, r25
    1334:	69 f7       	brne	.-38     	; 0x1310 <KeyPad_getValue+0x10c>
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <KeyPad_getValue+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1338:	69 85       	ldd	r22, Y+9	; 0x09
    133a:	7a 85       	ldd	r23, Y+10	; 0x0a
    133c:	8b 85       	ldd	r24, Y+11	; 0x0b
    133e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1340:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fixunssfsi>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	9e 87       	std	Y+14, r25	; 0x0e
    134a:	8d 87       	std	Y+13, r24	; 0x0d
    134c:	8d 85       	ldd	r24, Y+13	; 0x0d
    134e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1350:	9a 8b       	std	Y+18, r25	; 0x12
    1352:	89 8b       	std	Y+17, r24	; 0x11
    1354:	89 89       	ldd	r24, Y+17	; 0x11
    1356:	9a 89       	ldd	r25, Y+18	; 0x12
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <KeyPad_getValue+0x154>
    135c:	9a 8b       	std	Y+18, r25	; 0x12
    135e:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(10);

		for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    1360:	1a 82       	std	Y+2, r1	; 0x02
    1362:	24 c0       	rjmp	.+72     	; 0x13ac <KeyPad_getValue+0x1a8>
		{
			Logic_Value = Dio_getPinVal(CopyKeyPad.Pins_Coulmn[Columns_Counter]);
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9e 01       	movw	r18, r28
    136c:	29 5e       	subi	r18, 0xE9	; 233
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	82 0f       	add	r24, r18
    1372:	93 1f       	adc	r25, r19
    1374:	fc 01       	movw	r30, r24
    1376:	80 81       	ld	r24, Z
    1378:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Dio_getPinVal>
    137c:	8c 83       	std	Y+4, r24	; 0x04
			if(Logic_Value == Status_Pin_High)
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	89 f4       	brne	.+34     	; 0x13a6 <KeyPad_getValue+0x1a2>
			{
				CopyValue = Keypad_Buttons[Rows_Counter][Columns_Counter];
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	22 0f       	add	r18, r18
    1392:	33 1f       	adc	r19, r19
    1394:	22 0f       	add	r18, r18
    1396:	33 1f       	adc	r19, r19
    1398:	82 0f       	add	r24, r18
    139a:	93 1f       	adc	r25, r19
    139c:	8a 57       	subi	r24, 0x7A	; 122
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	fc 01       	movw	r30, r24
    13a2:	80 81       	ld	r24, Z
    13a4:	8b 8f       	std	Y+27, r24	; 0x1b
		}

		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_High);
		_delay_ms(10);

		for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	c8 f2       	brcs	.-78     	; 0x1364 <KeyPad_getValue+0x160>
	u8 Rows_Counter = Initial_Counter ;
	u8 Columns_Counter = Initial_Counter;
	u8 Counter_1 = Initial_Counter;
	u8 Logic_Value = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	84 30       	cpi	r24, 0x04	; 4
    13bc:	08 f4       	brcc	.+2      	; 0x13c0 <KeyPad_getValue+0x1bc>
    13be:	3c cf       	rjmp	.-392    	; 0x1238 <KeyPad_getValue+0x34>
			{
				CopyValue = Keypad_Buttons[Rows_Counter][Columns_Counter];
			}
		}
	}
}
    13c0:	00 00       	nop
    13c2:	6b 96       	adiw	r28, 0x1b	; 27
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	0f 91       	pop	r16
    13d4:	08 95       	ret

000013d6 <App_Init>:
/********** SECTION : Globale Variable **********/


/********** SECTION : Functions setUp Definitions **********/
void App_Init(void)
{
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62

}
    13de:	00 00       	nop
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <App_Loop>:

/********** SECTION : Functions Loop Definitions **********/
void App_Loop(void)
{
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62

}
    13ee:	00 00       	nop
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <Motor_Init>:
#include "../../Mcal/DIO/dio_Init.h"
#include "Dc_Motor_Init.h"

/********** SECTION : Functions Definitions **********/
void Motor_Init(void)
{
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
	Dio_setPinDir(m1.ENA, Direction_Pin_Output);
    13fe:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1+0x2>
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m1.IN1, Direction_Pin_Output);
    1408:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <m1>
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m1.IN2, Direction_Pin_Output);
    1412:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <m1+0x1>
    1416:	61 e0       	ldi	r22, 0x01	; 1
    1418:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>

	Dio_setPinDir(m2.ENB, Direction_Pin_Output);
    141c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2+0x2>
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m2.IN3, Direction_Pin_Output);
    1426:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m2>
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(m2.IN4, Direction_Pin_Output);
    1430:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <m2+0x1>
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
}
    143a:	00 00       	nop
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret

00001442 <Motor_Forward>:


void Motor_Forward(u8 CopyMotorNum)
{
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	1f 92       	push	r1
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	89 83       	std	Y+1, r24	; 0x01
	switch(CopyMotorNum)
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	91 05       	cpc	r25, r1
    1458:	c1 f0       	breq	.+48     	; 0x148a <Motor_Forward+0x48>
    145a:	83 30       	cpi	r24, 0x03	; 3
    145c:	91 05       	cpc	r25, r1
    145e:	39 f1       	breq	.+78     	; 0x14ae <Motor_Forward+0x6c>
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	09 f0       	breq	.+2      	; 0x1466 <Motor_Forward+0x24>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
		Dio_setPinVal(m2.IN3, Status_Pin_High);
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
		break;
	}
}
    1464:	47 c0       	rjmp	.+142    	; 0x14f4 <Motor_Forward+0xb2>
void Motor_Forward(u8 CopyMotorNum)
{
	switch(CopyMotorNum)
	{
	case Motor_1:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    1466:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <m1+0x3>
    146a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1+0x2>
    146e:	69 2f       	mov	r22, r25
    1470:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_High);
    1474:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <m1>
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    147e:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <m1+0x1>
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1488:	35 c0       	rjmp	.+106    	; 0x14f4 <Motor_Forward+0xb2>
	case Motor_2:
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    148a:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <m2+0x3>
    148e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2+0x2>
    1492:	69 2f       	mov	r22, r25
    1494:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_High);
    1498:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m2>
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    14a2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <m2+0x1>
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    14ac:	23 c0       	rjmp	.+70     	; 0x14f4 <Motor_Forward+0xb2>
	case Motors:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    14ae:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <m1+0x3>
    14b2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1+0x2>
    14b6:	69 2f       	mov	r22, r25
    14b8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    14bc:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <m2+0x3>
    14c0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2+0x2>
    14c4:	69 2f       	mov	r22, r25
    14c6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_High);
    14ca:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <m1>
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    14d4:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <m1+0x1>
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_High);
    14de:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m2>
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    14e8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <m2+0x1>
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    14f2:	00 00       	nop
	}
}
    14f4:	00 00       	nop
    14f6:	0f 90       	pop	r0
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <Motor_Reverse>:

void Motor_Reverse(u8 CopyMotorNum)
{
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	1f 92       	push	r1
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
	switch(CopyMotorNum)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	82 30       	cpi	r24, 0x02	; 2
    1512:	91 05       	cpc	r25, r1
    1514:	c1 f0       	breq	.+48     	; 0x1546 <Motor_Reverse+0x48>
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	39 f1       	breq	.+78     	; 0x156a <Motor_Reverse+0x6c>
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	09 f0       	breq	.+2      	; 0x1522 <Motor_Reverse+0x24>
		Dio_setPinVal(m1.IN2, Status_Pin_High);
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
		Dio_setPinVal(m2.IN4, Status_Pin_High);
		break;
	}
}
    1520:	47 c0       	rjmp	.+142    	; 0x15b0 <Motor_Reverse+0xb2>
void Motor_Reverse(u8 CopyMotorNum)
{
	switch(CopyMotorNum)
	{
	case Motor_1:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    1522:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <m1+0x3>
    1526:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1+0x2>
    152a:	69 2f       	mov	r22, r25
    152c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    1530:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <m1>
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_High);
    153a:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <m1+0x1>
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1544:	35 c0       	rjmp	.+106    	; 0x15b0 <Motor_Reverse+0xb2>
	case Motor_2:
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    1546:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <m2+0x3>
    154a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2+0x2>
    154e:	69 2f       	mov	r22, r25
    1550:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    1554:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m2>
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_High);
    155e:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <m2+0x1>
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1568:	23 c0       	rjmp	.+70     	; 0x15b0 <Motor_Reverse+0xb2>
	case Motors:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    156a:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <m1+0x3>
    156e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1+0x2>
    1572:	69 2f       	mov	r22, r25
    1574:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    1578:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <m2+0x3>
    157c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2+0x2>
    1580:	69 2f       	mov	r22, r25
    1582:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    1586:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <m1>
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_High);
    1590:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <m1+0x1>
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    159a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m2>
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_High);
    15a4:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <m2+0x1>
    15a8:	61 e0       	ldi	r22, 0x01	; 1
    15aa:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    15ae:	00 00       	nop
	}
}
    15b0:	00 00       	nop
    15b2:	0f 90       	pop	r0
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	08 95       	ret

000015ba <Motor_Off>:


void Motor_Off(u8 CopyMotorNum)
{
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	1f 92       	push	r1
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	89 83       	std	Y+1, r24	; 0x01
	switch(CopyMotorNum)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	88 2f       	mov	r24, r24
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	82 30       	cpi	r24, 0x02	; 2
    15ce:	91 05       	cpc	r25, r1
    15d0:	c1 f0       	breq	.+48     	; 0x1602 <Motor_Off+0x48>
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	91 05       	cpc	r25, r1
    15d6:	39 f1       	breq	.+78     	; 0x1626 <Motor_Off+0x6c>
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	09 f0       	breq	.+2      	; 0x15de <Motor_Off+0x24>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
		break;
	}
}
    15dc:	47 c0       	rjmp	.+142    	; 0x166c <Motor_Off+0xb2>
void Motor_Off(u8 CopyMotorNum)
{
	switch(CopyMotorNum)
	{
	case Motor_1:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    15de:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <m1+0x3>
    15e2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1+0x2>
    15e6:	69 2f       	mov	r22, r25
    15e8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    15ec:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <m1>
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    15f6:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <m1+0x1>
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1600:	35 c0       	rjmp	.+106    	; 0x166c <Motor_Off+0xb2>
	case Motor_2:
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    1602:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <m2+0x3>
    1606:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2+0x2>
    160a:	69 2f       	mov	r22, r25
    160c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    1610:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m2>
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    161a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <m2+0x1>
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    1624:	23 c0       	rjmp	.+70     	; 0x166c <Motor_Off+0xb2>
	case Motors:
		Dio_setPinVal(m1.ENA, m1.ENA_Status);
    1626:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <m1+0x3>
    162a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1+0x2>
    162e:	69 2f       	mov	r22, r25
    1630:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.ENB, m2.ENB_Status);
    1634:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <m2+0x3>
    1638:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2+0x2>
    163c:	69 2f       	mov	r22, r25
    163e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN1, Status_Pin_Low);
    1642:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <m1>
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m1.IN2, Status_Pin_Low);
    164c:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <m1+0x1>
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN3, Status_Pin_Low);
    1656:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m2>
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		Dio_setPinVal(m2.IN4, Status_Pin_Low);
    1660:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <m2+0x1>
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
		break;
    166a:	00 00       	nop
	}
}
    166c:	00 00       	nop
    166e:	0f 90       	pop	r0
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	08 95       	ret

00001676 <Bcd_7segInit>:
/********** SECTION : Includes **********/
#include "bcd_Init.h"

/********** SECTION : Functions Definitions **********/
void Bcd_7segInit(BCD Copy7seg)
{
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	00 d0       	rcall	.+0      	; 0x167c <Bcd_7segInit+0x6>
    167c:	00 d0       	rcall	.+0      	; 0x167e <Bcd_7segInit+0x8>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	69 83       	std	Y+1, r22	; 0x01
    1684:	7a 83       	std	Y+2, r23	; 0x02
    1686:	8b 83       	std	Y+3, r24	; 0x03
    1688:	9c 83       	std	Y+4, r25	; 0x04
	Dio_setPinDir(Copy7seg.Pin_1, Direction_Pin_Output);
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_2, Direction_Pin_Output);
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_3, Direction_Pin_Output);
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_4, Direction_Pin_Output);
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	0e 94 53 00 	call	0xa6	; 0xa6 <Dio_setPinDir>
}
    16aa:	00 00       	nop
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <Bcd_7segWriteNum>:

void Bcd_7segWriteNum(BCD Copy7segNum , u8 CopyNumber)
{
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <Bcd_7segWriteNum+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <Bcd_7segWriteNum+0x8>
    16c2:	1f 92       	push	r1
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	69 83       	std	Y+1, r22	; 0x01
    16ca:	7a 83       	std	Y+2, r23	; 0x02
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    16ce:	9c 83       	std	Y+4, r25	; 0x04
    16d0:	4d 83       	std	Y+5, r20	; 0x05
	switch (CopyNumber) {
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	09 2e       	mov	r0, r25
    16da:	00 0c       	add	r0, r0
    16dc:	aa 0b       	sbc	r26, r26
    16de:	bb 0b       	sbc	r27, r27
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	29 e0       	ldi	r18, 0x09	; 9
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	84 1b       	sub	r24, r20
    16ea:	95 0b       	sbc	r25, r21
    16ec:	28 17       	cp	r18, r24
    16ee:	39 07       	cpc	r19, r25
    16f0:	08 f4       	brcc	.+2      	; 0x16f4 <Bcd_7segWriteNum+0x3a>
    16f2:	af c0       	rjmp	.+350    	; 0x1852 <Bcd_7segWriteNum+0x198>
    16f4:	86 5d       	subi	r24, 0xD6	; 214
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	fc 01       	movw	r30, r24
    16fa:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__tablejump2__>
		case 0:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    171e:	9a c0       	rjmp	.+308    	; 0x1854 <Bcd_7segWriteNum+0x19a>
		case 1:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1740:	89 c0       	rjmp	.+274    	; 0x1854 <Bcd_7segWriteNum+0x19a>
		case 2:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1762:	78 c0       	rjmp	.+240    	; 0x1854 <Bcd_7segWriteNum+0x19a>
		case 3:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1784:	67 c0       	rjmp	.+206    	; 0x1854 <Bcd_7segWriteNum+0x19a>
		case 4:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    17a6:	56 c0       	rjmp	.+172    	; 0x1854 <Bcd_7segWriteNum+0x19a>
		case 5:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	61 e0       	ldi	r22, 0x01	; 1
    17ac:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    17c8:	45 c0       	rjmp	.+138    	; 0x1854 <Bcd_7segWriteNum+0x19a>
		case 6:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    17ea:	34 c0       	rjmp	.+104    	; 0x1854 <Bcd_7segWriteNum+0x19a>
		case 7:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	61 e0       	ldi	r22, 0x01	; 1
    1800:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    180c:	23 c0       	rjmp	.+70     	; 0x1854 <Bcd_7segWriteNum+0x19a>
		case 8:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    182e:	12 c0       	rjmp	.+36     	; 0x1854 <Bcd_7segWriteNum+0x19a>
		case 9:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
			break;
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <Bcd_7segWriteNum+0x19a>
		default:
			break;
    1852:	00 00       	nop
	}
}
    1854:	00 00       	nop
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	08 95       	ret

00001866 <Bcd_MPX_2Enable>:

void Bcd_MPX_2Enable(MPX_2_Enables CopyPinsEnable, u8 CopyCommonType, u8 CopyStatus)
{
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	00 d0       	rcall	.+0      	; 0x186c <Bcd_MPX_2Enable+0x6>
    186c:	00 d0       	rcall	.+0      	; 0x186e <Bcd_MPX_2Enable+0x8>
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	6b 83       	std	Y+3, r22	; 0x03
    1878:	4c 83       	std	Y+4, r20	; 0x04
	if(CopyStatus == Enable){
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	d1 f4       	brne	.+52     	; 0x18b4 <Bcd_MPX_2Enable+0x4e>
		switch (CopyCommonType) {
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	61 f0       	breq	.+24     	; 0x18a2 <Bcd_MPX_2Enable+0x3c>
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	09 f0       	breq	.+2      	; 0x1890 <Bcd_MPX_2Enable+0x2a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
				break;
			default:
				break;
    188e:	2f c0       	rjmp	.+94     	; 0x18ee <Bcd_MPX_2Enable+0x88>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    18a0:	26 c0       	rjmp	.+76     	; 0x18ee <Bcd_MPX_2Enable+0x88>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    18b2:	1d c0       	rjmp	.+58     	; 0x18ee <Bcd_MPX_2Enable+0x88>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable){
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	88 23       	and	r24, r24
    18b8:	d1 f4       	brne	.+52     	; 0x18ee <Bcd_MPX_2Enable+0x88>
		switch (CopyCommonType) {
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	61 f0       	breq	.+24     	; 0x18dc <Bcd_MPX_2Enable+0x76>
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	09 f0       	breq	.+2      	; 0x18ca <Bcd_MPX_2Enable+0x64>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
				break;
			default:
				break;
    18c8:	12 c0       	rjmp	.+36     	; 0x18ee <Bcd_MPX_2Enable+0x88>
	}
	else if (CopyStatus == Disable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <Bcd_MPX_2Enable+0x88>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    18ec:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    18ee:	00 00       	nop
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <Bcd_MPX_4Enable>:
void Bcd_MPX_4Enable(MPX_4_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	00 d0       	rcall	.+0      	; 0x1904 <Bcd_MPX_4Enable+0x6>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <Bcd_MPX_4Enable+0x8>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <Bcd_MPX_4Enable+0xa>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	69 83       	std	Y+1, r22	; 0x01
    190e:	7a 83       	std	Y+2, r23	; 0x02
    1910:	8b 83       	std	Y+3, r24	; 0x03
    1912:	9c 83       	std	Y+4, r25	; 0x04
    1914:	4d 83       	std	Y+5, r20	; 0x05
    1916:	2e 83       	std	Y+6, r18	; 0x06
	if(CopyStatus == Enable){
    1918:	8e 81       	ldd	r24, Y+6	; 0x06
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	51 f5       	brne	.+84     	; 0x1972 <Bcd_MPX_4Enable+0x74>
		switch (CopyCommonType) {
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	a1 f0       	breq	.+40     	; 0x1950 <Bcd_MPX_4Enable+0x52>
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	09 f0       	breq	.+2      	; 0x192e <Bcd_MPX_4Enable+0x30>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				break;
			default:
				break;
    192c:	4f c0       	rjmp	.+158    	; 0x19cc <Bcd_MPX_4Enable+0xce>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    194e:	3e c0       	rjmp	.+124    	; 0x19cc <Bcd_MPX_4Enable+0xce>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1970:	2d c0       	rjmp	.+90     	; 0x19cc <Bcd_MPX_4Enable+0xce>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    1972:	8e 81       	ldd	r24, Y+6	; 0x06
    1974:	88 23       	and	r24, r24
    1976:	51 f5       	brne	.+84     	; 0x19cc <Bcd_MPX_4Enable+0xce>
	{
		switch (CopyCommonType) {
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	a1 f0       	breq	.+40     	; 0x19aa <Bcd_MPX_4Enable+0xac>
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	09 f0       	breq	.+2      	; 0x1988 <Bcd_MPX_4Enable+0x8a>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				break;
			default:
				break;
    1986:	22 c0       	rjmp	.+68     	; 0x19cc <Bcd_MPX_4Enable+0xce>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    19a8:	11 c0       	rjmp	.+34     	; 0x19cc <Bcd_MPX_4Enable+0xce>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    19ca:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    19cc:	00 00       	nop
    19ce:	26 96       	adiw	r28, 0x06	; 6
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <Bcd_MPX_6Enable>:
void Bcd_MPX_6Enable(MPX_6_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    19e0:	0f 93       	push	r16
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	28 97       	sbiw	r28, 0x08	; 8
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	49 83       	std	Y+1, r20	; 0x01
    19f8:	5a 83       	std	Y+2, r21	; 0x02
    19fa:	6b 83       	std	Y+3, r22	; 0x03
    19fc:	7c 83       	std	Y+4, r23	; 0x04
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	2f 83       	std	Y+7, r18	; 0x07
    1a04:	08 87       	std	Y+8, r16	; 0x08
	if(CopyStatus == Enable){
    1a06:	88 85       	ldd	r24, Y+8	; 0x08
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	d1 f5       	brne	.+116    	; 0x1a80 <Bcd_MPX_6Enable+0xa0>
		switch (CopyCommonType) {
    1a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	e1 f0       	breq	.+56     	; 0x1a4e <Bcd_MPX_6Enable+0x6e>
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <Bcd_MPX_6Enable+0x3c>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				break;
			default:
				break;
    1a1a:	6f c0       	rjmp	.+222    	; 0x1afa <Bcd_MPX_6Enable+0x11a>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    1a44:	8e 81       	ldd	r24, Y+6	; 0x06
    1a46:	61 e0       	ldi	r22, 0x01	; 1
    1a48:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1a4c:	56 c0       	rjmp	.+172    	; 0x1afa <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    1a76:	8e 81       	ldd	r24, Y+6	; 0x06
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1a7e:	3d c0       	rjmp	.+122    	; 0x1afa <Bcd_MPX_6Enable+0x11a>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    1a80:	88 85       	ldd	r24, Y+8	; 0x08
    1a82:	88 23       	and	r24, r24
    1a84:	d1 f5       	brne	.+116    	; 0x1afa <Bcd_MPX_6Enable+0x11a>
	{
		switch (CopyCommonType) {
    1a86:	8f 81       	ldd	r24, Y+7	; 0x07
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	e1 f0       	breq	.+56     	; 0x1ac8 <Bcd_MPX_6Enable+0xe8>
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <Bcd_MPX_6Enable+0xb6>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				break;
			default:
				break;
    1a94:	32 c0       	rjmp	.+100    	; 0x1afa <Bcd_MPX_6Enable+0x11a>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    1aae:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    1abe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1ac6:	19 c0       	rjmp	.+50     	; 0x1afa <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    1af0:	8e 81       	ldd	r24, Y+6	; 0x06
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1af8:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    1afa:	00 00       	nop
    1afc:	28 96       	adiw	r28, 0x08	; 8
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	0f 91       	pop	r16
    1b0e:	08 95       	ret

00001b10 <Bcd_MPX_8Enable>:
void Bcd_MPX_8Enable(MPX_8_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    1b10:	ef 92       	push	r14
    1b12:	0f 93       	push	r16
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	2a 97       	sbiw	r28, 0x0a	; 10
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	29 83       	std	Y+1, r18	; 0x01
    1b2a:	3a 83       	std	Y+2, r19	; 0x02
    1b2c:	4b 83       	std	Y+3, r20	; 0x03
    1b2e:	5c 83       	std	Y+4, r21	; 0x04
    1b30:	6d 83       	std	Y+5, r22	; 0x05
    1b32:	7e 83       	std	Y+6, r23	; 0x06
    1b34:	8f 83       	std	Y+7, r24	; 0x07
    1b36:	98 87       	std	Y+8, r25	; 0x08
    1b38:	09 87       	std	Y+9, r16	; 0x09
    1b3a:	ea 86       	std	Y+10, r14	; 0x0a
	if(CopyStatus == Enable){
    1b3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <Bcd_MPX_8Enable+0x34>
    1b42:	4a c0       	rjmp	.+148    	; 0x1bd8 <Bcd_MPX_8Enable+0xc8>
		switch (CopyCommonType) {
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	21 f1       	breq	.+72     	; 0x1b96 <Bcd_MPX_8Enable+0x86>
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <Bcd_MPX_8Enable+0x44>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
				break;
			default:
				break;
    1b52:	90 c0       	rjmp	.+288    	; 0x1c74 <Bcd_MPX_8Enable+0x164>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    1b7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7e:	61 e0       	ldi	r22, 0x01	; 1
    1b80:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
    1b84:	8f 81       	ldd	r24, Y+7	; 0x07
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
    1b8c:	88 85       	ldd	r24, Y+8	; 0x08
    1b8e:	61 e0       	ldi	r22, 0x01	; 1
    1b90:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1b94:	6f c0       	rjmp	.+222    	; 0x1c74 <Bcd_MPX_8Enable+0x164>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
    1bc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
    1bce:	88 85       	ldd	r24, Y+8	; 0x08
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1bd6:	4e c0       	rjmp	.+156    	; 0x1c74 <Bcd_MPX_8Enable+0x164>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    1bd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bda:	88 23       	and	r24, r24
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <Bcd_MPX_8Enable+0xd0>
    1bde:	4a c0       	rjmp	.+148    	; 0x1c74 <Bcd_MPX_8Enable+0x164>
	{
		switch (CopyCommonType) {
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	21 f1       	breq	.+72     	; 0x1c32 <Bcd_MPX_8Enable+0x122>
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <Bcd_MPX_8Enable+0xe0>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
				break;
			default:
				break;
    1bee:	42 c0       	rjmp	.+132    	; 0x1c74 <Bcd_MPX_8Enable+0x164>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    1c18:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
    1c20:	8f 81       	ldd	r24, Y+7	; 0x07
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
    1c28:	88 85       	ldd	r24, Y+8	; 0x08
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1c30:	21 c0       	rjmp	.+66     	; 0x1c74 <Bcd_MPX_8Enable+0x164>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	61 e0       	ldi	r22, 0x01	; 1
    1c56:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    1c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
    1c62:	8f 81       	ldd	r24, Y+7	; 0x07
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
    1c6a:	88 85       	ldd	r24, Y+8	; 0x08
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	0e 94 c5 00 	call	0x18a	; 0x18a <Dio_setPinVal>
				break;
    1c72:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    1c74:	00 00       	nop
    1c76:	2a 96       	adiw	r28, 0x0a	; 10
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	0f 91       	pop	r16
    1c88:	ef 90       	pop	r14
    1c8a:	08 95       	ret

00001c8c <main>:
/********** SECTION : Includes **********/
#include "Main_Init.h"

/********** SECTION : Main Function **********/
int main (void)
{
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    1c94:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <App_Init>

	while(1)
	{
		App_Loop();
    1c98:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <App_Loop>
	}
    1c9c:	fd cf       	rjmp	.-6      	; 0x1c98 <main+0xc>

00001c9e <__tablejump2__>:
    1c9e:	ee 0f       	add	r30, r30
    1ca0:	ff 1f       	adc	r31, r31
    1ca2:	05 90       	lpm	r0, Z+
    1ca4:	f4 91       	lpm	r31, Z
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	09 94       	ijmp

00001caa <__cmpsf2>:
    1caa:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fp_cmp>
    1cae:	08 f4       	brcc	.+2      	; 0x1cb2 <__cmpsf2+0x8>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	08 95       	ret

00001cb4 <__divsf3>:
    1cb4:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__divsf3x>
    1cb8:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__fp_round>
    1cbc:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__fp_pscB>
    1cc0:	58 f0       	brcs	.+22     	; 0x1cd8 <__divsf3+0x24>
    1cc2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__fp_pscA>
    1cc6:	40 f0       	brcs	.+16     	; 0x1cd8 <__divsf3+0x24>
    1cc8:	29 f4       	brne	.+10     	; 0x1cd4 <__divsf3+0x20>
    1cca:	5f 3f       	cpi	r21, 0xFF	; 255
    1ccc:	29 f0       	breq	.+10     	; 0x1cd8 <__divsf3+0x24>
    1cce:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__fp_inf>
    1cd2:	51 11       	cpse	r21, r1
    1cd4:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_szero>
    1cd8:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__fp_nan>

00001cdc <__divsf3x>:
    1cdc:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__fp_split3>
    1ce0:	68 f3       	brcs	.-38     	; 0x1cbc <__divsf3+0x8>

00001ce2 <__divsf3_pse>:
    1ce2:	99 23       	and	r25, r25
    1ce4:	b1 f3       	breq	.-20     	; 0x1cd2 <__divsf3+0x1e>
    1ce6:	55 23       	and	r21, r21
    1ce8:	91 f3       	breq	.-28     	; 0x1cce <__divsf3+0x1a>
    1cea:	95 1b       	sub	r25, r21
    1cec:	55 0b       	sbc	r21, r21
    1cee:	bb 27       	eor	r27, r27
    1cf0:	aa 27       	eor	r26, r26
    1cf2:	62 17       	cp	r22, r18
    1cf4:	73 07       	cpc	r23, r19
    1cf6:	84 07       	cpc	r24, r20
    1cf8:	38 f0       	brcs	.+14     	; 0x1d08 <__divsf3_pse+0x26>
    1cfa:	9f 5f       	subi	r25, 0xFF	; 255
    1cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	44 1f       	adc	r20, r20
    1d04:	aa 1f       	adc	r26, r26
    1d06:	a9 f3       	breq	.-22     	; 0x1cf2 <__divsf3_pse+0x10>
    1d08:	35 d0       	rcall	.+106    	; 0x1d74 <__divsf3_pse+0x92>
    1d0a:	0e 2e       	mov	r0, r30
    1d0c:	3a f0       	brmi	.+14     	; 0x1d1c <__divsf3_pse+0x3a>
    1d0e:	e0 e8       	ldi	r30, 0x80	; 128
    1d10:	32 d0       	rcall	.+100    	; 0x1d76 <__divsf3_pse+0x94>
    1d12:	91 50       	subi	r25, 0x01	; 1
    1d14:	50 40       	sbci	r21, 0x00	; 0
    1d16:	e6 95       	lsr	r30
    1d18:	00 1c       	adc	r0, r0
    1d1a:	ca f7       	brpl	.-14     	; 0x1d0e <__divsf3_pse+0x2c>
    1d1c:	2b d0       	rcall	.+86     	; 0x1d74 <__divsf3_pse+0x92>
    1d1e:	fe 2f       	mov	r31, r30
    1d20:	29 d0       	rcall	.+82     	; 0x1d74 <__divsf3_pse+0x92>
    1d22:	66 0f       	add	r22, r22
    1d24:	77 1f       	adc	r23, r23
    1d26:	88 1f       	adc	r24, r24
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	26 17       	cp	r18, r22
    1d2c:	37 07       	cpc	r19, r23
    1d2e:	48 07       	cpc	r20, r24
    1d30:	ab 07       	cpc	r26, r27
    1d32:	b0 e8       	ldi	r27, 0x80	; 128
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <__divsf3_pse+0x56>
    1d36:	bb 0b       	sbc	r27, r27
    1d38:	80 2d       	mov	r24, r0
    1d3a:	bf 01       	movw	r22, r30
    1d3c:	ff 27       	eor	r31, r31
    1d3e:	93 58       	subi	r25, 0x83	; 131
    1d40:	5f 4f       	sbci	r21, 0xFF	; 255
    1d42:	3a f0       	brmi	.+14     	; 0x1d52 <__divsf3_pse+0x70>
    1d44:	9e 3f       	cpi	r25, 0xFE	; 254
    1d46:	51 05       	cpc	r21, r1
    1d48:	78 f0       	brcs	.+30     	; 0x1d68 <__divsf3_pse+0x86>
    1d4a:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__fp_inf>
    1d4e:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_szero>
    1d52:	5f 3f       	cpi	r21, 0xFF	; 255
    1d54:	e4 f3       	brlt	.-8      	; 0x1d4e <__divsf3_pse+0x6c>
    1d56:	98 3e       	cpi	r25, 0xE8	; 232
    1d58:	d4 f3       	brlt	.-12     	; 0x1d4e <__divsf3_pse+0x6c>
    1d5a:	86 95       	lsr	r24
    1d5c:	77 95       	ror	r23
    1d5e:	67 95       	ror	r22
    1d60:	b7 95       	ror	r27
    1d62:	f7 95       	ror	r31
    1d64:	9f 5f       	subi	r25, 0xFF	; 255
    1d66:	c9 f7       	brne	.-14     	; 0x1d5a <__divsf3_pse+0x78>
    1d68:	88 0f       	add	r24, r24
    1d6a:	91 1d       	adc	r25, r1
    1d6c:	96 95       	lsr	r25
    1d6e:	87 95       	ror	r24
    1d70:	97 f9       	bld	r25, 7
    1d72:	08 95       	ret
    1d74:	e1 e0       	ldi	r30, 0x01	; 1
    1d76:	66 0f       	add	r22, r22
    1d78:	77 1f       	adc	r23, r23
    1d7a:	88 1f       	adc	r24, r24
    1d7c:	bb 1f       	adc	r27, r27
    1d7e:	62 17       	cp	r22, r18
    1d80:	73 07       	cpc	r23, r19
    1d82:	84 07       	cpc	r24, r20
    1d84:	ba 07       	cpc	r27, r26
    1d86:	20 f0       	brcs	.+8      	; 0x1d90 <__divsf3_pse+0xae>
    1d88:	62 1b       	sub	r22, r18
    1d8a:	73 0b       	sbc	r23, r19
    1d8c:	84 0b       	sbc	r24, r20
    1d8e:	ba 0b       	sbc	r27, r26
    1d90:	ee 1f       	adc	r30, r30
    1d92:	88 f7       	brcc	.-30     	; 0x1d76 <__divsf3_pse+0x94>
    1d94:	e0 95       	com	r30
    1d96:	08 95       	ret

00001d98 <__fixunssfsi>:
    1d98:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__fp_splitA>
    1d9c:	88 f0       	brcs	.+34     	; 0x1dc0 <__fixunssfsi+0x28>
    1d9e:	9f 57       	subi	r25, 0x7F	; 127
    1da0:	98 f0       	brcs	.+38     	; 0x1dc8 <__fixunssfsi+0x30>
    1da2:	b9 2f       	mov	r27, r25
    1da4:	99 27       	eor	r25, r25
    1da6:	b7 51       	subi	r27, 0x17	; 23
    1da8:	b0 f0       	brcs	.+44     	; 0x1dd6 <__fixunssfsi+0x3e>
    1daa:	e1 f0       	breq	.+56     	; 0x1de4 <__fixunssfsi+0x4c>
    1dac:	66 0f       	add	r22, r22
    1dae:	77 1f       	adc	r23, r23
    1db0:	88 1f       	adc	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	1a f0       	brmi	.+6      	; 0x1dbc <__fixunssfsi+0x24>
    1db6:	ba 95       	dec	r27
    1db8:	c9 f7       	brne	.-14     	; 0x1dac <__fixunssfsi+0x14>
    1dba:	14 c0       	rjmp	.+40     	; 0x1de4 <__fixunssfsi+0x4c>
    1dbc:	b1 30       	cpi	r27, 0x01	; 1
    1dbe:	91 f0       	breq	.+36     	; 0x1de4 <__fixunssfsi+0x4c>
    1dc0:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__fp_zero>
    1dc4:	b1 e0       	ldi	r27, 0x01	; 1
    1dc6:	08 95       	ret
    1dc8:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_zero>
    1dcc:	67 2f       	mov	r22, r23
    1dce:	78 2f       	mov	r23, r24
    1dd0:	88 27       	eor	r24, r24
    1dd2:	b8 5f       	subi	r27, 0xF8	; 248
    1dd4:	39 f0       	breq	.+14     	; 0x1de4 <__fixunssfsi+0x4c>
    1dd6:	b9 3f       	cpi	r27, 0xF9	; 249
    1dd8:	cc f3       	brlt	.-14     	; 0x1dcc <__fixunssfsi+0x34>
    1dda:	86 95       	lsr	r24
    1ddc:	77 95       	ror	r23
    1dde:	67 95       	ror	r22
    1de0:	b3 95       	inc	r27
    1de2:	d9 f7       	brne	.-10     	; 0x1dda <__fixunssfsi+0x42>
    1de4:	3e f4       	brtc	.+14     	; 0x1df4 <__fixunssfsi+0x5c>
    1de6:	90 95       	com	r25
    1de8:	80 95       	com	r24
    1dea:	70 95       	com	r23
    1dec:	61 95       	neg	r22
    1dee:	7f 4f       	sbci	r23, 0xFF	; 255
    1df0:	8f 4f       	sbci	r24, 0xFF	; 255
    1df2:	9f 4f       	sbci	r25, 0xFF	; 255
    1df4:	08 95       	ret

00001df6 <__fp_cmp>:
    1df6:	99 0f       	add	r25, r25
    1df8:	00 08       	sbc	r0, r0
    1dfa:	55 0f       	add	r21, r21
    1dfc:	aa 0b       	sbc	r26, r26
    1dfe:	e0 e8       	ldi	r30, 0x80	; 128
    1e00:	fe ef       	ldi	r31, 0xFE	; 254
    1e02:	16 16       	cp	r1, r22
    1e04:	17 06       	cpc	r1, r23
    1e06:	e8 07       	cpc	r30, r24
    1e08:	f9 07       	cpc	r31, r25
    1e0a:	c0 f0       	brcs	.+48     	; 0x1e3c <__fp_cmp+0x46>
    1e0c:	12 16       	cp	r1, r18
    1e0e:	13 06       	cpc	r1, r19
    1e10:	e4 07       	cpc	r30, r20
    1e12:	f5 07       	cpc	r31, r21
    1e14:	98 f0       	brcs	.+38     	; 0x1e3c <__fp_cmp+0x46>
    1e16:	62 1b       	sub	r22, r18
    1e18:	73 0b       	sbc	r23, r19
    1e1a:	84 0b       	sbc	r24, r20
    1e1c:	95 0b       	sbc	r25, r21
    1e1e:	39 f4       	brne	.+14     	; 0x1e2e <__fp_cmp+0x38>
    1e20:	0a 26       	eor	r0, r26
    1e22:	61 f0       	breq	.+24     	; 0x1e3c <__fp_cmp+0x46>
    1e24:	23 2b       	or	r18, r19
    1e26:	24 2b       	or	r18, r20
    1e28:	25 2b       	or	r18, r21
    1e2a:	21 f4       	brne	.+8      	; 0x1e34 <__fp_cmp+0x3e>
    1e2c:	08 95       	ret
    1e2e:	0a 26       	eor	r0, r26
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <__fp_cmp+0x3e>
    1e32:	a1 40       	sbci	r26, 0x01	; 1
    1e34:	a6 95       	lsr	r26
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	81 1d       	adc	r24, r1
    1e3a:	81 1d       	adc	r24, r1
    1e3c:	08 95       	ret

00001e3e <__fp_inf>:
    1e3e:	97 f9       	bld	r25, 7
    1e40:	9f 67       	ori	r25, 0x7F	; 127
    1e42:	80 e8       	ldi	r24, 0x80	; 128
    1e44:	70 e0       	ldi	r23, 0x00	; 0
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	08 95       	ret

00001e4a <__fp_nan>:
    1e4a:	9f ef       	ldi	r25, 0xFF	; 255
    1e4c:	80 ec       	ldi	r24, 0xC0	; 192
    1e4e:	08 95       	ret

00001e50 <__fp_pscA>:
    1e50:	00 24       	eor	r0, r0
    1e52:	0a 94       	dec	r0
    1e54:	16 16       	cp	r1, r22
    1e56:	17 06       	cpc	r1, r23
    1e58:	18 06       	cpc	r1, r24
    1e5a:	09 06       	cpc	r0, r25
    1e5c:	08 95       	ret

00001e5e <__fp_pscB>:
    1e5e:	00 24       	eor	r0, r0
    1e60:	0a 94       	dec	r0
    1e62:	12 16       	cp	r1, r18
    1e64:	13 06       	cpc	r1, r19
    1e66:	14 06       	cpc	r1, r20
    1e68:	05 06       	cpc	r0, r21
    1e6a:	08 95       	ret

00001e6c <__fp_round>:
    1e6c:	09 2e       	mov	r0, r25
    1e6e:	03 94       	inc	r0
    1e70:	00 0c       	add	r0, r0
    1e72:	11 f4       	brne	.+4      	; 0x1e78 <__fp_round+0xc>
    1e74:	88 23       	and	r24, r24
    1e76:	52 f0       	brmi	.+20     	; 0x1e8c <__fp_round+0x20>
    1e78:	bb 0f       	add	r27, r27
    1e7a:	40 f4       	brcc	.+16     	; 0x1e8c <__fp_round+0x20>
    1e7c:	bf 2b       	or	r27, r31
    1e7e:	11 f4       	brne	.+4      	; 0x1e84 <__fp_round+0x18>
    1e80:	60 ff       	sbrs	r22, 0
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <__fp_round+0x20>
    1e84:	6f 5f       	subi	r22, 0xFF	; 255
    1e86:	7f 4f       	sbci	r23, 0xFF	; 255
    1e88:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8c:	08 95       	ret

00001e8e <__fp_split3>:
    1e8e:	57 fd       	sbrc	r21, 7
    1e90:	90 58       	subi	r25, 0x80	; 128
    1e92:	44 0f       	add	r20, r20
    1e94:	55 1f       	adc	r21, r21
    1e96:	59 f0       	breq	.+22     	; 0x1eae <__fp_splitA+0x10>
    1e98:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9a:	71 f0       	breq	.+28     	; 0x1eb8 <__fp_splitA+0x1a>
    1e9c:	47 95       	ror	r20

00001e9e <__fp_splitA>:
    1e9e:	88 0f       	add	r24, r24
    1ea0:	97 fb       	bst	r25, 7
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	61 f0       	breq	.+24     	; 0x1ebe <__fp_splitA+0x20>
    1ea6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ea8:	79 f0       	breq	.+30     	; 0x1ec8 <__fp_splitA+0x2a>
    1eaa:	87 95       	ror	r24
    1eac:	08 95       	ret
    1eae:	12 16       	cp	r1, r18
    1eb0:	13 06       	cpc	r1, r19
    1eb2:	14 06       	cpc	r1, r20
    1eb4:	55 1f       	adc	r21, r21
    1eb6:	f2 cf       	rjmp	.-28     	; 0x1e9c <__fp_split3+0xe>
    1eb8:	46 95       	lsr	r20
    1eba:	f1 df       	rcall	.-30     	; 0x1e9e <__fp_splitA>
    1ebc:	08 c0       	rjmp	.+16     	; 0x1ece <__fp_splitA+0x30>
    1ebe:	16 16       	cp	r1, r22
    1ec0:	17 06       	cpc	r1, r23
    1ec2:	18 06       	cpc	r1, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	f1 cf       	rjmp	.-30     	; 0x1eaa <__fp_splitA+0xc>
    1ec8:	86 95       	lsr	r24
    1eca:	71 05       	cpc	r23, r1
    1ecc:	61 05       	cpc	r22, r1
    1ece:	08 94       	sec
    1ed0:	08 95       	ret

00001ed2 <__fp_zero>:
    1ed2:	e8 94       	clt

00001ed4 <__fp_szero>:
    1ed4:	bb 27       	eor	r27, r27
    1ed6:	66 27       	eor	r22, r22
    1ed8:	77 27       	eor	r23, r23
    1eda:	cb 01       	movw	r24, r22
    1edc:	97 f9       	bld	r25, 7
    1ede:	08 95       	ret

00001ee0 <__gesf2>:
    1ee0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fp_cmp>
    1ee4:	08 f4       	brcc	.+2      	; 0x1ee8 <__gesf2+0x8>
    1ee6:	8f ef       	ldi	r24, 0xFF	; 255
    1ee8:	08 95       	ret

00001eea <__mulsf3>:
    1eea:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__mulsf3x>
    1eee:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__fp_round>
    1ef2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__fp_pscA>
    1ef6:	38 f0       	brcs	.+14     	; 0x1f06 <__mulsf3+0x1c>
    1ef8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__fp_pscB>
    1efc:	20 f0       	brcs	.+8      	; 0x1f06 <__mulsf3+0x1c>
    1efe:	95 23       	and	r25, r21
    1f00:	11 f0       	breq	.+4      	; 0x1f06 <__mulsf3+0x1c>
    1f02:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__fp_inf>
    1f06:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__fp_nan>
    1f0a:	11 24       	eor	r1, r1
    1f0c:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_szero>

00001f10 <__mulsf3x>:
    1f10:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__fp_split3>
    1f14:	70 f3       	brcs	.-36     	; 0x1ef2 <__mulsf3+0x8>

00001f16 <__mulsf3_pse>:
    1f16:	95 9f       	mul	r25, r21
    1f18:	c1 f3       	breq	.-16     	; 0x1f0a <__mulsf3+0x20>
    1f1a:	95 0f       	add	r25, r21
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	55 1f       	adc	r21, r21
    1f20:	62 9f       	mul	r22, r18
    1f22:	f0 01       	movw	r30, r0
    1f24:	72 9f       	mul	r23, r18
    1f26:	bb 27       	eor	r27, r27
    1f28:	f0 0d       	add	r31, r0
    1f2a:	b1 1d       	adc	r27, r1
    1f2c:	63 9f       	mul	r22, r19
    1f2e:	aa 27       	eor	r26, r26
    1f30:	f0 0d       	add	r31, r0
    1f32:	b1 1d       	adc	r27, r1
    1f34:	aa 1f       	adc	r26, r26
    1f36:	64 9f       	mul	r22, r20
    1f38:	66 27       	eor	r22, r22
    1f3a:	b0 0d       	add	r27, r0
    1f3c:	a1 1d       	adc	r26, r1
    1f3e:	66 1f       	adc	r22, r22
    1f40:	82 9f       	mul	r24, r18
    1f42:	22 27       	eor	r18, r18
    1f44:	b0 0d       	add	r27, r0
    1f46:	a1 1d       	adc	r26, r1
    1f48:	62 1f       	adc	r22, r18
    1f4a:	73 9f       	mul	r23, r19
    1f4c:	b0 0d       	add	r27, r0
    1f4e:	a1 1d       	adc	r26, r1
    1f50:	62 1f       	adc	r22, r18
    1f52:	83 9f       	mul	r24, r19
    1f54:	a0 0d       	add	r26, r0
    1f56:	61 1d       	adc	r22, r1
    1f58:	22 1f       	adc	r18, r18
    1f5a:	74 9f       	mul	r23, r20
    1f5c:	33 27       	eor	r19, r19
    1f5e:	a0 0d       	add	r26, r0
    1f60:	61 1d       	adc	r22, r1
    1f62:	23 1f       	adc	r18, r19
    1f64:	84 9f       	mul	r24, r20
    1f66:	60 0d       	add	r22, r0
    1f68:	21 1d       	adc	r18, r1
    1f6a:	82 2f       	mov	r24, r18
    1f6c:	76 2f       	mov	r23, r22
    1f6e:	6a 2f       	mov	r22, r26
    1f70:	11 24       	eor	r1, r1
    1f72:	9f 57       	subi	r25, 0x7F	; 127
    1f74:	50 40       	sbci	r21, 0x00	; 0
    1f76:	9a f0       	brmi	.+38     	; 0x1f9e <__mulsf3_pse+0x88>
    1f78:	f1 f0       	breq	.+60     	; 0x1fb6 <__mulsf3_pse+0xa0>
    1f7a:	88 23       	and	r24, r24
    1f7c:	4a f0       	brmi	.+18     	; 0x1f90 <__mulsf3_pse+0x7a>
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	bb 1f       	adc	r27, r27
    1f84:	66 1f       	adc	r22, r22
    1f86:	77 1f       	adc	r23, r23
    1f88:	88 1f       	adc	r24, r24
    1f8a:	91 50       	subi	r25, 0x01	; 1
    1f8c:	50 40       	sbci	r21, 0x00	; 0
    1f8e:	a9 f7       	brne	.-22     	; 0x1f7a <__mulsf3_pse+0x64>
    1f90:	9e 3f       	cpi	r25, 0xFE	; 254
    1f92:	51 05       	cpc	r21, r1
    1f94:	80 f0       	brcs	.+32     	; 0x1fb6 <__mulsf3_pse+0xa0>
    1f96:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__fp_inf>
    1f9a:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__fp_szero>
    1f9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa0:	e4 f3       	brlt	.-8      	; 0x1f9a <__mulsf3_pse+0x84>
    1fa2:	98 3e       	cpi	r25, 0xE8	; 232
    1fa4:	d4 f3       	brlt	.-12     	; 0x1f9a <__mulsf3_pse+0x84>
    1fa6:	86 95       	lsr	r24
    1fa8:	77 95       	ror	r23
    1faa:	67 95       	ror	r22
    1fac:	b7 95       	ror	r27
    1fae:	f7 95       	ror	r31
    1fb0:	e7 95       	ror	r30
    1fb2:	9f 5f       	subi	r25, 0xFF	; 255
    1fb4:	c1 f7       	brne	.-16     	; 0x1fa6 <__mulsf3_pse+0x90>
    1fb6:	fe 2b       	or	r31, r30
    1fb8:	88 0f       	add	r24, r24
    1fba:	91 1d       	adc	r25, r1
    1fbc:	96 95       	lsr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	97 f9       	bld	r25, 7
    1fc2:	08 95       	ret

00001fc4 <memset>:
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <memset+0x6>
    1fc8:	6d 93       	st	X+, r22
    1fca:	41 50       	subi	r20, 0x01	; 1
    1fcc:	50 40       	sbci	r21, 0x00	; 0
    1fce:	e0 f7       	brcc	.-8      	; 0x1fc8 <memset+0x4>
    1fd0:	08 95       	ret

00001fd2 <sprintf>:
    1fd2:	ae e0       	ldi	r26, 0x0E	; 14
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	ef ee       	ldi	r30, 0xEF	; 239
    1fd8:	ff e0       	ldi	r31, 0x0F	; 15
    1fda:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__prologue_saves__+0x1c>
    1fde:	0d 89       	ldd	r16, Y+21	; 0x15
    1fe0:	1e 89       	ldd	r17, Y+22	; 0x16
    1fe2:	86 e0       	ldi	r24, 0x06	; 6
    1fe4:	8c 83       	std	Y+4, r24	; 0x04
    1fe6:	1a 83       	std	Y+2, r17	; 0x02
    1fe8:	09 83       	std	Y+1, r16	; 0x01
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	9f e7       	ldi	r25, 0x7F	; 127
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	ae 01       	movw	r20, r28
    1ff4:	47 5e       	subi	r20, 0xE7	; 231
    1ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff8:	6f 89       	ldd	r22, Y+23	; 0x17
    1ffa:	78 8d       	ldd	r23, Y+24	; 0x18
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	0e 94 0b 10 	call	0x2016	; 0x2016 <vfprintf>
    2004:	ef 81       	ldd	r30, Y+7	; 0x07
    2006:	f8 85       	ldd	r31, Y+8	; 0x08
    2008:	e0 0f       	add	r30, r16
    200a:	f1 1f       	adc	r31, r17
    200c:	10 82       	st	Z, r1
    200e:	2e 96       	adiw	r28, 0x0e	; 14
    2010:	e4 e0       	ldi	r30, 0x04	; 4
    2012:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__epilogue_restores__+0x1c>

00002016 <vfprintf>:
    2016:	ab e0       	ldi	r26, 0x0B	; 11
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e1 e1       	ldi	r30, 0x11	; 17
    201c:	f0 e1       	ldi	r31, 0x10	; 16
    201e:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__prologue_saves__>
    2022:	6c 01       	movw	r12, r24
    2024:	7b 01       	movw	r14, r22
    2026:	8a 01       	movw	r16, r20
    2028:	fc 01       	movw	r30, r24
    202a:	17 82       	std	Z+7, r1	; 0x07
    202c:	16 82       	std	Z+6, r1	; 0x06
    202e:	83 81       	ldd	r24, Z+3	; 0x03
    2030:	81 ff       	sbrs	r24, 1
    2032:	cc c1       	rjmp	.+920    	; 0x23cc <vfprintf+0x3b6>
    2034:	ce 01       	movw	r24, r28
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	3c 01       	movw	r6, r24
    203a:	f6 01       	movw	r30, r12
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	f7 01       	movw	r30, r14
    2040:	93 fd       	sbrc	r25, 3
    2042:	85 91       	lpm	r24, Z+
    2044:	93 ff       	sbrs	r25, 3
    2046:	81 91       	ld	r24, Z+
    2048:	7f 01       	movw	r14, r30
    204a:	88 23       	and	r24, r24
    204c:	09 f4       	brne	.+2      	; 0x2050 <vfprintf+0x3a>
    204e:	ba c1       	rjmp	.+884    	; 0x23c4 <vfprintf+0x3ae>
    2050:	85 32       	cpi	r24, 0x25	; 37
    2052:	39 f4       	brne	.+14     	; 0x2062 <vfprintf+0x4c>
    2054:	93 fd       	sbrc	r25, 3
    2056:	85 91       	lpm	r24, Z+
    2058:	93 ff       	sbrs	r25, 3
    205a:	81 91       	ld	r24, Z+
    205c:	7f 01       	movw	r14, r30
    205e:	85 32       	cpi	r24, 0x25	; 37
    2060:	29 f4       	brne	.+10     	; 0x206c <vfprintf+0x56>
    2062:	b6 01       	movw	r22, r12
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 02 12 	call	0x2404	; 0x2404 <fputc>
    206a:	e7 cf       	rjmp	.-50     	; 0x203a <vfprintf+0x24>
    206c:	91 2c       	mov	r9, r1
    206e:	21 2c       	mov	r2, r1
    2070:	31 2c       	mov	r3, r1
    2072:	ff e1       	ldi	r31, 0x1F	; 31
    2074:	f3 15       	cp	r31, r3
    2076:	d8 f0       	brcs	.+54     	; 0x20ae <vfprintf+0x98>
    2078:	8b 32       	cpi	r24, 0x2B	; 43
    207a:	79 f0       	breq	.+30     	; 0x209a <vfprintf+0x84>
    207c:	38 f4       	brcc	.+14     	; 0x208c <vfprintf+0x76>
    207e:	80 32       	cpi	r24, 0x20	; 32
    2080:	79 f0       	breq	.+30     	; 0x20a0 <vfprintf+0x8a>
    2082:	83 32       	cpi	r24, 0x23	; 35
    2084:	a1 f4       	brne	.+40     	; 0x20ae <vfprintf+0x98>
    2086:	23 2d       	mov	r18, r3
    2088:	20 61       	ori	r18, 0x10	; 16
    208a:	1d c0       	rjmp	.+58     	; 0x20c6 <vfprintf+0xb0>
    208c:	8d 32       	cpi	r24, 0x2D	; 45
    208e:	61 f0       	breq	.+24     	; 0x20a8 <vfprintf+0x92>
    2090:	80 33       	cpi	r24, 0x30	; 48
    2092:	69 f4       	brne	.+26     	; 0x20ae <vfprintf+0x98>
    2094:	23 2d       	mov	r18, r3
    2096:	21 60       	ori	r18, 0x01	; 1
    2098:	16 c0       	rjmp	.+44     	; 0x20c6 <vfprintf+0xb0>
    209a:	83 2d       	mov	r24, r3
    209c:	82 60       	ori	r24, 0x02	; 2
    209e:	38 2e       	mov	r3, r24
    20a0:	e3 2d       	mov	r30, r3
    20a2:	e4 60       	ori	r30, 0x04	; 4
    20a4:	3e 2e       	mov	r3, r30
    20a6:	2a c0       	rjmp	.+84     	; 0x20fc <vfprintf+0xe6>
    20a8:	f3 2d       	mov	r31, r3
    20aa:	f8 60       	ori	r31, 0x08	; 8
    20ac:	1d c0       	rjmp	.+58     	; 0x20e8 <vfprintf+0xd2>
    20ae:	37 fc       	sbrc	r3, 7
    20b0:	2d c0       	rjmp	.+90     	; 0x210c <vfprintf+0xf6>
    20b2:	20 ed       	ldi	r18, 0xD0	; 208
    20b4:	28 0f       	add	r18, r24
    20b6:	2a 30       	cpi	r18, 0x0A	; 10
    20b8:	40 f0       	brcs	.+16     	; 0x20ca <vfprintf+0xb4>
    20ba:	8e 32       	cpi	r24, 0x2E	; 46
    20bc:	b9 f4       	brne	.+46     	; 0x20ec <vfprintf+0xd6>
    20be:	36 fc       	sbrc	r3, 6
    20c0:	81 c1       	rjmp	.+770    	; 0x23c4 <vfprintf+0x3ae>
    20c2:	23 2d       	mov	r18, r3
    20c4:	20 64       	ori	r18, 0x40	; 64
    20c6:	32 2e       	mov	r3, r18
    20c8:	19 c0       	rjmp	.+50     	; 0x20fc <vfprintf+0xe6>
    20ca:	36 fe       	sbrs	r3, 6
    20cc:	06 c0       	rjmp	.+12     	; 0x20da <vfprintf+0xc4>
    20ce:	8a e0       	ldi	r24, 0x0A	; 10
    20d0:	98 9e       	mul	r9, r24
    20d2:	20 0d       	add	r18, r0
    20d4:	11 24       	eor	r1, r1
    20d6:	92 2e       	mov	r9, r18
    20d8:	11 c0       	rjmp	.+34     	; 0x20fc <vfprintf+0xe6>
    20da:	ea e0       	ldi	r30, 0x0A	; 10
    20dc:	2e 9e       	mul	r2, r30
    20de:	20 0d       	add	r18, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	22 2e       	mov	r2, r18
    20e4:	f3 2d       	mov	r31, r3
    20e6:	f0 62       	ori	r31, 0x20	; 32
    20e8:	3f 2e       	mov	r3, r31
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <vfprintf+0xe6>
    20ec:	8c 36       	cpi	r24, 0x6C	; 108
    20ee:	21 f4       	brne	.+8      	; 0x20f8 <vfprintf+0xe2>
    20f0:	83 2d       	mov	r24, r3
    20f2:	80 68       	ori	r24, 0x80	; 128
    20f4:	38 2e       	mov	r3, r24
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <vfprintf+0xe6>
    20f8:	88 36       	cpi	r24, 0x68	; 104
    20fa:	41 f4       	brne	.+16     	; 0x210c <vfprintf+0xf6>
    20fc:	f7 01       	movw	r30, r14
    20fe:	93 fd       	sbrc	r25, 3
    2100:	85 91       	lpm	r24, Z+
    2102:	93 ff       	sbrs	r25, 3
    2104:	81 91       	ld	r24, Z+
    2106:	7f 01       	movw	r14, r30
    2108:	81 11       	cpse	r24, r1
    210a:	b3 cf       	rjmp	.-154    	; 0x2072 <vfprintf+0x5c>
    210c:	98 2f       	mov	r25, r24
    210e:	9f 7d       	andi	r25, 0xDF	; 223
    2110:	95 54       	subi	r25, 0x45	; 69
    2112:	93 30       	cpi	r25, 0x03	; 3
    2114:	28 f4       	brcc	.+10     	; 0x2120 <vfprintf+0x10a>
    2116:	0c 5f       	subi	r16, 0xFC	; 252
    2118:	1f 4f       	sbci	r17, 0xFF	; 255
    211a:	9f e3       	ldi	r25, 0x3F	; 63
    211c:	99 83       	std	Y+1, r25	; 0x01
    211e:	0d c0       	rjmp	.+26     	; 0x213a <vfprintf+0x124>
    2120:	83 36       	cpi	r24, 0x63	; 99
    2122:	31 f0       	breq	.+12     	; 0x2130 <vfprintf+0x11a>
    2124:	83 37       	cpi	r24, 0x73	; 115
    2126:	71 f0       	breq	.+28     	; 0x2144 <vfprintf+0x12e>
    2128:	83 35       	cpi	r24, 0x53	; 83
    212a:	09 f0       	breq	.+2      	; 0x212e <vfprintf+0x118>
    212c:	59 c0       	rjmp	.+178    	; 0x21e0 <vfprintf+0x1ca>
    212e:	21 c0       	rjmp	.+66     	; 0x2172 <vfprintf+0x15c>
    2130:	f8 01       	movw	r30, r16
    2132:	80 81       	ld	r24, Z
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	0e 5f       	subi	r16, 0xFE	; 254
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	88 24       	eor	r8, r8
    213c:	83 94       	inc	r8
    213e:	91 2c       	mov	r9, r1
    2140:	53 01       	movw	r10, r6
    2142:	13 c0       	rjmp	.+38     	; 0x216a <vfprintf+0x154>
    2144:	28 01       	movw	r4, r16
    2146:	f2 e0       	ldi	r31, 0x02	; 2
    2148:	4f 0e       	add	r4, r31
    214a:	51 1c       	adc	r5, r1
    214c:	f8 01       	movw	r30, r16
    214e:	a0 80       	ld	r10, Z
    2150:	b1 80       	ldd	r11, Z+1	; 0x01
    2152:	36 fe       	sbrs	r3, 6
    2154:	03 c0       	rjmp	.+6      	; 0x215c <vfprintf+0x146>
    2156:	69 2d       	mov	r22, r9
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <vfprintf+0x14a>
    215c:	6f ef       	ldi	r22, 0xFF	; 255
    215e:	7f ef       	ldi	r23, 0xFF	; 255
    2160:	c5 01       	movw	r24, r10
    2162:	0e 94 f7 11 	call	0x23ee	; 0x23ee <strnlen>
    2166:	4c 01       	movw	r8, r24
    2168:	82 01       	movw	r16, r4
    216a:	f3 2d       	mov	r31, r3
    216c:	ff 77       	andi	r31, 0x7F	; 127
    216e:	3f 2e       	mov	r3, r31
    2170:	16 c0       	rjmp	.+44     	; 0x219e <vfprintf+0x188>
    2172:	28 01       	movw	r4, r16
    2174:	22 e0       	ldi	r18, 0x02	; 2
    2176:	42 0e       	add	r4, r18
    2178:	51 1c       	adc	r5, r1
    217a:	f8 01       	movw	r30, r16
    217c:	a0 80       	ld	r10, Z
    217e:	b1 80       	ldd	r11, Z+1	; 0x01
    2180:	36 fe       	sbrs	r3, 6
    2182:	03 c0       	rjmp	.+6      	; 0x218a <vfprintf+0x174>
    2184:	69 2d       	mov	r22, r9
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	02 c0       	rjmp	.+4      	; 0x218e <vfprintf+0x178>
    218a:	6f ef       	ldi	r22, 0xFF	; 255
    218c:	7f ef       	ldi	r23, 0xFF	; 255
    218e:	c5 01       	movw	r24, r10
    2190:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <strnlen_P>
    2194:	4c 01       	movw	r8, r24
    2196:	f3 2d       	mov	r31, r3
    2198:	f0 68       	ori	r31, 0x80	; 128
    219a:	3f 2e       	mov	r3, r31
    219c:	82 01       	movw	r16, r4
    219e:	33 fc       	sbrc	r3, 3
    21a0:	1b c0       	rjmp	.+54     	; 0x21d8 <vfprintf+0x1c2>
    21a2:	82 2d       	mov	r24, r2
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	88 16       	cp	r8, r24
    21a8:	99 06       	cpc	r9, r25
    21aa:	b0 f4       	brcc	.+44     	; 0x21d8 <vfprintf+0x1c2>
    21ac:	b6 01       	movw	r22, r12
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 02 12 	call	0x2404	; 0x2404 <fputc>
    21b6:	2a 94       	dec	r2
    21b8:	f4 cf       	rjmp	.-24     	; 0x21a2 <vfprintf+0x18c>
    21ba:	f5 01       	movw	r30, r10
    21bc:	37 fc       	sbrc	r3, 7
    21be:	85 91       	lpm	r24, Z+
    21c0:	37 fe       	sbrs	r3, 7
    21c2:	81 91       	ld	r24, Z+
    21c4:	5f 01       	movw	r10, r30
    21c6:	b6 01       	movw	r22, r12
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 02 12 	call	0x2404	; 0x2404 <fputc>
    21ce:	21 10       	cpse	r2, r1
    21d0:	2a 94       	dec	r2
    21d2:	21 e0       	ldi	r18, 0x01	; 1
    21d4:	82 1a       	sub	r8, r18
    21d6:	91 08       	sbc	r9, r1
    21d8:	81 14       	cp	r8, r1
    21da:	91 04       	cpc	r9, r1
    21dc:	71 f7       	brne	.-36     	; 0x21ba <vfprintf+0x1a4>
    21de:	e8 c0       	rjmp	.+464    	; 0x23b0 <vfprintf+0x39a>
    21e0:	84 36       	cpi	r24, 0x64	; 100
    21e2:	11 f0       	breq	.+4      	; 0x21e8 <vfprintf+0x1d2>
    21e4:	89 36       	cpi	r24, 0x69	; 105
    21e6:	41 f5       	brne	.+80     	; 0x2238 <vfprintf+0x222>
    21e8:	f8 01       	movw	r30, r16
    21ea:	37 fe       	sbrs	r3, 7
    21ec:	07 c0       	rjmp	.+14     	; 0x21fc <vfprintf+0x1e6>
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	0c 5f       	subi	r16, 0xFC	; 252
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	08 c0       	rjmp	.+16     	; 0x220c <vfprintf+0x1f6>
    21fc:	60 81       	ld	r22, Z
    21fe:	71 81       	ldd	r23, Z+1	; 0x01
    2200:	07 2e       	mov	r0, r23
    2202:	00 0c       	add	r0, r0
    2204:	88 0b       	sbc	r24, r24
    2206:	99 0b       	sbc	r25, r25
    2208:	0e 5f       	subi	r16, 0xFE	; 254
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	f3 2d       	mov	r31, r3
    220e:	ff 76       	andi	r31, 0x6F	; 111
    2210:	3f 2e       	mov	r3, r31
    2212:	97 ff       	sbrs	r25, 7
    2214:	09 c0       	rjmp	.+18     	; 0x2228 <vfprintf+0x212>
    2216:	90 95       	com	r25
    2218:	80 95       	com	r24
    221a:	70 95       	com	r23
    221c:	61 95       	neg	r22
    221e:	7f 4f       	sbci	r23, 0xFF	; 255
    2220:	8f 4f       	sbci	r24, 0xFF	; 255
    2222:	9f 4f       	sbci	r25, 0xFF	; 255
    2224:	f0 68       	ori	r31, 0x80	; 128
    2226:	3f 2e       	mov	r3, r31
    2228:	2a e0       	ldi	r18, 0x0A	; 10
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	a3 01       	movw	r20, r6
    222e:	0e 94 3e 12 	call	0x247c	; 0x247c <__ultoa_invert>
    2232:	88 2e       	mov	r8, r24
    2234:	86 18       	sub	r8, r6
    2236:	45 c0       	rjmp	.+138    	; 0x22c2 <vfprintf+0x2ac>
    2238:	85 37       	cpi	r24, 0x75	; 117
    223a:	31 f4       	brne	.+12     	; 0x2248 <vfprintf+0x232>
    223c:	23 2d       	mov	r18, r3
    223e:	2f 7e       	andi	r18, 0xEF	; 239
    2240:	b2 2e       	mov	r11, r18
    2242:	2a e0       	ldi	r18, 0x0A	; 10
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	25 c0       	rjmp	.+74     	; 0x2292 <vfprintf+0x27c>
    2248:	93 2d       	mov	r25, r3
    224a:	99 7f       	andi	r25, 0xF9	; 249
    224c:	b9 2e       	mov	r11, r25
    224e:	8f 36       	cpi	r24, 0x6F	; 111
    2250:	c1 f0       	breq	.+48     	; 0x2282 <vfprintf+0x26c>
    2252:	18 f4       	brcc	.+6      	; 0x225a <vfprintf+0x244>
    2254:	88 35       	cpi	r24, 0x58	; 88
    2256:	79 f0       	breq	.+30     	; 0x2276 <vfprintf+0x260>
    2258:	b5 c0       	rjmp	.+362    	; 0x23c4 <vfprintf+0x3ae>
    225a:	80 37       	cpi	r24, 0x70	; 112
    225c:	19 f0       	breq	.+6      	; 0x2264 <vfprintf+0x24e>
    225e:	88 37       	cpi	r24, 0x78	; 120
    2260:	21 f0       	breq	.+8      	; 0x226a <vfprintf+0x254>
    2262:	b0 c0       	rjmp	.+352    	; 0x23c4 <vfprintf+0x3ae>
    2264:	e9 2f       	mov	r30, r25
    2266:	e0 61       	ori	r30, 0x10	; 16
    2268:	be 2e       	mov	r11, r30
    226a:	b4 fe       	sbrs	r11, 4
    226c:	0d c0       	rjmp	.+26     	; 0x2288 <vfprintf+0x272>
    226e:	fb 2d       	mov	r31, r11
    2270:	f4 60       	ori	r31, 0x04	; 4
    2272:	bf 2e       	mov	r11, r31
    2274:	09 c0       	rjmp	.+18     	; 0x2288 <vfprintf+0x272>
    2276:	34 fe       	sbrs	r3, 4
    2278:	0a c0       	rjmp	.+20     	; 0x228e <vfprintf+0x278>
    227a:	29 2f       	mov	r18, r25
    227c:	26 60       	ori	r18, 0x06	; 6
    227e:	b2 2e       	mov	r11, r18
    2280:	06 c0       	rjmp	.+12     	; 0x228e <vfprintf+0x278>
    2282:	28 e0       	ldi	r18, 0x08	; 8
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	05 c0       	rjmp	.+10     	; 0x2292 <vfprintf+0x27c>
    2288:	20 e1       	ldi	r18, 0x10	; 16
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <vfprintf+0x27c>
    228e:	20 e1       	ldi	r18, 0x10	; 16
    2290:	32 e0       	ldi	r19, 0x02	; 2
    2292:	f8 01       	movw	r30, r16
    2294:	b7 fe       	sbrs	r11, 7
    2296:	07 c0       	rjmp	.+14     	; 0x22a6 <vfprintf+0x290>
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	0c 5f       	subi	r16, 0xFC	; 252
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	06 c0       	rjmp	.+12     	; 0x22b2 <vfprintf+0x29c>
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	0e 5f       	subi	r16, 0xFE	; 254
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	a3 01       	movw	r20, r6
    22b4:	0e 94 3e 12 	call	0x247c	; 0x247c <__ultoa_invert>
    22b8:	88 2e       	mov	r8, r24
    22ba:	86 18       	sub	r8, r6
    22bc:	fb 2d       	mov	r31, r11
    22be:	ff 77       	andi	r31, 0x7F	; 127
    22c0:	3f 2e       	mov	r3, r31
    22c2:	36 fe       	sbrs	r3, 6
    22c4:	0d c0       	rjmp	.+26     	; 0x22e0 <vfprintf+0x2ca>
    22c6:	23 2d       	mov	r18, r3
    22c8:	2e 7f       	andi	r18, 0xFE	; 254
    22ca:	a2 2e       	mov	r10, r18
    22cc:	89 14       	cp	r8, r9
    22ce:	58 f4       	brcc	.+22     	; 0x22e6 <vfprintf+0x2d0>
    22d0:	34 fe       	sbrs	r3, 4
    22d2:	0b c0       	rjmp	.+22     	; 0x22ea <vfprintf+0x2d4>
    22d4:	32 fc       	sbrc	r3, 2
    22d6:	09 c0       	rjmp	.+18     	; 0x22ea <vfprintf+0x2d4>
    22d8:	83 2d       	mov	r24, r3
    22da:	8e 7e       	andi	r24, 0xEE	; 238
    22dc:	a8 2e       	mov	r10, r24
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <vfprintf+0x2d4>
    22e0:	b8 2c       	mov	r11, r8
    22e2:	a3 2c       	mov	r10, r3
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <vfprintf+0x2d6>
    22e6:	b8 2c       	mov	r11, r8
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <vfprintf+0x2d6>
    22ea:	b9 2c       	mov	r11, r9
    22ec:	a4 fe       	sbrs	r10, 4
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <vfprintf+0x2f8>
    22f0:	fe 01       	movw	r30, r28
    22f2:	e8 0d       	add	r30, r8
    22f4:	f1 1d       	adc	r31, r1
    22f6:	80 81       	ld	r24, Z
    22f8:	80 33       	cpi	r24, 0x30	; 48
    22fa:	21 f4       	brne	.+8      	; 0x2304 <vfprintf+0x2ee>
    22fc:	9a 2d       	mov	r25, r10
    22fe:	99 7e       	andi	r25, 0xE9	; 233
    2300:	a9 2e       	mov	r10, r25
    2302:	09 c0       	rjmp	.+18     	; 0x2316 <vfprintf+0x300>
    2304:	a2 fe       	sbrs	r10, 2
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <vfprintf+0x2fe>
    2308:	b3 94       	inc	r11
    230a:	b3 94       	inc	r11
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <vfprintf+0x300>
    230e:	8a 2d       	mov	r24, r10
    2310:	86 78       	andi	r24, 0x86	; 134
    2312:	09 f0       	breq	.+2      	; 0x2316 <vfprintf+0x300>
    2314:	b3 94       	inc	r11
    2316:	a3 fc       	sbrc	r10, 3
    2318:	11 c0       	rjmp	.+34     	; 0x233c <vfprintf+0x326>
    231a:	a0 fe       	sbrs	r10, 0
    231c:	06 c0       	rjmp	.+12     	; 0x232a <vfprintf+0x314>
    231e:	b2 14       	cp	r11, r2
    2320:	88 f4       	brcc	.+34     	; 0x2344 <vfprintf+0x32e>
    2322:	28 0c       	add	r2, r8
    2324:	92 2c       	mov	r9, r2
    2326:	9b 18       	sub	r9, r11
    2328:	0e c0       	rjmp	.+28     	; 0x2346 <vfprintf+0x330>
    232a:	b2 14       	cp	r11, r2
    232c:	60 f4       	brcc	.+24     	; 0x2346 <vfprintf+0x330>
    232e:	b6 01       	movw	r22, r12
    2330:	80 e2       	ldi	r24, 0x20	; 32
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 02 12 	call	0x2404	; 0x2404 <fputc>
    2338:	b3 94       	inc	r11
    233a:	f7 cf       	rjmp	.-18     	; 0x232a <vfprintf+0x314>
    233c:	b2 14       	cp	r11, r2
    233e:	18 f4       	brcc	.+6      	; 0x2346 <vfprintf+0x330>
    2340:	2b 18       	sub	r2, r11
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <vfprintf+0x332>
    2344:	98 2c       	mov	r9, r8
    2346:	21 2c       	mov	r2, r1
    2348:	a4 fe       	sbrs	r10, 4
    234a:	10 c0       	rjmp	.+32     	; 0x236c <vfprintf+0x356>
    234c:	b6 01       	movw	r22, r12
    234e:	80 e3       	ldi	r24, 0x30	; 48
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 02 12 	call	0x2404	; 0x2404 <fputc>
    2356:	a2 fe       	sbrs	r10, 2
    2358:	17 c0       	rjmp	.+46     	; 0x2388 <vfprintf+0x372>
    235a:	a1 fc       	sbrc	r10, 1
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <vfprintf+0x34e>
    235e:	88 e7       	ldi	r24, 0x78	; 120
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <vfprintf+0x352>
    2364:	88 e5       	ldi	r24, 0x58	; 88
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	b6 01       	movw	r22, r12
    236a:	0c c0       	rjmp	.+24     	; 0x2384 <vfprintf+0x36e>
    236c:	8a 2d       	mov	r24, r10
    236e:	86 78       	andi	r24, 0x86	; 134
    2370:	59 f0       	breq	.+22     	; 0x2388 <vfprintf+0x372>
    2372:	a1 fe       	sbrs	r10, 1
    2374:	02 c0       	rjmp	.+4      	; 0x237a <vfprintf+0x364>
    2376:	8b e2       	ldi	r24, 0x2B	; 43
    2378:	01 c0       	rjmp	.+2      	; 0x237c <vfprintf+0x366>
    237a:	80 e2       	ldi	r24, 0x20	; 32
    237c:	a7 fc       	sbrc	r10, 7
    237e:	8d e2       	ldi	r24, 0x2D	; 45
    2380:	b6 01       	movw	r22, r12
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 94 02 12 	call	0x2404	; 0x2404 <fputc>
    2388:	89 14       	cp	r8, r9
    238a:	38 f4       	brcc	.+14     	; 0x239a <vfprintf+0x384>
    238c:	b6 01       	movw	r22, r12
    238e:	80 e3       	ldi	r24, 0x30	; 48
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	0e 94 02 12 	call	0x2404	; 0x2404 <fputc>
    2396:	9a 94       	dec	r9
    2398:	f7 cf       	rjmp	.-18     	; 0x2388 <vfprintf+0x372>
    239a:	8a 94       	dec	r8
    239c:	f3 01       	movw	r30, r6
    239e:	e8 0d       	add	r30, r8
    23a0:	f1 1d       	adc	r31, r1
    23a2:	80 81       	ld	r24, Z
    23a4:	b6 01       	movw	r22, r12
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 02 12 	call	0x2404	; 0x2404 <fputc>
    23ac:	81 10       	cpse	r8, r1
    23ae:	f5 cf       	rjmp	.-22     	; 0x239a <vfprintf+0x384>
    23b0:	22 20       	and	r2, r2
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <vfprintf+0x3a0>
    23b4:	42 ce       	rjmp	.-892    	; 0x203a <vfprintf+0x24>
    23b6:	b6 01       	movw	r22, r12
    23b8:	80 e2       	ldi	r24, 0x20	; 32
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	0e 94 02 12 	call	0x2404	; 0x2404 <fputc>
    23c0:	2a 94       	dec	r2
    23c2:	f6 cf       	rjmp	.-20     	; 0x23b0 <vfprintf+0x39a>
    23c4:	f6 01       	movw	r30, r12
    23c6:	86 81       	ldd	r24, Z+6	; 0x06
    23c8:	97 81       	ldd	r25, Z+7	; 0x07
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <vfprintf+0x3ba>
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	9f ef       	ldi	r25, 0xFF	; 255
    23d0:	2b 96       	adiw	r28, 0x0b	; 11
    23d2:	e2 e1       	ldi	r30, 0x12	; 18
    23d4:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__epilogue_restores__>

000023d8 <strnlen_P>:
    23d8:	fc 01       	movw	r30, r24
    23da:	05 90       	lpm	r0, Z+
    23dc:	61 50       	subi	r22, 0x01	; 1
    23de:	70 40       	sbci	r23, 0x00	; 0
    23e0:	01 10       	cpse	r0, r1
    23e2:	d8 f7       	brcc	.-10     	; 0x23da <strnlen_P+0x2>
    23e4:	80 95       	com	r24
    23e6:	90 95       	com	r25
    23e8:	8e 0f       	add	r24, r30
    23ea:	9f 1f       	adc	r25, r31
    23ec:	08 95       	ret

000023ee <strnlen>:
    23ee:	fc 01       	movw	r30, r24
    23f0:	61 50       	subi	r22, 0x01	; 1
    23f2:	70 40       	sbci	r23, 0x00	; 0
    23f4:	01 90       	ld	r0, Z+
    23f6:	01 10       	cpse	r0, r1
    23f8:	d8 f7       	brcc	.-10     	; 0x23f0 <strnlen+0x2>
    23fa:	80 95       	com	r24
    23fc:	90 95       	com	r25
    23fe:	8e 0f       	add	r24, r30
    2400:	9f 1f       	adc	r25, r31
    2402:	08 95       	ret

00002404 <fputc>:
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	fb 01       	movw	r30, r22
    240e:	23 81       	ldd	r18, Z+3	; 0x03
    2410:	21 fd       	sbrc	r18, 1
    2412:	03 c0       	rjmp	.+6      	; 0x241a <fputc+0x16>
    2414:	8f ef       	ldi	r24, 0xFF	; 255
    2416:	9f ef       	ldi	r25, 0xFF	; 255
    2418:	2c c0       	rjmp	.+88     	; 0x2472 <fputc+0x6e>
    241a:	22 ff       	sbrs	r18, 2
    241c:	16 c0       	rjmp	.+44     	; 0x244a <fputc+0x46>
    241e:	46 81       	ldd	r20, Z+6	; 0x06
    2420:	57 81       	ldd	r21, Z+7	; 0x07
    2422:	24 81       	ldd	r18, Z+4	; 0x04
    2424:	35 81       	ldd	r19, Z+5	; 0x05
    2426:	42 17       	cp	r20, r18
    2428:	53 07       	cpc	r21, r19
    242a:	44 f4       	brge	.+16     	; 0x243c <fputc+0x38>
    242c:	a0 81       	ld	r26, Z
    242e:	b1 81       	ldd	r27, Z+1	; 0x01
    2430:	9d 01       	movw	r18, r26
    2432:	2f 5f       	subi	r18, 0xFF	; 255
    2434:	3f 4f       	sbci	r19, 0xFF	; 255
    2436:	31 83       	std	Z+1, r19	; 0x01
    2438:	20 83       	st	Z, r18
    243a:	8c 93       	st	X, r24
    243c:	26 81       	ldd	r18, Z+6	; 0x06
    243e:	37 81       	ldd	r19, Z+7	; 0x07
    2440:	2f 5f       	subi	r18, 0xFF	; 255
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
    2444:	37 83       	std	Z+7, r19	; 0x07
    2446:	26 83       	std	Z+6, r18	; 0x06
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <fputc+0x6e>
    244a:	8b 01       	movw	r16, r22
    244c:	ec 01       	movw	r28, r24
    244e:	fb 01       	movw	r30, r22
    2450:	00 84       	ldd	r0, Z+8	; 0x08
    2452:	f1 85       	ldd	r31, Z+9	; 0x09
    2454:	e0 2d       	mov	r30, r0
    2456:	09 95       	icall
    2458:	89 2b       	or	r24, r25
    245a:	e1 f6       	brne	.-72     	; 0x2414 <fputc+0x10>
    245c:	d8 01       	movw	r26, r16
    245e:	16 96       	adiw	r26, 0x06	; 6
    2460:	8d 91       	ld	r24, X+
    2462:	9c 91       	ld	r25, X
    2464:	17 97       	sbiw	r26, 0x07	; 7
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	17 96       	adiw	r26, 0x07	; 7
    246a:	9c 93       	st	X, r25
    246c:	8e 93       	st	-X, r24
    246e:	16 97       	sbiw	r26, 0x06	; 6
    2470:	ce 01       	movw	r24, r28
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	08 95       	ret

0000247c <__ultoa_invert>:
    247c:	fa 01       	movw	r30, r20
    247e:	aa 27       	eor	r26, r26
    2480:	28 30       	cpi	r18, 0x08	; 8
    2482:	51 f1       	breq	.+84     	; 0x24d8 <__ultoa_invert+0x5c>
    2484:	20 31       	cpi	r18, 0x10	; 16
    2486:	81 f1       	breq	.+96     	; 0x24e8 <__ultoa_invert+0x6c>
    2488:	e8 94       	clt
    248a:	6f 93       	push	r22
    248c:	6e 7f       	andi	r22, 0xFE	; 254
    248e:	6e 5f       	subi	r22, 0xFE	; 254
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	8f 4f       	sbci	r24, 0xFF	; 255
    2494:	9f 4f       	sbci	r25, 0xFF	; 255
    2496:	af 4f       	sbci	r26, 0xFF	; 255
    2498:	b1 e0       	ldi	r27, 0x01	; 1
    249a:	3e d0       	rcall	.+124    	; 0x2518 <__ultoa_invert+0x9c>
    249c:	b4 e0       	ldi	r27, 0x04	; 4
    249e:	3c d0       	rcall	.+120    	; 0x2518 <__ultoa_invert+0x9c>
    24a0:	67 0f       	add	r22, r23
    24a2:	78 1f       	adc	r23, r24
    24a4:	89 1f       	adc	r24, r25
    24a6:	9a 1f       	adc	r25, r26
    24a8:	a1 1d       	adc	r26, r1
    24aa:	68 0f       	add	r22, r24
    24ac:	79 1f       	adc	r23, r25
    24ae:	8a 1f       	adc	r24, r26
    24b0:	91 1d       	adc	r25, r1
    24b2:	a1 1d       	adc	r26, r1
    24b4:	6a 0f       	add	r22, r26
    24b6:	71 1d       	adc	r23, r1
    24b8:	81 1d       	adc	r24, r1
    24ba:	91 1d       	adc	r25, r1
    24bc:	a1 1d       	adc	r26, r1
    24be:	20 d0       	rcall	.+64     	; 0x2500 <__ultoa_invert+0x84>
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <__ultoa_invert+0x48>
    24c2:	68 94       	set
    24c4:	3f 91       	pop	r19
    24c6:	2a e0       	ldi	r18, 0x0A	; 10
    24c8:	26 9f       	mul	r18, r22
    24ca:	11 24       	eor	r1, r1
    24cc:	30 19       	sub	r19, r0
    24ce:	30 5d       	subi	r19, 0xD0	; 208
    24d0:	31 93       	st	Z+, r19
    24d2:	de f6       	brtc	.-74     	; 0x248a <__ultoa_invert+0xe>
    24d4:	cf 01       	movw	r24, r30
    24d6:	08 95       	ret
    24d8:	46 2f       	mov	r20, r22
    24da:	47 70       	andi	r20, 0x07	; 7
    24dc:	40 5d       	subi	r20, 0xD0	; 208
    24de:	41 93       	st	Z+, r20
    24e0:	b3 e0       	ldi	r27, 0x03	; 3
    24e2:	0f d0       	rcall	.+30     	; 0x2502 <__ultoa_invert+0x86>
    24e4:	c9 f7       	brne	.-14     	; 0x24d8 <__ultoa_invert+0x5c>
    24e6:	f6 cf       	rjmp	.-20     	; 0x24d4 <__ultoa_invert+0x58>
    24e8:	46 2f       	mov	r20, r22
    24ea:	4f 70       	andi	r20, 0x0F	; 15
    24ec:	40 5d       	subi	r20, 0xD0	; 208
    24ee:	4a 33       	cpi	r20, 0x3A	; 58
    24f0:	18 f0       	brcs	.+6      	; 0x24f8 <__ultoa_invert+0x7c>
    24f2:	49 5d       	subi	r20, 0xD9	; 217
    24f4:	31 fd       	sbrc	r19, 1
    24f6:	40 52       	subi	r20, 0x20	; 32
    24f8:	41 93       	st	Z+, r20
    24fa:	02 d0       	rcall	.+4      	; 0x2500 <__ultoa_invert+0x84>
    24fc:	a9 f7       	brne	.-22     	; 0x24e8 <__ultoa_invert+0x6c>
    24fe:	ea cf       	rjmp	.-44     	; 0x24d4 <__ultoa_invert+0x58>
    2500:	b4 e0       	ldi	r27, 0x04	; 4
    2502:	a6 95       	lsr	r26
    2504:	97 95       	ror	r25
    2506:	87 95       	ror	r24
    2508:	77 95       	ror	r23
    250a:	67 95       	ror	r22
    250c:	ba 95       	dec	r27
    250e:	c9 f7       	brne	.-14     	; 0x2502 <__ultoa_invert+0x86>
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	61 05       	cpc	r22, r1
    2514:	71 05       	cpc	r23, r1
    2516:	08 95       	ret
    2518:	9b 01       	movw	r18, r22
    251a:	ac 01       	movw	r20, r24
    251c:	0a 2e       	mov	r0, r26
    251e:	06 94       	lsr	r0
    2520:	57 95       	ror	r21
    2522:	47 95       	ror	r20
    2524:	37 95       	ror	r19
    2526:	27 95       	ror	r18
    2528:	ba 95       	dec	r27
    252a:	c9 f7       	brne	.-14     	; 0x251e <__ultoa_invert+0xa2>
    252c:	62 0f       	add	r22, r18
    252e:	73 1f       	adc	r23, r19
    2530:	84 1f       	adc	r24, r20
    2532:	95 1f       	adc	r25, r21
    2534:	a0 1d       	adc	r26, r0
    2536:	08 95       	ret

00002538 <__prologue_saves__>:
    2538:	2f 92       	push	r2
    253a:	3f 92       	push	r3
    253c:	4f 92       	push	r4
    253e:	5f 92       	push	r5
    2540:	6f 92       	push	r6
    2542:	7f 92       	push	r7
    2544:	8f 92       	push	r8
    2546:	9f 92       	push	r9
    2548:	af 92       	push	r10
    254a:	bf 92       	push	r11
    254c:	cf 92       	push	r12
    254e:	df 92       	push	r13
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	ca 1b       	sub	r28, r26
    2562:	db 0b       	sbc	r29, r27
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	09 94       	ijmp

00002570 <__epilogue_restores__>:
    2570:	2a 88       	ldd	r2, Y+18	; 0x12
    2572:	39 88       	ldd	r3, Y+17	; 0x11
    2574:	48 88       	ldd	r4, Y+16	; 0x10
    2576:	5f 84       	ldd	r5, Y+15	; 0x0f
    2578:	6e 84       	ldd	r6, Y+14	; 0x0e
    257a:	7d 84       	ldd	r7, Y+13	; 0x0d
    257c:	8c 84       	ldd	r8, Y+12	; 0x0c
    257e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2580:	aa 84       	ldd	r10, Y+10	; 0x0a
    2582:	b9 84       	ldd	r11, Y+9	; 0x09
    2584:	c8 84       	ldd	r12, Y+8	; 0x08
    2586:	df 80       	ldd	r13, Y+7	; 0x07
    2588:	ee 80       	ldd	r14, Y+6	; 0x06
    258a:	fd 80       	ldd	r15, Y+5	; 0x05
    258c:	0c 81       	ldd	r16, Y+4	; 0x04
    258e:	1b 81       	ldd	r17, Y+3	; 0x03
    2590:	aa 81       	ldd	r26, Y+2	; 0x02
    2592:	b9 81       	ldd	r27, Y+1	; 0x01
    2594:	ce 0f       	add	r28, r30
    2596:	d1 1d       	adc	r29, r1
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	ed 01       	movw	r28, r26
    25a4:	08 95       	ret

000025a6 <_exit>:
    25a6:	f8 94       	cli

000025a8 <__stop_program>:
    25a8:	ff cf       	rjmp	.-2      	; 0x25a8 <__stop_program>
