
Driver_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dc6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00002dc6  00002e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00006cf0  00000000  00000000  00002e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00004f28  00000000  00000000  00009b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000ea9c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000eab0  2**2
                  CONTENTS, READONLY
  6 .avr.prop     00000016  00000000  00000000  0000eaec  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  0000eb02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  0000f030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000f517  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  0000f531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 12 	call	0x24cc	; 0x24cc <main>
      8a:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EXI_Init>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <EXI_Init+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	6a 83       	std	Y+2, r22	; 0x02
      a0:	89 81       	ldd	r24, Y+1	; 0x01
      a2:	88 2f       	mov	r24, r24
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	81 30       	cpi	r24, 0x01	; 1
      a8:	91 05       	cpc	r25, r1
      aa:	01 f1       	breq	.+64     	; 0xec <EXI_Init+0x5a>
      ac:	82 30       	cpi	r24, 0x02	; 2
      ae:	91 05       	cpc	r25, r1
      b0:	b9 f1       	breq	.+110    	; 0x120 <EXI_Init+0x8e>
      b2:	89 2b       	or	r24, r25
      b4:	09 f0       	breq	.+2      	; 0xb8 <EXI_Init+0x26>
      b6:	4e c0       	rjmp	.+156    	; 0x154 <EXI_Init+0xc2>
      b8:	8f e5       	ldi	r24, 0x5F	; 95
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	fc 01       	movw	r30, r24
      be:	20 81       	ld	r18, Z
      c0:	8f e5       	ldi	r24, 0x5F	; 95
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	20 68       	ori	r18, 0x80	; 128
      c6:	fc 01       	movw	r30, r24
      c8:	20 83       	st	Z, r18
      ca:	8b e5       	ldi	r24, 0x5B	; 91
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	fc 01       	movw	r30, r24
      d0:	20 81       	ld	r18, Z
      d2:	8b e5       	ldi	r24, 0x5B	; 91
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	20 64       	ori	r18, 0x40	; 64
      d8:	fc 01       	movw	r30, r24
      da:	20 83       	st	Z, r18
      dc:	8a 81       	ldd	r24, Y+2	; 0x02
      de:	0e 94 b0 00 	call	0x160	; 0x160 <EX_ControlIN0>
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	8a e1       	ldi	r24, 0x1A	; 26
      e6:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
      ea:	34 c0       	rjmp	.+104    	; 0x154 <EXI_Init+0xc2>
      ec:	8f e5       	ldi	r24, 0x5F	; 95
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	fc 01       	movw	r30, r24
      f2:	20 81       	ld	r18, Z
      f4:	8f e5       	ldi	r24, 0x5F	; 95
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	20 68       	ori	r18, 0x80	; 128
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
      fe:	8b e5       	ldi	r24, 0x5B	; 91
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	fc 01       	movw	r30, r24
     104:	20 81       	ld	r18, Z
     106:	8b e5       	ldi	r24, 0x5B	; 91
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	20 68       	ori	r18, 0x80	; 128
     10c:	fc 01       	movw	r30, r24
     10e:	20 83       	st	Z, r18
     110:	8a 81       	ldd	r24, Y+2	; 0x02
     112:	0e 94 19 01 	call	0x232	; 0x232 <EX_ControlIN1>
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	8b e1       	ldi	r24, 0x1B	; 27
     11a:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
     11e:	1a c0       	rjmp	.+52     	; 0x154 <EXI_Init+0xc2>
     120:	8f e5       	ldi	r24, 0x5F	; 95
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	fc 01       	movw	r30, r24
     126:	20 81       	ld	r18, Z
     128:	8f e5       	ldi	r24, 0x5F	; 95
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	20 68       	ori	r18, 0x80	; 128
     12e:	fc 01       	movw	r30, r24
     130:	20 83       	st	Z, r18
     132:	8b e5       	ldi	r24, 0x5B	; 91
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	20 81       	ld	r18, Z
     13a:	8b e5       	ldi	r24, 0x5B	; 91
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	20 62       	ori	r18, 0x20	; 32
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	0e 94 82 01 	call	0x304	; 0x304 <EX_ControlIN2>
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	8b e0       	ldi	r24, 0x0B	; 11
     14e:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
     152:	00 00       	nop
     154:	00 00       	nop
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <EX_ControlIN0>:
	}
}

/* -------------------- Section : Static Functions -------------------- */
static void EX_ControlIN0(EX_Interrupt_Dir CopyDirIn)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	1f 92       	push	r1
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	89 83       	std	Y+1, r24	; 0x01
	switch (CopyDirIn) {
     16c:	89 81       	ldd	r24, Y+1	; 0x01
     16e:	88 2f       	mov	r24, r24
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	91 05       	cpc	r25, r1
     176:	f9 f0       	breq	.+62     	; 0x1b6 <EX_ControlIN0+0x56>
     178:	82 30       	cpi	r24, 0x02	; 2
     17a:	91 05       	cpc	r25, r1
     17c:	1c f4       	brge	.+6      	; 0x184 <EX_ControlIN0+0x24>
     17e:	89 2b       	or	r24, r25
     180:	39 f0       	breq	.+14     	; 0x190 <EX_ControlIN0+0x30>
		case RISING_AGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
			SET_BIT(MCUCR , MCUCR_ISC10);
			break;
	}
}
     182:	52 c0       	rjmp	.+164    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
}

/* -------------------- Section : Static Functions -------------------- */
static void EX_ControlIN0(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn) {
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	91 05       	cpc	r25, r1
     188:	49 f1       	breq	.+82     	; 0x1dc <EX_ControlIN0+0x7c>
     18a:	03 97       	sbiw	r24, 0x03	; 3
     18c:	d1 f1       	breq	.+116    	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
		case RISING_AGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
			SET_BIT(MCUCR , MCUCR_ISC10);
			break;
	}
}
     18e:	4c c0       	rjmp	.+152    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
/* -------------------- Section : Static Functions -------------------- */
static void EX_ControlIN0(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn) {
		case LOW_LEVEL:
			CLR_BIT(MCUCR , MCUCR_ISC11);
     190:	85 e5       	ldi	r24, 0x55	; 85
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	20 81       	ld	r18, Z
     198:	85 e5       	ldi	r24, 0x55	; 85
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	27 7f       	andi	r18, 0xF7	; 247
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
			CLR_BIT(MCUCR , MCUCR_ISC10);
     1a2:	85 e5       	ldi	r24, 0x55	; 85
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 81       	ld	r18, Z
     1aa:	85 e5       	ldi	r24, 0x55	; 85
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	2b 7f       	andi	r18, 0xFB	; 251
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 83       	st	Z, r18
			break;
     1b4:	39 c0       	rjmp	.+114    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		case ANY_LOGIC:
			CLR_BIT(MCUCR , MCUCR_ISC11);
     1b6:	85 e5       	ldi	r24, 0x55	; 85
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 81       	ld	r18, Z
     1be:	85 e5       	ldi	r24, 0x55	; 85
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	27 7f       	andi	r18, 0xF7	; 247
     1c4:	fc 01       	movw	r30, r24
     1c6:	20 83       	st	Z, r18
			SET_BIT(MCUCR , MCUCR_ISC10);
     1c8:	85 e5       	ldi	r24, 0x55	; 85
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 81       	ld	r18, Z
     1d0:	85 e5       	ldi	r24, 0x55	; 85
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	24 60       	ori	r18, 0x04	; 4
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
			break;
     1da:	26 c0       	rjmp	.+76     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		case FALLING_EDGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
     1dc:	85 e5       	ldi	r24, 0x55	; 85
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 81       	ld	r18, Z
     1e4:	85 e5       	ldi	r24, 0x55	; 85
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	28 60       	ori	r18, 0x08	; 8
     1ea:	fc 01       	movw	r30, r24
     1ec:	20 83       	st	Z, r18
			CLR_BIT(MCUCR , MCUCR_ISC10);
     1ee:	85 e5       	ldi	r24, 0x55	; 85
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 81       	ld	r18, Z
     1f6:	85 e5       	ldi	r24, 0x55	; 85
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	2b 7f       	andi	r18, 0xFB	; 251
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18
			break;
     200:	13 c0       	rjmp	.+38     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		case RISING_AGE:
			SET_BIT(MCUCR , MCUCR_ISC11);
     202:	85 e5       	ldi	r24, 0x55	; 85
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	fc 01       	movw	r30, r24
     208:	20 81       	ld	r18, Z
     20a:	85 e5       	ldi	r24, 0x55	; 85
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	28 60       	ori	r18, 0x08	; 8
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18
			SET_BIT(MCUCR , MCUCR_ISC10);
     214:	85 e5       	ldi	r24, 0x55	; 85
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	fc 01       	movw	r30, r24
     21a:	20 81       	ld	r18, Z
     21c:	85 e5       	ldi	r24, 0x55	; 85
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	24 60       	ori	r18, 0x04	; 4
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
			break;
     226:	00 00       	nop
	}
}
     228:	00 00       	nop
     22a:	0f 90       	pop	r0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <EX_ControlIN1>:

static void EX_ControlIN1(EX_Interrupt_Dir CopyDirIn)
{
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	1f 92       	push	r1
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	89 83       	std	Y+1, r24	; 0x01
	switch (CopyDirIn)
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	91 05       	cpc	r25, r1
     248:	f9 f0       	breq	.+62     	; 0x288 <EX_ControlIN1+0x56>
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	91 05       	cpc	r25, r1
     24e:	1c f4       	brge	.+6      	; 0x256 <EX_ControlIN1+0x24>
     250:	89 2b       	or	r24, r25
     252:	39 f0       	breq	.+14     	; 0x262 <EX_ControlIN1+0x30>
			case RISING_AGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
				SET_BIT(MCUCR , MCUCR_ISC00);
				break;
		}
}
     254:	52 c0       	rjmp	.+164    	; 0x2fa <EX_ControlIN1+0xc8>
	}
}

static void EX_ControlIN1(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn)
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	91 05       	cpc	r25, r1
     25a:	49 f1       	breq	.+82     	; 0x2ae <EX_ControlIN1+0x7c>
     25c:	03 97       	sbiw	r24, 0x03	; 3
     25e:	d1 f1       	breq	.+116    	; 0x2d4 <EX_ControlIN1+0xa2>
			case RISING_AGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
				SET_BIT(MCUCR , MCUCR_ISC00);
				break;
		}
}
     260:	4c c0       	rjmp	.+152    	; 0x2fa <EX_ControlIN1+0xc8>
static void EX_ControlIN1(EX_Interrupt_Dir CopyDirIn)
{
	switch (CopyDirIn)
	{
			case LOW_LEVEL:
				CLR_BIT(MCUCR , MCUCR_ISC01);
     262:	85 e5       	ldi	r24, 0x55	; 85
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	fc 01       	movw	r30, r24
     268:	20 81       	ld	r18, Z
     26a:	85 e5       	ldi	r24, 0x55	; 85
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	2d 7f       	andi	r18, 0xFD	; 253
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
				CLR_BIT(MCUCR , MCUCR_ISC00);
     274:	85 e5       	ldi	r24, 0x55	; 85
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	fc 01       	movw	r30, r24
     27a:	20 81       	ld	r18, Z
     27c:	85 e5       	ldi	r24, 0x55	; 85
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	2e 7f       	andi	r18, 0xFE	; 254
     282:	fc 01       	movw	r30, r24
     284:	20 83       	st	Z, r18
				break;
     286:	39 c0       	rjmp	.+114    	; 0x2fa <EX_ControlIN1+0xc8>
			case ANY_LOGIC:
				CLR_BIT(MCUCR , MCUCR_ISC01);
     288:	85 e5       	ldi	r24, 0x55	; 85
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	fc 01       	movw	r30, r24
     28e:	20 81       	ld	r18, Z
     290:	85 e5       	ldi	r24, 0x55	; 85
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	2d 7f       	andi	r18, 0xFD	; 253
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
				SET_BIT(MCUCR , MCUCR_ISC00);
     29a:	85 e5       	ldi	r24, 0x55	; 85
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	fc 01       	movw	r30, r24
     2a0:	20 81       	ld	r18, Z
     2a2:	85 e5       	ldi	r24, 0x55	; 85
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	21 60       	ori	r18, 0x01	; 1
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18
				break;
     2ac:	26 c0       	rjmp	.+76     	; 0x2fa <EX_ControlIN1+0xc8>
			case FALLING_EDGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
     2ae:	85 e5       	ldi	r24, 0x55	; 85
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 81       	ld	r18, Z
     2b6:	85 e5       	ldi	r24, 0x55	; 85
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	22 60       	ori	r18, 0x02	; 2
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
				CLR_BIT(MCUCR , MCUCR_ISC00);
     2c0:	85 e5       	ldi	r24, 0x55	; 85
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 81       	ld	r18, Z
     2c8:	85 e5       	ldi	r24, 0x55	; 85
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	2e 7f       	andi	r18, 0xFE	; 254
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
				break;
     2d2:	13 c0       	rjmp	.+38     	; 0x2fa <EX_ControlIN1+0xc8>
			case RISING_AGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
     2d4:	85 e5       	ldi	r24, 0x55	; 85
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	fc 01       	movw	r30, r24
     2da:	20 81       	ld	r18, Z
     2dc:	85 e5       	ldi	r24, 0x55	; 85
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	22 60       	ori	r18, 0x02	; 2
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18
				SET_BIT(MCUCR , MCUCR_ISC00);
     2e6:	85 e5       	ldi	r24, 0x55	; 85
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 81       	ld	r18, Z
     2ee:	85 e5       	ldi	r24, 0x55	; 85
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	21 60       	ori	r18, 0x01	; 1
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 83       	st	Z, r18
				break;
     2f8:	00 00       	nop
		}
}
     2fa:	00 00       	nop
     2fc:	0f 90       	pop	r0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <EX_ControlIN2>:

static void EX_ControlIN2(EX_Interrupt_Dir CopyDirIn)
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	89 83       	std	Y+1, r24	; 0x01
	switch (CopyDirIn)
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	91 05       	cpc	r25, r1
     31a:	19 f0       	breq	.+6      	; 0x322 <EX_ControlIN2+0x1e>
     31c:	03 97       	sbiw	r24, 0x03	; 3
     31e:	59 f0       	breq	.+22     	; 0x336 <EX_ControlIN2+0x32>
     320:	14 c0       	rjmp	.+40     	; 0x34a <EX_ControlIN2+0x46>
	{
			case FALLING_EDGE:
				CLR_BIT(MCUCSR , MCUCSR_ISC2);
     322:	84 e5       	ldi	r24, 0x54	; 84
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	fc 01       	movw	r30, r24
     328:	20 81       	ld	r18, Z
     32a:	84 e5       	ldi	r24, 0x54	; 84
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	2f 7b       	andi	r18, 0xBF	; 191
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
				break;
     334:	14 c0       	rjmp	.+40     	; 0x35e <EX_ControlIN2+0x5a>
			case RISING_AGE:
				SET_BIT(MCUCSR , MCUCSR_ISC2);
     336:	84 e5       	ldi	r24, 0x54	; 84
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	20 81       	ld	r18, Z
     33e:	84 e5       	ldi	r24, 0x54	; 84
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	20 64       	ori	r18, 0x40	; 64
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
				break;
     348:	0a c0       	rjmp	.+20     	; 0x35e <EX_ControlIN2+0x5a>
			default:
				CLR_BIT(MCUCSR , MCUCSR_ISC2);
     34a:	84 e5       	ldi	r24, 0x54	; 84
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	fc 01       	movw	r30, r24
     350:	20 81       	ld	r18, Z
     352:	84 e5       	ldi	r24, 0x54	; 84
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	2f 7b       	andi	r18, 0xBF	; 191
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
				break;
     35c:	00 00       	nop
		}
}
     35e:	00 00       	nop
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <Dio_setPinDir>:
volatile u8	*Arr_Port[4] = {PORTA_REG ,PORTB_REG ,PORTC_REG ,PORTD_REG };
volatile u8	*Arr_Pin[4]  = {PINA_REG ,PINB_REG ,PINC_REG ,PIND_REG };

/* -------------------- Section : Pins Functions Definaions -------------------- */
void Dio_setPinDir(u8 CopyPinNum,u8 CopyPinDir)
{
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <Dio_setPinDir+0x6>
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyPinDir)
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	91 f1       	breq	.+100    	; 0x3e4 <Dio_setPinDir+0x7c>
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	09 f0       	breq	.+2      	; 0x386 <Dio_setPinDir+0x1e>
		case Direction_Pin_Input:
				CLR_BIT(*Arr_DDr[CopyPinNum / 8 ],CopyPinNum % 8 );
			break;

		default :
			break;
     384:	5f c0       	rjmp	.+190    	; 0x444 <__DATA_REGION_LENGTH__+0x44>
void Dio_setPinDir(u8 CopyPinNum,u8 CopyPinDir)
{
	switch (CopyPinDir)
	{
		case Direction_Pin_Output:
				SET_BIT(*Arr_DDr[CopyPinNum / 8 ],CopyPinNum % 8 );
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	86 95       	lsr	r24
     38a:	86 95       	lsr	r24
     38c:	86 95       	lsr	r24
     38e:	88 2f       	mov	r24, r24
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	80 5a       	subi	r24, 0xA0	; 160
     398:	9f 4f       	sbci	r25, 0xFF	; 255
     39a:	fc 01       	movw	r30, r24
     39c:	80 81       	ld	r24, Z
     39e:	91 81       	ldd	r25, Z+1	; 0x01
     3a0:	fc 01       	movw	r30, r24
     3a2:	80 81       	ld	r24, Z
     3a4:	48 2f       	mov	r20, r24
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	9c 01       	movw	r18, r24
     3ae:	27 70       	andi	r18, 0x07	; 7
     3b0:	33 27       	eor	r19, r19
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <Dio_setPinDir+0x54>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	2a 95       	dec	r18
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <Dio_setPinDir+0x50>
     3c0:	24 2f       	mov	r18, r20
     3c2:	28 2b       	or	r18, r24
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	86 95       	lsr	r24
     3c8:	86 95       	lsr	r24
     3ca:	86 95       	lsr	r24
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	80 5a       	subi	r24, 0xA0	; 160
     3d6:	9f 4f       	sbci	r25, 0xFF	; 255
     3d8:	fc 01       	movw	r30, r24
     3da:	80 81       	ld	r24, Z
     3dc:	91 81       	ldd	r25, Z+1	; 0x01
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
			break;
     3e2:	30 c0       	rjmp	.+96     	; 0x444 <__DATA_REGION_LENGTH__+0x44>

		case Direction_Pin_Input:
				CLR_BIT(*Arr_DDr[CopyPinNum / 8 ],CopyPinNum % 8 );
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	86 95       	lsr	r24
     3e8:	86 95       	lsr	r24
     3ea:	86 95       	lsr	r24
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	80 5a       	subi	r24, 0xA0	; 160
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	48 2f       	mov	r20, r24
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	88 2f       	mov	r24, r24
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	9c 01       	movw	r18, r24
     40c:	27 70       	andi	r18, 0x07	; 7
     40e:	33 27       	eor	r19, r19
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	02 c0       	rjmp	.+4      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	2a 95       	dec	r18
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     41e:	80 95       	com	r24
     420:	24 2f       	mov	r18, r20
     422:	28 23       	and	r18, r24
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	86 95       	lsr	r24
     428:	86 95       	lsr	r24
     42a:	86 95       	lsr	r24
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	80 5a       	subi	r24, 0xA0	; 160
     436:	9f 4f       	sbci	r25, 0xFF	; 255
     438:	fc 01       	movw	r30, r24
     43a:	80 81       	ld	r24, Z
     43c:	91 81       	ldd	r25, Z+1	; 0x01
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
			break;
     442:	00 00       	nop

		default :
			break;
	}
}
     444:	00 00       	nop
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <Dio_setPinVal>:

void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <Dio_setPinVal+0x6>
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	6a 83       	std	Y+2, r22	; 0x02
	switch (CopyPinVal)
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	91 05       	cpc	r25, r1
     468:	39 f0       	breq	.+14     	; 0x478 <__stack+0x19>
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	91 05       	cpc	r25, r1
     46e:	09 f4       	brne	.+2      	; 0x472 <__stack+0x13>
     470:	62 c0       	rjmp	.+196    	; 0x536 <__stack+0xd7>
     472:	89 2b       	or	r24, r25
     474:	81 f1       	breq	.+96     	; 0x4d6 <__stack+0x77>
		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
			break;

		default :
			break;
     476:	8e c0       	rjmp	.+284    	; 0x594 <__stack+0x135>
void Dio_setPinVal(u8 CopyPinNum,u8 CopyPinVal)
{
	switch (CopyPinVal)
	{
		case Status_Pin_High:
				SET_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	86 95       	lsr	r24
     47c:	86 95       	lsr	r24
     47e:	86 95       	lsr	r24
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	88 59       	subi	r24, 0x98	; 152
     48a:	9f 4f       	sbci	r25, 0xFF	; 255
     48c:	fc 01       	movw	r30, r24
     48e:	80 81       	ld	r24, Z
     490:	91 81       	ldd	r25, Z+1	; 0x01
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	48 2f       	mov	r20, r24
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	88 2f       	mov	r24, r24
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	9c 01       	movw	r18, r24
     4a0:	27 70       	andi	r18, 0x07	; 7
     4a2:	33 27       	eor	r19, r19
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__stack+0x4f>
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	2a 95       	dec	r18
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__stack+0x4b>
     4b2:	24 2f       	mov	r18, r20
     4b4:	28 2b       	or	r18, r24
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	86 95       	lsr	r24
     4ba:	86 95       	lsr	r24
     4bc:	86 95       	lsr	r24
     4be:	88 2f       	mov	r24, r24
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	88 59       	subi	r24, 0x98	; 152
     4c8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	91 81       	ldd	r25, Z+1	; 0x01
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
			break;
     4d4:	5f c0       	rjmp	.+190    	; 0x594 <__stack+0x135>

		case Status_Pin_Low:
				CLR_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	86 95       	lsr	r24
     4da:	86 95       	lsr	r24
     4dc:	86 95       	lsr	r24
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	88 59       	subi	r24, 0x98	; 152
     4e8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ea:	fc 01       	movw	r30, r24
     4ec:	80 81       	ld	r24, Z
     4ee:	91 81       	ldd	r25, Z+1	; 0x01
     4f0:	fc 01       	movw	r30, r24
     4f2:	80 81       	ld	r24, Z
     4f4:	48 2f       	mov	r20, r24
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	88 2f       	mov	r24, r24
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9c 01       	movw	r18, r24
     4fe:	27 70       	andi	r18, 0x07	; 7
     500:	33 27       	eor	r19, r19
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <__stack+0xad>
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	2a 95       	dec	r18
     50e:	e2 f7       	brpl	.-8      	; 0x508 <__stack+0xa9>
     510:	80 95       	com	r24
     512:	24 2f       	mov	r18, r20
     514:	28 23       	and	r18, r24
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	86 95       	lsr	r24
     51a:	86 95       	lsr	r24
     51c:	86 95       	lsr	r24
     51e:	88 2f       	mov	r24, r24
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	88 59       	subi	r24, 0x98	; 152
     528:	9f 4f       	sbci	r25, 0xFF	; 255
     52a:	fc 01       	movw	r30, r24
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
			break;
     534:	2f c0       	rjmp	.+94     	; 0x594 <__stack+0x135>

		case Status_Pin_Toggle:
				TOGGLE_BIT(*Arr_Port[CopyPinNum / 8 ],CopyPinNum % 8 );
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	86 95       	lsr	r24
     53a:	86 95       	lsr	r24
     53c:	86 95       	lsr	r24
     53e:	88 2f       	mov	r24, r24
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	88 59       	subi	r24, 0x98	; 152
     548:	9f 4f       	sbci	r25, 0xFF	; 255
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	fc 01       	movw	r30, r24
     552:	80 81       	ld	r24, Z
     554:	48 2f       	mov	r20, r24
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	88 2f       	mov	r24, r24
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	9c 01       	movw	r18, r24
     55e:	27 70       	andi	r18, 0x07	; 7
     560:	33 27       	eor	r19, r19
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	02 c0       	rjmp	.+4      	; 0x56c <__stack+0x10d>
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	2a 95       	dec	r18
     56e:	e2 f7       	brpl	.-8      	; 0x568 <__stack+0x109>
     570:	24 2f       	mov	r18, r20
     572:	28 27       	eor	r18, r24
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	86 95       	lsr	r24
     578:	86 95       	lsr	r24
     57a:	86 95       	lsr	r24
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	88 59       	subi	r24, 0x98	; 152
     586:	9f 4f       	sbci	r25, 0xFF	; 255
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	91 81       	ldd	r25, Z+1	; 0x01
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
			break;
     592:	00 00       	nop

		default :
			break;
	}
}
     594:	00 00       	nop
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <Dio_getPinVal>:

Std_Return Dio_getPinVal(u8 CopyPinNum)
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <Dio_getPinVal+0x6>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     5ac:	19 82       	std	Y+1, r1	; 0x01
	Ret = GET_BIT(*Arr_Pin[CopyPinNum / 8 ],CopyPinNum % 8 );
     5ae:	8a 81       	ldd	r24, Y+2	; 0x02
     5b0:	86 95       	lsr	r24
     5b2:	86 95       	lsr	r24
     5b4:	86 95       	lsr	r24
     5b6:	88 2f       	mov	r24, r24
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	80 59       	subi	r24, 0x90	; 144
     5c0:	9f 4f       	sbci	r25, 0xFF	; 255
     5c2:	fc 01       	movw	r30, r24
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2a 81       	ldd	r18, Y+2	; 0x02
     5d2:	22 2f       	mov	r18, r18
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	27 70       	andi	r18, 0x07	; 7
     5d8:	33 27       	eor	r19, r19
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <Dio_getPinVal+0x40>
     5dc:	95 95       	asr	r25
     5de:	87 95       	ror	r24
     5e0:	2a 95       	dec	r18
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <Dio_getPinVal+0x3c>
     5e4:	81 70       	andi	r24, 0x01	; 1
     5e6:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <DIO_vidSetPinSDir>:

void DIO_vidSetPinSDir(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Dir)
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <DIO_vidSetPinSDir+0x6>
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <DIO_vidSetPinSDir+0x8>
     5fc:	1f 92       	push	r1
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	9b 83       	std	Y+3, r25	; 0x03
     604:	8a 83       	std	Y+2, r24	; 0x02
     606:	6c 83       	std	Y+4, r22	; 0x04
     608:	4d 83       	std	Y+5, r20	; 0x05
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     60a:	19 82       	std	Y+1, r1	; 0x01
     60c:	9b c0       	rjmp	.+310    	; 0x744 <DIO_vidSetPinSDir+0x150>
		switch (Copyu8Dir){
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	88 2f       	mov	r24, r24
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	00 97       	sbiw	r24, 0x00	; 0
     616:	21 f0       	breq	.+8      	; 0x620 <DIO_vidSetPinSDir+0x2c>
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	09 f4       	brne	.+2      	; 0x61e <DIO_vidSetPinSDir+0x2a>
     61c:	49 c0       	rjmp	.+146    	; 0x6b0 <DIO_vidSetPinSDir+0xbc>
     61e:	8f c0       	rjmp	.+286    	; 0x73e <DIO_vidSetPinSDir+0x14a>
		case Direction_Pin_Input  :CLR_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	2a 81       	ldd	r18, Y+2	; 0x02
     628:	3b 81       	ldd	r19, Y+3	; 0x03
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	fc 01       	movw	r30, r24
     630:	80 81       	ld	r24, Z
     632:	86 95       	lsr	r24
     634:	86 95       	lsr	r24
     636:	86 95       	lsr	r24
     638:	88 2f       	mov	r24, r24
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	80 5a       	subi	r24, 0xA0	; 160
     642:	9f 4f       	sbci	r25, 0xFF	; 255
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	fc 01       	movw	r30, r24
     64c:	80 81       	ld	r24, Z
     64e:	48 2f       	mov	r20, r24
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	2a 81       	ldd	r18, Y+2	; 0x02
     658:	3b 81       	ldd	r19, Y+3	; 0x03
     65a:	82 0f       	add	r24, r18
     65c:	93 1f       	adc	r25, r19
     65e:	fc 01       	movw	r30, r24
     660:	80 81       	ld	r24, Z
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	9c 01       	movw	r18, r24
     668:	27 70       	andi	r18, 0x07	; 7
     66a:	33 27       	eor	r19, r19
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_vidSetPinSDir+0x82>
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	2a 95       	dec	r18
     678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_vidSetPinSDir+0x7e>
     67a:	80 95       	com	r24
     67c:	48 23       	and	r20, r24
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	88 2f       	mov	r24, r24
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	2a 81       	ldd	r18, Y+2	; 0x02
     686:	3b 81       	ldd	r19, Y+3	; 0x03
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	86 95       	lsr	r24
     692:	86 95       	lsr	r24
     694:	86 95       	lsr	r24
     696:	88 2f       	mov	r24, r24
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	80 5a       	subi	r24, 0xA0	; 160
     6a0:	9f 4f       	sbci	r25, 0xFF	; 255
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	24 2f       	mov	r18, r20
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 83       	st	Z, r18
     6ae:	47 c0       	rjmp	.+142    	; 0x73e <DIO_vidSetPinSDir+0x14a>
		case Direction_Pin_Output :SET_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	2a 81       	ldd	r18, Y+2	; 0x02
     6b8:	3b 81       	ldd	r19, Y+3	; 0x03
     6ba:	82 0f       	add	r24, r18
     6bc:	93 1f       	adc	r25, r19
     6be:	fc 01       	movw	r30, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	86 95       	lsr	r24
     6c4:	86 95       	lsr	r24
     6c6:	86 95       	lsr	r24
     6c8:	88 2f       	mov	r24, r24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	80 5a       	subi	r24, 0xA0	; 160
     6d2:	9f 4f       	sbci	r25, 0xFF	; 255
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	48 2f       	mov	r20, r24
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	88 2f       	mov	r24, r24
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	2a 81       	ldd	r18, Y+2	; 0x02
     6e8:	3b 81       	ldd	r19, Y+3	; 0x03
     6ea:	82 0f       	add	r24, r18
     6ec:	93 1f       	adc	r25, r19
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	9c 01       	movw	r18, r24
     6f8:	27 70       	andi	r18, 0x07	; 7
     6fa:	33 27       	eor	r19, r19
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_vidSetPinSDir+0x112>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	2a 95       	dec	r18
     708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_vidSetPinSDir+0x10e>
     70a:	48 2b       	or	r20, r24
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	2a 81       	ldd	r18, Y+2	; 0x02
     714:	3b 81       	ldd	r19, Y+3	; 0x03
     716:	82 0f       	add	r24, r18
     718:	93 1f       	adc	r25, r19
     71a:	fc 01       	movw	r30, r24
     71c:	80 81       	ld	r24, Z
     71e:	86 95       	lsr	r24
     720:	86 95       	lsr	r24
     722:	86 95       	lsr	r24
     724:	88 2f       	mov	r24, r24
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	80 5a       	subi	r24, 0xA0	; 160
     72e:	9f 4f       	sbci	r25, 0xFF	; 255
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
     734:	91 81       	ldd	r25, Z+1	; 0x01
     736:	24 2f       	mov	r18, r20
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
     73c:	00 00       	nop
}

void DIO_vidSetPinSDir(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Dir)
{
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	99 81       	ldd	r25, Y+1	; 0x01
     746:	8c 81       	ldd	r24, Y+4	; 0x04
     748:	98 17       	cp	r25, r24
     74a:	08 f4       	brcc	.+2      	; 0x74e <DIO_vidSetPinSDir+0x15a>
     74c:	60 cf       	rjmp	.-320    	; 0x60e <DIO_vidSetPinSDir+0x1a>
		switch (Copyu8Dir){
		case Direction_Pin_Input  :CLR_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
		case Direction_Pin_Output :SET_BIT((*Arr_DDr[u8PinsNum[i] / 8]), (u8PinsNum[i] % 8));break;
		}
	}
}
     74e:	00 00       	nop
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <DIO_vidSetPinSVal>:
void DIO_vidSetPinSVal(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Val)
{
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	00 d0       	rcall	.+0      	; 0x766 <DIO_vidSetPinSVal+0x6>
     766:	00 d0       	rcall	.+0      	; 0x768 <DIO_vidSetPinSVal+0x8>
     768:	1f 92       	push	r1
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	9b 83       	std	Y+3, r25	; 0x03
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	6c 83       	std	Y+4, r22	; 0x04
     774:	4d 83       	std	Y+5, r20	; 0x05
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     776:	19 82       	std	Y+1, r1	; 0x01
     778:	9b c0       	rjmp	.+310    	; 0x8b0 <DIO_vidSetPinSVal+0x150>
		switch (Copyu8Val){
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	21 f0       	breq	.+8      	; 0x78c <DIO_vidSetPinSVal+0x2c>
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	09 f4       	brne	.+2      	; 0x78a <DIO_vidSetPinSVal+0x2a>
     788:	49 c0       	rjmp	.+146    	; 0x81c <DIO_vidSetPinSVal+0xbc>
     78a:	8f c0       	rjmp	.+286    	; 0x8aa <DIO_vidSetPinSVal+0x14a>
		case Status_Pin_Low  :CLR_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	2a 81       	ldd	r18, Y+2	; 0x02
     794:	3b 81       	ldd	r19, Y+3	; 0x03
     796:	82 0f       	add	r24, r18
     798:	93 1f       	adc	r25, r19
     79a:	fc 01       	movw	r30, r24
     79c:	80 81       	ld	r24, Z
     79e:	86 95       	lsr	r24
     7a0:	86 95       	lsr	r24
     7a2:	86 95       	lsr	r24
     7a4:	88 2f       	mov	r24, r24
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	88 59       	subi	r24, 0x98	; 152
     7ae:	9f 4f       	sbci	r25, 0xFF	; 255
     7b0:	fc 01       	movw	r30, r24
     7b2:	80 81       	ld	r24, Z
     7b4:	91 81       	ldd	r25, Z+1	; 0x01
     7b6:	fc 01       	movw	r30, r24
     7b8:	80 81       	ld	r24, Z
     7ba:	48 2f       	mov	r20, r24
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	2a 81       	ldd	r18, Y+2	; 0x02
     7c4:	3b 81       	ldd	r19, Y+3	; 0x03
     7c6:	82 0f       	add	r24, r18
     7c8:	93 1f       	adc	r25, r19
     7ca:	fc 01       	movw	r30, r24
     7cc:	80 81       	ld	r24, Z
     7ce:	88 2f       	mov	r24, r24
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9c 01       	movw	r18, r24
     7d4:	27 70       	andi	r18, 0x07	; 7
     7d6:	33 27       	eor	r19, r19
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_vidSetPinSVal+0x82>
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	2a 95       	dec	r18
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_vidSetPinSVal+0x7e>
     7e6:	80 95       	com	r24
     7e8:	48 23       	and	r20, r24
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	2a 81       	ldd	r18, Y+2	; 0x02
     7f2:	3b 81       	ldd	r19, Y+3	; 0x03
     7f4:	82 0f       	add	r24, r18
     7f6:	93 1f       	adc	r25, r19
     7f8:	fc 01       	movw	r30, r24
     7fa:	80 81       	ld	r24, Z
     7fc:	86 95       	lsr	r24
     7fe:	86 95       	lsr	r24
     800:	86 95       	lsr	r24
     802:	88 2f       	mov	r24, r24
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	88 59       	subi	r24, 0x98	; 152
     80c:	9f 4f       	sbci	r25, 0xFF	; 255
     80e:	fc 01       	movw	r30, r24
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	24 2f       	mov	r18, r20
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
     81a:	47 c0       	rjmp	.+142    	; 0x8aa <DIO_vidSetPinSVal+0x14a>
		case Status_Pin_High :SET_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	88 2f       	mov	r24, r24
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	2a 81       	ldd	r18, Y+2	; 0x02
     824:	3b 81       	ldd	r19, Y+3	; 0x03
     826:	82 0f       	add	r24, r18
     828:	93 1f       	adc	r25, r19
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	86 95       	lsr	r24
     830:	86 95       	lsr	r24
     832:	86 95       	lsr	r24
     834:	88 2f       	mov	r24, r24
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	88 59       	subi	r24, 0x98	; 152
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	91 81       	ldd	r25, Z+1	; 0x01
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	48 2f       	mov	r20, r24
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	2a 81       	ldd	r18, Y+2	; 0x02
     854:	3b 81       	ldd	r19, Y+3	; 0x03
     856:	82 0f       	add	r24, r18
     858:	93 1f       	adc	r25, r19
     85a:	fc 01       	movw	r30, r24
     85c:	80 81       	ld	r24, Z
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9c 01       	movw	r18, r24
     864:	27 70       	andi	r18, 0x07	; 7
     866:	33 27       	eor	r19, r19
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	02 c0       	rjmp	.+4      	; 0x872 <DIO_vidSetPinSVal+0x112>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	2a 95       	dec	r18
     874:	e2 f7       	brpl	.-8      	; 0x86e <DIO_vidSetPinSVal+0x10e>
     876:	48 2b       	or	r20, r24
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	2a 81       	ldd	r18, Y+2	; 0x02
     880:	3b 81       	ldd	r19, Y+3	; 0x03
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	fc 01       	movw	r30, r24
     888:	80 81       	ld	r24, Z
     88a:	86 95       	lsr	r24
     88c:	86 95       	lsr	r24
     88e:	86 95       	lsr	r24
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	88 59       	subi	r24, 0x98	; 152
     89a:	9f 4f       	sbci	r25, 0xFF	; 255
     89c:	fc 01       	movw	r30, r24
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	24 2f       	mov	r18, r20
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
     8a8:	00 00       	nop
	}
}
void DIO_vidSetPinSVal(u8 * u8PinsNum,u8 Copyu8Size,u8 Copyu8Val)
{
	u8 i;
	for(i=0;i<Copyu8Size;i++){
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	99 81       	ldd	r25, Y+1	; 0x01
     8b2:	8c 81       	ldd	r24, Y+4	; 0x04
     8b4:	98 17       	cp	r25, r24
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <DIO_vidSetPinSVal+0x15a>
     8b8:	60 cf       	rjmp	.-320    	; 0x77a <DIO_vidSetPinSVal+0x1a>
		switch (Copyu8Val){
		case Status_Pin_Low  :CLR_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
		case Status_Pin_High :SET_BIT(*Arr_Port[u8PinsNum[i] / 8], u8PinsNum[i] % 8);break;
		}
	}
}
     8ba:	00 00       	nop
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <Dio_setPortDir>:


/* -------------------- Section : Ports Functions Definaions -------------------- */
void Dio_setPortDir(u8 CopyPortNum,u8 CopyPinDir)
{
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <Dio_setPortDir+0x6>
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_DDr[CopyPortNum] = CopyPinDir;
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	80 5a       	subi	r24, 0xA0	; 160
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	2a 81       	ldd	r18, Y+2	; 0x02
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
}
     8f4:	00 00       	nop
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <Dio_setPortVal>:

void Dio_setPortVal(u8 CopyPortNum,u8 CopyPinVal)
{
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	00 d0       	rcall	.+0      	; 0x906 <Dio_setPortVal+0x6>
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	89 83       	std	Y+1, r24	; 0x01
     90c:	6a 83       	std	Y+2, r22	; 0x02
	*Arr_Port[CopyPortNum] = CopyPinVal;
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	88 2f       	mov	r24, r24
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	88 59       	subi	r24, 0x98	; 152
     91a:	9f 4f       	sbci	r25, 0xFF	; 255
     91c:	fc 01       	movw	r30, r24
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	2a 81       	ldd	r18, Y+2	; 0x02
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
}
     928:	00 00       	nop
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <Dio_getPortVal>:
Std_Return Dio_getPortVal(u8 CopyPortNum)
{
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	00 d0       	rcall	.+0      	; 0x93a <Dio_getPortVal+0x6>
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
     940:	19 82       	std	Y+1, r1	; 0x01
	Ret = *Arr_Pin[CopyPortNum];
     942:	8a 81       	ldd	r24, Y+2	; 0x02
     944:	88 2f       	mov	r24, r24
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	80 59       	subi	r24, 0x90	; 144
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	91 81       	ldd	r25, Z+1	; 0x01
     956:	fc 01       	movw	r30, r24
     958:	80 81       	ld	r24, Z
     95a:	89 83       	std	Y+1, r24	; 0x01
	return Ret;
     95c:	89 81       	ldd	r24, Y+1	; 0x01
}
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <ADC_INIT>:
/* -------------------- Section : Includes -------------------- */
#include "ADC_Init.h"

/* -------------------- Section : Functions -------------------- */
void ADC_INIT(void)
{
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
#if	ADC_Stat == ADC_AREF
	CLR_BIT(ADMUX_Reg , ADMUX_REFS0);
	CLR_BIT(ADMUX_Reg , ADMUX_REFS1);
#elif ADC_Stat == ADC_AVCC
	SET_BIT(ADMUX_Reg , ADMUX_REFS0);
     970:	87 e2       	ldi	r24, 0x27	; 39
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	fc 01       	movw	r30, r24
     976:	20 81       	ld	r18, Z
     978:	87 e2       	ldi	r24, 0x27	; 39
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	20 64       	ori	r18, 0x40	; 64
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
	CLR_BIT(ADMUX_Reg , ADMUX_REFS1);
     982:	87 e2       	ldi	r24, 0x27	; 39
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	fc 01       	movw	r30, r24
     988:	20 81       	ld	r18, Z
     98a:	87 e2       	ldi	r24, 0x27	; 39
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	2f 77       	andi	r18, 0x7F	; 127
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
#elif ADC_Stat == ADC_Inter
	SET_BIT(ADMUX_Reg , ADMUX_REFS0);
	SET_BIT(ADMUX_Reg , ADMUX_REFS1);
#endif
	SET_BIT(ADCSRA_Reg,ADCSRA_ADEN);
     994:	86 e2       	ldi	r24, 0x26	; 38
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	fc 01       	movw	r30, r24
     99a:	20 81       	ld	r18, Z
     99c:	86 e2       	ldi	r24, 0x26	; 38
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	20 68       	ori	r18, 0x80	; 128
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
	ADCSRA_Reg |= ADC_PRESCALER;
     9a6:	86 e2       	ldi	r24, 0x26	; 38
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 81       	ld	r18, Z
     9ae:	86 e2       	ldi	r24, 0x26	; 38
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	26 60       	ori	r18, 0x06	; 6
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
}
     9b8:	00 00       	nop
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <ADC_readDigitalSignal>:
u8 ADC_readDigitalSignal(ADC_CHANNEL CopyChanal)
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	1f 92       	push	r1
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	89 83       	std	Y+1, r24	; 0x01

	return 0;
     9cc:	80 e0       	ldi	r24, 0x00	; 0
}
     9ce:	0f 90       	pop	r0
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <ADC_Enable>:

void ADC_Enable(void)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA_Reg,ADCSRA_ADEN);
     9de:	86 e2       	ldi	r24, 0x26	; 38
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	fc 01       	movw	r30, r24
     9e4:	20 81       	ld	r18, Z
     9e6:	86 e2       	ldi	r24, 0x26	; 38
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	20 68       	ori	r18, 0x80	; 128
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
}
     9f0:	00 00       	nop
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <ADC_Disable>:
void ADC_Disable(void)
{
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Reg,ADCSRA_ADEN);
     a00:	86 e2       	ldi	r24, 0x26	; 38
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	fc 01       	movw	r30, r24
     a06:	20 81       	ld	r18, Z
     a08:	86 e2       	ldi	r24, 0x26	; 38
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	2f 77       	andi	r18, 0x7F	; 127
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
}
     a12:	00 00       	nop
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <ADC_EnableINT>:


void ADC_EnableINT(void)
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_Reg , GIE);
     a22:	8f e5       	ldi	r24, 0x5F	; 95
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	fc 01       	movw	r30, r24
     a28:	20 81       	ld	r18, Z
     a2a:	8f e5       	ldi	r24, 0x5F	; 95
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	20 68       	ori	r18, 0x80	; 128
     a30:	fc 01       	movw	r30, r24
     a32:	20 83       	st	Z, r18
	SET_BIT(ADCSRA_Reg, ADCSRA_ADIE);
     a34:	86 e2       	ldi	r24, 0x26	; 38
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	fc 01       	movw	r30, r24
     a3a:	20 81       	ld	r18, Z
     a3c:	86 e2       	ldi	r24, 0x26	; 38
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	28 60       	ori	r18, 0x08	; 8
     a42:	fc 01       	movw	r30, r24
     a44:	20 83       	st	Z, r18
}
     a46:	00 00       	nop
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <ADC_DisableINT>:
void ADC_DisableINT(void)
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Reg, ADCSRA_ADIE);
     a56:	86 e2       	ldi	r24, 0x26	; 38
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 81       	ld	r18, Z
     a5e:	86 e2       	ldi	r24, 0x26	; 38
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	27 7f       	andi	r18, 0xF7	; 247
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
}
     a68:	00 00       	nop
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <ADC_CLRflag>:

void ADC_CLRflag(void)
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Reg , ADCSRA_ADIF);
     a78:	86 e2       	ldi	r24, 0x26	; 38
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	fc 01       	movw	r30, r24
     a7e:	20 81       	ld	r18, Z
     a80:	86 e2       	ldi	r24, 0x26	; 38
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	2f 7e       	andi	r18, 0xEF	; 239
     a86:	fc 01       	movw	r30, r24
     a88:	20 83       	st	Z, r18
}
     a8a:	00 00       	nop
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <UltraSonic_Init>:
/********** SECTION : Includes **********/
#include "UltraSonic_Init.h"

/********** SECTION : Functions Definitions **********/
void UltraSonic_Init(UltraSonic CopyUltraSonic)
{
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	00 d0       	rcall	.+0      	; 0xa98 <UltraSonic_Init+0x6>
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	9a 83       	std	Y+2, r25	; 0x02
     a9e:	89 83       	std	Y+1, r24	; 0x01
	Dio_setPinDir(CopyUltraSonic.Triger,Direction_Pin_Output);
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(CopyUltraSonic.Echo,Direction_Pin_Input);
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
}
     ab0:	00 00       	nop
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <UltraSonic_ReadDistance>:
void UltraSonic_ReadDistance(UltraSonic CopyUltraSonic , u8 CopyDistance)
{
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	6f 97       	sbiw	r28, 0x1f	; 31
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	9e 8f       	std	Y+30, r25	; 0x1e
     ad2:	8d 8f       	std	Y+29, r24	; 0x1d
     ad4:	6f 8f       	std	Y+31, r22	; 0x1f
	Dio_setPinVal(CopyUltraSonic.Triger,Status_Pin_Low);
     ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e4       	ldi	r27, 0x40	; 64
     ae6:	8f 87       	std	Y+15, r24	; 0x0f
     ae8:	98 8b       	std	Y+16, r25	; 0x10
     aea:	a9 8b       	std	Y+17, r26	; 0x11
     aec:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	4a e7       	ldi	r20, 0x7A	; 122
     af4:	53 e4       	ldi	r21, 0x43	; 67
     af6:	6f 85       	ldd	r22, Y+15	; 0x0f
     af8:	78 89       	ldd	r23, Y+16	; 0x10
     afa:	89 89       	ldd	r24, Y+17	; 0x11
     afc:	9a 89       	ldd	r25, Y+18	; 0x12
     afe:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	8b 8b       	std	Y+19, r24	; 0x13
     b08:	9c 8b       	std	Y+20, r25	; 0x14
     b0a:	ad 8b       	std	Y+21, r26	; 0x15
     b0c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 e8       	ldi	r20, 0x80	; 128
     b14:	5f e3       	ldi	r21, 0x3F	; 63
     b16:	6b 89       	ldd	r22, Y+19	; 0x13
     b18:	7c 89       	ldd	r23, Y+20	; 0x14
     b1a:	8d 89       	ldd	r24, Y+21	; 0x15
     b1c:	9e 89       	ldd	r25, Y+22	; 0x16
     b1e:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
     b22:	88 23       	and	r24, r24
     b24:	2c f4       	brge	.+10     	; 0xb30 <UltraSonic_ReadDistance+0x74>
		__ticks = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	98 8f       	std	Y+24, r25	; 0x18
     b2c:	8f 8b       	std	Y+23, r24	; 0x17
     b2e:	3f c0       	rjmp	.+126    	; 0xbae <UltraSonic_ReadDistance+0xf2>
	else if (__tmp > 65535)
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	4f e7       	ldi	r20, 0x7F	; 127
     b36:	57 e4       	ldi	r21, 0x47	; 71
     b38:	6b 89       	ldd	r22, Y+19	; 0x13
     b3a:	7c 89       	ldd	r23, Y+20	; 0x14
     b3c:	8d 89       	ldd	r24, Y+21	; 0x15
     b3e:	9e 89       	ldd	r25, Y+22	; 0x16
     b40:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
     b44:	18 16       	cp	r1, r24
     b46:	4c f5       	brge	.+82     	; 0xb9a <UltraSonic_ReadDistance+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e2       	ldi	r20, 0x20	; 32
     b4e:	51 e4       	ldi	r21, 0x41	; 65
     b50:	6f 85       	ldd	r22, Y+15	; 0x0f
     b52:	78 89       	ldd	r23, Y+16	; 0x10
     b54:	89 89       	ldd	r24, Y+17	; 0x11
     b56:	9a 89       	ldd	r25, Y+18	; 0x12
     b58:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	bc 01       	movw	r22, r24
     b62:	cd 01       	movw	r24, r26
     b64:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	98 8f       	std	Y+24, r25	; 0x18
     b6e:	8f 8b       	std	Y+23, r24	; 0x17
     b70:	0f c0       	rjmp	.+30     	; 0xb90 <UltraSonic_ReadDistance+0xd4>
     b72:	89 e1       	ldi	r24, 0x19	; 25
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	9a 8f       	std	Y+26, r25	; 0x1a
     b78:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b7a:	89 8d       	ldd	r24, Y+25	; 0x19
     b7c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <UltraSonic_ReadDistance+0xc2>
     b82:	9a 8f       	std	Y+26, r25	; 0x1a
     b84:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b86:	8f 89       	ldd	r24, Y+23	; 0x17
     b88:	98 8d       	ldd	r25, Y+24	; 0x18
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	98 8f       	std	Y+24, r25	; 0x18
     b8e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b90:	8f 89       	ldd	r24, Y+23	; 0x17
     b92:	98 8d       	ldd	r25, Y+24	; 0x18
     b94:	89 2b       	or	r24, r25
     b96:	69 f7       	brne	.-38     	; 0xb72 <UltraSonic_ReadDistance+0xb6>
     b98:	14 c0       	rjmp	.+40     	; 0xbc2 <UltraSonic_ReadDistance+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b9a:	6b 89       	ldd	r22, Y+19	; 0x13
     b9c:	7c 89       	ldd	r23, Y+20	; 0x14
     b9e:	8d 89       	ldd	r24, Y+21	; 0x15
     ba0:	9e 89       	ldd	r25, Y+22	; 0x16
     ba2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	98 8f       	std	Y+24, r25	; 0x18
     bac:	8f 8b       	std	Y+23, r24	; 0x17
     bae:	8f 89       	ldd	r24, Y+23	; 0x17
     bb0:	98 8d       	ldd	r25, Y+24	; 0x18
     bb2:	9c 8f       	std	Y+28, r25	; 0x1c
     bb4:	8b 8f       	std	Y+27, r24	; 0x1b
     bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <UltraSonic_ReadDistance+0xfe>
     bbe:	9c 8f       	std	Y+28, r25	; 0x1c
     bc0:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(2);
	Dio_setPinVal(CopyUltraSonic.Triger,Status_Pin_High);
     bc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	a0 e2       	ldi	r26, 0x20	; 32
     bd0:	b1 e4       	ldi	r27, 0x41	; 65
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	9a 83       	std	Y+2, r25	; 0x02
     bd6:	ab 83       	std	Y+3, r26	; 0x03
     bd8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	4a e7       	ldi	r20, 0x7A	; 122
     be0:	53 e4       	ldi	r21, 0x43	; 67
     be2:	69 81       	ldd	r22, Y+1	; 0x01
     be4:	7a 81       	ldd	r23, Y+2	; 0x02
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	8d 83       	std	Y+5, r24	; 0x05
     bf4:	9e 83       	std	Y+6, r25	; 0x06
     bf6:	af 83       	std	Y+7, r26	; 0x07
     bf8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e8       	ldi	r20, 0x80	; 128
     c00:	5f e3       	ldi	r21, 0x3F	; 63
     c02:	6d 81       	ldd	r22, Y+5	; 0x05
     c04:	7e 81       	ldd	r23, Y+6	; 0x06
     c06:	8f 81       	ldd	r24, Y+7	; 0x07
     c08:	98 85       	ldd	r25, Y+8	; 0x08
     c0a:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
     c0e:	88 23       	and	r24, r24
     c10:	2c f4       	brge	.+10     	; 0xc1c <UltraSonic_ReadDistance+0x160>
		__ticks = 1;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9a 87       	std	Y+10, r25	; 0x0a
     c18:	89 87       	std	Y+9, r24	; 0x09
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <UltraSonic_ReadDistance+0x1de>
	else if (__tmp > 65535)
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	3f ef       	ldi	r19, 0xFF	; 255
     c20:	4f e7       	ldi	r20, 0x7F	; 127
     c22:	57 e4       	ldi	r21, 0x47	; 71
     c24:	6d 81       	ldd	r22, Y+5	; 0x05
     c26:	7e 81       	ldd	r23, Y+6	; 0x06
     c28:	8f 81       	ldd	r24, Y+7	; 0x07
     c2a:	98 85       	ldd	r25, Y+8	; 0x08
     c2c:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
     c30:	18 16       	cp	r1, r24
     c32:	4c f5       	brge	.+82     	; 0xc86 <UltraSonic_ReadDistance+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e2       	ldi	r20, 0x20	; 32
     c3a:	51 e4       	ldi	r21, 0x41	; 65
     c3c:	69 81       	ldd	r22, Y+1	; 0x01
     c3e:	7a 81       	ldd	r23, Y+2	; 0x02
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	bc 01       	movw	r22, r24
     c4e:	cd 01       	movw	r24, r26
     c50:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	9a 87       	std	Y+10, r25	; 0x0a
     c5a:	89 87       	std	Y+9, r24	; 0x09
     c5c:	0f c0       	rjmp	.+30     	; 0xc7c <UltraSonic_ReadDistance+0x1c0>
     c5e:	89 e1       	ldi	r24, 0x19	; 25
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9c 87       	std	Y+12, r25	; 0x0c
     c64:	8b 87       	std	Y+11, r24	; 0x0b
     c66:	8b 85       	ldd	r24, Y+11	; 0x0b
     c68:	9c 85       	ldd	r25, Y+12	; 0x0c
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <UltraSonic_ReadDistance+0x1ae>
     c6e:	9c 87       	std	Y+12, r25	; 0x0c
     c70:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	9a 87       	std	Y+10, r25	; 0x0a
     c7a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	89 2b       	or	r24, r25
     c82:	69 f7       	brne	.-38     	; 0xc5e <UltraSonic_ReadDistance+0x1a2>
     c84:	14 c0       	rjmp	.+40     	; 0xcae <UltraSonic_ReadDistance+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c86:	6d 81       	ldd	r22, Y+5	; 0x05
     c88:	7e 81       	ldd	r23, Y+6	; 0x06
     c8a:	8f 81       	ldd	r24, Y+7	; 0x07
     c8c:	98 85       	ldd	r25, Y+8	; 0x08
     c8e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	9a 87       	std	Y+10, r25	; 0x0a
     c98:	89 87       	std	Y+9, r24	; 0x09
     c9a:	89 85       	ldd	r24, Y+9	; 0x09
     c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c9e:	9e 87       	std	Y+14, r25	; 0x0e
     ca0:	8d 87       	std	Y+13, r24	; 0x0d
     ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <UltraSonic_ReadDistance+0x1ea>
     caa:	9e 87       	std	Y+14, r25	; 0x0e
     cac:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(10);
	Dio_setPinVal(CopyUltraSonic.Triger,Status_Pin_Low);
     cae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>

//	Dio_setPinVal(CopyUltraSonic.Echo, Status_Pin_High);


}
     cb6:	00 00       	nop
     cb8:	6f 96       	adiw	r28, 0x1f	; 31
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <LCD_4_INIT>:

/********** SECTION : Functions Definitions 4 Bit Mode **********/
#elif _LCD_Mood == _LCD_4_Bit_Mood

void LCD_4_INIT(LCD_4_MODE CopyLCD)
{
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	c3 54       	subi	r28, 0x43	; 67
     cd4:	d1 09       	sbc	r29, r1
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	4e af       	std	Y+62, r20	; 0x3e
     ce2:	5f af       	std	Y+63, r21	; 0x3f
     ce4:	9e 01       	movw	r18, r28
     ce6:	20 5c       	subi	r18, 0xC0	; 192
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	f9 01       	movw	r30, r18
     cec:	60 83       	st	Z, r22
     cee:	9e 01       	movw	r18, r28
     cf0:	2f 5b       	subi	r18, 0xBF	; 191
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	f9 01       	movw	r30, r18
     cf6:	70 83       	st	Z, r23
     cf8:	9e 01       	movw	r18, r28
     cfa:	2e 5b       	subi	r18, 0xBE	; 190
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
     cfe:	f9 01       	movw	r30, r18
     d00:	80 83       	st	Z, r24
     d02:	9e 01       	movw	r18, r28
     d04:	2d 5b       	subi	r18, 0xBD	; 189
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	f9 01       	movw	r30, r18
     d0a:	90 83       	st	Z, r25
	u8 Counter = Initial_Counter;
     d0c:	19 82       	std	Y+1, r1	; 0x01

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
     d0e:	8f ad       	ldd	r24, Y+63	; 0x3f
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);
     d16:	8e ad       	ldd	r24, Y+62	; 0x3e
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     d1e:	19 82       	std	Y+1, r1	; 0x01
     d20:	10 c0       	rjmp	.+32     	; 0xd42 <LCD_4_INIT+0x78>
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9e 01       	movw	r18, r28
     d2a:	20 5c       	subi	r18, 0xC0	; 192
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	82 0f       	add	r24, r18
     d30:	93 1f       	adc	r25, r19
     d32:	fc 01       	movw	r30, r24
     d34:	80 81       	ld	r24, Z
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	u8 Counter = Initial_Counter;

	Dio_setPinDir(CopyLCD.E, Direction_Pin_Output);
	Dio_setPinDir(CopyLCD.RS, Direction_Pin_Output);

	for (Counter = Initial_Counter;  Counter < 4; Counter++)
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	84 30       	cpi	r24, 0x04	; 4
     d46:	68 f3       	brcs	.-38     	; 0xd22 <LCD_4_INIT+0x58>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 ea       	ldi	r26, 0xA0	; 160
     d4e:	b1 e4       	ldi	r27, 0x41	; 65
     d50:	88 ab       	std	Y+48, r24	; 0x30
     d52:	99 ab       	std	Y+49, r25	; 0x31
     d54:	aa ab       	std	Y+50, r26	; 0x32
     d56:	bb ab       	std	Y+51, r27	; 0x33

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a e7       	ldi	r20, 0x7A	; 122
     d5e:	53 e4       	ldi	r21, 0x43	; 67
     d60:	68 a9       	ldd	r22, Y+48	; 0x30
     d62:	79 a9       	ldd	r23, Y+49	; 0x31
     d64:	8a a9       	ldd	r24, Y+50	; 0x32
     d66:	9b a9       	ldd	r25, Y+51	; 0x33
     d68:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	8c ab       	std	Y+52, r24	; 0x34
     d72:	9d ab       	std	Y+53, r25	; 0x35
     d74:	ae ab       	std	Y+54, r26	; 0x36
     d76:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	6c a9       	ldd	r22, Y+52	; 0x34
     d82:	7d a9       	ldd	r23, Y+53	; 0x35
     d84:	8e a9       	ldd	r24, Y+54	; 0x36
     d86:	9f a9       	ldd	r25, Y+55	; 0x37
     d88:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	2c f4       	brge	.+10     	; 0xd9a <LCD_4_INIT+0xd0>
		__ticks = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	99 af       	std	Y+57, r25	; 0x39
     d96:	88 af       	std	Y+56, r24	; 0x38
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <LCD_4_INIT+0x14e>
	else if (__tmp > 65535)
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	57 e4       	ldi	r21, 0x47	; 71
     da2:	6c a9       	ldd	r22, Y+52	; 0x34
     da4:	7d a9       	ldd	r23, Y+53	; 0x35
     da6:	8e a9       	ldd	r24, Y+54	; 0x36
     da8:	9f a9       	ldd	r25, Y+55	; 0x37
     daa:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
     dae:	18 16       	cp	r1, r24
     db0:	4c f5       	brge	.+82     	; 0xe04 <LCD_4_INIT+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	68 a9       	ldd	r22, Y+48	; 0x30
     dbc:	79 a9       	ldd	r23, Y+49	; 0x31
     dbe:	8a a9       	ldd	r24, Y+50	; 0x32
     dc0:	9b a9       	ldd	r25, Y+51	; 0x33
     dc2:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	99 af       	std	Y+57, r25	; 0x39
     dd8:	88 af       	std	Y+56, r24	; 0x38
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <LCD_4_INIT+0x130>
     ddc:	89 e1       	ldi	r24, 0x19	; 25
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9b af       	std	Y+59, r25	; 0x3b
     de2:	8a af       	std	Y+58, r24	; 0x3a
     de4:	8a ad       	ldd	r24, Y+58	; 0x3a
     de6:	9b ad       	ldd	r25, Y+59	; 0x3b
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <LCD_4_INIT+0x11e>
     dec:	9b af       	std	Y+59, r25	; 0x3b
     dee:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	88 ad       	ldd	r24, Y+56	; 0x38
     df2:	99 ad       	ldd	r25, Y+57	; 0x39
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	99 af       	std	Y+57, r25	; 0x39
     df8:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	88 ad       	ldd	r24, Y+56	; 0x38
     dfc:	99 ad       	ldd	r25, Y+57	; 0x39
     dfe:	89 2b       	or	r24, r25
     e00:	69 f7       	brne	.-38     	; 0xddc <LCD_4_INIT+0x112>
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <LCD_4_INIT+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	6c a9       	ldd	r22, Y+52	; 0x34
     e06:	7d a9       	ldd	r23, Y+53	; 0x35
     e08:	8e a9       	ldd	r24, Y+54	; 0x36
     e0a:	9f a9       	ldd	r25, Y+55	; 0x37
     e0c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	99 af       	std	Y+57, r25	; 0x39
     e16:	88 af       	std	Y+56, r24	; 0x38
     e18:	88 ad       	ldd	r24, Y+56	; 0x38
     e1a:	99 ad       	ldd	r25, Y+57	; 0x39
     e1c:	9d af       	std	Y+61, r25	; 0x3d
     e1e:	8c af       	std	Y+60, r24	; 0x3c
     e20:	8c ad       	ldd	r24, Y+60	; 0x3c
     e22:	9d ad       	ldd	r25, Y+61	; 0x3d
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <LCD_4_INIT+0x15a>
     e28:	9d af       	std	Y+61, r25	; 0x3d
     e2a:	8c af       	std	Y+60, r24	; 0x3c
	{
		Dio_setPinDir(CopyLCD.Port[Counter], Direction_Pin_Output);
	}
	_delay_ms(20);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     e2c:	28 e3       	ldi	r18, 0x38	; 56
     e2e:	4e ad       	ldd	r20, Y+62	; 0x3e
     e30:	5f ad       	ldd	r21, Y+63	; 0x3f
     e32:	ce 01       	movw	r24, r28
     e34:	80 5c       	subi	r24, 0xC0	; 192
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	fc 01       	movw	r30, r24
     e3a:	60 81       	ld	r22, Z
     e3c:	ce 01       	movw	r24, r28
     e3e:	8f 5b       	subi	r24, 0xBF	; 191
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	fc 01       	movw	r30, r24
     e44:	70 81       	ld	r23, Z
     e46:	ce 01       	movw	r24, r28
     e48:	8e 5b       	subi	r24, 0xBE	; 190
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	fc 01       	movw	r30, r24
     e4e:	80 81       	ld	r24, Z
     e50:	fe 01       	movw	r30, r28
     e52:	ed 5b       	subi	r30, 0xBD	; 189
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	90 81       	ld	r25, Z
     e58:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	a0 ea       	ldi	r26, 0xA0	; 160
     e62:	b0 e4       	ldi	r27, 0x40	; 64
     e64:	8a a3       	std	Y+34, r24	; 0x22
     e66:	9b a3       	std	Y+35, r25	; 0x23
     e68:	ac a3       	std	Y+36, r26	; 0x24
     e6a:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	4a e7       	ldi	r20, 0x7A	; 122
     e72:	53 e4       	ldi	r21, 0x43	; 67
     e74:	6a a1       	ldd	r22, Y+34	; 0x22
     e76:	7b a1       	ldd	r23, Y+35	; 0x23
     e78:	8c a1       	ldd	r24, Y+36	; 0x24
     e7a:	9d a1       	ldd	r25, Y+37	; 0x25
     e7c:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	8e a3       	std	Y+38, r24	; 0x26
     e86:	9f a3       	std	Y+39, r25	; 0x27
     e88:	a8 a7       	std	Y+40, r26	; 0x28
     e8a:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e8       	ldi	r20, 0x80	; 128
     e92:	5f e3       	ldi	r21, 0x3F	; 63
     e94:	6e a1       	ldd	r22, Y+38	; 0x26
     e96:	7f a1       	ldd	r23, Y+39	; 0x27
     e98:	88 a5       	ldd	r24, Y+40	; 0x28
     e9a:	99 a5       	ldd	r25, Y+41	; 0x29
     e9c:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
     ea0:	88 23       	and	r24, r24
     ea2:	2c f4       	brge	.+10     	; 0xeae <LCD_4_INIT+0x1e4>
		__ticks = 1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	9b a7       	std	Y+43, r25	; 0x2b
     eaa:	8a a7       	std	Y+42, r24	; 0x2a
     eac:	3f c0       	rjmp	.+126    	; 0xf2c <LCD_4_INIT+0x262>
	else if (__tmp > 65535)
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	3f ef       	ldi	r19, 0xFF	; 255
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	57 e4       	ldi	r21, 0x47	; 71
     eb6:	6e a1       	ldd	r22, Y+38	; 0x26
     eb8:	7f a1       	ldd	r23, Y+39	; 0x27
     eba:	88 a5       	ldd	r24, Y+40	; 0x28
     ebc:	99 a5       	ldd	r25, Y+41	; 0x29
     ebe:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
     ec2:	18 16       	cp	r1, r24
     ec4:	4c f5       	brge	.+82     	; 0xf18 <LCD_4_INIT+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e2       	ldi	r20, 0x20	; 32
     ecc:	51 e4       	ldi	r21, 0x41	; 65
     ece:	6a a1       	ldd	r22, Y+34	; 0x22
     ed0:	7b a1       	ldd	r23, Y+35	; 0x23
     ed2:	8c a1       	ldd	r24, Y+36	; 0x24
     ed4:	9d a1       	ldd	r25, Y+37	; 0x25
     ed6:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	9b a7       	std	Y+43, r25	; 0x2b
     eec:	8a a7       	std	Y+42, r24	; 0x2a
     eee:	0f c0       	rjmp	.+30     	; 0xf0e <LCD_4_INIT+0x244>
     ef0:	89 e1       	ldi	r24, 0x19	; 25
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9d a7       	std	Y+45, r25	; 0x2d
     ef6:	8c a7       	std	Y+44, r24	; 0x2c
     ef8:	8c a5       	ldd	r24, Y+44	; 0x2c
     efa:	9d a5       	ldd	r25, Y+45	; 0x2d
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <LCD_4_INIT+0x232>
     f00:	9d a7       	std	Y+45, r25	; 0x2d
     f02:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f04:	8a a5       	ldd	r24, Y+42	; 0x2a
     f06:	9b a5       	ldd	r25, Y+43	; 0x2b
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	9b a7       	std	Y+43, r25	; 0x2b
     f0c:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0e:	8a a5       	ldd	r24, Y+42	; 0x2a
     f10:	9b a5       	ldd	r25, Y+43	; 0x2b
     f12:	89 2b       	or	r24, r25
     f14:	69 f7       	brne	.-38     	; 0xef0 <LCD_4_INIT+0x226>
     f16:	14 c0       	rjmp	.+40     	; 0xf40 <LCD_4_INIT+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f18:	6e a1       	ldd	r22, Y+38	; 0x26
     f1a:	7f a1       	ldd	r23, Y+39	; 0x27
     f1c:	88 a5       	ldd	r24, Y+40	; 0x28
     f1e:	99 a5       	ldd	r25, Y+41	; 0x29
     f20:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	9b a7       	std	Y+43, r25	; 0x2b
     f2a:	8a a7       	std	Y+42, r24	; 0x2a
     f2c:	8a a5       	ldd	r24, Y+42	; 0x2a
     f2e:	9b a5       	ldd	r25, Y+43	; 0x2b
     f30:	9f a7       	std	Y+47, r25	; 0x2f
     f32:	8e a7       	std	Y+46, r24	; 0x2e
     f34:	8e a5       	ldd	r24, Y+46	; 0x2e
     f36:	9f a5       	ldd	r25, Y+47	; 0x2f
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <LCD_4_INIT+0x26e>
     f3c:	9f a7       	std	Y+47, r25	; 0x2f
     f3e:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_ms(5);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
     f40:	28 e3       	ldi	r18, 0x38	; 56
     f42:	4e ad       	ldd	r20, Y+62	; 0x3e
     f44:	5f ad       	ldd	r21, Y+63	; 0x3f
     f46:	ce 01       	movw	r24, r28
     f48:	80 5c       	subi	r24, 0xC0	; 192
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	fc 01       	movw	r30, r24
     f4e:	60 81       	ld	r22, Z
     f50:	ce 01       	movw	r24, r28
     f52:	8f 5b       	subi	r24, 0xBF	; 191
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	fc 01       	movw	r30, r24
     f58:	70 81       	ld	r23, Z
     f5a:	ce 01       	movw	r24, r28
     f5c:	8e 5b       	subi	r24, 0xBE	; 190
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	fc 01       	movw	r30, r24
     f62:	80 81       	ld	r24, Z
     f64:	fe 01       	movw	r30, r28
     f66:	ed 5b       	subi	r30, 0xBD	; 189
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	90 81       	ld	r25, Z
     f6c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a6 e1       	ldi	r26, 0x16	; 22
     f76:	b3 e4       	ldi	r27, 0x43	; 67
     f78:	8a 83       	std	Y+2, r24	; 0x02
     f7a:	9b 83       	std	Y+3, r25	; 0x03
     f7c:	ac 83       	std	Y+4, r26	; 0x04
     f7e:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     f80:	2b ea       	ldi	r18, 0xAB	; 171
     f82:	3a ea       	ldi	r19, 0xAA	; 170
     f84:	4a ea       	ldi	r20, 0xAA	; 170
     f86:	5e e3       	ldi	r21, 0x3E	; 62
     f88:	6a 81       	ldd	r22, Y+2	; 0x02
     f8a:	7b 81       	ldd	r23, Y+3	; 0x03
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	8e 83       	std	Y+6, r24	; 0x06
     f9a:	9f 83       	std	Y+7, r25	; 0x07
     f9c:	a8 87       	std	Y+8, r26	; 0x08
     f9e:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5e e3       	ldi	r21, 0x3E	; 62
     fa8:	6a 81       	ldd	r22, Y+2	; 0x02
     faa:	7b 81       	ldd	r23, Y+3	; 0x03
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	8a 87       	std	Y+10, r24	; 0x0a
     fba:	9b 87       	std	Y+11, r25	; 0x0b
     fbc:	ac 87       	std	Y+12, r26	; 0x0c
     fbe:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	6e 81       	ldd	r22, Y+6	; 0x06
     fca:	7f 81       	ldd	r23, Y+7	; 0x07
     fcc:	88 85       	ldd	r24, Y+8	; 0x08
     fce:	99 85       	ldd	r25, Y+9	; 0x09
     fd0:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	1c f4       	brge	.+6      	; 0xfde <LCD_4_INIT+0x314>
		__ticks = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	8e 87       	std	Y+14, r24	; 0x0e
     fdc:	b2 c0       	rjmp	.+356    	; 0x1142 <LCD_4_INIT+0x478>
	else if (__tmp2 > 65535)
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	3f ef       	ldi	r19, 0xFF	; 255
     fe2:	4f e7       	ldi	r20, 0x7F	; 127
     fe4:	57 e4       	ldi	r21, 0x47	; 71
     fe6:	6a 85       	ldd	r22, Y+10	; 0x0a
     fe8:	7b 85       	ldd	r23, Y+11	; 0x0b
     fea:	8c 85       	ldd	r24, Y+12	; 0x0c
     fec:	9d 85       	ldd	r25, Y+13	; 0x0d
     fee:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	0c f0       	brlt	.+2      	; 0xff8 <LCD_4_INIT+0x32e>
     ff6:	7b c0       	rjmp	.+246    	; 0x10ee <LCD_4_INIT+0x424>
	{
		_delay_ms(__us / 1000.0);
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	4a e7       	ldi	r20, 0x7A	; 122
     ffe:	54 e4       	ldi	r21, 0x44	; 68
    1000:	6a 81       	ldd	r22, Y+2	; 0x02
    1002:	7b 81       	ldd	r23, Y+3	; 0x03
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__divsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	8f 87       	std	Y+15, r24	; 0x0f
    1012:	98 8b       	std	Y+16, r25	; 0x10
    1014:	a9 8b       	std	Y+17, r26	; 0x11
    1016:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	4a e7       	ldi	r20, 0x7A	; 122
    101e:	53 e4       	ldi	r21, 0x43	; 67
    1020:	6f 85       	ldd	r22, Y+15	; 0x0f
    1022:	78 89       	ldd	r23, Y+16	; 0x10
    1024:	89 89       	ldd	r24, Y+17	; 0x11
    1026:	9a 89       	ldd	r25, Y+18	; 0x12
    1028:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	8b 8b       	std	Y+19, r24	; 0x13
    1032:	9c 8b       	std	Y+20, r25	; 0x14
    1034:	ad 8b       	std	Y+21, r26	; 0x15
    1036:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e8       	ldi	r20, 0x80	; 128
    103e:	5f e3       	ldi	r21, 0x3F	; 63
    1040:	6b 89       	ldd	r22, Y+19	; 0x13
    1042:	7c 89       	ldd	r23, Y+20	; 0x14
    1044:	8d 89       	ldd	r24, Y+21	; 0x15
    1046:	9e 89       	ldd	r25, Y+22	; 0x16
    1048:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
    104c:	88 23       	and	r24, r24
    104e:	2c f4       	brge	.+10     	; 0x105a <LCD_4_INIT+0x390>
		__ticks = 1;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	98 8f       	std	Y+24, r25	; 0x18
    1056:	8f 8b       	std	Y+23, r24	; 0x17
    1058:	3f c0       	rjmp	.+126    	; 0x10d8 <LCD_4_INIT+0x40e>
	else if (__tmp > 65535)
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	3f ef       	ldi	r19, 0xFF	; 255
    105e:	4f e7       	ldi	r20, 0x7F	; 127
    1060:	57 e4       	ldi	r21, 0x47	; 71
    1062:	6b 89       	ldd	r22, Y+19	; 0x13
    1064:	7c 89       	ldd	r23, Y+20	; 0x14
    1066:	8d 89       	ldd	r24, Y+21	; 0x15
    1068:	9e 89       	ldd	r25, Y+22	; 0x16
    106a:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    106e:	18 16       	cp	r1, r24
    1070:	4c f5       	brge	.+82     	; 0x10c4 <LCD_4_INIT+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e2       	ldi	r20, 0x20	; 32
    1078:	51 e4       	ldi	r21, 0x41	; 65
    107a:	6f 85       	ldd	r22, Y+15	; 0x0f
    107c:	78 89       	ldd	r23, Y+16	; 0x10
    107e:	89 89       	ldd	r24, Y+17	; 0x11
    1080:	9a 89       	ldd	r25, Y+18	; 0x12
    1082:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	98 8f       	std	Y+24, r25	; 0x18
    1098:	8f 8b       	std	Y+23, r24	; 0x17
    109a:	0f c0       	rjmp	.+30     	; 0x10ba <LCD_4_INIT+0x3f0>
    109c:	89 e1       	ldi	r24, 0x19	; 25
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9a 8f       	std	Y+26, r25	; 0x1a
    10a2:	89 8f       	std	Y+25, r24	; 0x19
    10a4:	89 8d       	ldd	r24, Y+25	; 0x19
    10a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <LCD_4_INIT+0x3de>
    10ac:	9a 8f       	std	Y+26, r25	; 0x1a
    10ae:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b0:	8f 89       	ldd	r24, Y+23	; 0x17
    10b2:	98 8d       	ldd	r25, Y+24	; 0x18
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	98 8f       	std	Y+24, r25	; 0x18
    10b8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ba:	8f 89       	ldd	r24, Y+23	; 0x17
    10bc:	98 8d       	ldd	r25, Y+24	; 0x18
    10be:	89 2b       	or	r24, r25
    10c0:	69 f7       	brne	.-38     	; 0x109c <LCD_4_INIT+0x3d2>
    10c2:	3f c0       	rjmp	.+126    	; 0x1142 <LCD_4_INIT+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c4:	6b 89       	ldd	r22, Y+19	; 0x13
    10c6:	7c 89       	ldd	r23, Y+20	; 0x14
    10c8:	8d 89       	ldd	r24, Y+21	; 0x15
    10ca:	9e 89       	ldd	r25, Y+22	; 0x16
    10cc:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	98 8f       	std	Y+24, r25	; 0x18
    10d6:	8f 8b       	std	Y+23, r24	; 0x17
    10d8:	8f 89       	ldd	r24, Y+23	; 0x17
    10da:	98 8d       	ldd	r25, Y+24	; 0x18
    10dc:	9c 8f       	std	Y+28, r25	; 0x1c
    10de:	8b 8f       	std	Y+27, r24	; 0x1b
    10e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <LCD_4_INIT+0x41a>
    10e8:	9c 8f       	std	Y+28, r25	; 0x1c
    10ea:	8b 8f       	std	Y+27, r24	; 0x1b
    10ec:	2a c0       	rjmp	.+84     	; 0x1142 <LCD_4_INIT+0x478>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	4f e7       	ldi	r20, 0x7F	; 127
    10f4:	53 e4       	ldi	r21, 0x43	; 67
    10f6:	6e 81       	ldd	r22, Y+6	; 0x06
    10f8:	7f 81       	ldd	r23, Y+7	; 0x07
    10fa:	88 85       	ldd	r24, Y+8	; 0x08
    10fc:	99 85       	ldd	r25, Y+9	; 0x09
    10fe:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    1102:	18 16       	cp	r1, r24
    1104:	ac f4       	brge	.+42     	; 0x1130 <LCD_4_INIT+0x466>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1106:	6a 85       	ldd	r22, Y+10	; 0x0a
    1108:	7b 85       	ldd	r23, Y+11	; 0x0b
    110a:	8c 85       	ldd	r24, Y+12	; 0x0c
    110c:	9d 85       	ldd	r25, Y+13	; 0x0d
    110e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9e 8f       	std	Y+30, r25	; 0x1e
    1118:	8d 8f       	std	Y+29, r24	; 0x1d
    111a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    111c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    111e:	98 a3       	std	Y+32, r25	; 0x20
    1120:	8f 8f       	std	Y+31, r24	; 0x1f
    1122:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1124:	98 a1       	ldd	r25, Y+32	; 0x20
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <LCD_4_INIT+0x45c>
    112a:	98 a3       	std	Y+32, r25	; 0x20
    112c:	8f 8f       	std	Y+31, r24	; 0x1f
    112e:	0f c0       	rjmp	.+30     	; 0x114e <LCD_4_INIT+0x484>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1130:	6e 81       	ldd	r22, Y+6	; 0x06
    1132:	7f 81       	ldd	r23, Y+7	; 0x07
    1134:	88 85       	ldd	r24, Y+8	; 0x08
    1136:	99 85       	ldd	r25, Y+9	; 0x09
    1138:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8e 87       	std	Y+14, r24	; 0x0e
    1142:	8e 85       	ldd	r24, Y+14	; 0x0e
    1144:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1146:	89 a1       	ldd	r24, Y+33	; 0x21
    1148:	8a 95       	dec	r24
    114a:	f1 f7       	brne	.-4      	; 0x1148 <LCD_4_INIT+0x47e>
    114c:	89 a3       	std	Y+33, r24	; 0x21
	_delay_us(150);
	LCD_4_CMD_Write(CopyLCD, _LCD_8_Bit_Mode);
    114e:	28 e3       	ldi	r18, 0x38	; 56
    1150:	4e ad       	ldd	r20, Y+62	; 0x3e
    1152:	5f ad       	ldd	r21, Y+63	; 0x3f
    1154:	ce 01       	movw	r24, r28
    1156:	80 5c       	subi	r24, 0xC0	; 192
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	fc 01       	movw	r30, r24
    115c:	60 81       	ld	r22, Z
    115e:	ce 01       	movw	r24, r28
    1160:	8f 5b       	subi	r24, 0xBF	; 191
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	fc 01       	movw	r30, r24
    1166:	70 81       	ld	r23, Z
    1168:	ce 01       	movw	r24, r28
    116a:	8e 5b       	subi	r24, 0xBE	; 190
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	fc 01       	movw	r30, r24
    1170:	80 81       	ld	r24, Z
    1172:	fe 01       	movw	r30, r28
    1174:	ed 5b       	subi	r30, 0xBD	; 189
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	90 81       	ld	r25, Z
    117a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Clear_Dis);
    117e:	21 e0       	ldi	r18, 0x01	; 1
    1180:	4e ad       	ldd	r20, Y+62	; 0x3e
    1182:	5f ad       	ldd	r21, Y+63	; 0x3f
    1184:	ce 01       	movw	r24, r28
    1186:	80 5c       	subi	r24, 0xC0	; 192
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	fc 01       	movw	r30, r24
    118c:	60 81       	ld	r22, Z
    118e:	ce 01       	movw	r24, r28
    1190:	8f 5b       	subi	r24, 0xBF	; 191
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	fc 01       	movw	r30, r24
    1196:	70 81       	ld	r23, Z
    1198:	ce 01       	movw	r24, r28
    119a:	8e 5b       	subi	r24, 0xBE	; 190
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	fc 01       	movw	r30, r24
    11a0:	80 81       	ld	r24, Z
    11a2:	fe 01       	movw	r30, r28
    11a4:	ed 5b       	subi	r30, 0xBD	; 189
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	90 81       	ld	r25, Z
    11aa:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Return_Home);
    11ae:	22 e0       	ldi	r18, 0x02	; 2
    11b0:	4e ad       	ldd	r20, Y+62	; 0x3e
    11b2:	5f ad       	ldd	r21, Y+63	; 0x3f
    11b4:	ce 01       	movw	r24, r28
    11b6:	80 5c       	subi	r24, 0xC0	; 192
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ba:	fc 01       	movw	r30, r24
    11bc:	60 81       	ld	r22, Z
    11be:	ce 01       	movw	r24, r28
    11c0:	8f 5b       	subi	r24, 0xBF	; 191
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	fc 01       	movw	r30, r24
    11c6:	70 81       	ld	r23, Z
    11c8:	ce 01       	movw	r24, r28
    11ca:	8e 5b       	subi	r24, 0xBE	; 190
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	fc 01       	movw	r30, r24
    11d0:	80 81       	ld	r24, Z
    11d2:	fe 01       	movw	r30, r28
    11d4:	ed 5b       	subi	r30, 0xBD	; 189
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	90 81       	ld	r25, Z
    11da:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Entery_INC);
    11de:	26 e0       	ldi	r18, 0x06	; 6
    11e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    11e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    11e4:	ce 01       	movw	r24, r28
    11e6:	80 5c       	subi	r24, 0xC0	; 192
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	fc 01       	movw	r30, r24
    11ec:	60 81       	ld	r22, Z
    11ee:	ce 01       	movw	r24, r28
    11f0:	8f 5b       	subi	r24, 0xBF	; 191
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	fc 01       	movw	r30, r24
    11f6:	70 81       	ld	r23, Z
    11f8:	ce 01       	movw	r24, r28
    11fa:	8e 5b       	subi	r24, 0xBE	; 190
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	fc 01       	movw	r30, r24
    1200:	80 81       	ld	r24, Z
    1202:	fe 01       	movw	r30, r28
    1204:	ed 5b       	subi	r30, 0xBD	; 189
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	90 81       	ld	r25, Z
    120a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_Dis_ON);
    120e:	2c e0       	ldi	r18, 0x0C	; 12
    1210:	4e ad       	ldd	r20, Y+62	; 0x3e
    1212:	5f ad       	ldd	r21, Y+63	; 0x3f
    1214:	ce 01       	movw	r24, r28
    1216:	80 5c       	subi	r24, 0xC0	; 192
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	fc 01       	movw	r30, r24
    121c:	60 81       	ld	r22, Z
    121e:	ce 01       	movw	r24, r28
    1220:	8f 5b       	subi	r24, 0xBF	; 191
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	fc 01       	movw	r30, r24
    1226:	70 81       	ld	r23, Z
    1228:	ce 01       	movw	r24, r28
    122a:	8e 5b       	subi	r24, 0xBE	; 190
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	fc 01       	movw	r30, r24
    1230:	80 81       	ld	r24, Z
    1232:	fe 01       	movw	r30, r28
    1234:	ed 5b       	subi	r30, 0xBD	; 189
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	90 81       	ld	r25, Z
    123a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, _LCD_4_Bit_Mode);
    123e:	28 e2       	ldi	r18, 0x28	; 40
    1240:	4e ad       	ldd	r20, Y+62	; 0x3e
    1242:	5f ad       	ldd	r21, Y+63	; 0x3f
    1244:	ce 01       	movw	r24, r28
    1246:	80 5c       	subi	r24, 0xC0	; 192
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	fc 01       	movw	r30, r24
    124c:	60 81       	ld	r22, Z
    124e:	ce 01       	movw	r24, r28
    1250:	8f 5b       	subi	r24, 0xBF	; 191
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	fc 01       	movw	r30, r24
    1256:	70 81       	ld	r23, Z
    1258:	ce 01       	movw	r24, r28
    125a:	8e 5b       	subi	r24, 0xBE	; 190
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	fc 01       	movw	r30, r24
    1260:	80 81       	ld	r24, Z
    1262:	fe 01       	movw	r30, r28
    1264:	ed 5b       	subi	r30, 0xBD	; 189
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	90 81       	ld	r25, Z
    126a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
	LCD_4_CMD_Write(CopyLCD, 0x80);
    126e:	20 e8       	ldi	r18, 0x80	; 128
    1270:	4e ad       	ldd	r20, Y+62	; 0x3e
    1272:	5f ad       	ldd	r21, Y+63	; 0x3f
    1274:	ce 01       	movw	r24, r28
    1276:	80 5c       	subi	r24, 0xC0	; 192
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	fc 01       	movw	r30, r24
    127c:	60 81       	ld	r22, Z
    127e:	ce 01       	movw	r24, r28
    1280:	8f 5b       	subi	r24, 0xBF	; 191
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	fc 01       	movw	r30, r24
    1286:	70 81       	ld	r23, Z
    1288:	ce 01       	movw	r24, r28
    128a:	8e 5b       	subi	r24, 0xBE	; 190
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	fc 01       	movw	r30, r24
    1290:	80 81       	ld	r24, Z
    1292:	fe 01       	movw	r30, r28
    1294:	ed 5b       	subi	r30, 0xBD	; 189
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	90 81       	ld	r25, Z
    129a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
}
    129e:	00 00       	nop
    12a0:	cd 5b       	subi	r28, 0xBD	; 189
    12a2:	df 4f       	sbci	r29, 0xFF	; 255
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <LCD_4_CMD_Write>:

void LCD_4_CMD_Write(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <LCD_4_CMD_Write+0x6>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <LCD_4_CMD_Write+0x8>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <LCD_4_CMD_Write+0xa>
    12be:	1f 92       	push	r1
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	49 83       	std	Y+1, r20	; 0x01
    12c6:	5a 83       	std	Y+2, r21	; 0x02
    12c8:	6b 83       	std	Y+3, r22	; 0x03
    12ca:	7c 83       	std	Y+4, r23	; 0x04
    12cc:	8d 83       	std	Y+5, r24	; 0x05
    12ce:	9e 83       	std	Y+6, r25	; 0x06
    12d0:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_Low);
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyCMD >> 4);
    12da:	8f 81       	ldd	r24, Y+7	; 0x07
    12dc:	82 95       	swap	r24
    12de:	8f 70       	andi	r24, 0x0F	; 15
    12e0:	28 2f       	mov	r18, r24
    12e2:	49 81       	ldd	r20, Y+1	; 0x01
    12e4:	5a 81       	ldd	r21, Y+2	; 0x02
    12e6:	6b 81       	ldd	r22, Y+3	; 0x03
    12e8:	7c 81       	ldd	r23, Y+4	; 0x04
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    12f2:	49 81       	ldd	r20, Y+1	; 0x01
    12f4:	5a 81       	ldd	r21, Y+2	; 0x02
    12f6:	6b 81       	ldd	r22, Y+3	; 0x03
    12f8:	7c 81       	ldd	r23, Y+4	; 0x04
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	0e 94 67 0b 	call	0x16ce	; 0x16ce <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyCMD);
    1302:	2f 81       	ldd	r18, Y+7	; 0x07
    1304:	49 81       	ldd	r20, Y+1	; 0x01
    1306:	5a 81       	ldd	r21, Y+2	; 0x02
    1308:	6b 81       	ldd	r22, Y+3	; 0x03
    130a:	7c 81       	ldd	r23, Y+4	; 0x04
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    1314:	49 81       	ldd	r20, Y+1	; 0x01
    1316:	5a 81       	ldd	r21, Y+2	; 0x02
    1318:	6b 81       	ldd	r22, Y+3	; 0x03
    131a:	7c 81       	ldd	r23, Y+4	; 0x04
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	0e 94 67 0b 	call	0x16ce	; 0x16ce <LCD_4_SendEnable_Signal>
}
    1324:	00 00       	nop
    1326:	27 96       	adiw	r28, 0x07	; 7
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <LCD_4_Char_Write>:

void LCD_4_Char_Write(LCD_4_MODE CopyLCD , u8 CopyChar)
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	00 d0       	rcall	.+0      	; 0x133e <LCD_4_Char_Write+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <LCD_4_Char_Write+0x8>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <LCD_4_Char_Write+0xa>
    1342:	1f 92       	push	r1
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	49 83       	std	Y+1, r20	; 0x01
    134a:	5a 83       	std	Y+2, r21	; 0x02
    134c:	6b 83       	std	Y+3, r22	; 0x03
    134e:	7c 83       	std	Y+4, r23	; 0x04
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.RS , Status_Pin_High);
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	61 e0       	ldi	r22, 0x01	; 1
    135a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	LCD_4_GetData(CopyLCD,CopyChar >> 4);
    135e:	8f 81       	ldd	r24, Y+7	; 0x07
    1360:	82 95       	swap	r24
    1362:	8f 70       	andi	r24, 0x0F	; 15
    1364:	28 2f       	mov	r18, r24
    1366:	49 81       	ldd	r20, Y+1	; 0x01
    1368:	5a 81       	ldd	r21, Y+2	; 0x02
    136a:	6b 81       	ldd	r22, Y+3	; 0x03
    136c:	7c 81       	ldd	r23, Y+4	; 0x04
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    1376:	49 81       	ldd	r20, Y+1	; 0x01
    1378:	5a 81       	ldd	r21, Y+2	; 0x02
    137a:	6b 81       	ldd	r22, Y+3	; 0x03
    137c:	7c 81       	ldd	r23, Y+4	; 0x04
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	0e 94 67 0b 	call	0x16ce	; 0x16ce <LCD_4_SendEnable_Signal>
	LCD_4_GetData(CopyLCD,CopyChar);
    1386:	2f 81       	ldd	r18, Y+7	; 0x07
    1388:	49 81       	ldd	r20, Y+1	; 0x01
    138a:	5a 81       	ldd	r21, Y+2	; 0x02
    138c:	6b 81       	ldd	r22, Y+3	; 0x03
    138e:	7c 81       	ldd	r23, Y+4	; 0x04
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_4_GetData>
	LCD_4_SendEnable_Signal(CopyLCD);
    1398:	49 81       	ldd	r20, Y+1	; 0x01
    139a:	5a 81       	ldd	r21, Y+2	; 0x02
    139c:	6b 81       	ldd	r22, Y+3	; 0x03
    139e:	7c 81       	ldd	r23, Y+4	; 0x04
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <LCD_4_SendEnable_Signal>
}
    13a8:	00 00       	nop
    13aa:	27 96       	adiw	r28, 0x07	; 7
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <LCD_4_Char_Postion>:

void LCD_4_Char_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 CopyChar)
{
    13bc:	ef 92       	push	r14
    13be:	0f 93       	push	r16
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	29 97       	sbiw	r28, 0x09	; 9
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	49 83       	std	Y+1, r20	; 0x01
    13d6:	5a 83       	std	Y+2, r21	; 0x02
    13d8:	6b 83       	std	Y+3, r22	; 0x03
    13da:	7c 83       	std	Y+4, r23	; 0x04
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	2f 83       	std	Y+7, r18	; 0x07
    13e2:	08 87       	std	Y+8, r16	; 0x08
    13e4:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
    13e6:	08 85       	ldd	r16, Y+8	; 0x08
    13e8:	2f 81       	ldd	r18, Y+7	; 0x07
    13ea:	49 81       	ldd	r20, Y+1	; 0x01
    13ec:	5a 81       	ldd	r21, Y+2	; 0x02
    13ee:	6b 81       	ldd	r22, Y+3	; 0x03
    13f0:	7c 81       	ldd	r23, Y+4	; 0x04
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_4_SetCursor_Position>
	LCD_4_Char_Write(CopyLCD , CopyChar);
    13fa:	29 85       	ldd	r18, Y+9	; 0x09
    13fc:	49 81       	ldd	r20, Y+1	; 0x01
    13fe:	5a 81       	ldd	r21, Y+2	; 0x02
    1400:	6b 81       	ldd	r22, Y+3	; 0x03
    1402:	7c 81       	ldd	r23, Y+4	; 0x04
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_4_Char_Write>
}
    140c:	00 00       	nop
    140e:	29 96       	adiw	r28, 0x09	; 9
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	0f 91       	pop	r16
    1420:	ef 90       	pop	r14
    1422:	08 95       	ret

00001424 <LCD_4_Str_Write>:

void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	28 97       	sbiw	r28, 0x08	; 8
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	49 83       	std	Y+1, r20	; 0x01
    143a:	5a 83       	std	Y+2, r21	; 0x02
    143c:	6b 83       	std	Y+3, r22	; 0x03
    143e:	7c 83       	std	Y+4, r23	; 0x04
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	38 87       	std	Y+8, r19	; 0x08
    1446:	2f 83       	std	Y+7, r18	; 0x07
	while(*CopySTR)
    1448:	12 c0       	rjmp	.+36     	; 0x146e <LCD_4_Str_Write+0x4a>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
    144a:	8f 81       	ldd	r24, Y+7	; 0x07
    144c:	98 85       	ldd	r25, Y+8	; 0x08
    144e:	9c 01       	movw	r18, r24
    1450:	2f 5f       	subi	r18, 0xFF	; 255
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	38 87       	std	Y+8, r19	; 0x08
    1456:	2f 83       	std	Y+7, r18	; 0x07
    1458:	fc 01       	movw	r30, r24
    145a:	80 81       	ld	r24, Z
    145c:	28 2f       	mov	r18, r24
    145e:	49 81       	ldd	r20, Y+1	; 0x01
    1460:	5a 81       	ldd	r21, Y+2	; 0x02
    1462:	6b 81       	ldd	r22, Y+3	; 0x03
    1464:	7c 81       	ldd	r23, Y+4	; 0x04
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_4_Char_Write>
	LCD_4_Char_Write(CopyLCD , CopyChar);
}

void LCD_4_Str_Write(LCD_4_MODE CopyLCD , u8 *CopySTR)
{
	while(*CopySTR)
    146e:	8f 81       	ldd	r24, Y+7	; 0x07
    1470:	98 85       	ldd	r25, Y+8	; 0x08
    1472:	fc 01       	movw	r30, r24
    1474:	80 81       	ld	r24, Z
    1476:	88 23       	and	r24, r24
    1478:	41 f7       	brne	.-48     	; 0x144a <LCD_4_Str_Write+0x26>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
    147a:	00 00       	nop
    147c:	28 96       	adiw	r28, 0x08	; 8
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <LCD_4_STR_Postion>:

void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	2a 97       	sbiw	r28, 0x0a	; 10
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	49 83       	std	Y+1, r20	; 0x01
    14aa:	5a 83       	std	Y+2, r21	; 0x02
    14ac:	6b 83       	std	Y+3, r22	; 0x03
    14ae:	7c 83       	std	Y+4, r23	; 0x04
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	2f 83       	std	Y+7, r18	; 0x07
    14b6:	08 87       	std	Y+8, r16	; 0x08
    14b8:	fa 86       	std	Y+10, r15	; 0x0a
    14ba:	e9 86       	std	Y+9, r14	; 0x09
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
    14bc:	08 85       	ldd	r16, Y+8	; 0x08
    14be:	2f 81       	ldd	r18, Y+7	; 0x07
    14c0:	49 81       	ldd	r20, Y+1	; 0x01
    14c2:	5a 81       	ldd	r21, Y+2	; 0x02
    14c4:	6b 81       	ldd	r22, Y+3	; 0x03
    14c6:	7c 81       	ldd	r23, Y+4	; 0x04
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_4_SetCursor_Position>
	while(*CopySTR)
    14d0:	12 c0       	rjmp	.+36     	; 0x14f6 <LCD_4_STR_Postion+0x68>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	9c 01       	movw	r18, r24
    14d8:	2f 5f       	subi	r18, 0xFF	; 255
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	3a 87       	std	Y+10, r19	; 0x0a
    14de:	29 87       	std	Y+9, r18	; 0x09
    14e0:	fc 01       	movw	r30, r24
    14e2:	80 81       	ld	r24, Z
    14e4:	28 2f       	mov	r18, r24
    14e6:	49 81       	ldd	r20, Y+1	; 0x01
    14e8:	5a 81       	ldd	r21, Y+2	; 0x02
    14ea:	6b 81       	ldd	r22, Y+3	; 0x03
    14ec:	7c 81       	ldd	r23, Y+4	; 0x04
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_4_Char_Write>
}

void LCD_4_STR_Postion(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn , u8 *CopySTR)
{
	LCD_4_SetCursor_Position(CopyLCD , CopyRow , CopyCoulmn);
	while(*CopySTR)
    14f6:	89 85       	ldd	r24, Y+9	; 0x09
    14f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fa:	fc 01       	movw	r30, r24
    14fc:	80 81       	ld	r24, Z
    14fe:	88 23       	and	r24, r24
    1500:	41 f7       	brne	.-48     	; 0x14d2 <LCD_4_STR_Postion+0x44>
	{
		LCD_4_Char_Write(CopyLCD, *CopySTR++);
	}
}
    1502:	00 00       	nop
    1504:	2a 96       	adiw	r28, 0x0a	; 10
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	08 95       	ret

0000151c <Convert_u8_to_String>:
/************************************************************************************************************************/

/********** SECTION : Functions Declarations Convert **********/

void Convert_u8_to_String(u8 CopyValueu8 , u8 *CopySTR)
{
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	00 d0       	rcall	.+0      	; 0x1522 <Convert_u8_to_String+0x6>
    1522:	1f 92       	push	r1
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	7b 83       	std	Y+3, r23	; 0x03
    152c:	6a 83       	std	Y+2, r22	; 0x02
	memset(CopySTR , '\0' , 4);
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	44 e0       	ldi	r20, 0x04	; 4
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	0e 94 02 14 	call	0x2804	; 0x2804 <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	29 2f       	mov	r18, r25
    1546:	2f 93       	push	r18
    1548:	8f 93       	push	r24
    154a:	86 ea       	ldi	r24, 0xA6	; 166
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	89 2f       	mov	r24, r25
    1550:	8f 93       	push	r24
    1552:	86 ea       	ldi	r24, 0xA6	; 166
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	8f 93       	push	r24
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	8f 93       	push	r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	8f 93       	push	r24
    1560:	0e 94 09 14 	call	0x2812	; 0x2812 <sprintf>
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
}
    1570:	00 00       	nop
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <Convert_u16_to_String>:
void Convert_u16_to_String(u16 CopyValueu8 , u8 *CopySTR)
{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	00 d0       	rcall	.+0      	; 0x1584 <Convert_u16_to_String+0x6>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <Convert_u16_to_String+0x8>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	7c 83       	std	Y+4, r23	; 0x04
    1590:	6b 83       	std	Y+3, r22	; 0x03
	memset(CopySTR , '\0' , 6);
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	46 e0       	ldi	r20, 0x06	; 6
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	0e 94 02 14 	call	0x2804	; 0x2804 <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	8f 93       	push	r24
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	8f 93       	push	r24
    15aa:	86 ea       	ldi	r24, 0xA6	; 166
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	89 2f       	mov	r24, r25
    15b0:	8f 93       	push	r24
    15b2:	86 ea       	ldi	r24, 0xA6	; 166
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	8f 93       	push	r24
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	8f 93       	push	r24
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	8f 93       	push	r24
    15c0:	0e 94 09 14 	call	0x2812	; 0x2812 <sprintf>
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
}
    15d0:	00 00       	nop
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <Convert_u32_to_String>:
void Convert_u32_to_String(u32 CopyValueu8 , u8 *CopySTR)
{
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <Convert_u32_to_String+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <Convert_u32_to_String+0x8>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <Convert_u32_to_String+0xa>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	69 83       	std	Y+1, r22	; 0x01
    15f0:	7a 83       	std	Y+2, r23	; 0x02
    15f2:	8b 83       	std	Y+3, r24	; 0x03
    15f4:	9c 83       	std	Y+4, r25	; 0x04
    15f6:	5e 83       	std	Y+6, r21	; 0x06
    15f8:	4d 83       	std	Y+5, r20	; 0x05
	memset(CopySTR , '\0' , 11);
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	4b e0       	ldi	r20, 0x0B	; 11
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	0e 94 02 14 	call	0x2804	; 0x2804 <memset>
	sprintf(CopySTR , "%i", CopyValueu8);
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	8f 93       	push	r24
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	8f 93       	push	r24
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	8f 93       	push	r24
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	8f 93       	push	r24
    161a:	86 ea       	ldi	r24, 0xA6	; 166
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	89 2f       	mov	r24, r25
    1620:	8f 93       	push	r24
    1622:	86 ea       	ldi	r24, 0xA6	; 166
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	8f 93       	push	r24
    1628:	8e 81       	ldd	r24, Y+6	; 0x06
    162a:	8f 93       	push	r24
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	8f 93       	push	r24
    1630:	0e 94 09 14 	call	0x2812	; 0x2812 <sprintf>
    1634:	8d b7       	in	r24, 0x3d	; 61
    1636:	9e b7       	in	r25, 0x3e	; 62
    1638:	08 96       	adiw	r24, 0x08	; 8
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
}
    1644:	00 00       	nop
    1646:	26 96       	adiw	r28, 0x06	; 6
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <LCD_4_GetData>:

/********** SECTION : Static Functions **********/
#if _LCD_Mood ==  _LCD_4_Bit_Mood

static void LCD_4_GetData(LCD_4_MODE CopyLCD , u8 CopyCMD)
{
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	00 d0       	rcall	.+0      	; 0x165e <LCD_4_GetData+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <LCD_4_GetData+0x8>
    1660:	00 d0       	rcall	.+0      	; 0x1662 <LCD_4_GetData+0xa>
    1662:	1f 92       	push	r1
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	49 83       	std	Y+1, r20	; 0x01
    166a:	5a 83       	std	Y+2, r21	; 0x02
    166c:	6b 83       	std	Y+3, r22	; 0x03
    166e:	7c 83       	std	Y+4, r23	; 0x04
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	2f 83       	std	Y+7, r18	; 0x07
	Dio_setPinVal(CopyLCD.Port[0] , (CopyCMD >> 0) & (u8)0x01);
    1676:	8f 81       	ldd	r24, Y+7	; 0x07
    1678:	98 2f       	mov	r25, r24
    167a:	91 70       	andi	r25, 0x01	; 1
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	69 2f       	mov	r22, r25
    1680:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[1] , (CopyCMD >> 1) & (u8)0x01);
    1684:	8f 81       	ldd	r24, Y+7	; 0x07
    1686:	86 95       	lsr	r24
    1688:	98 2f       	mov	r25, r24
    168a:	91 70       	andi	r25, 0x01	; 1
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	69 2f       	mov	r22, r25
    1690:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[2] , (CopyCMD >> 2) & (u8)0x01);
    1694:	8f 81       	ldd	r24, Y+7	; 0x07
    1696:	86 95       	lsr	r24
    1698:	86 95       	lsr	r24
    169a:	98 2f       	mov	r25, r24
    169c:	91 70       	andi	r25, 0x01	; 1
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	69 2f       	mov	r22, r25
    16a2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyLCD.Port[3] , (CopyCMD >> 3) & (u8)0x01);
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	86 95       	lsr	r24
    16aa:	86 95       	lsr	r24
    16ac:	86 95       	lsr	r24
    16ae:	98 2f       	mov	r25, r24
    16b0:	91 70       	andi	r25, 0x01	; 1
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	69 2f       	mov	r22, r25
    16b6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
}
    16ba:	00 00       	nop
    16bc:	27 96       	adiw	r28, 0x07	; 7
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	08 95       	ret

000016ce <LCD_4_SendEnable_Signal>:

static void LCD_4_SendEnable_Signal(LCD_4_MODE CopyLCD)
{
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	a6 97       	sbiw	r28, 0x26	; 38
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	49 a3       	std	Y+33, r20	; 0x21
    16e4:	5a a3       	std	Y+34, r21	; 0x22
    16e6:	6b a3       	std	Y+35, r22	; 0x23
    16e8:	7c a3       	std	Y+36, r23	; 0x24
    16ea:	8d a3       	std	Y+37, r24	; 0x25
    16ec:	9e a3       	std	Y+38, r25	; 0x26
	Dio_setPinVal(CopyLCD.E,Status_Pin_High);
    16ee:	8a a1       	ldd	r24, Y+34	; 0x22
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 ea       	ldi	r26, 0xA0	; 160
    16fc:	b0 e4       	ldi	r27, 0x40	; 64
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	ab 83       	std	Y+3, r26	; 0x03
    1704:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1706:	2b ea       	ldi	r18, 0xAB	; 171
    1708:	3a ea       	ldi	r19, 0xAA	; 170
    170a:	4a ea       	ldi	r20, 0xAA	; 170
    170c:	5e e3       	ldi	r21, 0x3E	; 62
    170e:	69 81       	ldd	r22, Y+1	; 0x01
    1710:	7a 81       	ldd	r23, Y+2	; 0x02
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	af 83       	std	Y+7, r26	; 0x07
    1724:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e8       	ldi	r20, 0x80	; 128
    172c:	5e e3       	ldi	r21, 0x3E	; 62
    172e:	69 81       	ldd	r22, Y+1	; 0x01
    1730:	7a 81       	ldd	r23, Y+2	; 0x02
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	89 87       	std	Y+9, r24	; 0x09
    1740:	9a 87       	std	Y+10, r25	; 0x0a
    1742:	ab 87       	std	Y+11, r26	; 0x0b
    1744:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	6d 81       	ldd	r22, Y+5	; 0x05
    1750:	7e 81       	ldd	r23, Y+6	; 0x06
    1752:	8f 81       	ldd	r24, Y+7	; 0x07
    1754:	98 85       	ldd	r25, Y+8	; 0x08
    1756:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
    175a:	88 23       	and	r24, r24
    175c:	1c f4       	brge	.+6      	; 0x1764 <LCD_4_SendEnable_Signal+0x96>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	8d 87       	std	Y+13, r24	; 0x0d
    1762:	b2 c0       	rjmp	.+356    	; 0x18c8 <LCD_4_SendEnable_Signal+0x1fa>
	else if (__tmp2 > 65535)
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	3f ef       	ldi	r19, 0xFF	; 255
    1768:	4f e7       	ldi	r20, 0x7F	; 127
    176a:	57 e4       	ldi	r21, 0x47	; 71
    176c:	69 85       	ldd	r22, Y+9	; 0x09
    176e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1770:	8b 85       	ldd	r24, Y+11	; 0x0b
    1772:	9c 85       	ldd	r25, Y+12	; 0x0c
    1774:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    1778:	18 16       	cp	r1, r24
    177a:	0c f0       	brlt	.+2      	; 0x177e <LCD_4_SendEnable_Signal+0xb0>
    177c:	7b c0       	rjmp	.+246    	; 0x1874 <LCD_4_SendEnable_Signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a e7       	ldi	r20, 0x7A	; 122
    1784:	54 e4       	ldi	r21, 0x44	; 68
    1786:	69 81       	ldd	r22, Y+1	; 0x01
    1788:	7a 81       	ldd	r23, Y+2	; 0x02
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__divsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	8e 87       	std	Y+14, r24	; 0x0e
    1798:	9f 87       	std	Y+15, r25	; 0x0f
    179a:	a8 8b       	std	Y+16, r26	; 0x10
    179c:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	4a e7       	ldi	r20, 0x7A	; 122
    17a4:	53 e4       	ldi	r21, 0x43	; 67
    17a6:	6e 85       	ldd	r22, Y+14	; 0x0e
    17a8:	7f 85       	ldd	r23, Y+15	; 0x0f
    17aa:	88 89       	ldd	r24, Y+16	; 0x10
    17ac:	99 89       	ldd	r25, Y+17	; 0x11
    17ae:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8a 8b       	std	Y+18, r24	; 0x12
    17b8:	9b 8b       	std	Y+19, r25	; 0x13
    17ba:	ac 8b       	std	Y+20, r26	; 0x14
    17bc:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	5f e3       	ldi	r21, 0x3F	; 63
    17c6:	6a 89       	ldd	r22, Y+18	; 0x12
    17c8:	7b 89       	ldd	r23, Y+19	; 0x13
    17ca:	8c 89       	ldd	r24, Y+20	; 0x14
    17cc:	9d 89       	ldd	r25, Y+21	; 0x15
    17ce:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <LCD_4_SendEnable_Signal+0x112>
		__ticks = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	9f 8b       	std	Y+23, r25	; 0x17
    17dc:	8e 8b       	std	Y+22, r24	; 0x16
    17de:	3f c0       	rjmp	.+126    	; 0x185e <LCD_4_SendEnable_Signal+0x190>
	else if (__tmp > 65535)
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	3f ef       	ldi	r19, 0xFF	; 255
    17e4:	4f e7       	ldi	r20, 0x7F	; 127
    17e6:	57 e4       	ldi	r21, 0x47	; 71
    17e8:	6a 89       	ldd	r22, Y+18	; 0x12
    17ea:	7b 89       	ldd	r23, Y+19	; 0x13
    17ec:	8c 89       	ldd	r24, Y+20	; 0x14
    17ee:	9d 89       	ldd	r25, Y+21	; 0x15
    17f0:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	4c f5       	brge	.+82     	; 0x184a <LCD_4_SendEnable_Signal+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e2       	ldi	r20, 0x20	; 32
    17fe:	51 e4       	ldi	r21, 0x41	; 65
    1800:	6e 85       	ldd	r22, Y+14	; 0x0e
    1802:	7f 85       	ldd	r23, Y+15	; 0x0f
    1804:	88 89       	ldd	r24, Y+16	; 0x10
    1806:	99 89       	ldd	r25, Y+17	; 0x11
    1808:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9f 8b       	std	Y+23, r25	; 0x17
    181e:	8e 8b       	std	Y+22, r24	; 0x16
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <LCD_4_SendEnable_Signal+0x172>
    1822:	89 e1       	ldi	r24, 0x19	; 25
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	99 8f       	std	Y+25, r25	; 0x19
    1828:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    182a:	88 8d       	ldd	r24, Y+24	; 0x18
    182c:	99 8d       	ldd	r25, Y+25	; 0x19
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_4_SendEnable_Signal+0x160>
    1832:	99 8f       	std	Y+25, r25	; 0x19
    1834:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	8e 89       	ldd	r24, Y+22	; 0x16
    1838:	9f 89       	ldd	r25, Y+23	; 0x17
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9f 8b       	std	Y+23, r25	; 0x17
    183e:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	8e 89       	ldd	r24, Y+22	; 0x16
    1842:	9f 89       	ldd	r25, Y+23	; 0x17
    1844:	89 2b       	or	r24, r25
    1846:	69 f7       	brne	.-38     	; 0x1822 <LCD_4_SendEnable_Signal+0x154>
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <LCD_4_SendEnable_Signal+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	6a 89       	ldd	r22, Y+18	; 0x12
    184c:	7b 89       	ldd	r23, Y+19	; 0x13
    184e:	8c 89       	ldd	r24, Y+20	; 0x14
    1850:	9d 89       	ldd	r25, Y+21	; 0x15
    1852:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9f 8b       	std	Y+23, r25	; 0x17
    185c:	8e 8b       	std	Y+22, r24	; 0x16
    185e:	8e 89       	ldd	r24, Y+22	; 0x16
    1860:	9f 89       	ldd	r25, Y+23	; 0x17
    1862:	9b 8f       	std	Y+27, r25	; 0x1b
    1864:	8a 8f       	std	Y+26, r24	; 0x1a
    1866:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1868:	9b 8d       	ldd	r25, Y+27	; 0x1b
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_4_SendEnable_Signal+0x19c>
    186e:	9b 8f       	std	Y+27, r25	; 0x1b
    1870:	8a 8f       	std	Y+26, r24	; 0x1a
    1872:	2a c0       	rjmp	.+84     	; 0x18c8 <LCD_4_SendEnable_Signal+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	53 e4       	ldi	r21, 0x43	; 67
    187c:	6d 81       	ldd	r22, Y+5	; 0x05
    187e:	7e 81       	ldd	r23, Y+6	; 0x06
    1880:	8f 81       	ldd	r24, Y+7	; 0x07
    1882:	98 85       	ldd	r25, Y+8	; 0x08
    1884:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    1888:	18 16       	cp	r1, r24
    188a:	ac f4       	brge	.+42     	; 0x18b6 <LCD_4_SendEnable_Signal+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    188c:	69 85       	ldd	r22, Y+9	; 0x09
    188e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1890:	8b 85       	ldd	r24, Y+11	; 0x0b
    1892:	9c 85       	ldd	r25, Y+12	; 0x0c
    1894:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9d 8f       	std	Y+29, r25	; 0x1d
    189e:	8c 8f       	std	Y+28, r24	; 0x1c
    18a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18a4:	9f 8f       	std	Y+31, r25	; 0x1f
    18a6:	8e 8f       	std	Y+30, r24	; 0x1e
    18a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_4_SendEnable_Signal+0x1de>
    18b0:	9f 8f       	std	Y+31, r25	; 0x1f
    18b2:	8e 8f       	std	Y+30, r24	; 0x1e
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <LCD_4_SendEnable_Signal+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18b6:	6d 81       	ldd	r22, Y+5	; 0x05
    18b8:	7e 81       	ldd	r23, Y+6	; 0x06
    18ba:	8f 81       	ldd	r24, Y+7	; 0x07
    18bc:	98 85       	ldd	r25, Y+8	; 0x08
    18be:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8d 87       	std	Y+13, r24	; 0x0d
    18c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ca:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18cc:	88 a1       	ldd	r24, Y+32	; 0x20
    18ce:	8a 95       	dec	r24
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <LCD_4_SendEnable_Signal+0x200>
    18d2:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(5);
	Dio_setPinVal(CopyLCD.E, Status_Pin_Low);
    18d4:	8a a1       	ldd	r24, Y+34	; 0x22
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
}
    18dc:	00 00       	nop
    18de:	a6 96       	adiw	r28, 0x26	; 38
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <LCD_4_SetCursor_Position>:

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
    18f0:	0f 93       	push	r16
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	28 97       	sbiw	r28, 0x08	; 8
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	49 83       	std	Y+1, r20	; 0x01
    1908:	5a 83       	std	Y+2, r21	; 0x02
    190a:	6b 83       	std	Y+3, r22	; 0x03
    190c:	7c 83       	std	Y+4, r23	; 0x04
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	2f 83       	std	Y+7, r18	; 0x07
    1914:	08 87       	std	Y+8, r16	; 0x08
	CopyCoulmn--;
    1916:	88 85       	ldd	r24, Y+8	; 0x08
    1918:	81 50       	subi	r24, 0x01	; 1
    191a:	88 87       	std	Y+8, r24	; 0x08
	switch (CopyRow) {
    191c:	8f 81       	ldd	r24, Y+7	; 0x07
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	91 05       	cpc	r25, r1
    1926:	c1 f0       	breq	.+48     	; 0x1958 <LCD_4_SetCursor_Position+0x68>
    1928:	83 30       	cpi	r24, 0x03	; 3
    192a:	91 05       	cpc	r25, r1
    192c:	1c f4       	brge	.+6      	; 0x1934 <LCD_4_SetCursor_Position+0x44>
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	39 f0       	breq	.+14     	; 0x1940 <LCD_4_SetCursor_Position+0x50>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x90 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd0 + CopyCoulmn)); break;
		default: break;
    1932:	36 c0       	rjmp	.+108    	; 0x19a0 <LCD_4_SetCursor_Position+0xb0>
}

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	d9 f0       	breq	.+54     	; 0x1970 <LCD_4_SetCursor_Position+0x80>
    193a:	04 97       	sbiw	r24, 0x04	; 4
    193c:	29 f1       	breq	.+74     	; 0x1988 <LCD_4_SetCursor_Position+0x98>
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x90 + CopyCoulmn)); break;
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd0 + CopyCoulmn)); break;
		default: break;
    193e:	30 c0       	rjmp	.+96     	; 0x19a0 <LCD_4_SetCursor_Position+0xb0>

static void LCD_4_SetCursor_Position(LCD_4_MODE CopyLCD , u8 CopyRow , u8 CopyCoulmn)
{
	CopyCoulmn--;
	switch (CopyRow) {
		case Row_1 : LCD_4_CMD_Write(CopyLCD, (0x80 + CopyCoulmn)); break;
    1940:	88 85       	ldd	r24, Y+8	; 0x08
    1942:	80 58       	subi	r24, 0x80	; 128
    1944:	28 2f       	mov	r18, r24
    1946:	49 81       	ldd	r20, Y+1	; 0x01
    1948:	5a 81       	ldd	r21, Y+2	; 0x02
    194a:	6b 81       	ldd	r22, Y+3	; 0x03
    194c:	7c 81       	ldd	r23, Y+4	; 0x04
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
    1956:	24 c0       	rjmp	.+72     	; 0x19a0 <LCD_4_SetCursor_Position+0xb0>
		case Row_2 : LCD_4_CMD_Write(CopyLCD, (0xc0 + CopyCoulmn)); break;
    1958:	88 85       	ldd	r24, Y+8	; 0x08
    195a:	80 54       	subi	r24, 0x40	; 64
    195c:	28 2f       	mov	r18, r24
    195e:	49 81       	ldd	r20, Y+1	; 0x01
    1960:	5a 81       	ldd	r21, Y+2	; 0x02
    1962:	6b 81       	ldd	r22, Y+3	; 0x03
    1964:	7c 81       	ldd	r23, Y+4	; 0x04
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
    196e:	18 c0       	rjmp	.+48     	; 0x19a0 <LCD_4_SetCursor_Position+0xb0>
		case Row_3 : LCD_4_CMD_Write(CopyLCD, (0x90 + CopyCoulmn)); break;
    1970:	88 85       	ldd	r24, Y+8	; 0x08
    1972:	80 57       	subi	r24, 0x70	; 112
    1974:	28 2f       	mov	r18, r24
    1976:	49 81       	ldd	r20, Y+1	; 0x01
    1978:	5a 81       	ldd	r21, Y+2	; 0x02
    197a:	6b 81       	ldd	r22, Y+3	; 0x03
    197c:	7c 81       	ldd	r23, Y+4	; 0x04
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
    1986:	0c c0       	rjmp	.+24     	; 0x19a0 <LCD_4_SetCursor_Position+0xb0>
		case Row_4 : LCD_4_CMD_Write(CopyLCD, (0xd0 + CopyCoulmn)); break;
    1988:	88 85       	ldd	r24, Y+8	; 0x08
    198a:	80 53       	subi	r24, 0x30	; 48
    198c:	28 2f       	mov	r18, r24
    198e:	49 81       	ldd	r20, Y+1	; 0x01
    1990:	5a 81       	ldd	r21, Y+2	; 0x02
    1992:	6b 81       	ldd	r22, Y+3	; 0x03
    1994:	7c 81       	ldd	r23, Y+4	; 0x04
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	9e 81       	ldd	r25, Y+6	; 0x06
    199a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_4_CMD_Write>
    199e:	00 00       	nop
		default: break;
	}
}
    19a0:	00 00       	nop
    19a2:	28 96       	adiw	r28, 0x08	; 8
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	0f 91       	pop	r16
    19b4:	08 95       	ret

000019b6 <KeyPad_Init>:
/********** SECTION : Includes **********/
#include "KeyPad_Init.h"

/********** SECTION : Functions Definitions **********/
void KeyPad_Init(KeyPad CopyKeyPad)
{
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	2a 97       	sbiw	r28, 0x0a	; 10
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	2b 83       	std	Y+3, r18	; 0x03
    19cc:	3c 83       	std	Y+4, r19	; 0x04
    19ce:	4d 83       	std	Y+5, r20	; 0x05
    19d0:	5e 83       	std	Y+6, r21	; 0x06
    19d2:	6f 83       	std	Y+7, r22	; 0x07
    19d4:	78 87       	std	Y+8, r23	; 0x08
    19d6:	89 87       	std	Y+9, r24	; 0x09
    19d8:	9a 87       	std	Y+10, r25	; 0x0a
	u8 Rows_Counter = Initial_Counter ;
    19da:	19 82       	std	Y+1, r1	; 0x01
	u8 Columns_Counter = Initial_Counter;
    19dc:	1a 82       	std	Y+2, r1	; 0x02

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    19de:	19 82       	std	Y+1, r1	; 0x01
    19e0:	10 c0       	rjmp	.+32     	; 0x1a02 <KeyPad_Init+0x4c>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9e 01       	movw	r18, r28
    19ea:	2d 5f       	subi	r18, 0xFD	; 253
    19ec:	3f 4f       	sbci	r19, 0xFF	; 255
    19ee:	82 0f       	add	r24, r18
    19f0:	93 1f       	adc	r25, r19
    19f2:	fc 01       	movw	r30, r24
    19f4:	80 81       	ld	r24, Z
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
void KeyPad_Init(KeyPad CopyKeyPad)
{
	u8 Rows_Counter = Initial_Counter ;
	u8 Columns_Counter = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	68 f3       	brcs	.-38     	; 0x19e2 <KeyPad_Init+0x2c>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
//		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_Low);
	}

	for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    1a08:	1a 82       	std	Y+2, r1	; 0x02
    1a0a:	10 c0       	rjmp	.+32     	; 0x1a2c <KeyPad_Init+0x76>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Coulmn[Columns_Counter],Direction_Pin_Input);
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9e 01       	movw	r18, r28
    1a14:	29 5f       	subi	r18, 0xF9	; 249
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	82 0f       	add	r24, r18
    1a1a:	93 1f       	adc	r25, r19
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	80 81       	ld	r24, Z
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Row[Rows_Counter],Direction_Pin_Output);
//		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_Low);
	}

	for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	84 30       	cpi	r24, 0x04	; 4
    1a30:	68 f3       	brcs	.-38     	; 0x1a0c <KeyPad_Init+0x56>
	{
		Dio_setPinDir(CopyKeyPad.Pins_Coulmn[Columns_Counter],Direction_Pin_Input);
	}
}
    1a32:	00 00       	nop
    1a34:	2a 96       	adiw	r28, 0x0a	; 10
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <KeyPad_getValue>:

void KeyPad_getValue(KeyPad CopyKeyPad, u8 *CopyValue)
{
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	aa 97       	sbiw	r28, 0x2a	; 42
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	29 a3       	std	Y+33, r18	; 0x21
    1a60:	3a a3       	std	Y+34, r19	; 0x22
    1a62:	4b a3       	std	Y+35, r20	; 0x23
    1a64:	5c a3       	std	Y+36, r21	; 0x24
    1a66:	6d a3       	std	Y+37, r22	; 0x25
    1a68:	7e a3       	std	Y+38, r23	; 0x26
    1a6a:	8f a3       	std	Y+39, r24	; 0x27
    1a6c:	98 a7       	std	Y+40, r25	; 0x28
    1a6e:	1a a7       	std	Y+42, r17	; 0x2a
    1a70:	09 a7       	std	Y+41, r16	; 0x29
	u8 Rows_Counter = Initial_Counter ;
    1a72:	19 82       	std	Y+1, r1	; 0x01
	u8 Columns_Counter = Initial_Counter;
    1a74:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter_1 = Initial_Counter;
    1a76:	1b 82       	std	Y+3, r1	; 0x03
	u8 Logic_Value = Initial_Counter;
    1a78:	1c 82       	std	Y+4, r1	; 0x04

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    1a7a:	19 82       	std	Y+1, r1	; 0x01
    1a7c:	34 c1       	rjmp	.+616    	; 0x1ce6 <KeyPad_getValue+0x2a0>
	{
		for(Counter_1 = Initial_Counter ; Counter_1 < KeyPad_Rows ; Counter_1++)
    1a7e:	1b 82       	std	Y+3, r1	; 0x03
    1a80:	10 c0       	rjmp	.+32     	; 0x1aa2 <KeyPad_getValue+0x5c>
		{
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9e 01       	movw	r18, r28
    1a8a:	2f 5d       	subi	r18, 0xDF	; 223
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	82 0f       	add	r24, r18
    1a90:	93 1f       	adc	r25, r19
    1a92:	fc 01       	movw	r30, r24
    1a94:	80 81       	ld	r24, Z
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	u8 Counter_1 = Initial_Counter;
	u8 Logic_Value = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
	{
		for(Counter_1 = Initial_Counter ; Counter_1 < KeyPad_Rows ; Counter_1++)
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	84 30       	cpi	r24, 0x04	; 4
    1aa6:	68 f3       	brcs	.-38     	; 0x1a82 <KeyPad_getValue+0x3c>
		{
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
		}

		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_High);
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9e 01       	movw	r18, r28
    1ab0:	2f 5d       	subi	r18, 0xDF	; 223
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	82 0f       	add	r24, r18
    1ab6:	93 1f       	adc	r25, r19
    1ab8:	fc 01       	movw	r30, r24
    1aba:	80 81       	ld	r24, Z
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a8 e4       	ldi	r26, 0x48	; 72
    1ac8:	b2 e4       	ldi	r27, 0x42	; 66
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	af 83       	std	Y+7, r26	; 0x07
    1ad0:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a e7       	ldi	r20, 0x7A	; 122
    1ad8:	53 e4       	ldi	r21, 0x43	; 67
    1ada:	6d 81       	ldd	r22, Y+5	; 0x05
    1adc:	7e 81       	ldd	r23, Y+6	; 0x06
    1ade:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae0:	98 85       	ldd	r25, Y+8	; 0x08
    1ae2:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	89 87       	std	Y+9, r24	; 0x09
    1aec:	9a 87       	std	Y+10, r25	; 0x0a
    1aee:	ab 87       	std	Y+11, r26	; 0x0b
    1af0:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	69 85       	ldd	r22, Y+9	; 0x09
    1afc:	7a 85       	ldd	r23, Y+10	; 0x0a
    1afe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b00:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b02:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <KeyPad_getValue+0xce>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9e 87       	std	Y+14, r25	; 0x0e
    1b10:	8d 87       	std	Y+13, r24	; 0x0d
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <KeyPad_getValue+0x14c>
	else if (__tmp > 65535)
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	69 85       	ldd	r22, Y+9	; 0x09
    1b1e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b22:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b24:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	4c f5       	brge	.+82     	; 0x1b7e <KeyPad_getValue+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	6d 81       	ldd	r22, Y+5	; 0x05
    1b36:	7e 81       	ldd	r23, Y+6	; 0x06
    1b38:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3a:	98 85       	ldd	r25, Y+8	; 0x08
    1b3c:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9e 87       	std	Y+14, r25	; 0x0e
    1b52:	8d 87       	std	Y+13, r24	; 0x0d
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <KeyPad_getValue+0x12e>
    1b56:	89 e1       	ldi	r24, 0x19	; 25
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	98 8b       	std	Y+16, r25	; 0x10
    1b5c:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b60:	98 89       	ldd	r25, Y+16	; 0x10
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <KeyPad_getValue+0x11c>
    1b66:	98 8b       	std	Y+16, r25	; 0x10
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	9e 87       	std	Y+14, r25	; 0x0e
    1b72:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	89 2b       	or	r24, r25
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <KeyPad_getValue+0x110>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <KeyPad_getValue+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	69 85       	ldd	r22, Y+9	; 0x09
    1b80:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b82:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b84:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b86:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9e 87       	std	Y+14, r25	; 0x0e
    1b90:	8d 87       	std	Y+13, r24	; 0x0d
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	9a 8b       	std	Y+18, r25	; 0x12
    1b98:	89 8b       	std	Y+17, r24	; 0x11
    1b9a:	89 89       	ldd	r24, Y+17	; 0x11
    1b9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <KeyPad_getValue+0x158>
    1ba2:	9a 8b       	std	Y+18, r25	; 0x12
    1ba4:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(50);
		for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    1ba6:	1a 82       	std	Y+2, r1	; 0x02
    1ba8:	97 c0       	rjmp	.+302    	; 0x1cd8 <KeyPad_getValue+0x292>
		{
			Dio_getPinVal(CopyKeyPad.Pins_Coulmn[Columns_Counter]);
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9e 01       	movw	r18, r28
    1bb2:	2b 5d       	subi	r18, 0xDB	; 219
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	82 0f       	add	r24, r18
    1bb8:	93 1f       	adc	r25, r19
    1bba:	fc 01       	movw	r30, r24
    1bbc:	80 81       	ld	r24, Z
    1bbe:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Dio_getPinVal>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a8 e4       	ldi	r26, 0x48	; 72
    1bc8:	b2 e4       	ldi	r27, 0x42	; 66
    1bca:	8b 8b       	std	Y+19, r24	; 0x13
    1bcc:	9c 8b       	std	Y+20, r25	; 0x14
    1bce:	ad 8b       	std	Y+21, r26	; 0x15
    1bd0:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	53 e4       	ldi	r21, 0x43	; 67
    1bda:	6b 89       	ldd	r22, Y+19	; 0x13
    1bdc:	7c 89       	ldd	r23, Y+20	; 0x14
    1bde:	8d 89       	ldd	r24, Y+21	; 0x15
    1be0:	9e 89       	ldd	r25, Y+22	; 0x16
    1be2:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	8f 8b       	std	Y+23, r24	; 0x17
    1bec:	98 8f       	std	Y+24, r25	; 0x18
    1bee:	a9 8f       	std	Y+25, r26	; 0x19
    1bf0:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	6f 89       	ldd	r22, Y+23	; 0x17
    1bfc:	78 8d       	ldd	r23, Y+24	; 0x18
    1bfe:	89 8d       	ldd	r24, Y+25	; 0x19
    1c00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c02:	0e 94 75 12 	call	0x24ea	; 0x24ea <__cmpsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <KeyPad_getValue+0x1ce>
		__ticks = 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9c 8f       	std	Y+28, r25	; 0x1c
    1c10:	8b 8f       	std	Y+27, r24	; 0x1b
    1c12:	3f c0       	rjmp	.+126    	; 0x1c92 <KeyPad_getValue+0x24c>
	else if (__tmp > 65535)
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	6f 89       	ldd	r22, Y+23	; 0x17
    1c1e:	78 8d       	ldd	r23, Y+24	; 0x18
    1c20:	89 8d       	ldd	r24, Y+25	; 0x19
    1c22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c24:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    1c28:	18 16       	cp	r1, r24
    1c2a:	4c f5       	brge	.+82     	; 0x1c7e <KeyPad_getValue+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	6b 89       	ldd	r22, Y+19	; 0x13
    1c36:	7c 89       	ldd	r23, Y+20	; 0x14
    1c38:	8d 89       	ldd	r24, Y+21	; 0x15
    1c3a:	9e 89       	ldd	r25, Y+22	; 0x16
    1c3c:	0e 94 95 13 	call	0x272a	; 0x272a <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	bc 01       	movw	r22, r24
    1c46:	cd 01       	movw	r24, r26
    1c48:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9c 8f       	std	Y+28, r25	; 0x1c
    1c52:	8b 8f       	std	Y+27, r24	; 0x1b
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <KeyPad_getValue+0x22e>
    1c56:	89 e1       	ldi	r24, 0x19	; 25
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <KeyPad_getValue+0x21c>
    1c66:	9e 8f       	std	Y+30, r25	; 0x1e
    1c68:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	9c 8f       	std	Y+28, r25	; 0x1c
    1c72:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c78:	89 2b       	or	r24, r25
    1c7a:	69 f7       	brne	.-38     	; 0x1c56 <KeyPad_getValue+0x210>
    1c7c:	14 c0       	rjmp	.+40     	; 0x1ca6 <KeyPad_getValue+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7e:	6f 89       	ldd	r22, Y+23	; 0x17
    1c80:	78 8d       	ldd	r23, Y+24	; 0x18
    1c82:	89 8d       	ldd	r24, Y+25	; 0x19
    1c84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c86:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9c 8f       	std	Y+28, r25	; 0x1c
    1c90:	8b 8f       	std	Y+27, r24	; 0x1b
    1c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c96:	98 a3       	std	Y+32, r25	; 0x20
    1c98:	8f 8f       	std	Y+31, r24	; 0x1f
    1c9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c9c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <KeyPad_getValue+0x258>
    1ca2:	98 a3       	std	Y+32, r25	; 0x20
    1ca4:	8f 8f       	std	Y+31, r24	; 0x1f
			_delay_ms(50);

			if(Logic_Value == Status_Pin_High)
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	99 f4       	brne	.+38     	; 0x1cd2 <KeyPad_getValue+0x28c>
			{
				*CopyValue = &(Keypad_Buttons[Rows_Counter][Columns_Counter]);
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	22 0f       	add	r18, r18
    1cba:	33 1f       	adc	r19, r19
    1cbc:	22 0f       	add	r18, r18
    1cbe:	33 1f       	adc	r19, r19
    1cc0:	82 0f       	add	r24, r18
    1cc2:	93 1f       	adc	r25, r19
    1cc4:	88 57       	subi	r24, 0x78	; 120
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	28 2f       	mov	r18, r24
    1cca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ccc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cce:	fc 01       	movw	r30, r24
    1cd0:	20 83       	st	Z, r18
			Dio_setPinVal(CopyKeyPad.Pins_Row[Counter_1], Status_Pin_Low);
		}

		Dio_setPinVal(CopyKeyPad.Pins_Row[Rows_Counter], Status_Pin_High);
		_delay_ms(50);
		for(Columns_Counter = Initial_Counter ; Columns_Counter < KeyPad_Coulmn; Columns_Counter++)
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	84 30       	cpi	r24, 0x04	; 4
    1cdc:	08 f4       	brcc	.+2      	; 0x1ce0 <KeyPad_getValue+0x29a>
    1cde:	65 cf       	rjmp	.-310    	; 0x1baa <KeyPad_getValue+0x164>
	u8 Rows_Counter = Initial_Counter ;
	u8 Columns_Counter = Initial_Counter;
	u8 Counter_1 = Initial_Counter;
	u8 Logic_Value = Initial_Counter;

	for(Rows_Counter = Initial_Counter ; Rows_Counter < KeyPad_Rows; Rows_Counter++)
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	08 f4       	brcc	.+2      	; 0x1cee <KeyPad_getValue+0x2a8>
    1cec:	c8 ce       	rjmp	.-624    	; 0x1a7e <KeyPad_getValue+0x38>
			{
				*CopyValue = &(Keypad_Buttons[Rows_Counter][Columns_Counter]);
			}
		}
	}
}
    1cee:	00 00       	nop
    1cf0:	aa 96       	adiw	r28, 0x2a	; 42
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <App_Init>:

/********** SECTION : Global Area **********/

/********** SECTION : Functions setUp Definitions **********/
void App_Init(void)
{
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62

}
    1d0e:	00 00       	nop
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	08 95       	ret

00001d16 <App_Loop>:
/********** SECTION : Functions Loop Definitions **********/
void App_Loop(void)
{
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62

}
    1d1e:	00 00       	nop
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <Motor_2_Motors_Init>:
/********** SECTION : Includes **********/
#include "Dc_Motor_Init.h"

/********** SECTION : Functions Definitions **********/
void Motor_2_Motors_Init(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <Motor_2_Motors_Init+0x6>
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <Motor_2_Motors_Init+0x8>
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <Motor_2_Motors_Init+0xa>
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	69 83       	std	Y+1, r22	; 0x01
    1d36:	7a 83       	std	Y+2, r23	; 0x02
    1d38:	8b 83       	std	Y+3, r24	; 0x03
    1d3a:	2c 83       	std	Y+4, r18	; 0x04
    1d3c:	3d 83       	std	Y+5, r19	; 0x05
    1d3e:	4e 83       	std	Y+6, r20	; 0x06
	Dio_setPinDir(m1.IN1, Direction_Pin_Output);
    1d40:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <m1>
    1d44:	61 e0       	ldi	r22, 0x01	; 1
    1d46:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(m1.IN2, Direction_Pin_Output);
    1d4a:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <m1+0x1>
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(m1.ENA, Direction_Pin_Output);
    1d54:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <m1+0x2>
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>


	Dio_setPinDir(m2.IN3, Direction_Pin_Output);
    1d5e:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <m2>
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(m2.IN4, Direction_Pin_Output);
    1d68:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <m2+0x1>
    1d6c:	61 e0       	ldi	r22, 0x01	; 1
    1d6e:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(m2.ENB, Direction_Pin_Output);
    1d72:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <m2+0x2>
    1d76:	61 e0       	ldi	r22, 0x01	; 1
    1d78:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>

}
    1d7c:	00 00       	nop
    1d7e:	26 96       	adiw	r28, 0x06	; 6
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	08 95       	ret

00001d90 <Motor_2_Motors_Forward>:


void Motor_2_Motors_Forward(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <Motor_2_Motors_Forward+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <Motor_2_Motors_Forward+0x8>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <Motor_2_Motors_Forward+0xa>
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	69 83       	std	Y+1, r22	; 0x01
    1da0:	7a 83       	std	Y+2, r23	; 0x02
    1da2:	8b 83       	std	Y+3, r24	; 0x03
    1da4:	2c 83       	std	Y+4, r18	; 0x04
    1da6:	3d 83       	std	Y+5, r19	; 0x05
    1da8:	4e 83       	std	Y+6, r20	; 0x06
	Dio_setPinVal(CopyMotor_1.IN1, Status_Pin_High);
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.IN2, Status_Pin_Low);
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.ENA, Status_Pin_High);
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>

	Dio_setPinVal(CopyMotor_2.IN3, Status_Pin_High);
    1dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.IN4, Status_Pin_Low);
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.ENB, Status_Pin_High);
    1dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd4:	61 e0       	ldi	r22, 0x01	; 1
    1dd6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
}
    1dda:	00 00       	nop
    1ddc:	26 96       	adiw	r28, 0x06	; 6
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	08 95       	ret

00001dee <Motor_2_Motors_Reverse>:

void Motor_2_Motors_Reverse(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <Motor_2_Motors_Reverse+0x6>
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <Motor_2_Motors_Reverse+0x8>
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <Motor_2_Motors_Reverse+0xa>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	69 83       	std	Y+1, r22	; 0x01
    1dfe:	7a 83       	std	Y+2, r23	; 0x02
    1e00:	8b 83       	std	Y+3, r24	; 0x03
    1e02:	2c 83       	std	Y+4, r18	; 0x04
    1e04:	3d 83       	std	Y+5, r19	; 0x05
    1e06:	4e 83       	std	Y+6, r20	; 0x06
	Dio_setPinVal(CopyMotor_1.IN1, Status_Pin_Low);
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.IN2, Status_Pin_High);
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.ENA, Status_Pin_High);
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>


	Dio_setPinVal(CopyMotor_2.IN3, Status_Pin_Low);
    1e20:	8c 81       	ldd	r24, Y+4	; 0x04
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.IN4, Status_Pin_High);
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.ENB, Status_Pin_High);
    1e30:	8e 81       	ldd	r24, Y+6	; 0x06
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>

}
    1e38:	00 00       	nop
    1e3a:	26 96       	adiw	r28, 0x06	; 6
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	08 95       	ret

00001e4c <Motor_2_Motors_Off>:

void Motor_2_Motors_Off(motor1 CopyMotor_1,motor2 CopyMotor_2)
{
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <Motor_2_Motors_Off+0x6>
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <Motor_2_Motors_Off+0x8>
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <Motor_2_Motors_Off+0xa>
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	69 83       	std	Y+1, r22	; 0x01
    1e5c:	7a 83       	std	Y+2, r23	; 0x02
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	2c 83       	std	Y+4, r18	; 0x04
    1e62:	3d 83       	std	Y+5, r19	; 0x05
    1e64:	4e 83       	std	Y+6, r20	; 0x06
	Dio_setPinVal(CopyMotor_1.IN1, Status_Pin_Low);
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.IN2, Status_Pin_Low);
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_1.ENA, Status_Pin_Low);
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>


	Dio_setPinVal(CopyMotor_2.IN3, Status_Pin_Low);
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.IN4, Status_Pin_Low);
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
	Dio_setPinVal(CopyMotor_2.ENB, Status_Pin_Low);
    1e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
}
    1e96:	00 00       	nop
    1e98:	26 96       	adiw	r28, 0x06	; 6
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <Bcd_7segInit>:
/********** SECTION : Includes **********/
#include "bcd_Init.h"

/********** SECTION : Functions Definitions **********/
void Bcd_7segInit(BCD Copy7seg)
{
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <Bcd_7segInit+0x6>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <Bcd_7segInit+0x8>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	69 83       	std	Y+1, r22	; 0x01
    1eb8:	7a 83       	std	Y+2, r23	; 0x02
    1eba:	8b 83       	std	Y+3, r24	; 0x03
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
	Dio_setPinDir(Copy7seg.Pin_1, Direction_Pin_Output);
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_2, Direction_Pin_Output);
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_3, Direction_Pin_Output);
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	61 e0       	ldi	r22, 0x01	; 1
    1ed2:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
	Dio_setPinDir(Copy7seg.Pin_4, Direction_Pin_Output);
    1ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	0e 94 b4 01 	call	0x368	; 0x368 <Dio_setPinDir>
}
    1ede:	00 00       	nop
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	08 95       	ret

00001eee <Bcd_7segWriteNum>:

void Bcd_7segWriteNum(BCD Copy7segNum , u8 CopyNumber)
{
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <Bcd_7segWriteNum+0x6>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <Bcd_7segWriteNum+0x8>
    1ef6:	1f 92       	push	r1
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	69 83       	std	Y+1, r22	; 0x01
    1efe:	7a 83       	std	Y+2, r23	; 0x02
    1f00:	8b 83       	std	Y+3, r24	; 0x03
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	4d 83       	std	Y+5, r20	; 0x05
	switch (CopyNumber) {
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	09 2e       	mov	r0, r25
    1f0e:	00 0c       	add	r0, r0
    1f10:	aa 0b       	sbc	r26, r26
    1f12:	bb 0b       	sbc	r27, r27
    1f14:	8a 30       	cpi	r24, 0x0A	; 10
    1f16:	91 05       	cpc	r25, r1
    1f18:	a1 05       	cpc	r26, r1
    1f1a:	b1 05       	cpc	r27, r1
    1f1c:	08 f0       	brcs	.+2      	; 0x1f20 <Bcd_7segWriteNum+0x32>
    1f1e:	b9 c0       	rjmp	.+370    	; 0x2092 <Bcd_7segWriteNum+0x1a4>
    1f20:	8b 56       	subi	r24, 0x6B	; 107
    1f22:	90 4f       	sbci	r25, 0xF0	; 240
    1f24:	fc 01       	movw	r30, r24
    1f26:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__tablejump2__>
    1f2a:	9f 0f       	add	r25, r31
    1f2c:	b0 0f       	add	r27, r16
    1f2e:	c1 0f       	add	r28, r17
    1f30:	d2 0f       	add	r29, r18
    1f32:	e3 0f       	add	r30, r19
    1f34:	f4 0f       	add	r31, r20
    1f36:	05 10       	cpse	r0, r5
    1f38:	16 10       	cpse	r1, r6
    1f3a:	27 10       	cpse	r2, r7
    1f3c:	38 10       	cpse	r3, r8
		case 0:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    1f5e:	9a c0       	rjmp	.+308    	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		case 1:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1f78:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    1f80:	89 c0       	rjmp	.+274    	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		case 2:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	61 e0       	ldi	r22, 0x01	; 1
    1f8e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    1fa2:	78 c0       	rjmp	.+240    	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		case 3:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    1fc4:	67 c0       	rjmp	.+206    	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		case 4:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    1fde:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    1fe6:	56 c0       	rjmp	.+172    	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		case 5:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	61 e0       	ldi	r22, 0x01	; 1
    1ffc:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    2008:	45 c0       	rjmp	.+138    	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		case 6:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	61 e0       	ldi	r22, 0x01	; 1
    201e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2022:	8c 81       	ldd	r24, Y+4	; 0x04
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    202a:	34 c0       	rjmp	.+104    	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		case 7:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_High);	// B = 1
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_High);	// C = 1
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_Low);	// D = 0
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    204c:	23 c0       	rjmp	.+70     	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		case 8:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_Low);	// A = 0
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    2066:	8c 81       	ldd	r24, Y+4	; 0x04
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    206e:	12 c0       	rjmp	.+36     	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		case 9:
				Dio_setPinVal(Copy7segNum.Pin_1, Status_Pin_High);	// A = 1
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_2, Status_Pin_Low);	// B = 0
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_3, Status_Pin_Low);	// C = 0
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(Copy7segNum.Pin_4, Status_Pin_High);	// D = 1
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
			break;
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <Bcd_7segWriteNum+0x1a6>
		default:
			break;
    2092:	00 00       	nop
	}
}
    2094:	00 00       	nop
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	08 95       	ret

000020a6 <Bcd_MPX_2Enable>:

void Bcd_MPX_2Enable(MPX_2_Enables CopyPinsEnable, u8 CopyCommonType, u8 CopyStatus)
{
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <Bcd_MPX_2Enable+0x6>
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <Bcd_MPX_2Enable+0x8>
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	6b 83       	std	Y+3, r22	; 0x03
    20b8:	4c 83       	std	Y+4, r20	; 0x04
	if(CopyStatus == Enable){
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	d1 f4       	brne	.+52     	; 0x20f4 <Bcd_MPX_2Enable+0x4e>
		switch (CopyCommonType) {
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	61 f0       	breq	.+24     	; 0x20e2 <Bcd_MPX_2Enable+0x3c>
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <Bcd_MPX_2Enable+0x2a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
				break;
			default:
				break;
    20ce:	2f c0       	rjmp	.+94     	; 0x212e <Bcd_MPX_2Enable+0x88>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    20e0:	26 c0       	rjmp	.+76     	; 0x212e <Bcd_MPX_2Enable+0x88>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    20f2:	1d c0       	rjmp	.+58     	; 0x212e <Bcd_MPX_2Enable+0x88>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable){
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	88 23       	and	r24, r24
    20f8:	d1 f4       	brne	.+52     	; 0x212e <Bcd_MPX_2Enable+0x88>
		switch (CopyCommonType) {
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	61 f0       	breq	.+24     	; 0x211c <Bcd_MPX_2Enable+0x76>
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	09 f0       	breq	.+2      	; 0x210a <Bcd_MPX_2Enable+0x64>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
				break;
			default:
				break;
    2108:	12 c0       	rjmp	.+36     	; 0x212e <Bcd_MPX_2Enable+0x88>
	}
	else if (CopyStatus == Disable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    211a:	09 c0       	rjmp	.+18     	; 0x212e <Bcd_MPX_2Enable+0x88>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	61 e0       	ldi	r22, 0x01	; 1
    2120:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    212c:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    212e:	00 00       	nop
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

0000213e <Bcd_MPX_4Enable>:
void Bcd_MPX_4Enable(MPX_4_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	00 d0       	rcall	.+0      	; 0x2144 <Bcd_MPX_4Enable+0x6>
    2144:	00 d0       	rcall	.+0      	; 0x2146 <Bcd_MPX_4Enable+0x8>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <Bcd_MPX_4Enable+0xa>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	69 83       	std	Y+1, r22	; 0x01
    214e:	7a 83       	std	Y+2, r23	; 0x02
    2150:	8b 83       	std	Y+3, r24	; 0x03
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	4d 83       	std	Y+5, r20	; 0x05
    2156:	2e 83       	std	Y+6, r18	; 0x06
	if(CopyStatus == Enable){
    2158:	8e 81       	ldd	r24, Y+6	; 0x06
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	51 f5       	brne	.+84     	; 0x21b2 <Bcd_MPX_4Enable+0x74>
		switch (CopyCommonType) {
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	a1 f0       	breq	.+40     	; 0x2190 <Bcd_MPX_4Enable+0x52>
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	09 f0       	breq	.+2      	; 0x216e <Bcd_MPX_4Enable+0x30>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				break;
			default:
				break;
    216c:	4f c0       	rjmp	.+158    	; 0x220c <Bcd_MPX_4Enable+0xce>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	61 e0       	ldi	r22, 0x01	; 1
    217a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    218e:	3e c0       	rjmp	.+124    	; 0x220c <Bcd_MPX_4Enable+0xce>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    21a8:	8c 81       	ldd	r24, Y+4	; 0x04
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    21b0:	2d c0       	rjmp	.+90     	; 0x220c <Bcd_MPX_4Enable+0xce>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    21b2:	8e 81       	ldd	r24, Y+6	; 0x06
    21b4:	88 23       	and	r24, r24
    21b6:	51 f5       	brne	.+84     	; 0x220c <Bcd_MPX_4Enable+0xce>
	{
		switch (CopyCommonType) {
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	a1 f0       	breq	.+40     	; 0x21ea <Bcd_MPX_4Enable+0xac>
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <Bcd_MPX_4Enable+0x8a>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				break;
			default:
				break;
    21c6:	22 c0       	rjmp	.+68     	; 0x220c <Bcd_MPX_4Enable+0xce>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    21e8:	11 c0       	rjmp	.+34     	; 0x220c <Bcd_MPX_4Enable+0xce>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    220a:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    220c:	00 00       	nop
    220e:	26 96       	adiw	r28, 0x06	; 6
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <Bcd_MPX_6Enable>:
void Bcd_MPX_6Enable(MPX_6_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    2220:	0f 93       	push	r16
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	28 97       	sbiw	r28, 0x08	; 8
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	49 83       	std	Y+1, r20	; 0x01
    2238:	5a 83       	std	Y+2, r21	; 0x02
    223a:	6b 83       	std	Y+3, r22	; 0x03
    223c:	7c 83       	std	Y+4, r23	; 0x04
    223e:	8d 83       	std	Y+5, r24	; 0x05
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	2f 83       	std	Y+7, r18	; 0x07
    2244:	08 87       	std	Y+8, r16	; 0x08
	if(CopyStatus == Enable){
    2246:	88 85       	ldd	r24, Y+8	; 0x08
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	d1 f5       	brne	.+116    	; 0x22c0 <Bcd_MPX_6Enable+0xa0>
		switch (CopyCommonType) {
    224c:	8f 81       	ldd	r24, Y+7	; 0x07
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	e1 f0       	breq	.+56     	; 0x228e <Bcd_MPX_6Enable+0x6e>
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	09 f0       	breq	.+2      	; 0x225c <Bcd_MPX_6Enable+0x3c>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				break;
			default:
				break;
    225a:	6f c0       	rjmp	.+222    	; 0x233a <Bcd_MPX_6Enable+0x11a>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	61 e0       	ldi	r22, 0x01	; 1
    2260:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	61 e0       	ldi	r22, 0x01	; 1
    2270:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	61 e0       	ldi	r22, 0x01	; 1
    2278:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    2284:	8e 81       	ldd	r24, Y+6	; 0x06
    2286:	61 e0       	ldi	r22, 0x01	; 1
    2288:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    228c:	56 c0       	rjmp	.+172    	; 0x233a <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    22b6:	8e 81       	ldd	r24, Y+6	; 0x06
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    22be:	3d c0       	rjmp	.+122    	; 0x233a <Bcd_MPX_6Enable+0x11a>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    22c0:	88 85       	ldd	r24, Y+8	; 0x08
    22c2:	88 23       	and	r24, r24
    22c4:	d1 f5       	brne	.+116    	; 0x233a <Bcd_MPX_6Enable+0x11a>
	{
		switch (CopyCommonType) {
    22c6:	8f 81       	ldd	r24, Y+7	; 0x07
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	e1 f0       	breq	.+56     	; 0x2308 <Bcd_MPX_6Enable+0xe8>
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <Bcd_MPX_6Enable+0xb6>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				break;
			default:
				break;
    22d4:	32 c0       	rjmp	.+100    	; 0x233a <Bcd_MPX_6Enable+0x11a>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	60 e0       	ldi	r22, 0x00	; 0
    22da:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    22ee:	8c 81       	ldd	r24, Y+4	; 0x04
    22f0:	60 e0       	ldi	r22, 0x00	; 0
    22f2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    22fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    2306:	19 c0       	rjmp	.+50     	; 0x233a <Bcd_MPX_6Enable+0x11a>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	61 e0       	ldi	r22, 0x01	; 1
    230c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    2320:	8c 81       	ldd	r24, Y+4	; 0x04
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	61 e0       	ldi	r22, 0x01	; 1
    232c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    2330:	8e 81       	ldd	r24, Y+6	; 0x06
    2332:	61 e0       	ldi	r22, 0x01	; 1
    2334:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    2338:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    233a:	00 00       	nop
    233c:	28 96       	adiw	r28, 0x08	; 8
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	0f 91       	pop	r16
    234e:	08 95       	ret

00002350 <Bcd_MPX_8Enable>:
void Bcd_MPX_8Enable(MPX_8_Enables CopyPinsEnable , u8 CopyCommonType, u8 CopyStatus)
{
    2350:	ef 92       	push	r14
    2352:	0f 93       	push	r16
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	2a 97       	sbiw	r28, 0x0a	; 10
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	29 83       	std	Y+1, r18	; 0x01
    236a:	3a 83       	std	Y+2, r19	; 0x02
    236c:	4b 83       	std	Y+3, r20	; 0x03
    236e:	5c 83       	std	Y+4, r21	; 0x04
    2370:	6d 83       	std	Y+5, r22	; 0x05
    2372:	7e 83       	std	Y+6, r23	; 0x06
    2374:	8f 83       	std	Y+7, r24	; 0x07
    2376:	98 87       	std	Y+8, r25	; 0x08
    2378:	09 87       	std	Y+9, r16	; 0x09
    237a:	ea 86       	std	Y+10, r14	; 0x0a
	if(CopyStatus == Enable){
    237c:	8a 85       	ldd	r24, Y+10	; 0x0a
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	09 f0       	breq	.+2      	; 0x2384 <Bcd_MPX_8Enable+0x34>
    2382:	4a c0       	rjmp	.+148    	; 0x2418 <Bcd_MPX_8Enable+0xc8>
		switch (CopyCommonType) {
    2384:	89 85       	ldd	r24, Y+9	; 0x09
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	21 f1       	breq	.+72     	; 0x23d6 <Bcd_MPX_8Enable+0x86>
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	09 f0       	breq	.+2      	; 0x2394 <Bcd_MPX_8Enable+0x44>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
				break;
			default:
				break;
    2392:	90 c0       	rjmp	.+288    	; 0x24b4 <Bcd_MPX_8Enable+0x164>
{
	if(CopyStatus == Enable){
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	61 e0       	ldi	r22, 0x01	; 1
    2398:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    23ac:	8c 81       	ldd	r24, Y+4	; 0x04
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	61 e0       	ldi	r22, 0x01	; 1
    23b8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    23bc:	8e 81       	ldd	r24, Y+6	; 0x06
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
    23c4:	8f 81       	ldd	r24, Y+7	; 0x07
    23c6:	61 e0       	ldi	r22, 0x01	; 1
    23c8:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
    23cc:	88 85       	ldd	r24, Y+8	; 0x08
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    23d4:	6f c0       	rjmp	.+222    	; 0x24b4 <Bcd_MPX_8Enable+0x164>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    23fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
    2406:	8f 81       	ldd	r24, Y+7	; 0x07
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
    240e:	88 85       	ldd	r24, Y+8	; 0x08
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    2416:	4e c0       	rjmp	.+156    	; 0x24b4 <Bcd_MPX_8Enable+0x164>
			default:
				break;
		}
	}
	else if (CopyStatus == Disable)
    2418:	8a 85       	ldd	r24, Y+10	; 0x0a
    241a:	88 23       	and	r24, r24
    241c:	09 f0       	breq	.+2      	; 0x2420 <Bcd_MPX_8Enable+0xd0>
    241e:	4a c0       	rjmp	.+148    	; 0x24b4 <Bcd_MPX_8Enable+0x164>
	{
		switch (CopyCommonType) {
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	88 2f       	mov	r24, r24
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	21 f1       	breq	.+72     	; 0x2472 <Bcd_MPX_8Enable+0x122>
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	09 f0       	breq	.+2      	; 0x2430 <Bcd_MPX_8Enable+0xe0>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
				break;
			default:
				break;
    242e:	42 c0       	rjmp	.+132    	; 0x24b4 <Bcd_MPX_8Enable+0x164>
	else if (CopyStatus == Disable)
	{
		switch (CopyCommonType) {
			case Common_Anode :

				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_Low);
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_Low);
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_Low);
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_Low);
    2448:	8c 81       	ldd	r24, Y+4	; 0x04
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_Low);
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_Low);
    2458:	8e 81       	ldd	r24, Y+6	; 0x06
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_Low);
    2460:	8f 81       	ldd	r24, Y+7	; 0x07
    2462:	60 e0       	ldi	r22, 0x00	; 0
    2464:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_Low);
    2468:	88 85       	ldd	r24, Y+8	; 0x08
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    2470:	21 c0       	rjmp	.+66     	; 0x24b4 <Bcd_MPX_8Enable+0x164>
			case Common_Cathod :
				Dio_setPinVal(CopyPinsEnable.EN_1, Status_Pin_High);
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	61 e0       	ldi	r22, 0x01	; 1
    2476:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_2, Status_Pin_High);
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_3, Status_Pin_High);
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_4, Status_Pin_High);
    248a:	8c 81       	ldd	r24, Y+4	; 0x04
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_5, Status_Pin_High);
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_6, Status_Pin_High);
    249a:	8e 81       	ldd	r24, Y+6	; 0x06
    249c:	61 e0       	ldi	r22, 0x01	; 1
    249e:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_7, Status_Pin_High);
    24a2:	8f 81       	ldd	r24, Y+7	; 0x07
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				Dio_setPinVal(CopyPinsEnable.EN_8, Status_Pin_High);
    24aa:	88 85       	ldd	r24, Y+8	; 0x08
    24ac:	61 e0       	ldi	r22, 0x01	; 1
    24ae:	0e 94 28 02 	call	0x450	; 0x450 <Dio_setPinVal>
				break;
    24b2:	00 00       	nop
			default:
				break;
		}
	}
	else{}
}
    24b4:	00 00       	nop
    24b6:	2a 96       	adiw	r28, 0x0a	; 10
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	0f 91       	pop	r16
    24c8:	ef 90       	pop	r14
    24ca:	08 95       	ret

000024cc <main>:
 */
/********** SECTION : Includes **********/
#include "Main_Init.h"
/********** SECTION : Main Function **********/
int main (void)
{
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    24d4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <App_Init>
	while(1)
	{
		App_Loop();
    24d8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <App_Loop>
    24dc:	fd cf       	rjmp	.-6      	; 0x24d8 <main+0xc>

000024de <__tablejump2__>:
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	05 90       	lpm	r0, Z+
    24e4:	f4 91       	lpm	r31, Z
    24e6:	e0 2d       	mov	r30, r0
    24e8:	09 94       	ijmp

000024ea <__cmpsf2>:
    24ea:	0e 94 1b 13 	call	0x2636	; 0x2636 <__fp_cmp>
    24ee:	08 f4       	brcc	.+2      	; 0x24f2 <__cmpsf2+0x8>
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	08 95       	ret

000024f4 <__divsf3>:
    24f4:	0e 94 8e 12 	call	0x251c	; 0x251c <__divsf3x>
    24f8:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__fp_round>
    24fc:	0e 94 4f 13 	call	0x269e	; 0x269e <__fp_pscB>
    2500:	58 f0       	brcs	.+22     	; 0x2518 <__divsf3+0x24>
    2502:	0e 94 48 13 	call	0x2690	; 0x2690 <__fp_pscA>
    2506:	40 f0       	brcs	.+16     	; 0x2518 <__divsf3+0x24>
    2508:	29 f4       	brne	.+10     	; 0x2514 <__divsf3+0x20>
    250a:	5f 3f       	cpi	r21, 0xFF	; 255
    250c:	29 f0       	breq	.+10     	; 0x2518 <__divsf3+0x24>
    250e:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_inf>
    2512:	51 11       	cpse	r21, r1
    2514:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__fp_szero>
    2518:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_nan>

0000251c <__divsf3x>:
    251c:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_split3>
    2520:	68 f3       	brcs	.-38     	; 0x24fc <__divsf3+0x8>

00002522 <__divsf3_pse>:
    2522:	99 23       	and	r25, r25
    2524:	b1 f3       	breq	.-20     	; 0x2512 <__divsf3+0x1e>
    2526:	55 23       	and	r21, r21
    2528:	91 f3       	breq	.-28     	; 0x250e <__divsf3+0x1a>
    252a:	95 1b       	sub	r25, r21
    252c:	55 0b       	sbc	r21, r21
    252e:	bb 27       	eor	r27, r27
    2530:	aa 27       	eor	r26, r26
    2532:	62 17       	cp	r22, r18
    2534:	73 07       	cpc	r23, r19
    2536:	84 07       	cpc	r24, r20
    2538:	38 f0       	brcs	.+14     	; 0x2548 <__divsf3_pse+0x26>
    253a:	9f 5f       	subi	r25, 0xFF	; 255
    253c:	5f 4f       	sbci	r21, 0xFF	; 255
    253e:	22 0f       	add	r18, r18
    2540:	33 1f       	adc	r19, r19
    2542:	44 1f       	adc	r20, r20
    2544:	aa 1f       	adc	r26, r26
    2546:	a9 f3       	breq	.-22     	; 0x2532 <__divsf3_pse+0x10>
    2548:	35 d0       	rcall	.+106    	; 0x25b4 <__divsf3_pse+0x92>
    254a:	0e 2e       	mov	r0, r30
    254c:	3a f0       	brmi	.+14     	; 0x255c <__divsf3_pse+0x3a>
    254e:	e0 e8       	ldi	r30, 0x80	; 128
    2550:	32 d0       	rcall	.+100    	; 0x25b6 <__divsf3_pse+0x94>
    2552:	91 50       	subi	r25, 0x01	; 1
    2554:	50 40       	sbci	r21, 0x00	; 0
    2556:	e6 95       	lsr	r30
    2558:	00 1c       	adc	r0, r0
    255a:	ca f7       	brpl	.-14     	; 0x254e <__divsf3_pse+0x2c>
    255c:	2b d0       	rcall	.+86     	; 0x25b4 <__divsf3_pse+0x92>
    255e:	fe 2f       	mov	r31, r30
    2560:	29 d0       	rcall	.+82     	; 0x25b4 <__divsf3_pse+0x92>
    2562:	66 0f       	add	r22, r22
    2564:	77 1f       	adc	r23, r23
    2566:	88 1f       	adc	r24, r24
    2568:	bb 1f       	adc	r27, r27
    256a:	26 17       	cp	r18, r22
    256c:	37 07       	cpc	r19, r23
    256e:	48 07       	cpc	r20, r24
    2570:	ab 07       	cpc	r26, r27
    2572:	b0 e8       	ldi	r27, 0x80	; 128
    2574:	09 f0       	breq	.+2      	; 0x2578 <__divsf3_pse+0x56>
    2576:	bb 0b       	sbc	r27, r27
    2578:	80 2d       	mov	r24, r0
    257a:	bf 01       	movw	r22, r30
    257c:	ff 27       	eor	r31, r31
    257e:	93 58       	subi	r25, 0x83	; 131
    2580:	5f 4f       	sbci	r21, 0xFF	; 255
    2582:	3a f0       	brmi	.+14     	; 0x2592 <__divsf3_pse+0x70>
    2584:	9e 3f       	cpi	r25, 0xFE	; 254
    2586:	51 05       	cpc	r21, r1
    2588:	78 f0       	brcs	.+30     	; 0x25a8 <__divsf3_pse+0x86>
    258a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_inf>
    258e:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__fp_szero>
    2592:	5f 3f       	cpi	r21, 0xFF	; 255
    2594:	e4 f3       	brlt	.-8      	; 0x258e <__divsf3_pse+0x6c>
    2596:	98 3e       	cpi	r25, 0xE8	; 232
    2598:	d4 f3       	brlt	.-12     	; 0x258e <__divsf3_pse+0x6c>
    259a:	86 95       	lsr	r24
    259c:	77 95       	ror	r23
    259e:	67 95       	ror	r22
    25a0:	b7 95       	ror	r27
    25a2:	f7 95       	ror	r31
    25a4:	9f 5f       	subi	r25, 0xFF	; 255
    25a6:	c9 f7       	brne	.-14     	; 0x259a <__divsf3_pse+0x78>
    25a8:	88 0f       	add	r24, r24
    25aa:	91 1d       	adc	r25, r1
    25ac:	96 95       	lsr	r25
    25ae:	87 95       	ror	r24
    25b0:	97 f9       	bld	r25, 7
    25b2:	08 95       	ret
    25b4:	e1 e0       	ldi	r30, 0x01	; 1
    25b6:	66 0f       	add	r22, r22
    25b8:	77 1f       	adc	r23, r23
    25ba:	88 1f       	adc	r24, r24
    25bc:	bb 1f       	adc	r27, r27
    25be:	62 17       	cp	r22, r18
    25c0:	73 07       	cpc	r23, r19
    25c2:	84 07       	cpc	r24, r20
    25c4:	ba 07       	cpc	r27, r26
    25c6:	20 f0       	brcs	.+8      	; 0x25d0 <__divsf3_pse+0xae>
    25c8:	62 1b       	sub	r22, r18
    25ca:	73 0b       	sbc	r23, r19
    25cc:	84 0b       	sbc	r24, r20
    25ce:	ba 0b       	sbc	r27, r26
    25d0:	ee 1f       	adc	r30, r30
    25d2:	88 f7       	brcc	.-30     	; 0x25b6 <__divsf3_pse+0x94>
    25d4:	e0 95       	com	r30
    25d6:	08 95       	ret

000025d8 <__fixunssfsi>:
    25d8:	0e 94 6f 13 	call	0x26de	; 0x26de <__fp_splitA>
    25dc:	88 f0       	brcs	.+34     	; 0x2600 <__fixunssfsi+0x28>
    25de:	9f 57       	subi	r25, 0x7F	; 127
    25e0:	98 f0       	brcs	.+38     	; 0x2608 <__fixunssfsi+0x30>
    25e2:	b9 2f       	mov	r27, r25
    25e4:	99 27       	eor	r25, r25
    25e6:	b7 51       	subi	r27, 0x17	; 23
    25e8:	b0 f0       	brcs	.+44     	; 0x2616 <__fixunssfsi+0x3e>
    25ea:	e1 f0       	breq	.+56     	; 0x2624 <__fixunssfsi+0x4c>
    25ec:	66 0f       	add	r22, r22
    25ee:	77 1f       	adc	r23, r23
    25f0:	88 1f       	adc	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	1a f0       	brmi	.+6      	; 0x25fc <__fixunssfsi+0x24>
    25f6:	ba 95       	dec	r27
    25f8:	c9 f7       	brne	.-14     	; 0x25ec <__fixunssfsi+0x14>
    25fa:	14 c0       	rjmp	.+40     	; 0x2624 <__fixunssfsi+0x4c>
    25fc:	b1 30       	cpi	r27, 0x01	; 1
    25fe:	91 f0       	breq	.+36     	; 0x2624 <__fixunssfsi+0x4c>
    2600:	0e 94 89 13 	call	0x2712	; 0x2712 <__fp_zero>
    2604:	b1 e0       	ldi	r27, 0x01	; 1
    2606:	08 95       	ret
    2608:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__fp_zero>
    260c:	67 2f       	mov	r22, r23
    260e:	78 2f       	mov	r23, r24
    2610:	88 27       	eor	r24, r24
    2612:	b8 5f       	subi	r27, 0xF8	; 248
    2614:	39 f0       	breq	.+14     	; 0x2624 <__fixunssfsi+0x4c>
    2616:	b9 3f       	cpi	r27, 0xF9	; 249
    2618:	cc f3       	brlt	.-14     	; 0x260c <__fixunssfsi+0x34>
    261a:	86 95       	lsr	r24
    261c:	77 95       	ror	r23
    261e:	67 95       	ror	r22
    2620:	b3 95       	inc	r27
    2622:	d9 f7       	brne	.-10     	; 0x261a <__fixunssfsi+0x42>
    2624:	3e f4       	brtc	.+14     	; 0x2634 <__fixunssfsi+0x5c>
    2626:	90 95       	com	r25
    2628:	80 95       	com	r24
    262a:	70 95       	com	r23
    262c:	61 95       	neg	r22
    262e:	7f 4f       	sbci	r23, 0xFF	; 255
    2630:	8f 4f       	sbci	r24, 0xFF	; 255
    2632:	9f 4f       	sbci	r25, 0xFF	; 255
    2634:	08 95       	ret

00002636 <__fp_cmp>:
    2636:	99 0f       	add	r25, r25
    2638:	00 08       	sbc	r0, r0
    263a:	55 0f       	add	r21, r21
    263c:	aa 0b       	sbc	r26, r26
    263e:	e0 e8       	ldi	r30, 0x80	; 128
    2640:	fe ef       	ldi	r31, 0xFE	; 254
    2642:	16 16       	cp	r1, r22
    2644:	17 06       	cpc	r1, r23
    2646:	e8 07       	cpc	r30, r24
    2648:	f9 07       	cpc	r31, r25
    264a:	c0 f0       	brcs	.+48     	; 0x267c <__fp_cmp+0x46>
    264c:	12 16       	cp	r1, r18
    264e:	13 06       	cpc	r1, r19
    2650:	e4 07       	cpc	r30, r20
    2652:	f5 07       	cpc	r31, r21
    2654:	98 f0       	brcs	.+38     	; 0x267c <__fp_cmp+0x46>
    2656:	62 1b       	sub	r22, r18
    2658:	73 0b       	sbc	r23, r19
    265a:	84 0b       	sbc	r24, r20
    265c:	95 0b       	sbc	r25, r21
    265e:	39 f4       	brne	.+14     	; 0x266e <__fp_cmp+0x38>
    2660:	0a 26       	eor	r0, r26
    2662:	61 f0       	breq	.+24     	; 0x267c <__fp_cmp+0x46>
    2664:	23 2b       	or	r18, r19
    2666:	24 2b       	or	r18, r20
    2668:	25 2b       	or	r18, r21
    266a:	21 f4       	brne	.+8      	; 0x2674 <__fp_cmp+0x3e>
    266c:	08 95       	ret
    266e:	0a 26       	eor	r0, r26
    2670:	09 f4       	brne	.+2      	; 0x2674 <__fp_cmp+0x3e>
    2672:	a1 40       	sbci	r26, 0x01	; 1
    2674:	a6 95       	lsr	r26
    2676:	8f ef       	ldi	r24, 0xFF	; 255
    2678:	81 1d       	adc	r24, r1
    267a:	81 1d       	adc	r24, r1
    267c:	08 95       	ret

0000267e <__fp_inf>:
    267e:	97 f9       	bld	r25, 7
    2680:	9f 67       	ori	r25, 0x7F	; 127
    2682:	80 e8       	ldi	r24, 0x80	; 128
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	08 95       	ret

0000268a <__fp_nan>:
    268a:	9f ef       	ldi	r25, 0xFF	; 255
    268c:	80 ec       	ldi	r24, 0xC0	; 192
    268e:	08 95       	ret

00002690 <__fp_pscA>:
    2690:	00 24       	eor	r0, r0
    2692:	0a 94       	dec	r0
    2694:	16 16       	cp	r1, r22
    2696:	17 06       	cpc	r1, r23
    2698:	18 06       	cpc	r1, r24
    269a:	09 06       	cpc	r0, r25
    269c:	08 95       	ret

0000269e <__fp_pscB>:
    269e:	00 24       	eor	r0, r0
    26a0:	0a 94       	dec	r0
    26a2:	12 16       	cp	r1, r18
    26a4:	13 06       	cpc	r1, r19
    26a6:	14 06       	cpc	r1, r20
    26a8:	05 06       	cpc	r0, r21
    26aa:	08 95       	ret

000026ac <__fp_round>:
    26ac:	09 2e       	mov	r0, r25
    26ae:	03 94       	inc	r0
    26b0:	00 0c       	add	r0, r0
    26b2:	11 f4       	brne	.+4      	; 0x26b8 <__fp_round+0xc>
    26b4:	88 23       	and	r24, r24
    26b6:	52 f0       	brmi	.+20     	; 0x26cc <__fp_round+0x20>
    26b8:	bb 0f       	add	r27, r27
    26ba:	40 f4       	brcc	.+16     	; 0x26cc <__fp_round+0x20>
    26bc:	bf 2b       	or	r27, r31
    26be:	11 f4       	brne	.+4      	; 0x26c4 <__fp_round+0x18>
    26c0:	60 ff       	sbrs	r22, 0
    26c2:	04 c0       	rjmp	.+8      	; 0x26cc <__fp_round+0x20>
    26c4:	6f 5f       	subi	r22, 0xFF	; 255
    26c6:	7f 4f       	sbci	r23, 0xFF	; 255
    26c8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ca:	9f 4f       	sbci	r25, 0xFF	; 255
    26cc:	08 95       	ret

000026ce <__fp_split3>:
    26ce:	57 fd       	sbrc	r21, 7
    26d0:	90 58       	subi	r25, 0x80	; 128
    26d2:	44 0f       	add	r20, r20
    26d4:	55 1f       	adc	r21, r21
    26d6:	59 f0       	breq	.+22     	; 0x26ee <__fp_splitA+0x10>
    26d8:	5f 3f       	cpi	r21, 0xFF	; 255
    26da:	71 f0       	breq	.+28     	; 0x26f8 <__fp_splitA+0x1a>
    26dc:	47 95       	ror	r20

000026de <__fp_splitA>:
    26de:	88 0f       	add	r24, r24
    26e0:	97 fb       	bst	r25, 7
    26e2:	99 1f       	adc	r25, r25
    26e4:	61 f0       	breq	.+24     	; 0x26fe <__fp_splitA+0x20>
    26e6:	9f 3f       	cpi	r25, 0xFF	; 255
    26e8:	79 f0       	breq	.+30     	; 0x2708 <__fp_splitA+0x2a>
    26ea:	87 95       	ror	r24
    26ec:	08 95       	ret
    26ee:	12 16       	cp	r1, r18
    26f0:	13 06       	cpc	r1, r19
    26f2:	14 06       	cpc	r1, r20
    26f4:	55 1f       	adc	r21, r21
    26f6:	f2 cf       	rjmp	.-28     	; 0x26dc <__fp_split3+0xe>
    26f8:	46 95       	lsr	r20
    26fa:	f1 df       	rcall	.-30     	; 0x26de <__fp_splitA>
    26fc:	08 c0       	rjmp	.+16     	; 0x270e <__fp_splitA+0x30>
    26fe:	16 16       	cp	r1, r22
    2700:	17 06       	cpc	r1, r23
    2702:	18 06       	cpc	r1, r24
    2704:	99 1f       	adc	r25, r25
    2706:	f1 cf       	rjmp	.-30     	; 0x26ea <__fp_splitA+0xc>
    2708:	86 95       	lsr	r24
    270a:	71 05       	cpc	r23, r1
    270c:	61 05       	cpc	r22, r1
    270e:	08 94       	sec
    2710:	08 95       	ret

00002712 <__fp_zero>:
    2712:	e8 94       	clt

00002714 <__fp_szero>:
    2714:	bb 27       	eor	r27, r27
    2716:	66 27       	eor	r22, r22
    2718:	77 27       	eor	r23, r23
    271a:	cb 01       	movw	r24, r22
    271c:	97 f9       	bld	r25, 7
    271e:	08 95       	ret

00002720 <__gesf2>:
    2720:	0e 94 1b 13 	call	0x2636	; 0x2636 <__fp_cmp>
    2724:	08 f4       	brcc	.+2      	; 0x2728 <__gesf2+0x8>
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	08 95       	ret

0000272a <__mulsf3>:
    272a:	0e 94 a8 13 	call	0x2750	; 0x2750 <__mulsf3x>
    272e:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__fp_round>
    2732:	0e 94 48 13 	call	0x2690	; 0x2690 <__fp_pscA>
    2736:	38 f0       	brcs	.+14     	; 0x2746 <__mulsf3+0x1c>
    2738:	0e 94 4f 13 	call	0x269e	; 0x269e <__fp_pscB>
    273c:	20 f0       	brcs	.+8      	; 0x2746 <__mulsf3+0x1c>
    273e:	95 23       	and	r25, r21
    2740:	11 f0       	breq	.+4      	; 0x2746 <__mulsf3+0x1c>
    2742:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_inf>
    2746:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_nan>
    274a:	11 24       	eor	r1, r1
    274c:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__fp_szero>

00002750 <__mulsf3x>:
    2750:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_split3>
    2754:	70 f3       	brcs	.-36     	; 0x2732 <__mulsf3+0x8>

00002756 <__mulsf3_pse>:
    2756:	95 9f       	mul	r25, r21
    2758:	c1 f3       	breq	.-16     	; 0x274a <__mulsf3+0x20>
    275a:	95 0f       	add	r25, r21
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	55 1f       	adc	r21, r21
    2760:	62 9f       	mul	r22, r18
    2762:	f0 01       	movw	r30, r0
    2764:	72 9f       	mul	r23, r18
    2766:	bb 27       	eor	r27, r27
    2768:	f0 0d       	add	r31, r0
    276a:	b1 1d       	adc	r27, r1
    276c:	63 9f       	mul	r22, r19
    276e:	aa 27       	eor	r26, r26
    2770:	f0 0d       	add	r31, r0
    2772:	b1 1d       	adc	r27, r1
    2774:	aa 1f       	adc	r26, r26
    2776:	64 9f       	mul	r22, r20
    2778:	66 27       	eor	r22, r22
    277a:	b0 0d       	add	r27, r0
    277c:	a1 1d       	adc	r26, r1
    277e:	66 1f       	adc	r22, r22
    2780:	82 9f       	mul	r24, r18
    2782:	22 27       	eor	r18, r18
    2784:	b0 0d       	add	r27, r0
    2786:	a1 1d       	adc	r26, r1
    2788:	62 1f       	adc	r22, r18
    278a:	73 9f       	mul	r23, r19
    278c:	b0 0d       	add	r27, r0
    278e:	a1 1d       	adc	r26, r1
    2790:	62 1f       	adc	r22, r18
    2792:	83 9f       	mul	r24, r19
    2794:	a0 0d       	add	r26, r0
    2796:	61 1d       	adc	r22, r1
    2798:	22 1f       	adc	r18, r18
    279a:	74 9f       	mul	r23, r20
    279c:	33 27       	eor	r19, r19
    279e:	a0 0d       	add	r26, r0
    27a0:	61 1d       	adc	r22, r1
    27a2:	23 1f       	adc	r18, r19
    27a4:	84 9f       	mul	r24, r20
    27a6:	60 0d       	add	r22, r0
    27a8:	21 1d       	adc	r18, r1
    27aa:	82 2f       	mov	r24, r18
    27ac:	76 2f       	mov	r23, r22
    27ae:	6a 2f       	mov	r22, r26
    27b0:	11 24       	eor	r1, r1
    27b2:	9f 57       	subi	r25, 0x7F	; 127
    27b4:	50 40       	sbci	r21, 0x00	; 0
    27b6:	9a f0       	brmi	.+38     	; 0x27de <__mulsf3_pse+0x88>
    27b8:	f1 f0       	breq	.+60     	; 0x27f6 <__mulsf3_pse+0xa0>
    27ba:	88 23       	and	r24, r24
    27bc:	4a f0       	brmi	.+18     	; 0x27d0 <__mulsf3_pse+0x7a>
    27be:	ee 0f       	add	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	bb 1f       	adc	r27, r27
    27c4:	66 1f       	adc	r22, r22
    27c6:	77 1f       	adc	r23, r23
    27c8:	88 1f       	adc	r24, r24
    27ca:	91 50       	subi	r25, 0x01	; 1
    27cc:	50 40       	sbci	r21, 0x00	; 0
    27ce:	a9 f7       	brne	.-22     	; 0x27ba <__mulsf3_pse+0x64>
    27d0:	9e 3f       	cpi	r25, 0xFE	; 254
    27d2:	51 05       	cpc	r21, r1
    27d4:	80 f0       	brcs	.+32     	; 0x27f6 <__mulsf3_pse+0xa0>
    27d6:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_inf>
    27da:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__fp_szero>
    27de:	5f 3f       	cpi	r21, 0xFF	; 255
    27e0:	e4 f3       	brlt	.-8      	; 0x27da <__mulsf3_pse+0x84>
    27e2:	98 3e       	cpi	r25, 0xE8	; 232
    27e4:	d4 f3       	brlt	.-12     	; 0x27da <__mulsf3_pse+0x84>
    27e6:	86 95       	lsr	r24
    27e8:	77 95       	ror	r23
    27ea:	67 95       	ror	r22
    27ec:	b7 95       	ror	r27
    27ee:	f7 95       	ror	r31
    27f0:	e7 95       	ror	r30
    27f2:	9f 5f       	subi	r25, 0xFF	; 255
    27f4:	c1 f7       	brne	.-16     	; 0x27e6 <__mulsf3_pse+0x90>
    27f6:	fe 2b       	or	r31, r30
    27f8:	88 0f       	add	r24, r24
    27fa:	91 1d       	adc	r25, r1
    27fc:	96 95       	lsr	r25
    27fe:	87 95       	ror	r24
    2800:	97 f9       	bld	r25, 7
    2802:	08 95       	ret

00002804 <memset>:
    2804:	dc 01       	movw	r26, r24
    2806:	01 c0       	rjmp	.+2      	; 0x280a <memset+0x6>
    2808:	6d 93       	st	X+, r22
    280a:	41 50       	subi	r20, 0x01	; 1
    280c:	50 40       	sbci	r21, 0x00	; 0
    280e:	e0 f7       	brcc	.-8      	; 0x2808 <memset+0x4>
    2810:	08 95       	ret

00002812 <sprintf>:
    2812:	ae e0       	ldi	r26, 0x0E	; 14
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	ef e0       	ldi	r30, 0x0F	; 15
    2818:	f4 e1       	ldi	r31, 0x14	; 20
    281a:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__prologue_saves__+0x1c>
    281e:	0d 89       	ldd	r16, Y+21	; 0x15
    2820:	1e 89       	ldd	r17, Y+22	; 0x16
    2822:	86 e0       	ldi	r24, 0x06	; 6
    2824:	8c 83       	std	Y+4, r24	; 0x04
    2826:	1a 83       	std	Y+2, r17	; 0x02
    2828:	09 83       	std	Y+1, r16	; 0x01
    282a:	8f ef       	ldi	r24, 0xFF	; 255
    282c:	9f e7       	ldi	r25, 0x7F	; 127
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	ae 01       	movw	r20, r28
    2834:	47 5e       	subi	r20, 0xE7	; 231
    2836:	5f 4f       	sbci	r21, 0xFF	; 255
    2838:	6f 89       	ldd	r22, Y+23	; 0x17
    283a:	78 8d       	ldd	r23, Y+24	; 0x18
    283c:	ce 01       	movw	r24, r28
    283e:	01 96       	adiw	r24, 0x01	; 1
    2840:	0e 94 2c 14 	call	0x2858	; 0x2858 <vfprintf>
    2844:	2f 81       	ldd	r18, Y+7	; 0x07
    2846:	38 85       	ldd	r19, Y+8	; 0x08
    2848:	02 0f       	add	r16, r18
    284a:	13 1f       	adc	r17, r19
    284c:	f8 01       	movw	r30, r16
    284e:	10 82       	st	Z, r1
    2850:	2e 96       	adiw	r28, 0x0e	; 14
    2852:	e4 e0       	ldi	r30, 0x04	; 4
    2854:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__epilogue_restores__+0x1c>

00002858 <vfprintf>:
    2858:	ab e0       	ldi	r26, 0x0B	; 11
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e2 e3       	ldi	r30, 0x32	; 50
    285e:	f4 e1       	ldi	r31, 0x14	; 20
    2860:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__>
    2864:	7c 01       	movw	r14, r24
    2866:	3b 01       	movw	r6, r22
    2868:	8a 01       	movw	r16, r20
    286a:	fc 01       	movw	r30, r24
    286c:	17 82       	std	Z+7, r1	; 0x07
    286e:	16 82       	std	Z+6, r1	; 0x06
    2870:	83 81       	ldd	r24, Z+3	; 0x03
    2872:	81 ff       	sbrs	r24, 1
    2874:	c8 c1       	rjmp	.+912    	; 0x2c06 <vfprintf+0x3ae>
    2876:	ce 01       	movw	r24, r28
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	5c 01       	movw	r10, r24
    287c:	f7 01       	movw	r30, r14
    287e:	93 81       	ldd	r25, Z+3	; 0x03
    2880:	f3 01       	movw	r30, r6
    2882:	93 fd       	sbrc	r25, 3
    2884:	85 91       	lpm	r24, Z+
    2886:	93 ff       	sbrs	r25, 3
    2888:	81 91       	ld	r24, Z+
    288a:	3f 01       	movw	r6, r30
    288c:	88 23       	and	r24, r24
    288e:	09 f4       	brne	.+2      	; 0x2892 <vfprintf+0x3a>
    2890:	53 c1       	rjmp	.+678    	; 0x2b38 <vfprintf+0x2e0>
    2892:	85 32       	cpi	r24, 0x25	; 37
    2894:	39 f4       	brne	.+14     	; 0x28a4 <vfprintf+0x4c>
    2896:	93 fd       	sbrc	r25, 3
    2898:	85 91       	lpm	r24, Z+
    289a:	93 ff       	sbrs	r25, 3
    289c:	81 91       	ld	r24, Z+
    289e:	3f 01       	movw	r6, r30
    28a0:	85 32       	cpi	r24, 0x25	; 37
    28a2:	29 f4       	brne	.+10     	; 0x28ae <vfprintf+0x56>
    28a4:	b7 01       	movw	r22, r14
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    28ac:	e7 cf       	rjmp	.-50     	; 0x287c <vfprintf+0x24>
    28ae:	91 2c       	mov	r9, r1
    28b0:	21 2c       	mov	r2, r1
    28b2:	31 2c       	mov	r3, r1
    28b4:	ff e1       	ldi	r31, 0x1F	; 31
    28b6:	f3 15       	cp	r31, r3
    28b8:	38 f0       	brcs	.+14     	; 0x28c8 <vfprintf+0x70>
    28ba:	8b 32       	cpi	r24, 0x2B	; 43
    28bc:	11 f1       	breq	.+68     	; 0x2902 <vfprintf+0xaa>
    28be:	90 f4       	brcc	.+36     	; 0x28e4 <vfprintf+0x8c>
    28c0:	80 32       	cpi	r24, 0x20	; 32
    28c2:	09 f1       	breq	.+66     	; 0x2906 <vfprintf+0xae>
    28c4:	83 32       	cpi	r24, 0x23	; 35
    28c6:	29 f1       	breq	.+74     	; 0x2912 <vfprintf+0xba>
    28c8:	37 fc       	sbrc	r3, 7
    28ca:	3c c0       	rjmp	.+120    	; 0x2944 <vfprintf+0xec>
    28cc:	20 ed       	ldi	r18, 0xD0	; 208
    28ce:	28 0f       	add	r18, r24
    28d0:	2a 30       	cpi	r18, 0x0A	; 10
    28d2:	50 f5       	brcc	.+84     	; 0x2928 <vfprintf+0xd0>
    28d4:	36 fe       	sbrs	r3, 6
    28d6:	20 c0       	rjmp	.+64     	; 0x2918 <vfprintf+0xc0>
    28d8:	8a e0       	ldi	r24, 0x0A	; 10
    28da:	98 9e       	mul	r9, r24
    28dc:	20 0d       	add	r18, r0
    28de:	11 24       	eor	r1, r1
    28e0:	92 2e       	mov	r9, r18
    28e2:	06 c0       	rjmp	.+12     	; 0x28f0 <vfprintf+0x98>
    28e4:	8d 32       	cpi	r24, 0x2D	; 45
    28e6:	91 f0       	breq	.+36     	; 0x290c <vfprintf+0xb4>
    28e8:	80 33       	cpi	r24, 0x30	; 48
    28ea:	71 f7       	brne	.-36     	; 0x28c8 <vfprintf+0x70>
    28ec:	68 94       	set
    28ee:	30 f8       	bld	r3, 0
    28f0:	f3 01       	movw	r30, r6
    28f2:	93 fd       	sbrc	r25, 3
    28f4:	85 91       	lpm	r24, Z+
    28f6:	93 ff       	sbrs	r25, 3
    28f8:	81 91       	ld	r24, Z+
    28fa:	3f 01       	movw	r6, r30
    28fc:	81 11       	cpse	r24, r1
    28fe:	da cf       	rjmp	.-76     	; 0x28b4 <vfprintf+0x5c>
    2900:	21 c0       	rjmp	.+66     	; 0x2944 <vfprintf+0xec>
    2902:	68 94       	set
    2904:	31 f8       	bld	r3, 1
    2906:	68 94       	set
    2908:	32 f8       	bld	r3, 2
    290a:	f2 cf       	rjmp	.-28     	; 0x28f0 <vfprintf+0x98>
    290c:	68 94       	set
    290e:	33 f8       	bld	r3, 3
    2910:	ef cf       	rjmp	.-34     	; 0x28f0 <vfprintf+0x98>
    2912:	68 94       	set
    2914:	34 f8       	bld	r3, 4
    2916:	ec cf       	rjmp	.-40     	; 0x28f0 <vfprintf+0x98>
    2918:	ea e0       	ldi	r30, 0x0A	; 10
    291a:	2e 9e       	mul	r2, r30
    291c:	20 0d       	add	r18, r0
    291e:	11 24       	eor	r1, r1
    2920:	22 2e       	mov	r2, r18
    2922:	68 94       	set
    2924:	35 f8       	bld	r3, 5
    2926:	e4 cf       	rjmp	.-56     	; 0x28f0 <vfprintf+0x98>
    2928:	8e 32       	cpi	r24, 0x2E	; 46
    292a:	29 f4       	brne	.+10     	; 0x2936 <vfprintf+0xde>
    292c:	36 fc       	sbrc	r3, 6
    292e:	04 c1       	rjmp	.+520    	; 0x2b38 <vfprintf+0x2e0>
    2930:	68 94       	set
    2932:	36 f8       	bld	r3, 6
    2934:	dd cf       	rjmp	.-70     	; 0x28f0 <vfprintf+0x98>
    2936:	8c 36       	cpi	r24, 0x6C	; 108
    2938:	19 f4       	brne	.+6      	; 0x2940 <vfprintf+0xe8>
    293a:	68 94       	set
    293c:	37 f8       	bld	r3, 7
    293e:	d8 cf       	rjmp	.-80     	; 0x28f0 <vfprintf+0x98>
    2940:	88 36       	cpi	r24, 0x68	; 104
    2942:	b1 f2       	breq	.-84     	; 0x28f0 <vfprintf+0x98>
    2944:	98 2f       	mov	r25, r24
    2946:	9f 7d       	andi	r25, 0xDF	; 223
    2948:	95 54       	subi	r25, 0x45	; 69
    294a:	93 30       	cpi	r25, 0x03	; 3
    294c:	e0 f0       	brcs	.+56     	; 0x2986 <vfprintf+0x12e>
    294e:	83 36       	cpi	r24, 0x63	; 99
    2950:	a1 f1       	breq	.+104    	; 0x29ba <vfprintf+0x162>
    2952:	83 37       	cpi	r24, 0x73	; 115
    2954:	c1 f1       	breq	.+112    	; 0x29c6 <vfprintf+0x16e>
    2956:	83 35       	cpi	r24, 0x53	; 83
    2958:	09 f0       	breq	.+2      	; 0x295c <vfprintf+0x104>
    295a:	63 c0       	rjmp	.+198    	; 0x2a22 <vfprintf+0x1ca>
    295c:	28 01       	movw	r4, r16
    295e:	f2 e0       	ldi	r31, 0x02	; 2
    2960:	4f 0e       	add	r4, r31
    2962:	51 1c       	adc	r5, r1
    2964:	f8 01       	movw	r30, r16
    2966:	c0 80       	ld	r12, Z
    2968:	d1 80       	ldd	r13, Z+1	; 0x01
    296a:	69 2d       	mov	r22, r9
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	36 fc       	sbrc	r3, 6
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <vfprintf+0x11e>
    2972:	6f ef       	ldi	r22, 0xFF	; 255
    2974:	7f ef       	ldi	r23, 0xFF	; 255
    2976:	c6 01       	movw	r24, r12
    2978:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <strnlen_P>
    297c:	4c 01       	movw	r8, r24
    297e:	68 94       	set
    2980:	37 f8       	bld	r3, 7
    2982:	82 01       	movw	r16, r4
    2984:	0a c0       	rjmp	.+20     	; 0x299a <vfprintf+0x142>
    2986:	0c 5f       	subi	r16, 0xFC	; 252
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	ff e3       	ldi	r31, 0x3F	; 63
    298c:	f9 83       	std	Y+1, r31	; 0x01
    298e:	88 24       	eor	r8, r8
    2990:	83 94       	inc	r8
    2992:	91 2c       	mov	r9, r1
    2994:	65 01       	movw	r12, r10
    2996:	e8 94       	clt
    2998:	37 f8       	bld	r3, 7
    299a:	33 fe       	sbrs	r3, 3
    299c:	2d c0       	rjmp	.+90     	; 0x29f8 <vfprintf+0x1a0>
    299e:	52 2c       	mov	r5, r2
    29a0:	81 14       	cp	r8, r1
    29a2:	91 04       	cpc	r9, r1
    29a4:	71 f5       	brne	.+92     	; 0x2a02 <vfprintf+0x1aa>
    29a6:	55 20       	and	r5, r5
    29a8:	09 f4       	brne	.+2      	; 0x29ac <vfprintf+0x154>
    29aa:	68 cf       	rjmp	.-304    	; 0x287c <vfprintf+0x24>
    29ac:	b7 01       	movw	r22, r14
    29ae:	80 e2       	ldi	r24, 0x20	; 32
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    29b6:	5a 94       	dec	r5
    29b8:	f6 cf       	rjmp	.-20     	; 0x29a6 <vfprintf+0x14e>
    29ba:	f8 01       	movw	r30, r16
    29bc:	80 81       	ld	r24, Z
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	0e 5f       	subi	r16, 0xFE	; 254
    29c2:	1f 4f       	sbci	r17, 0xFF	; 255
    29c4:	e4 cf       	rjmp	.-56     	; 0x298e <vfprintf+0x136>
    29c6:	28 01       	movw	r4, r16
    29c8:	f2 e0       	ldi	r31, 0x02	; 2
    29ca:	4f 0e       	add	r4, r31
    29cc:	51 1c       	adc	r5, r1
    29ce:	f8 01       	movw	r30, r16
    29d0:	c0 80       	ld	r12, Z
    29d2:	d1 80       	ldd	r13, Z+1	; 0x01
    29d4:	69 2d       	mov	r22, r9
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	36 fc       	sbrc	r3, 6
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <vfprintf+0x188>
    29dc:	6f ef       	ldi	r22, 0xFF	; 255
    29de:	7f ef       	ldi	r23, 0xFF	; 255
    29e0:	c6 01       	movw	r24, r12
    29e2:	0e 94 11 16 	call	0x2c22	; 0x2c22 <strnlen>
    29e6:	4c 01       	movw	r8, r24
    29e8:	82 01       	movw	r16, r4
    29ea:	d5 cf       	rjmp	.-86     	; 0x2996 <vfprintf+0x13e>
    29ec:	b7 01       	movw	r22, r14
    29ee:	80 e2       	ldi	r24, 0x20	; 32
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    29f6:	2a 94       	dec	r2
    29f8:	28 14       	cp	r2, r8
    29fa:	19 04       	cpc	r1, r9
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <vfprintf+0x1a8>
    29fe:	b0 f7       	brcc	.-20     	; 0x29ec <vfprintf+0x194>
    2a00:	ce cf       	rjmp	.-100    	; 0x299e <vfprintf+0x146>
    2a02:	f6 01       	movw	r30, r12
    2a04:	37 fc       	sbrc	r3, 7
    2a06:	85 91       	lpm	r24, Z+
    2a08:	37 fe       	sbrs	r3, 7
    2a0a:	81 91       	ld	r24, Z+
    2a0c:	6f 01       	movw	r12, r30
    2a0e:	b7 01       	movw	r22, r14
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2a16:	51 10       	cpse	r5, r1
    2a18:	5a 94       	dec	r5
    2a1a:	f1 e0       	ldi	r31, 0x01	; 1
    2a1c:	8f 1a       	sub	r8, r31
    2a1e:	91 08       	sbc	r9, r1
    2a20:	bf cf       	rjmp	.-130    	; 0x29a0 <vfprintf+0x148>
    2a22:	84 36       	cpi	r24, 0x64	; 100
    2a24:	19 f0       	breq	.+6      	; 0x2a2c <vfprintf+0x1d4>
    2a26:	89 36       	cpi	r24, 0x69	; 105
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <vfprintf+0x1d4>
    2a2a:	77 c0       	rjmp	.+238    	; 0x2b1a <vfprintf+0x2c2>
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	37 fe       	sbrs	r3, 7
    2a30:	6b c0       	rjmp	.+214    	; 0x2b08 <vfprintf+0x2b0>
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	0c 5f       	subi	r16, 0xFC	; 252
    2a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3e:	f3 2d       	mov	r31, r3
    2a40:	ff 76       	andi	r31, 0x6F	; 111
    2a42:	3f 2e       	mov	r3, r31
    2a44:	97 ff       	sbrs	r25, 7
    2a46:	09 c0       	rjmp	.+18     	; 0x2a5a <vfprintf+0x202>
    2a48:	90 95       	com	r25
    2a4a:	80 95       	com	r24
    2a4c:	70 95       	com	r23
    2a4e:	61 95       	neg	r22
    2a50:	7f 4f       	sbci	r23, 0xFF	; 255
    2a52:	8f 4f       	sbci	r24, 0xFF	; 255
    2a54:	9f 4f       	sbci	r25, 0xFF	; 255
    2a56:	68 94       	set
    2a58:	37 f8       	bld	r3, 7
    2a5a:	2a e0       	ldi	r18, 0x0A	; 10
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	a5 01       	movw	r20, r10
    2a60:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__ultoa_invert>
    2a64:	c8 2e       	mov	r12, r24
    2a66:	ca 18       	sub	r12, r10
    2a68:	8c 2c       	mov	r8, r12
    2a6a:	43 2c       	mov	r4, r3
    2a6c:	36 fe       	sbrs	r3, 6
    2a6e:	0c c0       	rjmp	.+24     	; 0x2a88 <vfprintf+0x230>
    2a70:	e8 94       	clt
    2a72:	40 f8       	bld	r4, 0
    2a74:	c9 14       	cp	r12, r9
    2a76:	40 f4       	brcc	.+16     	; 0x2a88 <vfprintf+0x230>
    2a78:	34 fe       	sbrs	r3, 4
    2a7a:	05 c0       	rjmp	.+10     	; 0x2a86 <vfprintf+0x22e>
    2a7c:	32 fc       	sbrc	r3, 2
    2a7e:	03 c0       	rjmp	.+6      	; 0x2a86 <vfprintf+0x22e>
    2a80:	f3 2d       	mov	r31, r3
    2a82:	fe 7e       	andi	r31, 0xEE	; 238
    2a84:	4f 2e       	mov	r4, r31
    2a86:	89 2c       	mov	r8, r9
    2a88:	44 fe       	sbrs	r4, 4
    2a8a:	95 c0       	rjmp	.+298    	; 0x2bb6 <vfprintf+0x35e>
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ec 0d       	add	r30, r12
    2a90:	f1 1d       	adc	r31, r1
    2a92:	80 81       	ld	r24, Z
    2a94:	80 33       	cpi	r24, 0x30	; 48
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <vfprintf+0x242>
    2a98:	87 c0       	rjmp	.+270    	; 0x2ba8 <vfprintf+0x350>
    2a9a:	24 2d       	mov	r18, r4
    2a9c:	29 7e       	andi	r18, 0xE9	; 233
    2a9e:	42 2e       	mov	r4, r18
    2aa0:	84 2d       	mov	r24, r4
    2aa2:	88 70       	andi	r24, 0x08	; 8
    2aa4:	58 2e       	mov	r5, r24
    2aa6:	43 fc       	sbrc	r4, 3
    2aa8:	95 c0       	rjmp	.+298    	; 0x2bd4 <vfprintf+0x37c>
    2aaa:	40 fe       	sbrs	r4, 0
    2aac:	8f c0       	rjmp	.+286    	; 0x2bcc <vfprintf+0x374>
    2aae:	9c 2c       	mov	r9, r12
    2ab0:	82 14       	cp	r8, r2
    2ab2:	18 f4       	brcc	.+6      	; 0x2aba <vfprintf+0x262>
    2ab4:	2c 0c       	add	r2, r12
    2ab6:	92 2c       	mov	r9, r2
    2ab8:	98 18       	sub	r9, r8
    2aba:	44 fe       	sbrs	r4, 4
    2abc:	91 c0       	rjmp	.+290    	; 0x2be0 <vfprintf+0x388>
    2abe:	b7 01       	movw	r22, r14
    2ac0:	80 e3       	ldi	r24, 0x30	; 48
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2ac8:	42 fe       	sbrs	r4, 2
    2aca:	09 c0       	rjmp	.+18     	; 0x2ade <vfprintf+0x286>
    2acc:	88 e7       	ldi	r24, 0x78	; 120
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	41 fe       	sbrs	r4, 1
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <vfprintf+0x280>
    2ad4:	88 e5       	ldi	r24, 0x58	; 88
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	b7 01       	movw	r22, r14
    2ada:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2ade:	c9 14       	cp	r12, r9
    2ae0:	08 f4       	brcc	.+2      	; 0x2ae4 <vfprintf+0x28c>
    2ae2:	8a c0       	rjmp	.+276    	; 0x2bf8 <vfprintf+0x3a0>
    2ae4:	ca 94       	dec	r12
    2ae6:	d1 2c       	mov	r13, r1
    2ae8:	9f ef       	ldi	r25, 0xFF	; 255
    2aea:	c9 1a       	sub	r12, r25
    2aec:	d9 0a       	sbc	r13, r25
    2aee:	ca 0c       	add	r12, r10
    2af0:	db 1c       	adc	r13, r11
    2af2:	f6 01       	movw	r30, r12
    2af4:	82 91       	ld	r24, -Z
    2af6:	6f 01       	movw	r12, r30
    2af8:	b7 01       	movw	r22, r14
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2b00:	ac 14       	cp	r10, r12
    2b02:	bd 04       	cpc	r11, r13
    2b04:	b1 f7       	brne	.-20     	; 0x2af2 <vfprintf+0x29a>
    2b06:	4f cf       	rjmp	.-354    	; 0x29a6 <vfprintf+0x14e>
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	07 2e       	mov	r0, r23
    2b0e:	00 0c       	add	r0, r0
    2b10:	88 0b       	sbc	r24, r24
    2b12:	99 0b       	sbc	r25, r25
    2b14:	0e 5f       	subi	r16, 0xFE	; 254
    2b16:	1f 4f       	sbci	r17, 0xFF	; 255
    2b18:	92 cf       	rjmp	.-220    	; 0x2a3e <vfprintf+0x1e6>
    2b1a:	d3 2c       	mov	r13, r3
    2b1c:	e8 94       	clt
    2b1e:	d4 f8       	bld	r13, 4
    2b20:	2a e0       	ldi	r18, 0x0A	; 10
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	85 37       	cpi	r24, 0x75	; 117
    2b26:	39 f1       	breq	.+78     	; 0x2b76 <vfprintf+0x31e>
    2b28:	23 2d       	mov	r18, r3
    2b2a:	29 7f       	andi	r18, 0xF9	; 249
    2b2c:	d2 2e       	mov	r13, r18
    2b2e:	8f 36       	cpi	r24, 0x6F	; 111
    2b30:	01 f1       	breq	.+64     	; 0x2b72 <vfprintf+0x31a>
    2b32:	48 f4       	brcc	.+18     	; 0x2b46 <vfprintf+0x2ee>
    2b34:	88 35       	cpi	r24, 0x58	; 88
    2b36:	a9 f0       	breq	.+42     	; 0x2b62 <vfprintf+0x30a>
    2b38:	f7 01       	movw	r30, r14
    2b3a:	86 81       	ldd	r24, Z+6	; 0x06
    2b3c:	97 81       	ldd	r25, Z+7	; 0x07
    2b3e:	2b 96       	adiw	r28, 0x0b	; 11
    2b40:	e2 e1       	ldi	r30, 0x12	; 18
    2b42:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__>
    2b46:	80 37       	cpi	r24, 0x70	; 112
    2b48:	49 f0       	breq	.+18     	; 0x2b5c <vfprintf+0x304>
    2b4a:	88 37       	cpi	r24, 0x78	; 120
    2b4c:	a9 f7       	brne	.-22     	; 0x2b38 <vfprintf+0x2e0>
    2b4e:	d4 fe       	sbrs	r13, 4
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <vfprintf+0x2fe>
    2b52:	68 94       	set
    2b54:	d2 f8       	bld	r13, 2
    2b56:	20 e1       	ldi	r18, 0x10	; 16
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	0d c0       	rjmp	.+26     	; 0x2b76 <vfprintf+0x31e>
    2b5c:	68 94       	set
    2b5e:	d4 f8       	bld	r13, 4
    2b60:	f6 cf       	rjmp	.-20     	; 0x2b4e <vfprintf+0x2f6>
    2b62:	34 fe       	sbrs	r3, 4
    2b64:	03 c0       	rjmp	.+6      	; 0x2b6c <vfprintf+0x314>
    2b66:	82 2f       	mov	r24, r18
    2b68:	86 60       	ori	r24, 0x06	; 6
    2b6a:	d8 2e       	mov	r13, r24
    2b6c:	20 e1       	ldi	r18, 0x10	; 16
    2b6e:	32 e0       	ldi	r19, 0x02	; 2
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <vfprintf+0x31e>
    2b72:	28 e0       	ldi	r18, 0x08	; 8
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	f8 01       	movw	r30, r16
    2b78:	d7 fe       	sbrs	r13, 7
    2b7a:	0f c0       	rjmp	.+30     	; 0x2b9a <vfprintf+0x342>
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	0c 5f       	subi	r16, 0xFC	; 252
    2b86:	1f 4f       	sbci	r17, 0xFF	; 255
    2b88:	a5 01       	movw	r20, r10
    2b8a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__ultoa_invert>
    2b8e:	c8 2e       	mov	r12, r24
    2b90:	ca 18       	sub	r12, r10
    2b92:	3d 2c       	mov	r3, r13
    2b94:	e8 94       	clt
    2b96:	37 f8       	bld	r3, 7
    2b98:	67 cf       	rjmp	.-306    	; 0x2a68 <vfprintf+0x210>
    2b9a:	60 81       	ld	r22, Z
    2b9c:	71 81       	ldd	r23, Z+1	; 0x01
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	0e 5f       	subi	r16, 0xFE	; 254
    2ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba6:	f0 cf       	rjmp	.-32     	; 0x2b88 <vfprintf+0x330>
    2ba8:	42 fc       	sbrc	r4, 2
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <vfprintf+0x358>
    2bac:	83 94       	inc	r8
    2bae:	78 cf       	rjmp	.-272    	; 0x2aa0 <vfprintf+0x248>
    2bb0:	83 94       	inc	r8
    2bb2:	83 94       	inc	r8
    2bb4:	75 cf       	rjmp	.-278    	; 0x2aa0 <vfprintf+0x248>
    2bb6:	84 2d       	mov	r24, r4
    2bb8:	86 78       	andi	r24, 0x86	; 134
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <vfprintf+0x366>
    2bbc:	71 cf       	rjmp	.-286    	; 0x2aa0 <vfprintf+0x248>
    2bbe:	f6 cf       	rjmp	.-20     	; 0x2bac <vfprintf+0x354>
    2bc0:	b7 01       	movw	r22, r14
    2bc2:	80 e2       	ldi	r24, 0x20	; 32
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2bca:	83 94       	inc	r8
    2bcc:	82 14       	cp	r8, r2
    2bce:	c0 f3       	brcs	.-16     	; 0x2bc0 <vfprintf+0x368>
    2bd0:	51 2c       	mov	r5, r1
    2bd2:	73 cf       	rjmp	.-282    	; 0x2aba <vfprintf+0x262>
    2bd4:	52 2c       	mov	r5, r2
    2bd6:	58 18       	sub	r5, r8
    2bd8:	82 14       	cp	r8, r2
    2bda:	08 f4       	brcc	.+2      	; 0x2bde <vfprintf+0x386>
    2bdc:	6e cf       	rjmp	.-292    	; 0x2aba <vfprintf+0x262>
    2bde:	f8 cf       	rjmp	.-16     	; 0x2bd0 <vfprintf+0x378>
    2be0:	84 2d       	mov	r24, r4
    2be2:	86 78       	andi	r24, 0x86	; 134
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <vfprintf+0x390>
    2be6:	7b cf       	rjmp	.-266    	; 0x2ade <vfprintf+0x286>
    2be8:	8b e2       	ldi	r24, 0x2B	; 43
    2bea:	41 fe       	sbrs	r4, 1
    2bec:	80 e2       	ldi	r24, 0x20	; 32
    2bee:	47 fc       	sbrc	r4, 7
    2bf0:	8d e2       	ldi	r24, 0x2D	; 45
    2bf2:	b7 01       	movw	r22, r14
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	71 cf       	rjmp	.-286    	; 0x2ada <vfprintf+0x282>
    2bf8:	b7 01       	movw	r22, r14
    2bfa:	80 e3       	ldi	r24, 0x30	; 48
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2c02:	9a 94       	dec	r9
    2c04:	6c cf       	rjmp	.-296    	; 0x2ade <vfprintf+0x286>
    2c06:	8f ef       	ldi	r24, 0xFF	; 255
    2c08:	9f ef       	ldi	r25, 0xFF	; 255
    2c0a:	99 cf       	rjmp	.-206    	; 0x2b3e <vfprintf+0x2e6>

00002c0c <strnlen_P>:
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	05 90       	lpm	r0, Z+
    2c10:	61 50       	subi	r22, 0x01	; 1
    2c12:	70 40       	sbci	r23, 0x00	; 0
    2c14:	01 10       	cpse	r0, r1
    2c16:	d8 f7       	brcc	.-10     	; 0x2c0e <strnlen_P+0x2>
    2c18:	80 95       	com	r24
    2c1a:	90 95       	com	r25
    2c1c:	8e 0f       	add	r24, r30
    2c1e:	9f 1f       	adc	r25, r31
    2c20:	08 95       	ret

00002c22 <strnlen>:
    2c22:	fc 01       	movw	r30, r24
    2c24:	61 50       	subi	r22, 0x01	; 1
    2c26:	70 40       	sbci	r23, 0x00	; 0
    2c28:	01 90       	ld	r0, Z+
    2c2a:	01 10       	cpse	r0, r1
    2c2c:	d8 f7       	brcc	.-10     	; 0x2c24 <strnlen+0x2>
    2c2e:	80 95       	com	r24
    2c30:	90 95       	com	r25
    2c32:	8e 0f       	add	r24, r30
    2c34:	9f 1f       	adc	r25, r31
    2c36:	08 95       	ret

00002c38 <fputc>:
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	18 2f       	mov	r17, r24
    2c42:	09 2f       	mov	r16, r25
    2c44:	eb 01       	movw	r28, r22
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	81 fd       	sbrc	r24, 1
    2c4a:	09 c0       	rjmp	.+18     	; 0x2c5e <fputc+0x26>
    2c4c:	1f ef       	ldi	r17, 0xFF	; 255
    2c4e:	0f ef       	ldi	r16, 0xFF	; 255
    2c50:	81 2f       	mov	r24, r17
    2c52:	90 2f       	mov	r25, r16
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	08 95       	ret
    2c5e:	82 ff       	sbrs	r24, 2
    2c60:	14 c0       	rjmp	.+40     	; 0x2c8a <fputc+0x52>
    2c62:	2e 81       	ldd	r18, Y+6	; 0x06
    2c64:	3f 81       	ldd	r19, Y+7	; 0x07
    2c66:	8c 81       	ldd	r24, Y+4	; 0x04
    2c68:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6a:	28 17       	cp	r18, r24
    2c6c:	39 07       	cpc	r19, r25
    2c6e:	3c f4       	brge	.+14     	; 0x2c7e <fputc+0x46>
    2c70:	e8 81       	ld	r30, Y
    2c72:	f9 81       	ldd	r31, Y+1	; 0x01
    2c74:	cf 01       	movw	r24, r30
    2c76:	01 96       	adiw	r24, 0x01	; 1
    2c78:	99 83       	std	Y+1, r25	; 0x01
    2c7a:	88 83       	st	Y, r24
    2c7c:	10 83       	st	Z, r17
    2c7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c80:	9f 81       	ldd	r25, Y+7	; 0x07
    2c82:	01 96       	adiw	r24, 0x01	; 1
    2c84:	9f 83       	std	Y+7, r25	; 0x07
    2c86:	8e 83       	std	Y+6, r24	; 0x06
    2c88:	e3 cf       	rjmp	.-58     	; 0x2c50 <fputc+0x18>
    2c8a:	e8 85       	ldd	r30, Y+8	; 0x08
    2c8c:	f9 85       	ldd	r31, Y+9	; 0x09
    2c8e:	81 2f       	mov	r24, r17
    2c90:	09 95       	icall
    2c92:	89 2b       	or	r24, r25
    2c94:	a1 f3       	breq	.-24     	; 0x2c7e <fputc+0x46>
    2c96:	da cf       	rjmp	.-76     	; 0x2c4c <fputc+0x14>

00002c98 <__ultoa_invert>:
    2c98:	fa 01       	movw	r30, r20
    2c9a:	aa 27       	eor	r26, r26
    2c9c:	28 30       	cpi	r18, 0x08	; 8
    2c9e:	51 f1       	breq	.+84     	; 0x2cf4 <__ultoa_invert+0x5c>
    2ca0:	20 31       	cpi	r18, 0x10	; 16
    2ca2:	81 f1       	breq	.+96     	; 0x2d04 <__ultoa_invert+0x6c>
    2ca4:	e8 94       	clt
    2ca6:	6f 93       	push	r22
    2ca8:	6e 7f       	andi	r22, 0xFE	; 254
    2caa:	6e 5f       	subi	r22, 0xFE	; 254
    2cac:	7f 4f       	sbci	r23, 0xFF	; 255
    2cae:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb2:	af 4f       	sbci	r26, 0xFF	; 255
    2cb4:	b1 e0       	ldi	r27, 0x01	; 1
    2cb6:	3e d0       	rcall	.+124    	; 0x2d34 <__ultoa_invert+0x9c>
    2cb8:	b4 e0       	ldi	r27, 0x04	; 4
    2cba:	3c d0       	rcall	.+120    	; 0x2d34 <__ultoa_invert+0x9c>
    2cbc:	67 0f       	add	r22, r23
    2cbe:	78 1f       	adc	r23, r24
    2cc0:	89 1f       	adc	r24, r25
    2cc2:	9a 1f       	adc	r25, r26
    2cc4:	a1 1d       	adc	r26, r1
    2cc6:	68 0f       	add	r22, r24
    2cc8:	79 1f       	adc	r23, r25
    2cca:	8a 1f       	adc	r24, r26
    2ccc:	91 1d       	adc	r25, r1
    2cce:	a1 1d       	adc	r26, r1
    2cd0:	6a 0f       	add	r22, r26
    2cd2:	71 1d       	adc	r23, r1
    2cd4:	81 1d       	adc	r24, r1
    2cd6:	91 1d       	adc	r25, r1
    2cd8:	a1 1d       	adc	r26, r1
    2cda:	20 d0       	rcall	.+64     	; 0x2d1c <__ultoa_invert+0x84>
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <__ultoa_invert+0x48>
    2cde:	68 94       	set
    2ce0:	3f 91       	pop	r19
    2ce2:	2a e0       	ldi	r18, 0x0A	; 10
    2ce4:	26 9f       	mul	r18, r22
    2ce6:	11 24       	eor	r1, r1
    2ce8:	30 19       	sub	r19, r0
    2cea:	30 5d       	subi	r19, 0xD0	; 208
    2cec:	31 93       	st	Z+, r19
    2cee:	de f6       	brtc	.-74     	; 0x2ca6 <__ultoa_invert+0xe>
    2cf0:	cf 01       	movw	r24, r30
    2cf2:	08 95       	ret
    2cf4:	46 2f       	mov	r20, r22
    2cf6:	47 70       	andi	r20, 0x07	; 7
    2cf8:	40 5d       	subi	r20, 0xD0	; 208
    2cfa:	41 93       	st	Z+, r20
    2cfc:	b3 e0       	ldi	r27, 0x03	; 3
    2cfe:	0f d0       	rcall	.+30     	; 0x2d1e <__ultoa_invert+0x86>
    2d00:	c9 f7       	brne	.-14     	; 0x2cf4 <__ultoa_invert+0x5c>
    2d02:	f6 cf       	rjmp	.-20     	; 0x2cf0 <__ultoa_invert+0x58>
    2d04:	46 2f       	mov	r20, r22
    2d06:	4f 70       	andi	r20, 0x0F	; 15
    2d08:	40 5d       	subi	r20, 0xD0	; 208
    2d0a:	4a 33       	cpi	r20, 0x3A	; 58
    2d0c:	18 f0       	brcs	.+6      	; 0x2d14 <__ultoa_invert+0x7c>
    2d0e:	49 5d       	subi	r20, 0xD9	; 217
    2d10:	31 fd       	sbrc	r19, 1
    2d12:	40 52       	subi	r20, 0x20	; 32
    2d14:	41 93       	st	Z+, r20
    2d16:	02 d0       	rcall	.+4      	; 0x2d1c <__ultoa_invert+0x84>
    2d18:	a9 f7       	brne	.-22     	; 0x2d04 <__ultoa_invert+0x6c>
    2d1a:	ea cf       	rjmp	.-44     	; 0x2cf0 <__ultoa_invert+0x58>
    2d1c:	b4 e0       	ldi	r27, 0x04	; 4
    2d1e:	a6 95       	lsr	r26
    2d20:	97 95       	ror	r25
    2d22:	87 95       	ror	r24
    2d24:	77 95       	ror	r23
    2d26:	67 95       	ror	r22
    2d28:	ba 95       	dec	r27
    2d2a:	c9 f7       	brne	.-14     	; 0x2d1e <__ultoa_invert+0x86>
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	61 05       	cpc	r22, r1
    2d30:	71 05       	cpc	r23, r1
    2d32:	08 95       	ret
    2d34:	9b 01       	movw	r18, r22
    2d36:	ac 01       	movw	r20, r24
    2d38:	0a 2e       	mov	r0, r26
    2d3a:	06 94       	lsr	r0
    2d3c:	57 95       	ror	r21
    2d3e:	47 95       	ror	r20
    2d40:	37 95       	ror	r19
    2d42:	27 95       	ror	r18
    2d44:	ba 95       	dec	r27
    2d46:	c9 f7       	brne	.-14     	; 0x2d3a <__ultoa_invert+0xa2>
    2d48:	62 0f       	add	r22, r18
    2d4a:	73 1f       	adc	r23, r19
    2d4c:	84 1f       	adc	r24, r20
    2d4e:	95 1f       	adc	r25, r21
    2d50:	a0 1d       	adc	r26, r0
    2d52:	08 95       	ret

00002d54 <__prologue_saves__>:
    2d54:	2f 92       	push	r2
    2d56:	3f 92       	push	r3
    2d58:	4f 92       	push	r4
    2d5a:	5f 92       	push	r5
    2d5c:	6f 92       	push	r6
    2d5e:	7f 92       	push	r7
    2d60:	8f 92       	push	r8
    2d62:	9f 92       	push	r9
    2d64:	af 92       	push	r10
    2d66:	bf 92       	push	r11
    2d68:	cf 92       	push	r12
    2d6a:	df 92       	push	r13
    2d6c:	ef 92       	push	r14
    2d6e:	ff 92       	push	r15
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	ca 1b       	sub	r28, r26
    2d7e:	db 0b       	sbc	r29, r27
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	09 94       	ijmp

00002d8c <__epilogue_restores__>:
    2d8c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d8e:	39 88       	ldd	r3, Y+17	; 0x11
    2d90:	48 88       	ldd	r4, Y+16	; 0x10
    2d92:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d94:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d96:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d98:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d9e:	b9 84       	ldd	r11, Y+9	; 0x09
    2da0:	c8 84       	ldd	r12, Y+8	; 0x08
    2da2:	df 80       	ldd	r13, Y+7	; 0x07
    2da4:	ee 80       	ldd	r14, Y+6	; 0x06
    2da6:	fd 80       	ldd	r15, Y+5	; 0x05
    2da8:	0c 81       	ldd	r16, Y+4	; 0x04
    2daa:	1b 81       	ldd	r17, Y+3	; 0x03
    2dac:	aa 81       	ldd	r26, Y+2	; 0x02
    2dae:	b9 81       	ldd	r27, Y+1	; 0x01
    2db0:	ce 0f       	add	r28, r30
    2db2:	d1 1d       	adc	r29, r1
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	ed 01       	movw	r28, r26
    2dc0:	08 95       	ret

00002dc2 <_exit>:
    2dc2:	f8 94       	cli

00002dc4 <__stop_program>:
    2dc4:	ff cf       	rjmp	.-2      	; 0x2dc4 <__stop_program>
